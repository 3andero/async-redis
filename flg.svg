<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (32 samples, 0.02%)</title><rect x="0.0104%" y="309" width="0.0208%" height="15" fill="rgb(227,0,7)"/><text x="0.2604%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (31 samples, 0.02%)</title><rect x="1.4334%" y="293" width="0.0202%" height="15" fill="rgb(217,0,24)"/><text x="1.6834%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (36 samples, 0.02%)</title><rect x="1.4659%" y="293" width="0.0234%" height="15" fill="rgb(221,193,54)"/><text x="1.7159%" y="303.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="1.4920%" y="293" width="0.0156%" height="15" fill="rgb(248,212,6)"/><text x="1.7420%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (34 samples, 0.02%)</title><rect x="1.5076%" y="293" width="0.0221%" height="15" fill="rgb(208,68,35)"/><text x="1.7576%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (982 samples, 0.64%)</title><rect x="1.5297%" y="293" width="0.6389%" height="15" fill="rgb(232,128,0)"/><text x="1.7797%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (27 samples, 0.02%)</title><rect x="5.7108%" y="277" width="0.0176%" height="15" fill="rgb(207,160,47)"/><text x="5.9608%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent (27 samples, 0.02%)</title><rect x="5.7108%" y="261" width="0.0176%" height="15" fill="rgb(228,23,34)"/><text x="5.9608%" y="271.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (30 samples, 0.02%)</title><rect x="6.7792%" y="261" width="0.0195%" height="15" fill="rgb(218,30,26)"/><text x="7.0292%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (37 samples, 0.02%)</title><rect x="7.2854%" y="245" width="0.0241%" height="15" fill="rgb(220,122,19)"/><text x="7.5354%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (62 samples, 0.04%)</title><rect x="7.3095%" y="245" width="0.0403%" height="15" fill="rgb(250,228,42)"/><text x="7.5595%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (8,785 samples, 5.72%)</title><rect x="7.3499%" y="245" width="5.7161%" height="15" fill="rgb(240,193,28)"/><text x="7.5999%" y="255.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (92 samples, 0.06%)</title><rect x="13.2767%" y="229" width="0.0599%" height="15" fill="rgb(216,20,37)"/><text x="13.5267%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (85 samples, 0.06%)</title><rect x="13.3379%" y="213" width="0.0553%" height="15" fill="rgb(206,188,39)"/><text x="13.5879%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (94 samples, 0.06%)</title><rect x="13.3366%" y="229" width="0.0612%" height="15" fill="rgb(217,207,13)"/><text x="13.5866%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (226 samples, 0.15%)</title><rect x="13.3991%" y="229" width="0.1470%" height="15" fill="rgb(231,73,38)"/><text x="13.6491%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (837 samples, 0.54%)</title><rect x="13.0672%" y="245" width="0.5446%" height="15" fill="rgb(225,20,46)"/><text x="13.3172%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (101 samples, 0.07%)</title><rect x="13.5461%" y="229" width="0.0657%" height="15" fill="rgb(210,31,41)"/><text x="13.7961%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (52 samples, 0.03%)</title><rect x="13.6209%" y="245" width="0.0338%" height="15" fill="rgb(221,200,47)"/><text x="13.8709%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (67 samples, 0.04%)</title><rect x="13.6548%" y="245" width="0.0436%" height="15" fill="rgb(226,26,5)"/><text x="13.9048%" y="255.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (10,672 samples, 6.94%)</title><rect x="6.7988%" y="261" width="6.9438%" height="15" fill="rgb(249,33,26)"/><text x="7.0488%" y="271.50">async-red..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (68 samples, 0.04%)</title><rect x="13.6984%" y="245" width="0.0442%" height="15" fill="rgb(235,183,28)"/><text x="13.9484%" y="255.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (18 samples, 0.01%)</title><rect x="13.7459%" y="261" width="0.0117%" height="15" fill="rgb(221,5,38)"/><text x="13.9959%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::now (26 samples, 0.02%)</title><rect x="13.7654%" y="261" width="0.0169%" height="15" fill="rgb(247,18,42)"/><text x="14.0154%" y="271.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="14.0113%" y="229" width="0.0104%" height="15" fill="rgb(241,131,45)"/><text x="14.2613%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (36 samples, 0.02%)</title><rect x="14.0217%" y="229" width="0.0234%" height="15" fill="rgb(249,31,29)"/><text x="14.2717%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_read_closed (34 samples, 0.02%)</title><rect x="14.0452%" y="229" width="0.0221%" height="15" fill="rgb(225,111,53)"/><text x="14.2952%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (26 samples, 0.02%)</title><rect x="14.0673%" y="229" width="0.0169%" height="15" fill="rgb(238,160,17)"/><text x="14.3173%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_writable (20 samples, 0.01%)</title><rect x="14.0842%" y="229" width="0.0130%" height="15" fill="rgb(214,148,48)"/><text x="14.3342%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (88 samples, 0.06%)</title><rect x="14.1070%" y="229" width="0.0573%" height="15" fill="rgb(232,36,49)"/><text x="14.3570%" y="239.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (59 samples, 0.04%)</title><rect x="14.1642%" y="229" width="0.0384%" height="15" fill="rgb(209,103,24)"/><text x="14.4142%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (40 samples, 0.03%)</title><rect x="14.2026%" y="229" width="0.0260%" height="15" fill="rgb(229,88,8)"/><text x="14.4526%" y="239.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.04%)</title><rect x="14.9437%" y="213" width="0.0442%" height="15" fill="rgb(213,181,19)"/><text x="15.1937%" y="223.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (31 samples, 0.02%)</title><rect x="15.0107%" y="213" width="0.0202%" height="15" fill="rgb(254,191,54)"/><text x="15.2607%" y="223.50"></text></g><g><title>async-redis`mio::event::event::Event::token (26 samples, 0.02%)</title><rect x="15.0335%" y="213" width="0.0169%" height="15" fill="rgb(241,83,37)"/><text x="15.2835%" y="223.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (276 samples, 0.18%)</title><rect x="15.0511%" y="213" width="0.1796%" height="15" fill="rgb(233,36,39)"/><text x="15.3011%" y="223.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (48 samples, 0.03%)</title><rect x="15.4955%" y="197" width="0.0312%" height="15" fill="rgb(226,3,54)"/><text x="15.7455%" y="207.50"></text></g><g><title> 32]&gt;::default (48 samples, 0.03%)</title><rect x="15.4955%" y="181" width="0.0312%" height="15" fill="rgb(245,192,40)"/><text x="15.7455%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (214 samples, 0.14%)</title><rect x="15.5267%" y="197" width="0.1392%" height="15" fill="rgb(238,167,29)"/><text x="15.7767%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (27 samples, 0.02%)</title><rect x="15.6764%" y="197" width="0.0176%" height="15" fill="rgb(232,182,51)"/><text x="15.9264%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (71 samples, 0.05%)</title><rect x="15.7134%" y="181" width="0.0462%" height="15" fill="rgb(231,60,39)"/><text x="15.9634%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (205 samples, 0.13%)</title><rect x="15.7596%" y="181" width="0.1334%" height="15" fill="rgb(208,69,12)"/><text x="16.0096%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (58 samples, 0.04%)</title><rect x="15.9614%" y="149" width="0.0377%" height="15" fill="rgb(235,93,37)"/><text x="16.2114%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (29 samples, 0.02%)</title><rect x="15.9991%" y="149" width="0.0189%" height="15" fill="rgb(213,116,39)"/><text x="16.2491%" y="159.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (231 samples, 0.15%)</title><rect x="15.9223%" y="165" width="0.1503%" height="15" fill="rgb(222,207,29)"/><text x="16.1723%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (84 samples, 0.05%)</title><rect x="16.0180%" y="149" width="0.0547%" height="15" fill="rgb(206,96,30)"/><text x="16.2680%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (597 samples, 0.39%)</title><rect x="15.6939%" y="197" width="0.3884%" height="15" fill="rgb(218,138,4)"/><text x="15.9439%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (291 samples, 0.19%)</title><rect x="15.8930%" y="181" width="0.1893%" height="15" fill="rgb(250,191,14)"/><text x="16.1430%" y="191.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (1,315 samples, 0.86%)</title><rect x="15.2307%" y="213" width="0.8556%" height="15" fill="rgb(239,60,40)"/><text x="15.4807%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (32 samples, 0.02%)</title><rect x="16.0863%" y="213" width="0.0208%" height="15" fill="rgb(206,27,48)"/><text x="16.3363%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (12,251 samples, 7.97%)</title><rect x="14.2286%" y="229" width="7.9712%" height="15" fill="rgb(225,35,8)"/><text x="14.4786%" y="239.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`kevent (9,364 samples, 6.09%)</title><rect x="16.1071%" y="213" width="6.0928%" height="15" fill="rgb(250,213,24)"/><text x="16.3571%" y="223.50">libsyste..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (19 samples, 0.01%)</title><rect x="22.1999%" y="229" width="0.0124%" height="15" fill="rgb(247,123,22)"/><text x="22.4499%" y="239.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (23 samples, 0.01%)</title><rect x="22.2396%" y="213" width="0.0150%" height="15" fill="rgb(231,138,38)"/><text x="22.4896%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (60 samples, 0.04%)</title><rect x="22.2838%" y="197" width="0.0390%" height="15" fill="rgb(231,145,46)"/><text x="22.5338%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (252 samples, 0.16%)</title><rect x="22.3229%" y="197" width="0.1640%" height="15" fill="rgb(251,118,11)"/><text x="22.5729%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (422 samples, 0.27%)</title><rect x="22.2545%" y="213" width="0.2746%" height="15" fill="rgb(217,147,25)"/><text x="22.5045%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (65 samples, 0.04%)</title><rect x="22.4868%" y="197" width="0.0423%" height="15" fill="rgb(247,81,37)"/><text x="22.7368%" y="207.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (473 samples, 0.31%)</title><rect x="22.2220%" y="229" width="0.3078%" height="15" fill="rgb(209,12,38)"/><text x="22.4720%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (144 samples, 0.09%)</title><rect x="22.5298%" y="229" width="0.0937%" height="15" fill="rgb(227,1,9)"/><text x="22.7798%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (13,294 samples, 8.65%)</title><rect x="13.9749%" y="245" width="8.6499%" height="15" fill="rgb(248,47,43)"/><text x="14.2249%" y="255.50">async-redis`..</text></g><g><title>async-redis`std::time::Instant::checked_duration_since (336 samples, 0.22%)</title><rect x="22.6410%" y="245" width="0.2186%" height="15" fill="rgb(221,10,30)"/><text x="22.8910%" y="255.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (29 samples, 0.02%)</title><rect x="22.8597%" y="245" width="0.0189%" height="15" fill="rgb(210,229,1)"/><text x="23.1097%" y="255.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (109 samples, 0.07%)</title><rect x="22.8785%" y="245" width="0.0709%" height="15" fill="rgb(222,148,37)"/><text x="23.1285%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (46 samples, 0.03%)</title><rect x="22.9494%" y="245" width="0.0299%" height="15" fill="rgb(234,67,33)"/><text x="23.1994%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (262 samples, 0.17%)</title><rect x="23.1017%" y="229" width="0.1705%" height="15" fill="rgb(247,98,35)"/><text x="23.3517%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (17 samples, 0.01%)</title><rect x="23.2722%" y="229" width="0.0111%" height="15" fill="rgb(247,138,52)"/><text x="23.5222%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (160 samples, 0.10%)</title><rect x="23.2845%" y="229" width="0.1041%" height="15" fill="rgb(213,79,30)"/><text x="23.5345%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (142 samples, 0.09%)</title><rect x="23.2962%" y="213" width="0.0924%" height="15" fill="rgb(246,177,23)"/><text x="23.5462%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (216 samples, 0.14%)</title><rect x="23.3886%" y="229" width="0.1405%" height="15" fill="rgb(230,62,27)"/><text x="23.6386%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (166 samples, 0.11%)</title><rect x="23.4212%" y="213" width="0.1080%" height="15" fill="rgb(216,154,8)"/><text x="23.6712%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (869 samples, 0.57%)</title><rect x="22.9794%" y="245" width="0.5654%" height="15" fill="rgb(244,35,45)"/><text x="23.2294%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (24 samples, 0.02%)</title><rect x="23.5292%" y="229" width="0.0156%" height="15" fill="rgb(251,115,12)"/><text x="23.7792%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (203 samples, 0.13%)</title><rect x="23.5448%" y="245" width="0.1321%" height="15" fill="rgb(240,54,50)"/><text x="23.7948%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (187 samples, 0.12%)</title><rect x="23.5552%" y="229" width="0.1217%" height="15" fill="rgb(233,84,52)"/><text x="23.8052%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (15,479 samples, 10.07%)</title><rect x="13.7823%" y="261" width="10.0716%" height="15" fill="rgb(207,117,47)"/><text x="14.0323%" y="271.50">async-redis`tok..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (261 samples, 0.17%)</title><rect x="23.6840%" y="245" width="0.1698%" height="15" fill="rgb(249,43,39)"/><text x="23.9340%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (70 samples, 0.05%)</title><rect x="23.8597%" y="261" width="0.0455%" height="15" fill="rgb(209,38,44)"/><text x="24.1097%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (10,964 samples, 7.13%)</title><rect x="23.9053%" y="261" width="7.1338%" height="15" fill="rgb(236,212,23)"/><text x="24.1553%" y="271.50">libsystem_..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (28 samples, 0.02%)</title><rect x="31.0391%" y="261" width="0.0182%" height="15" fill="rgb(242,79,21)"/><text x="31.2891%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (19 samples, 0.01%)</title><rect x="31.0573%" y="261" width="0.0124%" height="15" fill="rgb(211,96,35)"/><text x="31.3073%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (324 samples, 0.21%)</title><rect x="31.0697%" y="261" width="0.2108%" height="15" fill="rgb(253,215,40)"/><text x="31.3197%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (39,396 samples, 25.63%)</title><rect x="5.7284%" y="277" width="25.6334%" height="15" fill="rgb(211,81,21)"/><text x="5.9784%" y="287.50">async-redis`&lt;tokio::runtime::park::Parker..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (108 samples, 0.07%)</title><rect x="31.2916%" y="261" width="0.0703%" height="15" fill="rgb(208,190,38)"/><text x="31.5416%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (26 samples, 0.02%)</title><rect x="31.4243%" y="213" width="0.0169%" height="15" fill="rgb(235,213,38)"/><text x="31.6743%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (421 samples, 0.27%)</title><rect x="31.3879%" y="229" width="0.2739%" height="15" fill="rgb(237,122,38)"/><text x="31.6379%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`kevent (339 samples, 0.22%)</title><rect x="31.4412%" y="213" width="0.2206%" height="15" fill="rgb(244,218,35)"/><text x="31.6912%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (458 samples, 0.30%)</title><rect x="31.3781%" y="245" width="0.2980%" height="15" fill="rgb(240,68,47)"/><text x="31.6281%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (27 samples, 0.02%)</title><rect x="31.6826%" y="245" width="0.0176%" height="15" fill="rgb(210,16,53)"/><text x="31.9326%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (521 samples, 0.34%)</title><rect x="31.3690%" y="261" width="0.3390%" height="15" fill="rgb(235,124,12)"/><text x="31.6190%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (535 samples, 0.35%)</title><rect x="31.3618%" y="277" width="0.3481%" height="15" fill="rgb(224,169,11)"/><text x="31.6118%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (27 samples, 0.02%)</title><rect x="31.7099%" y="277" width="0.0176%" height="15" fill="rgb(250,166,2)"/><text x="31.9599%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (348 samples, 0.23%)</title><rect x="31.7496%" y="261" width="0.2264%" height="15" fill="rgb(242,216,29)"/><text x="31.9996%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (419 samples, 0.27%)</title><rect x="31.7314%" y="277" width="0.2726%" height="15" fill="rgb(230,116,27)"/><text x="31.9814%" y="287.50"></text></g><g><title>async-redis`std::thread::yield_now (27 samples, 0.02%)</title><rect x="32.0125%" y="277" width="0.0176%" height="15" fill="rgb(228,99,48)"/><text x="32.2625%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (125 samples, 0.08%)</title><rect x="32.0353%" y="277" width="0.0813%" height="15" fill="rgb(253,11,6)"/><text x="32.2853%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (46,038 samples, 29.96%)</title><rect x="2.1687%" y="293" width="29.9551%" height="15" fill="rgb(247,143,39)"/><text x="2.4187%" y="303.50">async-redis`tokio::runtime::thread_pool::worker:..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (219 samples, 0.14%)</title><rect x="32.3645%" y="277" width="0.1425%" height="15" fill="rgb(236,97,10)"/><text x="32.6145%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent (203 samples, 0.13%)</title><rect x="32.3749%" y="261" width="0.1321%" height="15" fill="rgb(233,208,19)"/><text x="32.6249%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (193 samples, 0.13%)</title><rect x="32.5083%" y="277" width="0.1256%" height="15" fill="rgb(216,164,2)"/><text x="32.7583%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (120 samples, 0.08%)</title><rect x="32.7250%" y="261" width="0.0781%" height="15" fill="rgb(220,129,5)"/><text x="32.9750%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4,465 samples, 2.91%)</title><rect x="32.8030%" y="261" width="2.9052%" height="15" fill="rgb(242,17,10)"/><text x="33.0530%" y="271.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (44 samples, 0.03%)</title><rect x="35.7082%" y="261" width="0.0286%" height="15" fill="rgb(242,107,0)"/><text x="35.9582%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (18 samples, 0.01%)</title><rect x="35.7421%" y="261" width="0.0117%" height="15" fill="rgb(251,28,31)"/><text x="35.9921%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (58 samples, 0.04%)</title><rect x="35.7557%" y="245" width="0.0377%" height="15" fill="rgb(233,223,10)"/><text x="36.0057%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (59 samples, 0.04%)</title><rect x="35.7557%" y="261" width="0.0384%" height="15" fill="rgb(215,21,27)"/><text x="36.0057%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (148 samples, 0.10%)</title><rect x="35.7941%" y="261" width="0.0963%" height="15" fill="rgb(232,23,21)"/><text x="36.0441%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (58 samples, 0.04%)</title><rect x="35.8527%" y="245" width="0.0377%" height="15" fill="rgb(244,5,23)"/><text x="36.1027%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (161 samples, 0.10%)</title><rect x="35.8904%" y="261" width="0.1048%" height="15" fill="rgb(226,81,46)"/><text x="36.1404%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (5,190 samples, 3.38%)</title><rect x="32.6371%" y="277" width="3.3769%" height="15" fill="rgb(247,70,30)"/><text x="32.8871%" y="287.50">asy..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (29 samples, 0.02%)</title><rect x="35.9952%" y="261" width="0.0189%" height="15" fill="rgb(212,68,19)"/><text x="36.2452%" y="271.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (80 samples, 0.05%)</title><rect x="36.2548%" y="261" width="0.0521%" height="15" fill="rgb(240,187,13)"/><text x="36.5048%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="36.4422%" y="245" width="0.0195%" height="15" fill="rgb(223,113,26)"/><text x="36.6922%" y="255.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (37 samples, 0.02%)</title><rect x="37.0896%" y="213" width="0.0241%" height="15" fill="rgb(206,192,2)"/><text x="37.3396%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (31 samples, 0.02%)</title><rect x="37.1254%" y="197" width="0.0202%" height="15" fill="rgb(241,108,4)"/><text x="37.3754%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (116 samples, 0.08%)</title><rect x="37.2217%" y="165" width="0.0755%" height="15" fill="rgb(247,173,49)"/><text x="37.4717%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (136 samples, 0.09%)</title><rect x="37.2152%" y="181" width="0.0885%" height="15" fill="rgb(224,114,35)"/><text x="37.4652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (30 samples, 0.02%)</title><rect x="37.3616%" y="165" width="0.0195%" height="15" fill="rgb(245,159,27)"/><text x="37.6116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (137 samples, 0.09%)</title><rect x="37.3037%" y="181" width="0.0891%" height="15" fill="rgb(245,172,44)"/><text x="37.5537%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (18 samples, 0.01%)</title><rect x="37.3811%" y="165" width="0.0117%" height="15" fill="rgb(236,23,11)"/><text x="37.6311%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (385 samples, 0.25%)</title><rect x="37.1456%" y="197" width="0.2505%" height="15" fill="rgb(205,117,38)"/><text x="37.3956%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (348 samples, 0.23%)</title><rect x="37.4624%" y="181" width="0.2264%" height="15" fill="rgb(237,72,25)"/><text x="37.7124%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (182 samples, 0.12%)</title><rect x="37.5704%" y="165" width="0.1184%" height="15" fill="rgb(244,70,9)"/><text x="37.8204%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.02%)</title><rect x="37.6889%" y="181" width="0.0156%" height="15" fill="rgb(217,125,39)"/><text x="37.9389%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (28 samples, 0.02%)</title><rect x="37.7045%" y="181" width="0.0182%" height="15" fill="rgb(235,36,10)"/><text x="37.9545%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (509 samples, 0.33%)</title><rect x="37.3961%" y="197" width="0.3312%" height="15" fill="rgb(251,123,47)"/><text x="37.6461%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (55 samples, 0.04%)</title><rect x="37.7272%" y="197" width="0.0358%" height="15" fill="rgb(221,13,13)"/><text x="37.9772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (70 samples, 0.05%)</title><rect x="37.7689%" y="181" width="0.0455%" height="15" fill="rgb(238,131,9)"/><text x="38.0189%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (69 samples, 0.04%)</title><rect x="37.7695%" y="165" width="0.0449%" height="15" fill="rgb(211,50,8)"/><text x="38.0195%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (81 samples, 0.05%)</title><rect x="37.7630%" y="197" width="0.0527%" height="15" fill="rgb(245,182,24)"/><text x="38.0130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (79 samples, 0.05%)</title><rect x="37.9094%" y="165" width="0.0514%" height="15" fill="rgb(242,14,37)"/><text x="38.1594%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (238 samples, 0.15%)</title><rect x="37.8157%" y="197" width="0.1549%" height="15" fill="rgb(246,228,12)"/><text x="38.0657%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (152 samples, 0.10%)</title><rect x="37.8717%" y="181" width="0.0989%" height="15" fill="rgb(213,55,15)"/><text x="38.1217%" y="191.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (1,318 samples, 0.86%)</title><rect x="37.1150%" y="213" width="0.8576%" height="15" fill="rgb(209,9,3)"/><text x="37.3650%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (166 samples, 0.11%)</title><rect x="38.6980%" y="197" width="0.1080%" height="15" fill="rgb(230,59,30)"/><text x="38.9480%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (124 samples, 0.08%)</title><rect x="38.7254%" y="181" width="0.0807%" height="15" fill="rgb(209,121,21)"/><text x="38.9754%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.03%)</title><rect x="38.9043%" y="149" width="0.0332%" height="15" fill="rgb(220,109,13)"/><text x="39.1543%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (51 samples, 0.03%)</title><rect x="38.9043%" y="133" width="0.0332%" height="15" fill="rgb(232,18,1)"/><text x="39.1543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.04%)</title><rect x="38.8997%" y="165" width="0.0384%" height="15" fill="rgb(215,41,42)"/><text x="39.1497%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.03%)</title><rect x="39.0077%" y="133" width="0.0254%" height="15" fill="rgb(224,123,36)"/><text x="39.2577%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (297 samples, 0.19%)</title><rect x="38.8451%" y="181" width="0.1932%" height="15" fill="rgb(240,125,3)"/><text x="39.0951%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (154 samples, 0.10%)</title><rect x="38.9381%" y="165" width="0.1002%" height="15" fill="rgb(205,98,50)"/><text x="39.1881%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (88 samples, 0.06%)</title><rect x="38.9811%" y="149" width="0.0573%" height="15" fill="rgb(205,185,37)"/><text x="39.2311%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.01%)</title><rect x="39.0494%" y="165" width="0.0124%" height="15" fill="rgb(238,207,15)"/><text x="39.2994%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.01%)</title><rect x="39.0500%" y="149" width="0.0117%" height="15" fill="rgb(213,199,42)"/><text x="39.3000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.02%)</title><rect x="39.0403%" y="181" width="0.0241%" height="15" fill="rgb(235,201,11)"/><text x="39.2903%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (35 samples, 0.02%)</title><rect x="39.1236%" y="149" width="0.0228%" height="15" fill="rgb(207,46,11)"/><text x="39.3736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (129 samples, 0.08%)</title><rect x="39.0644%" y="181" width="0.0839%" height="15" fill="rgb(241,35,35)"/><text x="39.3144%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (82 samples, 0.05%)</title><rect x="39.0949%" y="165" width="0.0534%" height="15" fill="rgb(243,32,47)"/><text x="39.3449%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (532 samples, 0.35%)</title><rect x="38.8060%" y="197" width="0.3462%" height="15" fill="rgb(247,202,23)"/><text x="39.0560%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.04%)</title><rect x="39.1580%" y="197" width="0.0390%" height="15" fill="rgb(219,102,11)"/><text x="39.4080%" y="207.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (32 samples, 0.02%)</title><rect x="39.2569%" y="181" width="0.0208%" height="15" fill="rgb(243,110,44)"/><text x="39.5069%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (89 samples, 0.06%)</title><rect x="39.3825%" y="165" width="0.0579%" height="15" fill="rgb(222,74,54)"/><text x="39.6325%" y="175.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (35 samples, 0.02%)</title><rect x="39.4404%" y="165" width="0.0228%" height="15" fill="rgb(216,99,12)"/><text x="39.6904%" y="175.50"></text></g><g><title>async-redis`flume::async::AsyncSignal::new (87 samples, 0.06%)</title><rect x="39.4632%" y="165" width="0.0566%" height="15" fill="rgb(226,22,26)"/><text x="39.7132%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (31 samples, 0.02%)</title><rect x="39.4996%" y="149" width="0.0202%" height="15" fill="rgb(217,163,10)"/><text x="39.7496%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (30 samples, 0.02%)</title><rect x="39.5003%" y="133" width="0.0195%" height="15" fill="rgb(213,25,53)"/><text x="39.7503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (20 samples, 0.01%)</title><rect x="39.6369%" y="117" width="0.0130%" height="15" fill="rgb(252,105,26)"/><text x="39.8869%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (270 samples, 0.18%)</title><rect x="39.5387%" y="133" width="0.1757%" height="15" fill="rgb(220,39,43)"/><text x="39.7887%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (98 samples, 0.06%)</title><rect x="39.6506%" y="117" width="0.0638%" height="15" fill="rgb(229,68,48)"/><text x="39.9006%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.01%)</title><rect x="39.7007%" y="101" width="0.0137%" height="15" fill="rgb(252,8,32)"/><text x="39.9507%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (279 samples, 0.18%)</title><rect x="39.5348%" y="149" width="0.1815%" height="15" fill="rgb(223,20,43)"/><text x="39.7848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (300 samples, 0.20%)</title><rect x="39.5224%" y="165" width="0.1952%" height="15" fill="rgb(229,81,49)"/><text x="39.7724%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (679 samples, 0.44%)</title><rect x="39.2778%" y="181" width="0.4418%" height="15" fill="rgb(236,28,36)"/><text x="39.5278%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (30 samples, 0.02%)</title><rect x="39.7957%" y="165" width="0.0195%" height="15" fill="rgb(249,185,26)"/><text x="40.0457%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (165 samples, 0.11%)</title><rect x="39.7196%" y="181" width="0.1074%" height="15" fill="rgb(249,174,33)"/><text x="39.9696%" y="191.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (17 samples, 0.01%)</title><rect x="39.8159%" y="165" width="0.0111%" height="15" fill="rgb(233,201,37)"/><text x="40.0659%" y="175.50"></text></g><g><title>async-redis`flume::async::AsyncSignal::new (35 samples, 0.02%)</title><rect x="39.8269%" y="181" width="0.0228%" height="15" fill="rgb(221,78,26)"/><text x="40.0769%" y="191.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (1,006 samples, 0.65%)</title><rect x="39.1971%" y="197" width="0.6546%" height="15" fill="rgb(250,127,30)"/><text x="39.4471%" y="207.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.03%)</title><rect x="39.8516%" y="197" width="0.0312%" height="15" fill="rgb(230,49,44)"/><text x="40.1016%" y="207.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (32 samples, 0.02%)</title><rect x="40.0449%" y="181" width="0.0208%" height="15" fill="rgb(229,67,23)"/><text x="40.2949%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::lock (35 samples, 0.02%)</title><rect x="40.3819%" y="149" width="0.0228%" height="15" fill="rgb(249,83,47)"/><text x="40.6319%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (133 samples, 0.09%)</title><rect x="40.4359%" y="133" width="0.0865%" height="15" fill="rgb(215,43,3)"/><text x="40.6859%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (17 samples, 0.01%)</title><rect x="40.5836%" y="101" width="0.0111%" height="15" fill="rgb(238,154,13)"/><text x="40.8336%" y="111.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (77 samples, 0.05%)</title><rect x="40.5498%" y="117" width="0.0501%" height="15" fill="rgb(219,56,2)"/><text x="40.7998%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (294 samples, 0.19%)</title><rect x="40.4145%" y="149" width="0.1913%" height="15" fill="rgb(233,0,4)"/><text x="40.6645%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (128 samples, 0.08%)</title><rect x="40.5225%" y="133" width="0.0833%" height="15" fill="rgb(235,30,7)"/><text x="40.7725%" y="143.50"></text></g><g><title>async-redis`&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (411 samples, 0.27%)</title><rect x="40.3390%" y="165" width="0.2674%" height="15" fill="rgb(250,79,13)"/><text x="40.5890%" y="175.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (101 samples, 0.07%)</title><rect x="40.6071%" y="165" width="0.0657%" height="15" fill="rgb(211,146,34)"/><text x="40.8571%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (25 samples, 0.02%)</title><rect x="40.6793%" y="165" width="0.0163%" height="15" fill="rgb(228,22,38)"/><text x="40.9293%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (113 samples, 0.07%)</title><rect x="40.7053%" y="165" width="0.0735%" height="15" fill="rgb(235,168,5)"/><text x="40.9553%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::send (1,095 samples, 0.71%)</title><rect x="40.0670%" y="181" width="0.7125%" height="15" fill="rgb(221,155,16)"/><text x="40.3170%" y="191.50"></text></g><g><title>async-redis`&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (1,387 samples, 0.90%)</title><rect x="39.8829%" y="197" width="0.9025%" height="15" fill="rgb(215,215,53)"/><text x="40.1329%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.01%)</title><rect x="40.7853%" y="197" width="0.0150%" height="15" fill="rgb(223,4,10)"/><text x="41.0353%" y="207.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="41.5733%" y="149" width="0.0182%" height="15" fill="rgb(234,103,6)"/><text x="41.8233%" y="159.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (25 samples, 0.02%)</title><rect x="41.5915%" y="149" width="0.0163%" height="15" fill="rgb(227,97,0)"/><text x="41.8415%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (39 samples, 0.03%)</title><rect x="41.8466%" y="117" width="0.0254%" height="15" fill="rgb(234,150,53)"/><text x="42.0966%" y="127.50"></text></g><g><title>async-redis`std::io::error::Error::kind (25 samples, 0.02%)</title><rect x="41.8720%" y="117" width="0.0163%" height="15" fill="rgb(228,201,54)"/><text x="42.1220%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (45 samples, 0.03%)</title><rect x="41.8882%" y="117" width="0.0293%" height="15" fill="rgb(222,22,37)"/><text x="42.1382%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (71 samples, 0.05%)</title><rect x="42.3489%" y="69" width="0.0462%" height="15" fill="rgb(237,53,32)"/><text x="42.5989%" y="79.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (415 samples, 0.27%)</title><rect x="42.1778%" y="85" width="0.2700%" height="15" fill="rgb(233,25,53)"/><text x="42.4278%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (81 samples, 0.05%)</title><rect x="42.3951%" y="69" width="0.0527%" height="15" fill="rgb(210,40,34)"/><text x="42.6451%" y="79.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (44 samples, 0.03%)</title><rect x="42.4478%" y="85" width="0.0286%" height="15" fill="rgb(241,220,44)"/><text x="42.6978%" y="95.50"></text></g><g><title>libsystem_c.dylib`recv (28 samples, 0.02%)</title><rect x="42.4842%" y="85" width="0.0182%" height="15" fill="rgb(235,28,35)"/><text x="42.7342%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__error (71 samples, 0.05%)</title><rect x="42.5024%" y="85" width="0.0462%" height="15" fill="rgb(210,56,17)"/><text x="42.7524%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (26,865 samples, 17.48%)</title><rect x="42.5486%" y="85" width="17.4800%" height="15" fill="rgb(224,130,29)"/><text x="42.7986%" y="95.50">libsystem_kernel.dylib`__re..</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (27,605 samples, 17.96%)</title><rect x="42.1192%" y="101" width="17.9615%" height="15" fill="rgb(235,212,8)"/><text x="42.3692%" y="111.50">async-redis`&lt;&amp;mio::net::tcp:..</text></g><g><title>libsystem_kernel.dylib`cerror (80 samples, 0.05%)</title><rect x="60.0286%" y="85" width="0.0521%" height="15" fill="rgb(223,33,50)"/><text x="60.2786%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (24 samples, 0.02%)</title><rect x="60.0807%" y="101" width="0.0156%" height="15" fill="rgb(219,149,13)"/><text x="60.3307%" y="111.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (44 samples, 0.03%)</title><rect x="60.1015%" y="101" width="0.0286%" height="15" fill="rgb(250,156,29)"/><text x="60.3515%" y="111.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="60.6194%" y="85" width="0.0111%" height="15" fill="rgb(216,193,19)"/><text x="60.8694%" y="95.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (43 samples, 0.03%)</title><rect x="60.6305%" y="85" width="0.0280%" height="15" fill="rgb(216,135,14)"/><text x="60.8805%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (243 samples, 0.16%)</title><rect x="60.6585%" y="85" width="0.1581%" height="15" fill="rgb(241,47,5)"/><text x="60.9085%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (38 samples, 0.02%)</title><rect x="60.7919%" y="69" width="0.0247%" height="15" fill="rgb(233,42,35)"/><text x="61.0419%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (32 samples, 0.02%)</title><rect x="60.7958%" y="53" width="0.0208%" height="15" fill="rgb(231,13,6)"/><text x="61.0458%" y="63.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (27 samples, 0.02%)</title><rect x="60.8166%" y="85" width="0.0176%" height="15" fill="rgb(207,181,40)"/><text x="61.0666%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (1,134 samples, 0.74%)</title><rect x="60.1392%" y="101" width="0.7378%" height="15" fill="rgb(254,173,49)"/><text x="60.3892%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (66 samples, 0.04%)</title><rect x="60.8341%" y="85" width="0.0429%" height="15" fill="rgb(221,1,38)"/><text x="61.0841%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (29,161 samples, 18.97%)</title><rect x="41.9175%" y="117" width="18.9739%" height="15" fill="rgb(206,124,46)"/><text x="42.1675%" y="127.50">async-redis`tokio::io::driver:..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (22 samples, 0.01%)</title><rect x="60.8771%" y="101" width="0.0143%" height="15" fill="rgb(249,21,11)"/><text x="61.1271%" y="111.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (29,472 samples, 19.18%)</title><rect x="41.7373%" y="133" width="19.1763%" height="15" fill="rgb(222,201,40)"/><text x="41.9873%" y="143.50">async-redis`&lt;tokio::net::tcp::..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (34 samples, 0.02%)</title><rect x="60.8914%" y="117" width="0.0221%" height="15" fill="rgb(235,61,29)"/><text x="61.1414%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (150 samples, 0.10%)</title><rect x="60.9161%" y="133" width="0.0976%" height="15" fill="rgb(219,207,3)"/><text x="61.1661%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (130 samples, 0.08%)</title><rect x="60.9291%" y="117" width="0.0846%" height="15" fill="rgb(222,56,46)"/><text x="61.1791%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (27 samples, 0.02%)</title><rect x="61.0137%" y="133" width="0.0176%" height="15" fill="rgb(239,76,54)"/><text x="61.2637%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (29,862 samples, 19.43%)</title><rect x="41.6078%" y="149" width="19.4300%" height="15" fill="rgb(231,124,27)"/><text x="41.8578%" y="159.50">async-redis`&lt;tokio::io::util::..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (20 samples, 0.01%)</title><rect x="61.0378%" y="149" width="0.0130%" height="15" fill="rgb(249,195,6)"/><text x="61.2878%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (28 samples, 0.02%)</title><rect x="61.6071%" y="117" width="0.0182%" height="15" fill="rgb(237,174,47)"/><text x="61.8571%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (41 samples, 0.03%)</title><rect x="61.6371%" y="117" width="0.0267%" height="15" fill="rgb(206,201,31)"/><text x="61.8871%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (39 samples, 0.03%)</title><rect x="61.6384%" y="101" width="0.0254%" height="15" fill="rgb(231,57,52)"/><text x="61.8884%" y="111.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (934 samples, 0.61%)</title><rect x="61.0677%" y="133" width="0.6077%" height="15" fill="rgb(248,177,22)"/><text x="61.3177%" y="143.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (18 samples, 0.01%)</title><rect x="61.6637%" y="117" width="0.0117%" height="15" fill="rgb(215,211,37)"/><text x="61.9137%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (961 samples, 0.63%)</title><rect x="61.0508%" y="149" width="0.6253%" height="15" fill="rgb(241,128,51)"/><text x="61.3008%" y="159.50"></text></g><g><title>async-redis`__rdl_dealloc (32 samples, 0.02%)</title><rect x="61.6787%" y="149" width="0.0208%" height="15" fill="rgb(227,165,31)"/><text x="61.9287%" y="159.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (39 samples, 0.03%)</title><rect x="61.7008%" y="149" width="0.0254%" height="15" fill="rgb(228,167,24)"/><text x="61.9508%" y="159.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.05%)</title><rect x="62.0040%" y="133" width="0.0481%" height="15" fill="rgb(228,143,12)"/><text x="62.2540%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (33 samples, 0.02%)</title><rect x="62.0307%" y="117" width="0.0215%" height="15" fill="rgb(249,149,8)"/><text x="62.2807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.02%)</title><rect x="62.3346%" y="69" width="0.0176%" height="15" fill="rgb(243,35,44)"/><text x="62.5846%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (457 samples, 0.30%)</title><rect x="62.1400%" y="85" width="0.2974%" height="15" fill="rgb(246,89,9)"/><text x="62.3900%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (130 samples, 0.08%)</title><rect x="62.3528%" y="69" width="0.0846%" height="15" fill="rgb(233,213,13)"/><text x="62.6028%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (531 samples, 0.35%)</title><rect x="62.0925%" y="117" width="0.3455%" height="15" fill="rgb(233,141,41)"/><text x="62.3425%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (472 samples, 0.31%)</title><rect x="62.1309%" y="101" width="0.3071%" height="15" fill="rgb(239,167,4)"/><text x="62.3809%" y="111.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (576 samples, 0.37%)</title><rect x="62.0652%" y="133" width="0.3748%" height="15" fill="rgb(209,217,16)"/><text x="62.3152%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::get_integer (79 samples, 0.05%)</title><rect x="62.6215%" y="117" width="0.0514%" height="15" fill="rgb(219,88,35)"/><text x="62.8715%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (3,725 samples, 2.42%)</title><rect x="62.6729%" y="117" width="2.4237%" height="15" fill="rgb(220,193,23)"/><text x="62.9229%" y="127.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (217 samples, 0.14%)</title><rect x="64.9554%" y="101" width="0.1412%" height="15" fill="rgb(230,90,52)"/><text x="65.2054%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (236 samples, 0.15%)</title><rect x="65.0966%" y="117" width="0.1536%" height="15" fill="rgb(252,106,19)"/><text x="65.3466%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (179 samples, 0.12%)</title><rect x="65.1337%" y="101" width="0.1165%" height="15" fill="rgb(206,74,20)"/><text x="65.3837%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (51 samples, 0.03%)</title><rect x="65.2502%" y="117" width="0.0332%" height="15" fill="rgb(230,138,44)"/><text x="65.5002%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (4,674 samples, 3.04%)</title><rect x="62.4400%" y="133" width="3.0412%" height="15" fill="rgb(235,182,43)"/><text x="62.6900%" y="143.50">asy..</text></g><g><title>async-redis`bytes::bytes::shared_drop (304 samples, 0.20%)</title><rect x="65.2834%" y="117" width="0.1978%" height="15" fill="rgb(242,16,51)"/><text x="65.5334%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_integer (34 samples, 0.02%)</title><rect x="65.4812%" y="133" width="0.0221%" height="15" fill="rgb(248,9,4)"/><text x="65.7312%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (157 samples, 0.10%)</title><rect x="65.5033%" y="133" width="0.1022%" height="15" fill="rgb(210,31,22)"/><text x="65.7533%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (59 samples, 0.04%)</title><rect x="65.5671%" y="117" width="0.0384%" height="15" fill="rgb(239,54,39)"/><text x="65.8171%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.02%)</title><rect x="65.9952%" y="37" width="0.0182%" height="15" fill="rgb(230,99,41)"/><text x="66.2452%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (456 samples, 0.30%)</title><rect x="65.7792%" y="53" width="0.2967%" height="15" fill="rgb(253,106,12)"/><text x="66.0292%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (96 samples, 0.06%)</title><rect x="66.0134%" y="37" width="0.0625%" height="15" fill="rgb(213,46,41)"/><text x="66.2634%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (494 samples, 0.32%)</title><rect x="65.7551%" y="69" width="0.3214%" height="15" fill="rgb(215,133,35)"/><text x="66.0051%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (543 samples, 0.35%)</title><rect x="65.7252%" y="85" width="0.3533%" height="15" fill="rgb(213,28,5)"/><text x="65.9752%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.01%)</title><rect x="66.0785%" y="85" width="0.0117%" height="15" fill="rgb(215,77,49)"/><text x="66.3285%" y="95.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (690 samples, 0.45%)</title><rect x="65.6432%" y="101" width="0.4490%" height="15" fill="rgb(248,100,22)"/><text x="65.8932%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (734 samples, 0.48%)</title><rect x="65.6295%" y="117" width="0.4776%" height="15" fill="rgb(208,67,9)"/><text x="65.8795%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (812 samples, 0.53%)</title><rect x="65.6054%" y="133" width="0.5283%" height="15" fill="rgb(219,133,21)"/><text x="65.8554%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (41 samples, 0.03%)</title><rect x="66.1071%" y="117" width="0.0267%" height="15" fill="rgb(246,46,29)"/><text x="66.3571%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (48 samples, 0.03%)</title><rect x="66.1338%" y="133" width="0.0312%" height="15" fill="rgb(246,185,52)"/><text x="66.3838%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (149 samples, 0.10%)</title><rect x="66.1650%" y="133" width="0.0969%" height="15" fill="rgb(252,136,11)"/><text x="66.4150%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.05%)</title><rect x="66.2880%" y="117" width="0.0521%" height="15" fill="rgb(219,138,53)"/><text x="66.5380%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (73 samples, 0.05%)</title><rect x="66.2925%" y="101" width="0.0475%" height="15" fill="rgb(211,51,23)"/><text x="66.5425%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (114 samples, 0.07%)</title><rect x="66.2665%" y="133" width="0.0742%" height="15" fill="rgb(247,221,28)"/><text x="66.5165%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.01%)</title><rect x="66.4175%" y="101" width="0.0104%" height="15" fill="rgb(251,222,45)"/><text x="66.6675%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (143 samples, 0.09%)</title><rect x="66.3407%" y="133" width="0.0930%" height="15" fill="rgb(217,162,53)"/><text x="66.5907%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (71 samples, 0.05%)</title><rect x="66.3875%" y="117" width="0.0462%" height="15" fill="rgb(229,93,14)"/><text x="66.6375%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (7,247 samples, 4.72%)</title><rect x="61.7262%" y="149" width="4.7153%" height="15" fill="rgb(209,67,49)"/><text x="61.9762%" y="159.50">async..</text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (22 samples, 0.01%)</title><rect x="66.4526%" y="149" width="0.0143%" height="15" fill="rgb(213,87,29)"/><text x="66.7026%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (22 samples, 0.01%)</title><rect x="66.4669%" y="149" width="0.0143%" height="15" fill="rgb(205,151,52)"/><text x="66.7169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (64 samples, 0.04%)</title><rect x="66.5567%" y="117" width="0.0416%" height="15" fill="rgb(253,215,39)"/><text x="66.8067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (61 samples, 0.04%)</title><rect x="66.5587%" y="101" width="0.0397%" height="15" fill="rgb(221,220,41)"/><text x="66.8087%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (112 samples, 0.07%)</title><rect x="66.5274%" y="133" width="0.0729%" height="15" fill="rgb(218,133,21)"/><text x="66.7774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (53 samples, 0.03%)</title><rect x="66.7454%" y="101" width="0.0345%" height="15" fill="rgb(221,193,43)"/><text x="66.9954%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (290 samples, 0.19%)</title><rect x="66.6003%" y="133" width="0.1887%" height="15" fill="rgb(240,128,52)"/><text x="66.8503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (197 samples, 0.13%)</title><rect x="66.6608%" y="117" width="0.1282%" height="15" fill="rgb(253,114,12)"/><text x="66.9108%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.01%)</title><rect x="66.7890%" y="133" width="0.0117%" height="15" fill="rgb(215,223,47)"/><text x="67.0390%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (493 samples, 0.32%)</title><rect x="66.4812%" y="149" width="0.3208%" height="15" fill="rgb(248,225,23)"/><text x="66.7312%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (31 samples, 0.02%)</title><rect x="66.8020%" y="149" width="0.0202%" height="15" fill="rgb(250,108,0)"/><text x="67.0520%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (21 samples, 0.01%)</title><rect x="66.8248%" y="149" width="0.0137%" height="15" fill="rgb(228,208,7)"/><text x="67.0748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (38 samples, 0.02%)</title><rect x="67.1456%" y="85" width="0.0247%" height="15" fill="rgb(244,45,10)"/><text x="67.3956%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (299 samples, 0.19%)</title><rect x="67.0239%" y="117" width="0.1945%" height="15" fill="rgb(207,125,25)"/><text x="67.2739%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (144 samples, 0.09%)</title><rect x="67.1247%" y="101" width="0.0937%" height="15" fill="rgb(210,195,18)"/><text x="67.3747%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (74 samples, 0.05%)</title><rect x="67.1703%" y="85" width="0.0481%" height="15" fill="rgb(249,80,12)"/><text x="67.4203%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (35 samples, 0.02%)</title><rect x="67.4943%" y="101" width="0.0228%" height="15" fill="rgb(221,65,9)"/><text x="67.7443%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (650 samples, 0.42%)</title><rect x="67.2197%" y="117" width="0.4229%" height="15" fill="rgb(235,49,36)"/><text x="67.4697%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (193 samples, 0.13%)</title><rect x="67.5171%" y="101" width="0.1256%" height="15" fill="rgb(225,32,20)"/><text x="67.7671%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.01%)</title><rect x="67.6296%" y="85" width="0.0130%" height="15" fill="rgb(215,141,46)"/><text x="67.8796%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (981 samples, 0.64%)</title><rect x="67.0063%" y="133" width="0.6383%" height="15" fill="rgb(250,160,47)"/><text x="67.2563%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,232 samples, 0.80%)</title><rect x="66.8476%" y="149" width="0.8016%" height="15" fill="rgb(216,222,40)"/><text x="67.0976%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.01%)</title><rect x="67.6492%" y="149" width="0.0104%" height="15" fill="rgb(234,217,39)"/><text x="67.8992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (49 samples, 0.03%)</title><rect x="67.6596%" y="149" width="0.0319%" height="15" fill="rgb(207,178,40)"/><text x="67.9096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (38 samples, 0.02%)</title><rect x="67.7285%" y="133" width="0.0247%" height="15" fill="rgb(221,136,13)"/><text x="67.9785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.02%)</title><rect x="67.7324%" y="117" width="0.0208%" height="15" fill="rgb(249,199,10)"/><text x="67.9824%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (97 samples, 0.06%)</title><rect x="67.6915%" y="149" width="0.0631%" height="15" fill="rgb(249,222,13)"/><text x="67.9415%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (54 samples, 0.04%)</title><rect x="67.8522%" y="117" width="0.0351%" height="15" fill="rgb(244,185,38)"/><text x="68.1022%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (211 samples, 0.14%)</title><rect x="67.7546%" y="149" width="0.1373%" height="15" fill="rgb(236,202,9)"/><text x="68.0046%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (127 samples, 0.08%)</title><rect x="67.8092%" y="133" width="0.0826%" height="15" fill="rgb(250,229,37)"/><text x="68.0592%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (404 samples, 0.26%)</title><rect x="67.9055%" y="149" width="0.2629%" height="15" fill="rgb(206,174,23)"/><text x="68.1555%" y="159.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41,411 samples, 26.94%)</title><rect x="41.2245%" y="165" width="26.9445%" height="15" fill="rgb(211,33,43)"/><text x="41.4745%" y="175.50">async-redis`&lt;core::future::from_generator::..</text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (23 samples, 0.01%)</title><rect x="68.1782%" y="165" width="0.0150%" height="15" fill="rgb(245,58,50)"/><text x="68.4282%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (34 samples, 0.02%)</title><rect x="68.3369%" y="133" width="0.0221%" height="15" fill="rgb(244,68,36)"/><text x="68.5869%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (29 samples, 0.02%)</title><rect x="68.3590%" y="133" width="0.0189%" height="15" fill="rgb(232,229,15)"/><text x="68.6090%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (217 samples, 0.14%)</title><rect x="68.3779%" y="133" width="0.1412%" height="15" fill="rgb(254,30,23)"/><text x="68.6279%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (52 samples, 0.03%)</title><rect x="68.5191%" y="133" width="0.0338%" height="15" fill="rgb(235,160,14)"/><text x="68.7691%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (27 samples, 0.02%)</title><rect x="68.5529%" y="133" width="0.0176%" height="15" fill="rgb(212,155,44)"/><text x="68.8029%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (19 samples, 0.01%)</title><rect x="68.5705%" y="133" width="0.0124%" height="15" fill="rgb(226,2,50)"/><text x="68.8205%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (38 samples, 0.02%)</title><rect x="68.6577%" y="101" width="0.0247%" height="15" fill="rgb(234,177,6)"/><text x="68.9077%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (462 samples, 0.30%)</title><rect x="68.6824%" y="101" width="0.3006%" height="15" fill="rgb(217,24,9)"/><text x="68.9324%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (307 samples, 0.20%)</title><rect x="68.7833%" y="85" width="0.1998%" height="15" fill="rgb(220,13,46)"/><text x="69.0333%" y="95.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (35 samples, 0.02%)</title><rect x="68.9895%" y="101" width="0.0228%" height="15" fill="rgb(239,221,27)"/><text x="69.2395%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (104 samples, 0.07%)</title><rect x="69.0123%" y="101" width="0.0677%" height="15" fill="rgb(222,198,25)"/><text x="69.2623%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (733 samples, 0.48%)</title><rect x="68.6330%" y="117" width="0.4769%" height="15" fill="rgb(211,99,13)"/><text x="68.8830%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (46 samples, 0.03%)</title><rect x="69.0800%" y="101" width="0.0299%" height="15" fill="rgb(232,111,31)"/><text x="69.3300%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="69.1099%" y="117" width="0.0104%" height="15" fill="rgb(245,82,37)"/><text x="69.3599%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (70 samples, 0.05%)</title><rect x="69.1203%" y="117" width="0.0455%" height="15" fill="rgb(227,149,46)"/><text x="69.3703%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (115 samples, 0.07%)</title><rect x="69.1756%" y="117" width="0.0748%" height="15" fill="rgb(218,36,50)"/><text x="69.4256%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (38 samples, 0.02%)</title><rect x="69.2257%" y="101" width="0.0247%" height="15" fill="rgb(226,80,48)"/><text x="69.4757%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (18 samples, 0.01%)</title><rect x="69.2504%" y="117" width="0.0117%" height="15" fill="rgb(238,224,15)"/><text x="69.5004%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,068 samples, 0.69%)</title><rect x="68.5829%" y="133" width="0.6949%" height="15" fill="rgb(241,136,10)"/><text x="68.8329%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.02%)</title><rect x="69.2622%" y="117" width="0.0156%" height="15" fill="rgb(208,32,45)"/><text x="69.5122%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.02%)</title><rect x="69.2778%" y="133" width="0.0228%" height="15" fill="rgb(207,135,9)"/><text x="69.5278%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1,688 samples, 1.10%)</title><rect x="68.2133%" y="149" width="1.0983%" height="15" fill="rgb(206,86,44)"/><text x="68.4633%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.01%)</title><rect x="69.3005%" y="133" width="0.0111%" height="15" fill="rgb(245,177,15)"/><text x="69.5505%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (20 samples, 0.01%)</title><rect x="69.3188%" y="149" width="0.0130%" height="15" fill="rgb(206,64,50)"/><text x="69.5688%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (23 samples, 0.01%)</title><rect x="69.3318%" y="149" width="0.0150%" height="15" fill="rgb(234,36,40)"/><text x="69.5818%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1,775 samples, 1.15%)</title><rect x="68.1970%" y="165" width="1.1549%" height="15" fill="rgb(213,64,8)"/><text x="68.4470%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (20 samples, 0.01%)</title><rect x="69.3519%" y="165" width="0.0130%" height="15" fill="rgb(210,75,36)"/><text x="69.6019%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (58 samples, 0.04%)</title><rect x="69.3656%" y="165" width="0.0377%" height="15" fill="rgb(229,88,21)"/><text x="69.6156%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (22 samples, 0.01%)</title><rect x="69.4144%" y="149" width="0.0143%" height="15" fill="rgb(252,204,47)"/><text x="69.6644%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="69.4287%" y="149" width="0.0208%" height="15" fill="rgb(208,77,27)"/><text x="69.6787%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (38 samples, 0.02%)</title><rect x="69.5068%" y="133" width="0.0247%" height="15" fill="rgb(221,76,26)"/><text x="69.7568%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (129 samples, 0.08%)</title><rect x="69.4495%" y="149" width="0.0839%" height="15" fill="rgb(225,139,18)"/><text x="69.6995%" y="159.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (17 samples, 0.01%)</title><rect x="69.5335%" y="149" width="0.0111%" height="15" fill="rgb(230,137,11)"/><text x="69.7835%" y="159.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (43 samples, 0.03%)</title><rect x="69.5445%" y="149" width="0.0280%" height="15" fill="rgb(212,28,1)"/><text x="69.7945%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (38 samples, 0.02%)</title><rect x="69.6324%" y="133" width="0.0247%" height="15" fill="rgb(248,164,17)"/><text x="69.8824%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (31 samples, 0.02%)</title><rect x="69.6844%" y="85" width="0.0202%" height="15" fill="rgb(222,171,42)"/><text x="69.9344%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (38 samples, 0.02%)</title><rect x="69.6818%" y="101" width="0.0247%" height="15" fill="rgb(243,84,45)"/><text x="69.9318%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.02%)</title><rect x="69.7345%" y="85" width="0.0221%" height="15" fill="rgb(252,49,23)"/><text x="69.9845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.02%)</title><rect x="69.7358%" y="69" width="0.0208%" height="15" fill="rgb(215,19,7)"/><text x="69.9858%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.02%)</title><rect x="69.7358%" y="53" width="0.0208%" height="15" fill="rgb(238,81,41)"/><text x="69.9858%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.02%)</title><rect x="69.8048%" y="53" width="0.0182%" height="15" fill="rgb(210,199,37)"/><text x="70.0548%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (105 samples, 0.07%)</title><rect x="69.7567%" y="85" width="0.0683%" height="15" fill="rgb(244,192,49)"/><text x="70.0067%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (58 samples, 0.04%)</title><rect x="69.7872%" y="69" width="0.0377%" height="15" fill="rgb(226,211,11)"/><text x="70.0372%" y="79.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (174 samples, 0.11%)</title><rect x="69.7144%" y="101" width="0.1132%" height="15" fill="rgb(236,162,54)"/><text x="69.9644%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (27 samples, 0.02%)</title><rect x="69.8282%" y="101" width="0.0176%" height="15" fill="rgb(220,229,9)"/><text x="70.0782%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (295 samples, 0.19%)</title><rect x="69.6571%" y="133" width="0.1919%" height="15" fill="rgb(250,87,22)"/><text x="69.9071%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (267 samples, 0.17%)</title><rect x="69.6753%" y="117" width="0.1737%" height="15" fill="rgb(239,43,17)"/><text x="69.9253%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (167 samples, 0.11%)</title><rect x="69.9512%" y="85" width="0.1087%" height="15" fill="rgb(231,177,25)"/><text x="70.2012%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (110 samples, 0.07%)</title><rect x="69.9883%" y="69" width="0.0716%" height="15" fill="rgb(219,179,1)"/><text x="70.2383%" y="79.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (208 samples, 0.14%)</title><rect x="69.9395%" y="101" width="0.1353%" height="15" fill="rgb(238,219,53)"/><text x="70.1895%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (55 samples, 0.04%)</title><rect x="70.0781%" y="101" width="0.0358%" height="15" fill="rgb(232,167,36)"/><text x="70.3281%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (52 samples, 0.03%)</title><rect x="70.1815%" y="85" width="0.0338%" height="15" fill="rgb(244,19,51)"/><text x="70.4315%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (135 samples, 0.09%)</title><rect x="70.2349%" y="69" width="0.0878%" height="15" fill="rgb(224,6,22)"/><text x="70.4849%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (131 samples, 0.09%)</title><rect x="70.2375%" y="53" width="0.0852%" height="15" fill="rgb(224,145,5)"/><text x="70.4875%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (161 samples, 0.10%)</title><rect x="70.2199%" y="85" width="0.1048%" height="15" fill="rgb(234,130,49)"/><text x="70.4699%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (104 samples, 0.07%)</title><rect x="70.5296%" y="53" width="0.0677%" height="15" fill="rgb(254,6,2)"/><text x="70.7796%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (250 samples, 0.16%)</title><rect x="70.4561%" y="69" width="0.1627%" height="15" fill="rgb(208,96,46)"/><text x="70.7061%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (33 samples, 0.02%)</title><rect x="70.5973%" y="53" width="0.0215%" height="15" fill="rgb(239,3,39)"/><text x="70.8473%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (453 samples, 0.29%)</title><rect x="70.3247%" y="85" width="0.2947%" height="15" fill="rgb(233,210,1)"/><text x="70.5747%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (16 samples, 0.01%)</title><rect x="70.6246%" y="85" width="0.0104%" height="15" fill="rgb(244,137,37)"/><text x="70.8746%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (802 samples, 0.52%)</title><rect x="70.1139%" y="101" width="0.5218%" height="15" fill="rgb(240,136,2)"/><text x="70.3639%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (20 samples, 0.01%)</title><rect x="70.7131%" y="85" width="0.0130%" height="15" fill="rgb(239,18,37)"/><text x="70.9631%" y="95.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (139 samples, 0.09%)</title><rect x="70.6396%" y="101" width="0.0904%" height="15" fill="rgb(218,185,22)"/><text x="70.8896%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (1,273 samples, 0.83%)</title><rect x="69.9141%" y="117" width="0.8283%" height="15" fill="rgb(225,218,4)"/><text x="70.1641%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (1,375 samples, 0.89%)</title><rect x="69.8490%" y="133" width="0.8947%" height="15" fill="rgb(230,182,32)"/><text x="70.0990%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (41 samples, 0.03%)</title><rect x="70.7437%" y="133" width="0.0267%" height="15" fill="rgb(242,56,43)"/><text x="70.9937%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (1,875 samples, 1.22%)</title><rect x="69.5725%" y="149" width="1.2200%" height="15" fill="rgb(233,99,24)"/><text x="69.8225%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.02%)</title><rect x="70.7704%" y="133" width="0.0221%" height="15" fill="rgb(234,209,42)"/><text x="71.0204%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (26 samples, 0.02%)</title><rect x="70.7932%" y="149" width="0.0169%" height="15" fill="rgb(227,7,12)"/><text x="71.0432%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (30 samples, 0.02%)</title><rect x="70.8159%" y="149" width="0.0195%" height="15" fill="rgb(245,203,43)"/><text x="71.0659%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (2,229 samples, 1.45%)</title><rect x="69.4033%" y="165" width="1.4503%" height="15" fill="rgb(238,205,33)"/><text x="69.6533%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.02%)</title><rect x="70.8354%" y="149" width="0.0182%" height="15" fill="rgb(231,56,7)"/><text x="71.0854%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (19 samples, 0.01%)</title><rect x="70.8595%" y="165" width="0.0124%" height="15" fill="rgb(244,186,29)"/><text x="71.1095%" y="175.50"></text></g><g><title>async-redis`__rdl_alloc (52 samples, 0.03%)</title><rect x="70.8790%" y="165" width="0.0338%" height="15" fill="rgb(234,111,31)"/><text x="71.1290%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.01%)</title><rect x="70.9213%" y="165" width="0.0137%" height="15" fill="rgb(241,149,10)"/><text x="71.1713%" y="175.50"></text></g><g><title>async-redis`async_redis::protocol::decode (95 samples, 0.06%)</title><rect x="70.9350%" y="165" width="0.0618%" height="15" fill="rgb(249,206,44)"/><text x="71.1850%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (46 samples, 0.03%)</title><rect x="70.9968%" y="165" width="0.0299%" height="15" fill="rgb(251,153,30)"/><text x="71.2468%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (100 samples, 0.07%)</title><rect x="71.0267%" y="165" width="0.0651%" height="15" fill="rgb(239,152,38)"/><text x="71.2767%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (29 samples, 0.02%)</title><rect x="71.0944%" y="165" width="0.0189%" height="15" fill="rgb(249,139,47)"/><text x="71.3444%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (429 samples, 0.28%)</title><rect x="71.2317%" y="117" width="0.2791%" height="15" fill="rgb(244,64,35)"/><text x="71.4817%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (573 samples, 0.37%)</title><rect x="71.1387%" y="133" width="0.3728%" height="15" fill="rgb(216,46,15)"/><text x="71.3887%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (193 samples, 0.13%)</title><rect x="71.5655%" y="117" width="0.1256%" height="15" fill="rgb(250,74,19)"/><text x="71.8155%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (279 samples, 0.18%)</title><rect x="71.5115%" y="133" width="0.1815%" height="15" fill="rgb(249,42,33)"/><text x="71.7615%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (876 samples, 0.57%)</title><rect x="71.1321%" y="149" width="0.5700%" height="15" fill="rgb(242,149,17)"/><text x="71.3821%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (34 samples, 0.02%)</title><rect x="71.7021%" y="149" width="0.0221%" height="15" fill="rgb(244,29,21)"/><text x="71.9521%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::enter (949 samples, 0.62%)</title><rect x="71.1159%" y="165" width="0.6175%" height="15" fill="rgb(220,130,37)"/><text x="71.3659%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (42 samples, 0.03%)</title><rect x="71.7431%" y="149" width="0.0273%" height="15" fill="rgb(211,67,2)"/><text x="71.9931%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (27 samples, 0.02%)</title><rect x="72.0632%" y="101" width="0.0176%" height="15" fill="rgb(235,68,52)"/><text x="72.3132%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (55 samples, 0.04%)</title><rect x="72.0808%" y="101" width="0.0358%" height="15" fill="rgb(246,142,3)"/><text x="72.3308%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (44 samples, 0.03%)</title><rect x="72.0880%" y="85" width="0.0286%" height="15" fill="rgb(241,25,7)"/><text x="72.3380%" y="95.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::record (25 samples, 0.02%)</title><rect x="72.1322%" y="101" width="0.0163%" height="15" fill="rgb(242,119,39)"/><text x="72.3822%" y="111.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (72 samples, 0.05%)</title><rect x="72.1641%" y="85" width="0.0468%" height="15" fill="rgb(241,98,45)"/><text x="72.4141%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (51 samples, 0.03%)</title><rect x="72.1778%" y="69" width="0.0332%" height="15" fill="rgb(254,28,30)"/><text x="72.4278%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.02%)</title><rect x="72.4100%" y="37" width="0.0176%" height="15" fill="rgb(241,142,54)"/><text x="72.6600%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (61 samples, 0.04%)</title><rect x="72.4276%" y="37" width="0.0397%" height="15" fill="rgb(222,85,15)"/><text x="72.6776%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (284 samples, 0.18%)</title><rect x="72.2838%" y="53" width="0.1848%" height="15" fill="rgb(210,85,47)"/><text x="72.5338%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (305 samples, 0.20%)</title><rect x="72.2721%" y="69" width="0.1985%" height="15" fill="rgb(224,206,25)"/><text x="72.5221%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (399 samples, 0.26%)</title><rect x="72.2161%" y="85" width="0.2596%" height="15" fill="rgb(243,201,19)"/><text x="72.4661%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (501 samples, 0.33%)</title><rect x="72.1537%" y="101" width="0.3260%" height="15" fill="rgb(236,59,4)"/><text x="72.4037%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (1,241 samples, 0.81%)</title><rect x="71.8706%" y="117" width="0.8075%" height="15" fill="rgb(254,179,45)"/><text x="72.1206%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (280 samples, 0.18%)</title><rect x="72.4959%" y="101" width="0.1822%" height="15" fill="rgb(226,14,10)"/><text x="72.7459%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_subscriber::field::VisitOutput&lt;core::result::Result&lt;(),core::fmt::Error&gt;&gt;&gt;::finish (17 samples, 0.01%)</title><rect x="72.6781%" y="117" width="0.0111%" height="15" fill="rgb(244,27,41)"/><text x="72.9281%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (16 samples, 0.01%)</title><rect x="72.6892%" y="117" width="0.0104%" height="15" fill="rgb(235,35,32)"/><text x="72.9392%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (72 samples, 0.05%)</title><rect x="72.7035%" y="117" width="0.0468%" height="15" fill="rgb(218,68,31)"/><text x="72.9535%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (111 samples, 0.07%)</title><rect x="72.9091%" y="101" width="0.0722%" height="15" fill="rgb(207,120,37)"/><text x="73.1591%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (46 samples, 0.03%)</title><rect x="72.9514%" y="85" width="0.0299%" height="15" fill="rgb(227,98,0)"/><text x="73.2014%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (186 samples, 0.12%)</title><rect x="73.0926%" y="85" width="0.1210%" height="15" fill="rgb(207,7,3)"/><text x="73.3426%" y="95.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (122 samples, 0.08%)</title><rect x="73.2136%" y="85" width="0.0794%" height="15" fill="rgb(206,98,19)"/><text x="73.4636%" y="95.50"></text></g><g><title>async-redis`thread_local::thread_id::get (21 samples, 0.01%)</title><rect x="73.2930%" y="85" width="0.0137%" height="15" fill="rgb(217,5,26)"/><text x="73.5430%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (526 samples, 0.34%)</title><rect x="72.9813%" y="101" width="0.3422%" height="15" fill="rgb(235,190,38)"/><text x="73.2313%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.01%)</title><rect x="73.3086%" y="85" width="0.0150%" height="15" fill="rgb(247,86,24)"/><text x="73.5586%" y="95.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (263 samples, 0.17%)</title><rect x="73.3236%" y="101" width="0.1711%" height="15" fill="rgb(205,101,16)"/><text x="73.5736%" y="111.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (16 samples, 0.01%)</title><rect x="73.4973%" y="101" width="0.0104%" height="15" fill="rgb(246,168,33)"/><text x="73.7473%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (29 samples, 0.02%)</title><rect x="73.5097%" y="101" width="0.0189%" height="15" fill="rgb(231,114,1)"/><text x="73.7597%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (1,221 samples, 0.79%)</title><rect x="72.7503%" y="117" width="0.7945%" height="15" fill="rgb(207,184,53)"/><text x="73.0003%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (2,769 samples, 1.80%)</title><rect x="71.8537%" y="133" width="1.8017%" height="15" fill="rgb(224,95,51)"/><text x="72.1037%" y="143.50">a..</text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (108 samples, 0.07%)</title><rect x="73.5851%" y="117" width="0.0703%" height="15" fill="rgb(212,188,45)"/><text x="73.8351%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (42 samples, 0.03%)</title><rect x="73.6567%" y="133" width="0.0273%" height="15" fill="rgb(223,154,38)"/><text x="73.9067%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (21 samples, 0.01%)</title><rect x="73.6840%" y="133" width="0.0137%" height="15" fill="rgb(251,22,52)"/><text x="73.9340%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (74 samples, 0.05%)</title><rect x="73.6977%" y="133" width="0.0481%" height="15" fill="rgb(229,209,22)"/><text x="73.9477%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (3,055 samples, 1.99%)</title><rect x="71.7757%" y="149" width="1.9878%" height="15" fill="rgb(234,138,34)"/><text x="72.0257%" y="159.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.02%)</title><rect x="73.7472%" y="133" width="0.0163%" height="15" fill="rgb(212,95,11)"/><text x="73.9972%" y="143.50"></text></g><g><title>async-redis`tracing::span::Span::new (3,135 samples, 2.04%)</title><rect x="71.7334%" y="165" width="2.0398%" height="15" fill="rgb(240,179,47)"/><text x="71.9834%" y="175.50">a..</text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (23 samples, 0.01%)</title><rect x="73.7829%" y="165" width="0.0150%" height="15" fill="rgb(240,163,11)"/><text x="74.0329%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_close (20 samples, 0.01%)</title><rect x="73.7979%" y="165" width="0.0130%" height="15" fill="rgb(236,37,12)"/><text x="74.0479%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::CloseGuard::is_closing (23 samples, 0.01%)</title><rect x="73.8109%" y="165" width="0.0150%" height="15" fill="rgb(232,164,16)"/><text x="74.0609%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (53 samples, 0.03%)</title><rect x="73.8259%" y="165" width="0.0345%" height="15" fill="rgb(244,205,15)"/><text x="74.0759%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (44 samples, 0.03%)</title><rect x="73.8669%" y="165" width="0.0286%" height="15" fill="rgb(223,117,47)"/><text x="74.1169%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50,651 samples, 32.96%)</title><rect x="40.9747%" y="181" width="32.9566%" height="15" fill="rgb(244,107,35)"/><text x="41.2247%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (52 samples, 0.03%)</title><rect x="73.8975%" y="165" width="0.0338%" height="15" fill="rgb(205,140,8)"/><text x="74.1475%" y="175.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="73.9313%" y="181" width="0.0182%" height="15" fill="rgb(228,84,46)"/><text x="74.1813%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (37 samples, 0.02%)</title><rect x="73.9495%" y="181" width="0.0241%" height="15" fill="rgb(254,188,9)"/><text x="74.1995%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (35 samples, 0.02%)</title><rect x="73.9749%" y="181" width="0.0228%" height="15" fill="rgb(206,112,54)"/><text x="74.2249%" y="191.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (98 samples, 0.06%)</title><rect x="73.9977%" y="181" width="0.0638%" height="15" fill="rgb(216,84,49)"/><text x="74.2477%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (51,187 samples, 33.31%)</title><rect x="40.8003%" y="197" width="33.3054%" height="15" fill="rgb(214,194,35)"/><text x="41.0503%" y="207.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core..</text></g><g><title>libdyld.dylib`tlv_get_addr (33 samples, 0.02%)</title><rect x="74.0842%" y="181" width="0.0215%" height="15" fill="rgb(249,28,3)"/><text x="74.3342%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (18 samples, 0.01%)</title><rect x="74.1057%" y="197" width="0.0117%" height="15" fill="rgb(222,56,52)"/><text x="74.3557%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (20 samples, 0.01%)</title><rect x="74.1174%" y="197" width="0.0130%" height="15" fill="rgb(245,217,50)"/><text x="74.3674%" y="207.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (62 samples, 0.04%)</title><rect x="74.1486%" y="197" width="0.0403%" height="15" fill="rgb(213,201,24)"/><text x="74.3986%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (535 samples, 0.35%)</title><rect x="74.3002%" y="165" width="0.3481%" height="15" fill="rgb(248,116,28)"/><text x="74.5502%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (233 samples, 0.15%)</title><rect x="74.6672%" y="133" width="0.1516%" height="15" fill="rgb(219,72,43)"/><text x="74.9172%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (69 samples, 0.04%)</title><rect x="74.7739%" y="117" width="0.0449%" height="15" fill="rgb(209,138,14)"/><text x="75.0239%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (238 samples, 0.15%)</title><rect x="74.6646%" y="149" width="0.1549%" height="15" fill="rgb(222,18,33)"/><text x="74.9146%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (264 samples, 0.17%)</title><rect x="74.6483%" y="165" width="0.1718%" height="15" fill="rgb(213,199,7)"/><text x="74.8983%" y="175.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (854 samples, 0.56%)</title><rect x="74.2690%" y="181" width="0.5557%" height="15" fill="rgb(250,110,10)"/><text x="74.5190%" y="191.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (49 samples, 0.03%)</title><rect x="74.8611%" y="165" width="0.0319%" height="15" fill="rgb(248,123,6)"/><text x="75.1111%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (93 samples, 0.06%)</title><rect x="75.0498%" y="117" width="0.0605%" height="15" fill="rgb(206,91,31)"/><text x="75.2998%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (335 samples, 0.22%)</title><rect x="74.8930%" y="165" width="0.2180%" height="15" fill="rgb(211,154,13)"/><text x="75.1430%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (296 samples, 0.19%)</title><rect x="74.9183%" y="149" width="0.1926%" height="15" fill="rgb(225,148,7)"/><text x="75.1683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (287 samples, 0.19%)</title><rect x="74.9242%" y="133" width="0.1867%" height="15" fill="rgb(220,160,43)"/><text x="75.1742%" y="143.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (452 samples, 0.29%)</title><rect x="74.8246%" y="181" width="0.2941%" height="15" fill="rgb(213,52,39)"/><text x="75.0746%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::get::Get::new (34 samples, 0.02%)</title><rect x="75.1187%" y="181" width="0.0221%" height="15" fill="rgb(243,137,7)"/><text x="75.3687%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (18 samples, 0.01%)</title><rect x="75.1734%" y="165" width="0.0117%" height="15" fill="rgb(230,79,13)"/><text x="75.4234%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (90 samples, 0.06%)</title><rect x="75.1409%" y="181" width="0.0586%" height="15" fill="rgb(247,105,23)"/><text x="75.3909%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (20 samples, 0.01%)</title><rect x="75.1864%" y="165" width="0.0130%" height="15" fill="rgb(223,179,41)"/><text x="75.4364%" y="175.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (40 samples, 0.03%)</title><rect x="75.2079%" y="181" width="0.0260%" height="15" fill="rgb(218,9,34)"/><text x="75.4579%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (36 samples, 0.02%)</title><rect x="75.2339%" y="181" width="0.0234%" height="15" fill="rgb(222,106,8)"/><text x="75.4839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.01%)</title><rect x="75.2573%" y="181" width="0.0117%" height="15" fill="rgb(211,220,0)"/><text x="75.5073%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.05%)</title><rect x="75.2886%" y="165" width="0.0521%" height="15" fill="rgb(229,52,16)"/><text x="75.5386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (72 samples, 0.05%)</title><rect x="75.2938%" y="149" width="0.0468%" height="15" fill="rgb(212,155,18)"/><text x="75.5438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (111 samples, 0.07%)</title><rect x="75.2690%" y="181" width="0.0722%" height="15" fill="rgb(242,21,14)"/><text x="75.5190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (84 samples, 0.05%)</title><rect x="75.5137%" y="149" width="0.0547%" height="15" fill="rgb(222,19,48)"/><text x="75.7637%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (356 samples, 0.23%)</title><rect x="75.3413%" y="181" width="0.2316%" height="15" fill="rgb(232,45,27)"/><text x="75.5913%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (195 samples, 0.13%)</title><rect x="75.4460%" y="165" width="0.1269%" height="15" fill="rgb(249,103,42)"/><text x="75.6960%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (2,157 samples, 1.40%)</title><rect x="74.1890%" y="197" width="1.4035%" height="15" fill="rgb(246,81,33)"/><text x="74.4390%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (19 samples, 0.01%)</title><rect x="75.5924%" y="197" width="0.0124%" height="15" fill="rgb(252,33,42)"/><text x="75.8424%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (26 samples, 0.02%)</title><rect x="75.6939%" y="181" width="0.0169%" height="15" fill="rgb(209,212,41)"/><text x="75.9439%" y="191.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (380 samples, 0.25%)</title><rect x="75.7518%" y="165" width="0.2473%" height="15" fill="rgb(207,154,6)"/><text x="76.0018%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (349 samples, 0.23%)</title><rect x="75.7720%" y="149" width="0.2271%" height="15" fill="rgb(223,64,47)"/><text x="76.0220%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.02%)</title><rect x="76.0850%" y="117" width="0.0195%" height="15" fill="rgb(211,161,38)"/><text x="76.3350%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (123 samples, 0.08%)</title><rect x="76.0290%" y="133" width="0.0800%" height="15" fill="rgb(219,138,40)"/><text x="76.2790%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (17 samples, 0.01%)</title><rect x="76.1091%" y="133" width="0.0111%" height="15" fill="rgb(241,228,46)"/><text x="76.3591%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (215 samples, 0.14%)</title><rect x="76.0036%" y="165" width="0.1399%" height="15" fill="rgb(223,209,38)"/><text x="76.2536%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (197 samples, 0.13%)</title><rect x="76.0154%" y="149" width="0.1282%" height="15" fill="rgb(236,164,45)"/><text x="76.2654%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (35 samples, 0.02%)</title><rect x="76.1208%" y="133" width="0.0228%" height="15" fill="rgb(231,15,5)"/><text x="76.3708%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.01%)</title><rect x="76.1598%" y="149" width="0.0104%" height="15" fill="rgb(252,35,15)"/><text x="76.4098%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.02%)</title><rect x="76.1487%" y="165" width="0.0228%" height="15" fill="rgb(248,181,18)"/><text x="76.3987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (37 samples, 0.02%)</title><rect x="76.2158%" y="133" width="0.0241%" height="15" fill="rgb(233,39,42)"/><text x="76.4658%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (107 samples, 0.07%)</title><rect x="76.1715%" y="165" width="0.0696%" height="15" fill="rgb(238,110,33)"/><text x="76.4215%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (71 samples, 0.05%)</title><rect x="76.1949%" y="149" width="0.0462%" height="15" fill="rgb(233,195,10)"/><text x="76.4449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (23 samples, 0.01%)</title><rect x="76.2411%" y="165" width="0.0150%" height="15" fill="rgb(254,105,3)"/><text x="76.4911%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.01%)</title><rect x="76.2587%" y="165" width="0.0117%" height="15" fill="rgb(221,225,9)"/><text x="76.5087%" y="175.50"></text></g><g><title>async-redis`async_redis::protocol::encode_iter (844 samples, 0.55%)</title><rect x="75.7219%" y="181" width="0.5492%" height="15" fill="rgb(224,227,45)"/><text x="75.9719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (153 samples, 0.10%)</title><rect x="76.2756%" y="181" width="0.0996%" height="15" fill="rgb(229,198,43)"/><text x="76.5256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (130 samples, 0.08%)</title><rect x="76.2906%" y="165" width="0.0846%" height="15" fill="rgb(206,209,35)"/><text x="76.5406%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (112 samples, 0.07%)</title><rect x="76.3023%" y="149" width="0.0729%" height="15" fill="rgb(245,195,53)"/><text x="76.5523%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`calloc (35 samples, 0.02%)</title><rect x="76.3752%" y="181" width="0.0228%" height="15" fill="rgb(240,92,26)"/><text x="76.6252%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::encode (1,201 samples, 0.78%)</title><rect x="75.6198%" y="197" width="0.7814%" height="15" fill="rgb(207,40,23)"/><text x="75.8698%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (73 samples, 0.05%)</title><rect x="76.4259%" y="181" width="0.0475%" height="15" fill="rgb(223,111,35)"/><text x="76.6759%" y="191.50"></text></g><g><title>async-redis`async_redis::server::Dispatcher::determine_database (144 samples, 0.09%)</title><rect x="76.4038%" y="197" width="0.0937%" height="15" fill="rgb(229,147,28)"/><text x="76.6538%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (37 samples, 0.02%)</title><rect x="76.4734%" y="181" width="0.0241%" height="15" fill="rgb(211,29,28)"/><text x="76.7234%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (26 samples, 0.02%)</title><rect x="76.5020%" y="197" width="0.0169%" height="15" fill="rgb(228,72,33)"/><text x="76.7520%" y="207.50"></text></g><g><title>async-redis`&lt;T as core::any::Any&gt;::type_id (31 samples, 0.02%)</title><rect x="76.6738%" y="181" width="0.0202%" height="15" fill="rgb(205,214,31)"/><text x="76.9238%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (22 samples, 0.01%)</title><rect x="76.7610%" y="165" width="0.0143%" height="15" fill="rgb(224,111,15)"/><text x="77.0110%" y="175.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (20 samples, 0.01%)</title><rect x="76.7779%" y="165" width="0.0130%" height="15" fill="rgb(253,21,26)"/><text x="77.0279%" y="175.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (95 samples, 0.06%)</title><rect x="76.7909%" y="165" width="0.0618%" height="15" fill="rgb(245,139,43)"/><text x="77.0409%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (34 samples, 0.02%)</title><rect x="76.8306%" y="149" width="0.0221%" height="15" fill="rgb(252,170,7)"/><text x="77.0806%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (31 samples, 0.02%)</title><rect x="76.8326%" y="133" width="0.0202%" height="15" fill="rgb(231,118,14)"/><text x="77.0826%" y="143.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (55 samples, 0.04%)</title><rect x="76.8528%" y="165" width="0.0358%" height="15" fill="rgb(238,83,0)"/><text x="77.1028%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (39 samples, 0.03%)</title><rect x="76.8885%" y="165" width="0.0254%" height="15" fill="rgb(221,39,39)"/><text x="77.1385%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (59 samples, 0.04%)</title><rect x="76.9425%" y="149" width="0.0384%" height="15" fill="rgb(222,119,46)"/><text x="77.1925%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.04%)</title><rect x="76.9432%" y="133" width="0.0377%" height="15" fill="rgb(222,165,49)"/><text x="77.1932%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (105 samples, 0.07%)</title><rect x="76.9146%" y="165" width="0.0683%" height="15" fill="rgb(219,113,52)"/><text x="77.1646%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (243 samples, 0.16%)</title><rect x="76.9829%" y="165" width="0.1581%" height="15" fill="rgb(214,7,15)"/><text x="77.2329%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (148 samples, 0.10%)</title><rect x="77.0447%" y="149" width="0.0963%" height="15" fill="rgb(235,32,4)"/><text x="77.2947%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (78 samples, 0.05%)</title><rect x="77.0902%" y="133" width="0.0508%" height="15" fill="rgb(238,90,54)"/><text x="77.3402%" y="143.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (689 samples, 0.45%)</title><rect x="76.6985%" y="181" width="0.4483%" height="15" fill="rgb(213,208,19)"/><text x="76.9485%" y="191.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (22 samples, 0.01%)</title><rect x="77.1696%" y="181" width="0.0143%" height="15" fill="rgb(233,156,4)"/><text x="77.4196%" y="191.50"></text></g><g><title>async-redis`flume::async::_::_&lt;impl core::ops::drop::Drop for flume::async::SendFut&lt;T&gt;&gt;::drop (37 samples, 0.02%)</title><rect x="77.1891%" y="181" width="0.0241%" height="15" fill="rgb(207,194,5)"/><text x="77.4391%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (22 samples, 0.01%)</title><rect x="77.2132%" y="181" width="0.0143%" height="15" fill="rgb(206,111,30)"/><text x="77.4632%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (16 samples, 0.01%)</title><rect x="77.2288%" y="181" width="0.0104%" height="15" fill="rgb(243,70,54)"/><text x="77.4788%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (53 samples, 0.03%)</title><rect x="77.2392%" y="181" width="0.0345%" height="15" fill="rgb(242,28,8)"/><text x="77.4892%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (52 samples, 0.03%)</title><rect x="77.2399%" y="165" width="0.0338%" height="15" fill="rgb(219,106,18)"/><text x="77.4899%" y="175.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (44 samples, 0.03%)</title><rect x="77.2737%" y="181" width="0.0286%" height="15" fill="rgb(244,222,10)"/><text x="77.5237%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (1,229 samples, 0.80%)</title><rect x="76.5203%" y="197" width="0.7997%" height="15" fill="rgb(236,179,52)"/><text x="76.7703%" y="207.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (25 samples, 0.02%)</title><rect x="77.3199%" y="197" width="0.0163%" height="15" fill="rgb(213,23,39)"/><text x="77.5699%" y="207.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (36 samples, 0.02%)</title><rect x="77.3362%" y="197" width="0.0234%" height="15" fill="rgb(238,48,10)"/><text x="77.5862%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (27 samples, 0.02%)</title><rect x="77.4832%" y="165" width="0.0176%" height="15" fill="rgb(251,196,23)"/><text x="77.7332%" y="175.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (134 samples, 0.09%)</title><rect x="77.6062%" y="133" width="0.0872%" height="15" fill="rgb(250,152,24)"/><text x="77.8562%" y="143.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (21,122 samples, 13.74%)</title><rect x="77.5639%" y="149" width="13.7432%" height="15" fill="rgb(209,150,17)"/><text x="77.8139%" y="159.50">async-redis`&lt;&amp;mio::ne..</text></g><g><title>libsystem_kernel.dylib`__sendto (20,907 samples, 13.60%)</title><rect x="77.7038%" y="133" width="13.6034%" height="15" fill="rgb(234,202,34)"/><text x="77.9538%" y="143.50">libsystem_kernel.dyli..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (48 samples, 0.03%)</title><rect x="91.5219%" y="133" width="0.0312%" height="15" fill="rgb(253,148,53)"/><text x="91.7719%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (386 samples, 0.25%)</title><rect x="91.3137%" y="149" width="0.2512%" height="15" fill="rgb(218,129,16)"/><text x="91.5637%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.01%)</title><rect x="91.5531%" y="133" width="0.0117%" height="15" fill="rgb(216,85,19)"/><text x="91.8031%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (21,723 samples, 14.13%)</title><rect x="77.4423%" y="181" width="14.1343%" height="15" fill="rgb(235,228,7)"/><text x="77.6923%" y="191.50">async-redis`&lt;tokio::n..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (21,633 samples, 14.08%)</title><rect x="77.5008%" y="165" width="14.0757%" height="15" fill="rgb(245,175,0)"/><text x="77.7508%" y="175.50">async-redis`tokio::io..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.01%)</title><rect x="91.5648%" y="149" width="0.0117%" height="15" fill="rgb(208,168,36)"/><text x="91.8148%" y="159.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (21,885 samples, 14.24%)</title><rect x="77.3687%" y="197" width="14.2397%" height="15" fill="rgb(246,171,24)"/><text x="77.6187%" y="207.50">async-redis`tokio::io:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (49 samples, 0.03%)</title><rect x="91.5766%" y="181" width="0.0319%" height="15" fill="rgb(215,142,24)"/><text x="91.8266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.01%)</title><rect x="91.6299%" y="197" width="0.0104%" height="15" fill="rgb(250,187,7)"/><text x="91.8799%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (45 samples, 0.03%)</title><rect x="91.6859%" y="181" width="0.0293%" height="15" fill="rgb(228,66,33)"/><text x="91.9359%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (106 samples, 0.07%)</title><rect x="91.7151%" y="181" width="0.0690%" height="15" fill="rgb(234,215,21)"/><text x="91.9651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (100 samples, 0.07%)</title><rect x="91.7190%" y="165" width="0.0651%" height="15" fill="rgb(222,191,20)"/><text x="91.9690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (227 samples, 0.15%)</title><rect x="91.6403%" y="197" width="0.1477%" height="15" fill="rgb(245,79,54)"/><text x="91.8903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (82 samples, 0.05%)</title><rect x="91.7880%" y="197" width="0.0534%" height="15" fill="rgb(240,10,37)"/><text x="92.0380%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (75 samples, 0.05%)</title><rect x="91.9617%" y="165" width="0.0488%" height="15" fill="rgb(214,192,32)"/><text x="92.2117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (173 samples, 0.11%)</title><rect x="91.9103%" y="181" width="0.1126%" height="15" fill="rgb(209,36,54)"/><text x="92.1603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (19 samples, 0.01%)</title><rect x="92.0105%" y="165" width="0.0124%" height="15" fill="rgb(220,10,11)"/><text x="92.2605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (283 samples, 0.18%)</title><rect x="91.8414%" y="197" width="0.1841%" height="15" fill="rgb(221,106,17)"/><text x="92.0914%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.02%)</title><rect x="92.0372%" y="197" width="0.0176%" height="15" fill="rgb(251,142,44)"/><text x="92.2872%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (83,127 samples, 54.09%)</title><rect x="37.9732%" y="213" width="54.0874%" height="15" fill="rgb(238,13,15)"/><text x="38.2232%" y="223.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;:..</text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.03%)</title><rect x="92.0606%" y="213" width="0.0293%" height="15" fill="rgb(208,107,27)"/><text x="92.3106%" y="223.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::lock (26 samples, 0.02%)</title><rect x="92.2968%" y="165" width="0.0169%" height="15" fill="rgb(205,136,37)"/><text x="92.5468%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (43 samples, 0.03%)</title><rect x="92.3229%" y="149" width="0.0280%" height="15" fill="rgb(250,205,27)"/><text x="92.5729%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (16 samples, 0.01%)</title><rect x="92.4153%" y="101" width="0.0104%" height="15" fill="rgb(210,80,43)"/><text x="92.6653%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (63 samples, 0.04%)</title><rect x="92.4335%" y="85" width="0.0410%" height="15" fill="rgb(247,160,36)"/><text x="92.6835%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (131 samples, 0.09%)</title><rect x="92.3938%" y="117" width="0.0852%" height="15" fill="rgb(234,13,49)"/><text x="92.6438%" y="127.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (75 samples, 0.05%)</title><rect x="92.4302%" y="101" width="0.0488%" height="15" fill="rgb(234,122,0)"/><text x="92.6802%" y="111.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (166 samples, 0.11%)</title><rect x="92.3736%" y="133" width="0.1080%" height="15" fill="rgb(207,146,38)"/><text x="92.6236%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (253 samples, 0.16%)</title><rect x="92.3183%" y="165" width="0.1646%" height="15" fill="rgb(207,177,25)"/><text x="92.5683%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (203 samples, 0.13%)</title><rect x="92.3508%" y="149" width="0.1321%" height="15" fill="rgb(211,178,42)"/><text x="92.6008%" y="159.50"></text></g><g><title>async-redis`&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (322 samples, 0.21%)</title><rect x="92.2747%" y="181" width="0.2095%" height="15" fill="rgb(230,69,54)"/><text x="92.5247%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (48 samples, 0.03%)</title><rect x="92.4849%" y="181" width="0.0312%" height="15" fill="rgb(214,135,41)"/><text x="92.7349%" y="191.50"></text></g><g><title>async-redis`&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (658 samples, 0.43%)</title><rect x="92.0899%" y="213" width="0.4281%" height="15" fill="rgb(237,67,25)"/><text x="92.3399%" y="223.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::send (585 samples, 0.38%)</title><rect x="92.1374%" y="197" width="0.3806%" height="15" fill="rgb(222,189,50)"/><text x="92.3874%" y="207.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (81 samples, 0.05%)</title><rect x="92.5181%" y="213" width="0.0527%" height="15" fill="rgb(245,148,34)"/><text x="92.7681%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (23 samples, 0.01%)</title><rect x="93.2266%" y="149" width="0.0150%" height="15" fill="rgb(222,29,6)"/><text x="93.4766%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (19 samples, 0.01%)</title><rect x="93.2292%" y="133" width="0.0124%" height="15" fill="rgb(221,189,43)"/><text x="93.4792%" y="143.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (752 samples, 0.49%)</title><rect x="92.7640%" y="165" width="0.4893%" height="15" fill="rgb(207,36,27)"/><text x="93.0140%" y="175.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (18 samples, 0.01%)</title><rect x="93.2416%" y="149" width="0.0117%" height="15" fill="rgb(217,90,24)"/><text x="93.4916%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (778 samples, 0.51%)</title><rect x="92.7490%" y="181" width="0.5062%" height="15" fill="rgb(224,66,35)"/><text x="92.9990%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (875 samples, 0.57%)</title><rect x="92.6983%" y="197" width="0.5693%" height="15" fill="rgb(221,13,50)"/><text x="92.9483%" y="207.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (19 samples, 0.01%)</title><rect x="93.2553%" y="181" width="0.0124%" height="15" fill="rgb(236,68,49)"/><text x="93.5053%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (35 samples, 0.02%)</title><rect x="93.5292%" y="165" width="0.0228%" height="15" fill="rgb(229,146,28)"/><text x="93.7792%" y="175.50"></text></g><g><title>async-redis`flume::async::AsyncSignal::new (33 samples, 0.02%)</title><rect x="93.5598%" y="165" width="0.0215%" height="15" fill="rgb(225,31,38)"/><text x="93.8098%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (22 samples, 0.01%)</title><rect x="93.5669%" y="149" width="0.0143%" height="15" fill="rgb(250,208,3)"/><text x="93.8169%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (20 samples, 0.01%)</title><rect x="93.5682%" y="133" width="0.0130%" height="15" fill="rgb(246,54,23)"/><text x="93.8182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.01%)</title><rect x="93.7257%" y="117" width="0.0104%" height="15" fill="rgb(243,76,11)"/><text x="93.9757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (111 samples, 0.07%)</title><rect x="93.7361%" y="117" width="0.0722%" height="15" fill="rgb(245,21,50)"/><text x="93.9861%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.01%)</title><rect x="93.7934%" y="101" width="0.0150%" height="15" fill="rgb(228,9,43)"/><text x="94.0434%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (296 samples, 0.19%)</title><rect x="93.6164%" y="149" width="0.1926%" height="15" fill="rgb(208,100,47)"/><text x="93.8664%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (287 samples, 0.19%)</title><rect x="93.6222%" y="133" width="0.1867%" height="15" fill="rgb(232,26,8)"/><text x="93.8722%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (346 samples, 0.23%)</title><rect x="93.5845%" y="165" width="0.2251%" height="15" fill="rgb(216,166,38)"/><text x="93.8345%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (672 samples, 0.44%)</title><rect x="93.3782%" y="181" width="0.4372%" height="15" fill="rgb(251,202,51)"/><text x="93.6282%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (47 samples, 0.03%)</title><rect x="93.9424%" y="165" width="0.0306%" height="15" fill="rgb(254,216,34)"/><text x="94.1924%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (315 samples, 0.20%)</title><rect x="93.8155%" y="181" width="0.2050%" height="15" fill="rgb(251,32,27)"/><text x="94.0655%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (53 samples, 0.03%)</title><rect x="93.9859%" y="165" width="0.0345%" height="15" fill="rgb(208,127,28)"/><text x="94.2359%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (1,197 samples, 0.78%)</title><rect x="93.2676%" y="197" width="0.7788%" height="15" fill="rgb(224,137,22)"/><text x="93.5176%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.01%)</title><rect x="94.0354%" y="181" width="0.0111%" height="15" fill="rgb(254,70,32)"/><text x="94.2854%" y="191.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (18 samples, 0.01%)</title><rect x="94.0809%" y="181" width="0.0117%" height="15" fill="rgb(229,75,37)"/><text x="94.3309%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (39 samples, 0.03%)</title><rect x="94.1818%" y="165" width="0.0254%" height="15" fill="rgb(252,64,23)"/><text x="94.4318%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (38 samples, 0.02%)</title><rect x="94.1824%" y="149" width="0.0247%" height="15" fill="rgb(232,162,48)"/><text x="94.4324%" y="159.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (85 samples, 0.06%)</title><rect x="94.2247%" y="149" width="0.0553%" height="15" fill="rgb(246,160,12)"/><text x="94.4747%" y="159.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (79 samples, 0.05%)</title><rect x="94.2813%" y="149" width="0.0514%" height="15" fill="rgb(247,166,0)"/><text x="94.5313%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (24 samples, 0.02%)</title><rect x="94.4277%" y="133" width="0.0156%" height="15" fill="rgb(249,219,21)"/><text x="94.6777%" y="143.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (268 samples, 0.17%)</title><rect x="94.3327%" y="149" width="0.1744%" height="15" fill="rgb(205,209,3)"/><text x="94.5827%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (98 samples, 0.06%)</title><rect x="94.4434%" y="133" width="0.0638%" height="15" fill="rgb(243,44,1)"/><text x="94.6934%" y="143.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (639 samples, 0.42%)</title><rect x="94.0992%" y="181" width="0.4158%" height="15" fill="rgb(206,159,16)"/><text x="94.3492%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (458 samples, 0.30%)</title><rect x="94.2169%" y="165" width="0.2980%" height="15" fill="rgb(244,77,30)"/><text x="94.4669%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (763 samples, 0.50%)</title><rect x="94.0523%" y="197" width="0.4965%" height="15" fill="rgb(218,69,12)"/><text x="94.3023%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (49 samples, 0.03%)</title><rect x="94.5169%" y="181" width="0.0319%" height="15" fill="rgb(212,87,7)"/><text x="94.7669%" y="191.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (22 samples, 0.01%)</title><rect x="94.5488%" y="197" width="0.0143%" height="15" fill="rgb(245,114,25)"/><text x="94.7988%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (18 samples, 0.01%)</title><rect x="94.5657%" y="197" width="0.0117%" height="15" fill="rgb(210,61,42)"/><text x="94.8157%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (29 samples, 0.02%)</title><rect x="94.5774%" y="197" width="0.0189%" height="15" fill="rgb(211,52,33)"/><text x="94.8274%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (36 samples, 0.02%)</title><rect x="94.5963%" y="197" width="0.0234%" height="15" fill="rgb(234,58,33)"/><text x="94.8463%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3,159 samples, 2.06%)</title><rect x="92.5708%" y="213" width="2.0554%" height="15" fill="rgb(220,115,36)"/><text x="92.8208%" y="223.50">a..</text></g><g><title>async-redis`&lt;tokio::time::driver::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="94.6281%" y="213" width="0.0130%" height="15" fill="rgb(243,153,54)"/><text x="94.8781%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (29 samples, 0.02%)</title><rect x="94.6412%" y="213" width="0.0189%" height="15" fill="rgb(251,47,18)"/><text x="94.8912%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (31 samples, 0.02%)</title><rect x="94.6607%" y="213" width="0.0202%" height="15" fill="rgb(242,102,42)"/><text x="94.9107%" y="223.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (181 samples, 0.12%)</title><rect x="94.7648%" y="181" width="0.1178%" height="15" fill="rgb(234,31,38)"/><text x="95.0148%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (18 samples, 0.01%)</title><rect x="94.8826%" y="181" width="0.0117%" height="15" fill="rgb(221,117,51)"/><text x="95.1326%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (180 samples, 0.12%)</title><rect x="95.0381%" y="133" width="0.1171%" height="15" fill="rgb(212,20,18)"/><text x="95.2881%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (317 samples, 0.21%)</title><rect x="94.9496%" y="149" width="0.2063%" height="15" fill="rgb(245,133,36)"/><text x="95.1996%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (52 samples, 0.03%)</title><rect x="95.1578%" y="149" width="0.0338%" height="15" fill="rgb(212,6,19)"/><text x="95.4078%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (450 samples, 0.29%)</title><rect x="94.9164%" y="165" width="0.2928%" height="15" fill="rgb(218,1,36)"/><text x="95.1664%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.02%)</title><rect x="95.1916%" y="149" width="0.0176%" height="15" fill="rgb(246,84,54)"/><text x="95.4416%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (51 samples, 0.03%)</title><rect x="95.2242%" y="165" width="0.0332%" height="15" fill="rgb(242,110,6)"/><text x="95.4742%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (19 samples, 0.01%)</title><rect x="95.2450%" y="149" width="0.0124%" height="15" fill="rgb(214,47,5)"/><text x="95.4950%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (566 samples, 0.37%)</title><rect x="94.8975%" y="181" width="0.3683%" height="15" fill="rgb(218,159,25)"/><text x="95.1475%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (914 samples, 0.59%)</title><rect x="94.6841%" y="197" width="0.5947%" height="15" fill="rgb(215,211,28)"/><text x="94.9341%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (934 samples, 0.61%)</title><rect x="94.6809%" y="213" width="0.6077%" height="15" fill="rgb(238,59,32)"/><text x="94.9309%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (32 samples, 0.02%)</title><rect x="95.2983%" y="213" width="0.0208%" height="15" fill="rgb(226,82,3)"/><text x="95.5483%" y="223.50"></text></g><g><title>async-redis`__rdl_dealloc (37 samples, 0.02%)</title><rect x="95.3322%" y="213" width="0.0241%" height="15" fill="rgb(240,164,32)"/><text x="95.5822%" y="223.50"></text></g><g><title>async-redis`alloc::collections::btree::search::search_tree (450 samples, 0.29%)</title><rect x="95.3582%" y="213" width="0.2928%" height="15" fill="rgb(232,46,7)"/><text x="95.6082%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (419 samples, 0.27%)</title><rect x="95.7089%" y="197" width="0.2726%" height="15" fill="rgb(229,129,53)"/><text x="95.9589%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (222 samples, 0.14%)</title><rect x="95.8371%" y="181" width="0.1444%" height="15" fill="rgb(234,188,29)"/><text x="96.0871%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (46 samples, 0.03%)</title><rect x="95.9835%" y="197" width="0.0299%" height="15" fill="rgb(246,141,4)"/><text x="96.2335%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (68 samples, 0.04%)</title><rect x="96.0134%" y="197" width="0.0442%" height="15" fill="rgb(229,23,39)"/><text x="96.2634%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.02%)</title><rect x="96.0414%" y="181" width="0.0163%" height="15" fill="rgb(206,12,3)"/><text x="96.2914%" y="191.50"></text></g><g><title>async-redis`async_redis::db::DB::get (616 samples, 0.40%)</title><rect x="95.6588%" y="213" width="0.4008%" height="15" fill="rgb(252,226,20)"/><text x="95.9088%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode (22 samples, 0.01%)</title><rect x="96.0596%" y="213" width="0.0143%" height="15" fill="rgb(216,123,35)"/><text x="96.3096%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (37 samples, 0.02%)</title><rect x="96.0746%" y="213" width="0.0241%" height="15" fill="rgb(212,68,40)"/><text x="96.3246%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (46 samples, 0.03%)</title><rect x="96.1045%" y="213" width="0.0299%" height="15" fill="rgb(254,125,32)"/><text x="96.3545%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (28 samples, 0.02%)</title><rect x="96.1344%" y="213" width="0.0182%" height="15" fill="rgb(253,97,22)"/><text x="96.3844%" y="223.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.01%)</title><rect x="96.3257%" y="197" width="0.0143%" height="15" fill="rgb(241,101,14)"/><text x="96.5757%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (16 samples, 0.01%)</title><rect x="96.3407%" y="197" width="0.0104%" height="15" fill="rgb(238,103,29)"/><text x="96.5907%" y="207.50"></text></g><g><title>async-redis`&lt;T as core::any::Any&gt;::type_id (23 samples, 0.01%)</title><rect x="96.3622%" y="181" width="0.0150%" height="15" fill="rgb(233,195,47)"/><text x="96.6122%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (39 samples, 0.03%)</title><rect x="96.4695%" y="165" width="0.0254%" height="15" fill="rgb(246,218,30)"/><text x="96.7195%" y="175.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (22 samples, 0.01%)</title><rect x="96.4975%" y="165" width="0.0143%" height="15" fill="rgb(219,145,47)"/><text x="96.7475%" y="175.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (81 samples, 0.05%)</title><rect x="96.5118%" y="165" width="0.0527%" height="15" fill="rgb(243,12,26)"/><text x="96.7618%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (28 samples, 0.02%)</title><rect x="96.5463%" y="149" width="0.0182%" height="15" fill="rgb(214,87,16)"/><text x="96.7963%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (26 samples, 0.02%)</title><rect x="96.5476%" y="133" width="0.0169%" height="15" fill="rgb(208,99,42)"/><text x="96.7976%" y="143.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (95 samples, 0.06%)</title><rect x="96.5645%" y="165" width="0.0618%" height="15" fill="rgb(253,99,2)"/><text x="96.8145%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (221 samples, 0.14%)</title><rect x="96.6517%" y="149" width="0.1438%" height="15" fill="rgb(220,168,23)"/><text x="96.9017%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (216 samples, 0.14%)</title><rect x="96.6550%" y="133" width="0.1405%" height="15" fill="rgb(242,38,24)"/><text x="96.9050%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (247 samples, 0.16%)</title><rect x="96.6354%" y="165" width="0.1607%" height="15" fill="rgb(225,182,9)"/><text x="96.8854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (118 samples, 0.08%)</title><rect x="97.0473%" y="133" width="0.0768%" height="15" fill="rgb(243,178,37)"/><text x="97.2973%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (262 samples, 0.17%)</title><rect x="96.9673%" y="149" width="0.1705%" height="15" fill="rgb(232,139,19)"/><text x="97.2173%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.01%)</title><rect x="97.1241%" y="133" width="0.0137%" height="15" fill="rgb(225,201,24)"/><text x="97.3741%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (529 samples, 0.34%)</title><rect x="96.7961%" y="165" width="0.3442%" height="15" fill="rgb(221,47,46)"/><text x="97.0461%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,174 samples, 0.76%)</title><rect x="96.3804%" y="181" width="0.7639%" height="15" fill="rgb(249,23,13)"/><text x="96.6304%" y="191.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (19 samples, 0.01%)</title><rect x="97.1527%" y="181" width="0.0124%" height="15" fill="rgb(219,9,5)"/><text x="97.4027%" y="191.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.01%)</title><rect x="97.1651%" y="181" width="0.0104%" height="15" fill="rgb(254,171,16)"/><text x="97.4151%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (1,287 samples, 0.84%)</title><rect x="96.3530%" y="197" width="0.8374%" height="15" fill="rgb(230,171,20)"/><text x="96.6030%" y="207.50"></text></g><g><title>async-redis`flume::async::_::_&lt;impl core::ops::drop::Drop for flume::async::SendFut&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="97.1904%" y="197" width="0.0169%" height="15" fill="rgb(210,71,41)"/><text x="97.4404%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (28 samples, 0.02%)</title><rect x="97.2145%" y="197" width="0.0182%" height="15" fill="rgb(206,173,20)"/><text x="97.4645%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (26 samples, 0.02%)</title><rect x="97.2158%" y="181" width="0.0169%" height="15" fill="rgb(233,88,34)"/><text x="97.4658%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (17 samples, 0.01%)</title><rect x="97.3974%" y="165" width="0.0111%" height="15" fill="rgb(223,209,46)"/><text x="97.6474%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (38 samples, 0.02%)</title><rect x="97.3843%" y="181" width="0.0247%" height="15" fill="rgb(250,43,18)"/><text x="97.6343%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (31 samples, 0.02%)</title><rect x="97.4117%" y="181" width="0.0202%" height="15" fill="rgb(208,13,10)"/><text x="97.6617%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (29 samples, 0.02%)</title><rect x="97.4130%" y="165" width="0.0189%" height="15" fill="rgb(212,200,36)"/><text x="97.6630%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (113 samples, 0.07%)</title><rect x="97.4318%" y="181" width="0.0735%" height="15" fill="rgb(225,90,30)"/><text x="97.6818%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (420 samples, 0.27%)</title><rect x="97.2327%" y="197" width="0.2733%" height="15" fill="rgb(236,182,39)"/><text x="97.4827%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (2,125 samples, 1.38%)</title><rect x="96.1526%" y="213" width="1.3827%" height="15" fill="rgb(212,144,35)"/><text x="96.4026%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (35 samples, 0.02%)</title><rect x="97.5125%" y="197" width="0.0228%" height="15" fill="rgb(228,63,44)"/><text x="97.7625%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (24 samples, 0.02%)</title><rect x="97.5542%" y="213" width="0.0156%" height="15" fill="rgb(228,109,6)"/><text x="97.8042%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.03%)</title><rect x="97.5704%" y="213" width="0.0260%" height="15" fill="rgb(238,117,24)"/><text x="97.8204%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (114 samples, 0.07%)</title><rect x="97.7038%" y="197" width="0.0742%" height="15" fill="rgb(242,26,26)"/><text x="97.9538%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (47 samples, 0.03%)</title><rect x="97.7780%" y="197" width="0.0306%" height="15" fill="rgb(221,92,48)"/><text x="98.0280%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (307 samples, 0.20%)</title><rect x="97.6244%" y="213" width="0.1998%" height="15" fill="rgb(209,209,32)"/><text x="97.8744%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.02%)</title><rect x="97.8086%" y="197" width="0.0156%" height="15" fill="rgb(221,70,22)"/><text x="98.0586%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (18 samples, 0.01%)</title><rect x="97.8281%" y="213" width="0.0117%" height="15" fill="rgb(248,145,5)"/><text x="98.0781%" y="223.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (542 samples, 0.35%)</title><rect x="97.9654%" y="165" width="0.3527%" height="15" fill="rgb(226,116,26)"/><text x="98.2154%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (689 samples, 0.45%)</title><rect x="97.8704%" y="181" width="0.4483%" height="15" fill="rgb(244,5,17)"/><text x="98.1204%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (34 samples, 0.02%)</title><rect x="98.6590%" y="149" width="0.0221%" height="15" fill="rgb(252,159,33)"/><text x="98.9090%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (445 samples, 0.29%)</title><rect x="98.4274%" y="165" width="0.2895%" height="15" fill="rgb(206,71,0)"/><text x="98.6774%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (55 samples, 0.04%)</title><rect x="98.6811%" y="149" width="0.0358%" height="15" fill="rgb(233,118,54)"/><text x="98.9311%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (641 samples, 0.42%)</title><rect x="98.3187%" y="181" width="0.4171%" height="15" fill="rgb(234,83,48)"/><text x="98.5687%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (29 samples, 0.02%)</title><rect x="98.7169%" y="165" width="0.0189%" height="15" fill="rgb(228,3,54)"/><text x="98.9669%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (26 samples, 0.02%)</title><rect x="98.7358%" y="181" width="0.0169%" height="15" fill="rgb(226,155,13)"/><text x="98.9858%" y="191.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (20 samples, 0.01%)</title><rect x="98.7527%" y="181" width="0.0130%" height="15" fill="rgb(241,28,37)"/><text x="99.0027%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1,407 samples, 0.92%)</title><rect x="97.8613%" y="197" width="0.9155%" height="15" fill="rgb(233,93,10)"/><text x="98.1113%" y="207.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (17 samples, 0.01%)</title><rect x="98.7657%" y="181" width="0.0111%" height="15" fill="rgb(225,113,19)"/><text x="99.0157%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (35 samples, 0.02%)</title><rect x="98.7768%" y="197" width="0.0228%" height="15" fill="rgb(241,2,18)"/><text x="99.0268%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (17 samples, 0.01%)</title><rect x="98.8008%" y="197" width="0.0111%" height="15" fill="rgb(228,207,21)"/><text x="99.0508%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (1,504 samples, 0.98%)</title><rect x="97.8398%" y="213" width="0.9786%" height="15" fill="rgb(213,211,35)"/><text x="98.0898%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (126 samples, 0.08%)</title><rect x="98.8236%" y="213" width="0.0820%" height="15" fill="rgb(209,83,10)"/><text x="99.0736%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.03%)</title><rect x="98.9088%" y="213" width="0.0286%" height="15" fill="rgb(209,164,1)"/><text x="99.1588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (20 samples, 0.01%)</title><rect x="98.9440%" y="213" width="0.0130%" height="15" fill="rgb(213,184,43)"/><text x="99.1940%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (95,935 samples, 62.42%)</title><rect x="36.5717%" y="229" width="62.4211%" height="15" fill="rgb(231,61,34)"/><text x="36.8217%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (55 samples, 0.04%)</title><rect x="98.9570%" y="213" width="0.0358%" height="15" fill="rgb(235,75,3)"/><text x="99.2070%" y="223.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (39 samples, 0.03%)</title><rect x="98.9967%" y="229" width="0.0254%" height="15" fill="rgb(220,106,47)"/><text x="99.2467%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.02%)</title><rect x="99.0292%" y="229" width="0.0208%" height="15" fill="rgb(210,196,33)"/><text x="99.2792%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (54 samples, 0.04%)</title><rect x="99.0663%" y="229" width="0.0351%" height="15" fill="rgb(229,154,42)"/><text x="99.3163%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (16 samples, 0.01%)</title><rect x="99.1014%" y="229" width="0.0104%" height="15" fill="rgb(228,114,26)"/><text x="99.3514%" y="239.50"></text></g><g><title>async-redis`tracing::span::Span::enter (29 samples, 0.02%)</title><rect x="99.1210%" y="229" width="0.0189%" height="15" fill="rgb(208,144,1)"/><text x="99.3710%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (34 samples, 0.02%)</title><rect x="99.1398%" y="229" width="0.0221%" height="15" fill="rgb(239,112,37)"/><text x="99.3898%" y="239.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (96,366 samples, 62.70%)</title><rect x="36.4617%" y="245" width="62.7015%" height="15" fill="rgb(210,96,50)"/><text x="36.7117%" y="255.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (31 samples, 0.02%)</title><rect x="99.1633%" y="245" width="0.0202%" height="15" fill="rgb(222,178,2)"/><text x="99.4133%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (97 samples, 0.06%)</title><rect x="99.1860%" y="245" width="0.0631%" height="15" fill="rgb(226,74,18)"/><text x="99.4360%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (166 samples, 0.11%)</title><rect x="99.2491%" y="245" width="0.1080%" height="15" fill="rgb(225,67,54)"/><text x="99.4991%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (96,892 samples, 63.04%)</title><rect x="36.3147%" y="261" width="63.0438%" height="15" fill="rgb(251,92,32)"/><text x="36.5647%" y="271.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (97,409 samples, 63.38%)</title><rect x="36.0271%" y="277" width="63.3802%" height="15" fill="rgb(228,149,22)"/><text x="36.2771%" y="287.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.03%)</title><rect x="99.3819%" y="261" width="0.0254%" height="15" fill="rgb(243,54,13)"/><text x="99.6319%" y="271.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (44 samples, 0.03%)</title><rect x="99.4092%" y="277" width="0.0286%" height="15" fill="rgb(243,180,28)"/><text x="99.6592%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (44 samples, 0.03%)</title><rect x="99.4378%" y="277" width="0.0286%" height="15" fill="rgb(208,167,24)"/><text x="99.6878%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (88 samples, 0.06%)</title><rect x="99.4665%" y="277" width="0.0573%" height="15" fill="rgb(245,73,45)"/><text x="99.7165%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (32 samples, 0.02%)</title><rect x="99.5387%" y="277" width="0.0208%" height="15" fill="rgb(237,203,48)"/><text x="99.7887%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (103,685 samples, 67.46%)</title><rect x="32.1238%" y="293" width="67.4637%" height="15" fill="rgb(211,197,16)"/><text x="32.3738%" y="303.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (43 samples, 0.03%)</title><rect x="99.5595%" y="277" width="0.0280%" height="15" fill="rgb(243,99,51)"/><text x="99.8095%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (153,567 samples, 99.92%)</title><rect x="0.0429%" y="309" width="99.9200%" height="15" fill="rgb(215,123,29)"/><text x="0.2929%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (577 samples, 0.38%)</title><rect x="99.5875%" y="293" width="0.3754%" height="15" fill="rgb(239,186,37)"/><text x="99.8375%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (41 samples, 0.03%)</title><rect x="99.9727%" y="309" width="0.0267%" height="15" fill="rgb(252,136,39)"/><text x="100.2227%" y="319.50"></text></g><g><title>all (153,690 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(223,213,32)"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (153,680 samples, 99.99%)</title><rect x="0.0065%" y="469" width="99.9935%" height="15" fill="rgb(233,115,5)"/><text x="0.2565%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (153,680 samples, 99.99%)</title><rect x="0.0065%" y="453" width="99.9935%" height="15" fill="rgb(207,226,44)"/><text x="0.2565%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (153,680 samples, 99.99%)</title><rect x="0.0065%" y="437" width="99.9935%" height="15" fill="rgb(208,126,0)"/><text x="0.2565%" y="447.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (153,680 samples, 99.99%)</title><rect x="0.0065%" y="421" width="99.9935%" height="15" fill="rgb(244,66,21)"/><text x="0.2565%" y="431.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (153,680 samples, 99.99%)</title><rect x="0.0065%" y="405" width="99.9935%" height="15" fill="rgb(222,97,12)"/><text x="0.2565%" y="415.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (153,680 samples, 99.99%)</title><rect x="0.0065%" y="389" width="99.9935%" height="15" fill="rgb(219,213,19)"/><text x="0.2565%" y="399.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (153,680 samples, 99.99%)</title><rect x="0.0065%" y="373" width="99.9935%" height="15" fill="rgb(252,169,30)"/><text x="0.2565%" y="383.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (153,680 samples, 99.99%)</title><rect x="0.0065%" y="357" width="99.9935%" height="15" fill="rgb(206,32,51)"/><text x="0.2565%" y="367.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (153,680 samples, 99.99%)</title><rect x="0.0065%" y="341" width="99.9935%" height="15" fill="rgb(250,172,42)"/><text x="0.2565%" y="351.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (153,680 samples, 99.99%)</title><rect x="0.0065%" y="325" width="99.9935%" height="15" fill="rgb(209,34,43)"/><text x="0.2565%" y="335.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g></svg></svg>