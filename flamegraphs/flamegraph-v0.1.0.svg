<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (19 samples, 0.03%)</title><rect x="0.0053%" y="245" width="0.0252%" height="15" fill="rgb(227,0,7)"/><text x="0.2553%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (19 samples, 0.03%)</title><rect x="0.0053%" y="229" width="0.0252%" height="15" fill="rgb(217,0,24)"/><text x="0.2553%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.04%)</title><rect x="0.0053%" y="309" width="0.0385%" height="15" fill="rgb(221,193,54)"/><text x="0.2553%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (29 samples, 0.04%)</title><rect x="0.0053%" y="293" width="0.0385%" height="15" fill="rgb(248,212,6)"/><text x="0.2553%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.04%)</title><rect x="0.0053%" y="277" width="0.0385%" height="15" fill="rgb(208,68,35)"/><text x="0.2553%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.04%)</title><rect x="0.0053%" y="261" width="0.0385%" height="15" fill="rgb(232,128,0)"/><text x="0.2553%" y="271.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.04%)</title><rect x="0.0040%" y="341" width="0.0424%" height="15" fill="rgb(207,160,47)"/><text x="0.2540%" y="351.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.04%)</title><rect x="0.0053%" y="325" width="0.0411%" height="15" fill="rgb(228,23,34)"/><text x="0.2553%" y="335.50"></text></g><g><title>async-redis`0x1 (36 samples, 0.05%)</title><rect x="0.0000%" y="501" width="0.0478%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (36 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0478%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (36 samples, 0.05%)</title><rect x="0.0000%" y="469" width="0.0478%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (36 samples, 0.05%)</title><rect x="0.0000%" y="453" width="0.0478%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (36 samples, 0.05%)</title><rect x="0.0000%" y="437" width="0.0478%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (36 samples, 0.05%)</title><rect x="0.0000%" y="421" width="0.0478%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (36 samples, 0.05%)</title><rect x="0.0000%" y="405" width="0.0478%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (36 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0478%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (36 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0478%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (36 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0478%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (11 samples, 0.01%)</title><rect x="0.0478%" y="325" width="0.0146%" height="15" fill="rgb(221,200,47)"/><text x="0.2978%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (9 samples, 0.01%)</title><rect x="0.0637%" y="325" width="0.0119%" height="15" fill="rgb(226,26,5)"/><text x="0.3137%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (11 samples, 0.01%)</title><rect x="0.7999%" y="309" width="0.0146%" height="15" fill="rgb(249,33,26)"/><text x="1.0499%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (12 samples, 0.02%)</title><rect x="0.8172%" y="309" width="0.0159%" height="15" fill="rgb(235,183,28)"/><text x="1.0672%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.01%)</title><rect x="0.8410%" y="309" width="0.0133%" height="15" fill="rgb(221,5,38)"/><text x="1.0910%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (13 samples, 0.02%)</title><rect x="0.8543%" y="309" width="0.0172%" height="15" fill="rgb(247,18,42)"/><text x="1.1043%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (263 samples, 0.35%)</title><rect x="0.8715%" y="309" width="0.3489%" height="15" fill="rgb(241,131,45)"/><text x="1.1215%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (9 samples, 0.01%)</title><rect x="3.8351%" y="277" width="0.0119%" height="15" fill="rgb(249,31,29)"/><text x="4.0851%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (16 samples, 0.02%)</title><rect x="3.8550%" y="277" width="0.0212%" height="15" fill="rgb(225,111,53)"/><text x="4.1050%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (15 samples, 0.02%)</title><rect x="4.1070%" y="261" width="0.0199%" height="15" fill="rgb(238,160,17)"/><text x="4.3570%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.02%)</title><rect x="4.1269%" y="261" width="0.0226%" height="15" fill="rgb(214,148,48)"/><text x="4.3769%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,577 samples, 3.42%)</title><rect x="4.1495%" y="261" width="3.4185%" height="15" fill="rgb(232,36,49)"/><text x="4.3995%" y="271.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (21 samples, 0.03%)</title><rect x="7.8201%" y="245" width="0.0279%" height="15" fill="rgb(209,103,24)"/><text x="8.0701%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (113 samples, 0.15%)</title><rect x="7.8546%" y="229" width="0.1499%" height="15" fill="rgb(229,88,8)"/><text x="8.1046%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (123 samples, 0.16%)</title><rect x="7.8479%" y="245" width="0.1632%" height="15" fill="rgb(213,181,19)"/><text x="8.0979%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (100 samples, 0.13%)</title><rect x="8.0111%" y="245" width="0.1327%" height="15" fill="rgb(254,191,54)"/><text x="8.2611%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (480 samples, 0.64%)</title><rect x="7.5693%" y="261" width="0.6367%" height="15" fill="rgb(241,83,37)"/><text x="7.8193%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (47 samples, 0.06%)</title><rect x="8.1437%" y="245" width="0.0623%" height="15" fill="rgb(233,36,39)"/><text x="8.3937%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (13 samples, 0.02%)</title><rect x="8.2087%" y="261" width="0.0172%" height="15" fill="rgb(226,3,54)"/><text x="8.4587%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.02%)</title><rect x="8.2260%" y="261" width="0.0159%" height="15" fill="rgb(245,192,40)"/><text x="8.4760%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (3,327 samples, 4.41%)</title><rect x="3.8762%" y="277" width="4.4135%" height="15" fill="rgb(238,167,29)"/><text x="4.1262%" y="287.50">async..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (36 samples, 0.05%)</title><rect x="8.2419%" y="261" width="0.0478%" height="15" fill="rgb(232,182,51)"/><text x="8.4919%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (15 samples, 0.02%)</title><rect x="8.2897%" y="277" width="0.0199%" height="15" fill="rgb(231,60,39)"/><text x="8.5397%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (20 samples, 0.03%)</title><rect x="8.3122%" y="277" width="0.0265%" height="15" fill="rgb(208,69,12)"/><text x="8.5622%" y="287.50"></text></g><g><title>async-redis`mio::event::event::Event::token (22 samples, 0.03%)</title><rect x="8.5364%" y="245" width="0.0292%" height="15" fill="rgb(235,93,37)"/><text x="8.7864%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (17 samples, 0.02%)</title><rect x="8.5656%" y="245" width="0.0226%" height="15" fill="rgb(213,116,39)"/><text x="8.8156%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (10 samples, 0.01%)</title><rect x="8.5881%" y="245" width="0.0133%" height="15" fill="rgb(222,207,29)"/><text x="8.8381%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="9.0511%" y="229" width="0.0172%" height="15" fill="rgb(206,96,30)"/><text x="9.3011%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (17 samples, 0.02%)</title><rect x="9.1068%" y="229" width="0.0226%" height="15" fill="rgb(218,138,4)"/><text x="9.3568%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (71 samples, 0.09%)</title><rect x="9.1294%" y="229" width="0.0942%" height="15" fill="rgb(250,191,14)"/><text x="9.3794%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (30 samples, 0.04%)</title><rect x="9.3655%" y="213" width="0.0398%" height="15" fill="rgb(239,60,40)"/><text x="9.6155%" y="223.50"></text></g><g><title> 32]&gt;::default (30 samples, 0.04%)</title><rect x="9.3655%" y="197" width="0.0398%" height="15" fill="rgb(206,27,48)"/><text x="9.6155%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (79 samples, 0.10%)</title><rect x="9.4053%" y="213" width="0.1048%" height="15" fill="rgb(225,35,8)"/><text x="9.6553%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (18 samples, 0.02%)</title><rect x="9.5141%" y="213" width="0.0239%" height="15" fill="rgb(250,213,24)"/><text x="9.7641%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (22 samples, 0.03%)</title><rect x="9.5539%" y="197" width="0.0292%" height="15" fill="rgb(247,123,22)"/><text x="9.8039%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (80 samples, 0.11%)</title><rect x="9.5831%" y="197" width="0.1061%" height="15" fill="rgb(231,138,38)"/><text x="9.8331%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (23 samples, 0.03%)</title><rect x="9.7184%" y="165" width="0.0305%" height="15" fill="rgb(231,145,46)"/><text x="9.9684%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (14 samples, 0.02%)</title><rect x="9.7489%" y="165" width="0.0186%" height="15" fill="rgb(251,118,11)"/><text x="9.9989%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (81 samples, 0.11%)</title><rect x="9.6945%" y="181" width="0.1075%" height="15" fill="rgb(217,147,25)"/><text x="9.9445%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (26 samples, 0.03%)</title><rect x="9.7675%" y="165" width="0.0345%" height="15" fill="rgb(247,81,37)"/><text x="10.0175%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (8 samples, 0.01%)</title><rect x="9.8019%" y="181" width="0.0106%" height="15" fill="rgb(209,12,38)"/><text x="10.0519%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (210 samples, 0.28%)</title><rect x="9.5380%" y="213" width="0.2786%" height="15" fill="rgb(227,1,9)"/><text x="9.7880%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (96 samples, 0.13%)</title><rect x="9.6892%" y="197" width="0.1273%" height="15" fill="rgb(248,47,43)"/><text x="9.9392%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (448 samples, 0.59%)</title><rect x="9.2236%" y="229" width="0.5943%" height="15" fill="rgb(221,10,30)"/><text x="9.4736%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (17 samples, 0.02%)</title><rect x="9.8179%" y="229" width="0.0226%" height="15" fill="rgb(210,229,1)"/><text x="10.0679%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,854 samples, 5.11%)</title><rect x="8.6014%" y="245" width="5.1126%" height="15" fill="rgb(222,148,37)"/><text x="8.8514%" y="255.50">async-..</text></g><g><title>libsystem_kernel.dylib`kevent (2,920 samples, 3.87%)</title><rect x="9.8404%" y="229" width="3.8736%" height="15" fill="rgb(234,67,33)"/><text x="10.0904%" y="239.50">libs..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (12 samples, 0.02%)</title><rect x="13.7140%" y="245" width="0.0159%" height="15" fill="rgb(247,98,35)"/><text x="13.9640%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (22 samples, 0.03%)</title><rect x="13.7750%" y="213" width="0.0292%" height="15" fill="rgb(247,138,52)"/><text x="14.0250%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (66 samples, 0.09%)</title><rect x="13.8042%" y="213" width="0.0876%" height="15" fill="rgb(213,79,30)"/><text x="14.0542%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (133 samples, 0.18%)</title><rect x="13.7564%" y="229" width="0.1764%" height="15" fill="rgb(246,177,23)"/><text x="14.0064%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.04%)</title><rect x="13.8917%" y="213" width="0.0411%" height="15" fill="rgb(230,62,27)"/><text x="14.1417%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (149 samples, 0.20%)</title><rect x="13.7365%" y="245" width="0.1977%" height="15" fill="rgb(216,154,8)"/><text x="13.9865%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (4,167 samples, 5.53%)</title><rect x="8.4608%" y="261" width="5.5278%" height="15" fill="rgb(244,35,45)"/><text x="8.7108%" y="271.50">async-r..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (41 samples, 0.05%)</title><rect x="13.9342%" y="245" width="0.0544%" height="15" fill="rgb(251,115,12)"/><text x="14.1842%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="13.9886%" y="261" width="0.0133%" height="15" fill="rgb(240,54,50)"/><text x="14.2386%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (65 samples, 0.09%)</title><rect x="14.0018%" y="261" width="0.0862%" height="15" fill="rgb(233,84,52)"/><text x="14.2518%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (21 samples, 0.03%)</title><rect x="14.0881%" y="261" width="0.0279%" height="15" fill="rgb(207,117,47)"/><text x="14.3381%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (22 samples, 0.03%)</title><rect x="14.1159%" y="261" width="0.0292%" height="15" fill="rgb(249,43,39)"/><text x="14.3659%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (12 samples, 0.02%)</title><rect x="14.1451%" y="261" width="0.0159%" height="15" fill="rgb(209,38,44)"/><text x="14.3951%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (88 samples, 0.12%)</title><rect x="14.2486%" y="245" width="0.1167%" height="15" fill="rgb(236,212,23)"/><text x="14.4986%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (24 samples, 0.03%)</title><rect x="14.3653%" y="245" width="0.0318%" height="15" fill="rgb(242,79,21)"/><text x="14.6153%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (11 samples, 0.01%)</title><rect x="14.3826%" y="229" width="0.0146%" height="15" fill="rgb(211,96,35)"/><text x="14.6326%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (49 samples, 0.07%)</title><rect x="14.3971%" y="245" width="0.0650%" height="15" fill="rgb(253,215,40)"/><text x="14.6471%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (30 samples, 0.04%)</title><rect x="14.4223%" y="229" width="0.0398%" height="15" fill="rgb(211,81,21)"/><text x="14.6723%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (246 samples, 0.33%)</title><rect x="14.1610%" y="261" width="0.3263%" height="15" fill="rgb(208,190,38)"/><text x="14.4110%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (19 samples, 0.03%)</title><rect x="14.4621%" y="245" width="0.0252%" height="15" fill="rgb(235,213,38)"/><text x="14.7121%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (65 samples, 0.09%)</title><rect x="14.4874%" y="261" width="0.0862%" height="15" fill="rgb(237,122,38)"/><text x="14.7374%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (48 samples, 0.06%)</title><rect x="14.5099%" y="245" width="0.0637%" height="15" fill="rgb(244,218,35)"/><text x="14.7599%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,769 samples, 6.33%)</title><rect x="8.3388%" y="277" width="6.3264%" height="15" fill="rgb(240,68,47)"/><text x="8.5888%" y="287.50">async-re..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (59 samples, 0.08%)</title><rect x="14.5868%" y="261" width="0.0783%" height="15" fill="rgb(210,16,53)"/><text x="14.8368%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.03%)</title><rect x="14.6678%" y="277" width="0.0305%" height="15" fill="rgb(235,124,12)"/><text x="14.9178%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,507 samples, 5.98%)</title><rect x="14.6983%" y="277" width="5.9788%" height="15" fill="rgb(224,169,11)"/><text x="14.9483%" y="287.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (32 samples, 0.04%)</title><rect x="20.6771%" y="277" width="0.0424%" height="15" fill="rgb(250,166,2)"/><text x="20.9271%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (149 samples, 0.20%)</title><rect x="20.7288%" y="277" width="0.1977%" height="15" fill="rgb(242,216,29)"/><text x="20.9788%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (13,387 samples, 17.76%)</title><rect x="3.2302%" y="293" width="17.7586%" height="15" fill="rgb(230,116,27)"/><text x="3.4802%" y="303.50">async-redis`&lt;tokio::runtime:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (44 samples, 0.06%)</title><rect x="20.9304%" y="277" width="0.0584%" height="15" fill="rgb(228,99,48)"/><text x="21.1804%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (8 samples, 0.01%)</title><rect x="21.0392%" y="197" width="0.0106%" height="15" fill="rgb(253,11,6)"/><text x="21.2892%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (28 samples, 0.04%)</title><rect x="21.0220%" y="229" width="0.0371%" height="15" fill="rgb(247,143,39)"/><text x="21.2720%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (16 samples, 0.02%)</title><rect x="21.0379%" y="213" width="0.0212%" height="15" fill="rgb(236,97,10)"/><text x="21.2879%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (190 samples, 0.25%)</title><rect x="21.0047%" y="245" width="0.2520%" height="15" fill="rgb(233,208,19)"/><text x="21.2547%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (149 samples, 0.20%)</title><rect x="21.0591%" y="229" width="0.1977%" height="15" fill="rgb(216,164,2)"/><text x="21.3091%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (200 samples, 0.27%)</title><rect x="21.0034%" y="261" width="0.2653%" height="15" fill="rgb(220,129,5)"/><text x="21.2534%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (8 samples, 0.01%)</title><rect x="21.2581%" y="245" width="0.0106%" height="15" fill="rgb(242,17,10)"/><text x="21.5081%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (9 samples, 0.01%)</title><rect x="21.2767%" y="261" width="0.0119%" height="15" fill="rgb(242,107,0)"/><text x="21.5267%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (219 samples, 0.29%)</title><rect x="21.0008%" y="277" width="0.2905%" height="15" fill="rgb(251,28,31)"/><text x="21.2508%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (231 samples, 0.31%)</title><rect x="20.9888%" y="293" width="0.3064%" height="15" fill="rgb(233,223,10)"/><text x="21.2388%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (10 samples, 0.01%)</title><rect x="21.2953%" y="293" width="0.0133%" height="15" fill="rgb(215,21,27)"/><text x="21.5453%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (9 samples, 0.01%)</title><rect x="21.3231%" y="277" width="0.0119%" height="15" fill="rgb(232,23,21)"/><text x="21.5731%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (134 samples, 0.18%)</title><rect x="21.3350%" y="277" width="0.1778%" height="15" fill="rgb(244,5,23)"/><text x="21.5850%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (167 samples, 0.22%)</title><rect x="21.3152%" y="293" width="0.2215%" height="15" fill="rgb(226,81,46)"/><text x="21.5652%" y="303.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (9 samples, 0.01%)</title><rect x="21.5367%" y="293" width="0.0119%" height="15" fill="rgb(247,70,30)"/><text x="21.7867%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (15 samples, 0.02%)</title><rect x="21.5500%" y="293" width="0.0199%" height="15" fill="rgb(212,68,19)"/><text x="21.8000%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (8 samples, 0.01%)</title><rect x="21.5698%" y="293" width="0.0106%" height="15" fill="rgb(240,187,13)"/><text x="21.8198%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (46 samples, 0.06%)</title><rect x="21.5805%" y="293" width="0.0610%" height="15" fill="rgb(223,113,26)"/><text x="21.8305%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (15,400 samples, 20.43%)</title><rect x="1.2204%" y="309" width="20.4290%" height="15" fill="rgb(206,192,2)"/><text x="1.4704%" y="319.50">async-redis`tokio::runtime::thre..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (62 samples, 0.08%)</title><rect x="21.7662%" y="293" width="0.0822%" height="15" fill="rgb(241,108,4)"/><text x="22.0162%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (59 samples, 0.08%)</title><rect x="21.7702%" y="277" width="0.0783%" height="15" fill="rgb(247,173,49)"/><text x="22.0202%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (47 samples, 0.06%)</title><rect x="21.8484%" y="293" width="0.0623%" height="15" fill="rgb(224,114,35)"/><text x="22.0984%" y="303.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (9 samples, 0.01%)</title><rect x="21.9665%" y="277" width="0.0119%" height="15" fill="rgb(245,159,27)"/><text x="22.2165%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (54 samples, 0.07%)</title><rect x="21.9798%" y="277" width="0.0716%" height="15" fill="rgb(245,172,44)"/><text x="22.2298%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,277 samples, 1.69%)</title><rect x="22.0514%" y="277" width="1.6940%" height="15" fill="rgb(236,23,11)"/><text x="22.3014%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16 samples, 0.02%)</title><rect x="23.7454%" y="277" width="0.0212%" height="15" fill="rgb(205,117,38)"/><text x="23.9954%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (61 samples, 0.08%)</title><rect x="23.7852%" y="277" width="0.0809%" height="15" fill="rgb(237,72,25)"/><text x="24.0352%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (60 samples, 0.08%)</title><rect x="23.7865%" y="261" width="0.0796%" height="15" fill="rgb(244,70,9)"/><text x="24.0365%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (39 samples, 0.05%)</title><rect x="23.8661%" y="277" width="0.0517%" height="15" fill="rgb(217,125,39)"/><text x="24.1161%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (8 samples, 0.01%)</title><rect x="23.9072%" y="261" width="0.0106%" height="15" fill="rgb(235,36,10)"/><text x="24.1572%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (26 samples, 0.03%)</title><rect x="23.9179%" y="277" width="0.0345%" height="15" fill="rgb(251,123,47)"/><text x="24.1679%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,538 samples, 2.04%)</title><rect x="21.9174%" y="293" width="2.0402%" height="15" fill="rgb(221,13,13)"/><text x="22.1674%" y="303.50">a..</text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (14 samples, 0.02%)</title><rect x="23.9630%" y="293" width="0.0186%" height="15" fill="rgb(238,131,9)"/><text x="24.2130%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17 samples, 0.02%)</title><rect x="24.1195%" y="277" width="0.0226%" height="15" fill="rgb(211,50,8)"/><text x="24.3695%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.03%)</title><rect x="24.2084%" y="261" width="0.0279%" height="15" fill="rgb(245,182,24)"/><text x="24.4584%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.04%)</title><rect x="24.6395%" y="197" width="0.0398%" height="15" fill="rgb(242,14,37)"/><text x="24.8895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.03%)</title><rect x="24.6475%" y="181" width="0.0318%" height="15" fill="rgb(246,228,12)"/><text x="24.8975%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.03%)</title><rect x="24.6488%" y="165" width="0.0305%" height="15" fill="rgb(213,55,15)"/><text x="24.8988%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.05%)</title><rect x="24.6382%" y="213" width="0.0464%" height="15" fill="rgb(209,9,3)"/><text x="24.8882%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.06%)</title><rect x="24.6846%" y="213" width="0.0570%" height="15" fill="rgb(230,59,30)"/><text x="24.9346%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (20 samples, 0.03%)</title><rect x="24.7151%" y="197" width="0.0265%" height="15" fill="rgb(209,121,21)"/><text x="24.9651%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.03%)</title><rect x="24.7483%" y="213" width="0.0292%" height="15" fill="rgb(220,109,13)"/><text x="24.9983%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (13 samples, 0.02%)</title><rect x="25.1330%" y="181" width="0.0172%" height="15" fill="rgb(232,18,1)"/><text x="25.3830%" y="191.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="25.7273%" y="165" width="0.0106%" height="15" fill="rgb(215,41,42)"/><text x="25.9773%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (25 samples, 0.03%)</title><rect x="25.7379%" y="165" width="0.0332%" height="15" fill="rgb(224,123,36)"/><text x="25.9879%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (32 samples, 0.04%)</title><rect x="26.0258%" y="133" width="0.0424%" height="15" fill="rgb(240,125,3)"/><text x="26.2758%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (28 samples, 0.04%)</title><rect x="26.0682%" y="133" width="0.0371%" height="15" fill="rgb(205,98,50)"/><text x="26.3182%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (12 samples, 0.02%)</title><rect x="26.4065%" y="85" width="0.0159%" height="15" fill="rgb(205,185,37)"/><text x="26.6565%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (32 samples, 0.04%)</title><rect x="26.4251%" y="85" width="0.0424%" height="15" fill="rgb(238,207,15)"/><text x="26.6751%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (163 samples, 0.22%)</title><rect x="26.2897%" y="101" width="0.2162%" height="15" fill="rgb(213,199,42)"/><text x="26.5397%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (29 samples, 0.04%)</title><rect x="26.4675%" y="85" width="0.0385%" height="15" fill="rgb(235,201,11)"/><text x="26.7175%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (15 samples, 0.02%)</title><rect x="26.5060%" y="101" width="0.0199%" height="15" fill="rgb(207,46,11)"/><text x="26.7560%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (9 samples, 0.01%)</title><rect x="26.5272%" y="101" width="0.0119%" height="15" fill="rgb(241,35,35)"/><text x="26.7772%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (17 samples, 0.02%)</title><rect x="26.5391%" y="101" width="0.0226%" height="15" fill="rgb(243,32,47)"/><text x="26.7891%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (14 samples, 0.02%)</title><rect x="26.5617%" y="101" width="0.0186%" height="15" fill="rgb(247,202,23)"/><text x="26.8117%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17,350 samples, 23.02%)</title><rect x="26.5803%" y="101" width="23.0158%" height="15" fill="rgb(219,102,11)"/><text x="26.8303%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (17,640 samples, 23.40%)</title><rect x="26.2301%" y="117" width="23.4005%" height="15" fill="rgb(243,110,44)"/><text x="26.4801%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::..</text></g><g><title>libsystem_kernel.dylib`cerror (26 samples, 0.03%)</title><rect x="49.5961%" y="101" width="0.0345%" height="15" fill="rgb(222,74,54)"/><text x="49.8461%" y="111.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (12 samples, 0.02%)</title><rect x="49.6372%" y="117" width="0.0159%" height="15" fill="rgb(216,99,12)"/><text x="49.8872%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (23 samples, 0.03%)</title><rect x="49.6531%" y="117" width="0.0305%" height="15" fill="rgb(226,22,26)"/><text x="49.9031%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (37 samples, 0.05%)</title><rect x="49.9396%" y="101" width="0.0491%" height="15" fill="rgb(217,163,10)"/><text x="50.1896%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.01%)</title><rect x="50.0657%" y="85" width="0.0119%" height="15" fill="rgb(213,25,53)"/><text x="50.3157%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (80 samples, 0.11%)</title><rect x="49.9887%" y="101" width="0.1061%" height="15" fill="rgb(252,105,26)"/><text x="50.2387%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="50.0776%" y="85" width="0.0172%" height="15" fill="rgb(220,39,43)"/><text x="50.3276%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (11 samples, 0.01%)</title><rect x="50.0803%" y="69" width="0.0146%" height="15" fill="rgb(229,68,48)"/><text x="50.3303%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (9 samples, 0.01%)</title><rect x="50.0948%" y="101" width="0.0119%" height="15" fill="rgb(252,8,32)"/><text x="50.3448%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (379 samples, 0.50%)</title><rect x="49.6836%" y="117" width="0.5028%" height="15" fill="rgb(223,20,43)"/><text x="49.9336%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (60 samples, 0.08%)</title><rect x="50.1068%" y="101" width="0.0796%" height="15" fill="rgb(229,81,49)"/><text x="50.3568%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (18,157 samples, 24.09%)</title><rect x="26.1054%" y="133" width="24.0863%" height="15" fill="rgb(236,28,36)"/><text x="26.3554%" y="143.50">async-redis`tokio::io::driver::registr..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18,309 samples, 24.29%)</title><rect x="25.9143%" y="149" width="24.2880%" height="15" fill="rgb(249,185,26)"/><text x="26.1643%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::T..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (8 samples, 0.01%)</title><rect x="50.1917%" y="133" width="0.0106%" height="15" fill="rgb(249,174,33)"/><text x="50.4417%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="50.2156%" y="101" width="0.0172%" height="15" fill="rgb(233,201,37)"/><text x="50.4656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.02%)</title><rect x="50.2169%" y="85" width="0.0159%" height="15" fill="rgb(221,78,26)"/><text x="50.4669%" y="95.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.02%)</title><rect x="50.2156%" y="133" width="0.0186%" height="15" fill="rgb(250,127,30)"/><text x="50.4656%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.02%)</title><rect x="50.2156%" y="117" width="0.0186%" height="15" fill="rgb(230,49,44)"/><text x="50.4656%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (556 samples, 0.74%)</title><rect x="50.2036%" y="149" width="0.7376%" height="15" fill="rgb(229,67,23)"/><text x="50.4536%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (533 samples, 0.71%)</title><rect x="50.2341%" y="133" width="0.7071%" height="15" fill="rgb(249,83,47)"/><text x="50.4841%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (20 samples, 0.03%)</title><rect x="50.9412%" y="149" width="0.0265%" height="15" fill="rgb(215,43,3)"/><text x="51.1912%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (19,001 samples, 25.21%)</title><rect x="25.7711%" y="165" width="25.2059%" height="15" fill="rgb(238,154,13)"/><text x="26.0211%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (26 samples, 0.03%)</title><rect x="50.9770%" y="165" width="0.0345%" height="15" fill="rgb(219,56,2)"/><text x="51.2270%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.02%)</title><rect x="51.0221%" y="165" width="0.0186%" height="15" fill="rgb(233,0,4)"/><text x="51.2721%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.08%)</title><rect x="51.3790%" y="149" width="0.0769%" height="15" fill="rgb(235,30,7)"/><text x="51.6290%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (23 samples, 0.03%)</title><rect x="51.4254%" y="133" width="0.0305%" height="15" fill="rgb(250,79,13)"/><text x="51.6754%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (10 samples, 0.01%)</title><rect x="51.4705%" y="149" width="0.0133%" height="15" fill="rgb(211,146,34)"/><text x="51.7205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.05%)</title><rect x="51.6496%" y="85" width="0.0478%" height="15" fill="rgb(228,22,38)"/><text x="51.8996%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (163 samples, 0.22%)</title><rect x="51.5302%" y="133" width="0.2162%" height="15" fill="rgb(235,168,5)"/><text x="51.7802%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (140 samples, 0.19%)</title><rect x="51.5607%" y="117" width="0.1857%" height="15" fill="rgb(221,155,16)"/><text x="51.8107%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (132 samples, 0.18%)</title><rect x="51.5713%" y="101" width="0.1751%" height="15" fill="rgb(215,215,53)"/><text x="51.8213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.05%)</title><rect x="51.6973%" y="85" width="0.0491%" height="15" fill="rgb(223,4,10)"/><text x="51.9473%" y="95.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (196 samples, 0.26%)</title><rect x="51.4891%" y="149" width="0.2600%" height="15" fill="rgb(234,103,6)"/><text x="51.7391%" y="159.50"></text></g><g><title>async-redis`__rdl_dealloc (9 samples, 0.01%)</title><rect x="51.9162%" y="133" width="0.0119%" height="15" fill="rgb(227,97,0)"/><text x="52.1662%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (140 samples, 0.19%)</title><rect x="68.3510%" y="117" width="0.1857%" height="15" fill="rgb(234,150,53)"/><text x="68.6010%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (102 samples, 0.14%)</title><rect x="68.4014%" y="101" width="0.1353%" height="15" fill="rgb(228,201,54)"/><text x="68.6514%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (12,535 samples, 16.63%)</title><rect x="51.9374%" y="133" width="16.6284%" height="15" fill="rgb(222,22,37)"/><text x="52.1874%" y="143.50">async-redis`async_redis::p..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (22 samples, 0.03%)</title><rect x="68.5367%" y="117" width="0.0292%" height="15" fill="rgb(237,53,32)"/><text x="68.7867%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (38 samples, 0.05%)</title><rect x="68.6282%" y="117" width="0.0504%" height="15" fill="rgb(233,25,53)"/><text x="68.8782%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (32 samples, 0.04%)</title><rect x="68.6786%" y="117" width="0.0424%" height="15" fill="rgb(210,40,34)"/><text x="68.9286%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (222 samples, 0.29%)</title><rect x="68.7542%" y="101" width="0.2945%" height="15" fill="rgb(241,220,44)"/><text x="69.0042%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (213 samples, 0.28%)</title><rect x="68.7662%" y="85" width="0.2826%" height="15" fill="rgb(235,28,35)"/><text x="69.0162%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (248 samples, 0.33%)</title><rect x="68.7211%" y="117" width="0.3290%" height="15" fill="rgb(210,56,17)"/><text x="68.9711%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="69.0501%" y="117" width="0.0119%" height="15" fill="rgb(224,130,29)"/><text x="69.3001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (75 samples, 0.10%)</title><rect x="69.1177%" y="101" width="0.0995%" height="15" fill="rgb(235,212,8)"/><text x="69.3677%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (67 samples, 0.09%)</title><rect x="69.1283%" y="85" width="0.0889%" height="15" fill="rgb(223,33,50)"/><text x="69.3783%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (120 samples, 0.16%)</title><rect x="69.0620%" y="117" width="0.1592%" height="15" fill="rgb(219,149,13)"/><text x="69.3120%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (133 samples, 0.18%)</title><rect x="69.2212%" y="117" width="0.1764%" height="15" fill="rgb(250,156,29)"/><text x="69.4712%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="69.4056%" y="117" width="0.0159%" height="15" fill="rgb(216,193,19)"/><text x="69.6556%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (661 samples, 0.88%)</title><rect x="68.5659%" y="133" width="0.8769%" height="15" fill="rgb(216,135,14)"/><text x="68.8159%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.02%)</title><rect x="69.4215%" y="117" width="0.0212%" height="15" fill="rgb(241,47,5)"/><text x="69.6715%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (12 samples, 0.02%)</title><rect x="69.4427%" y="133" width="0.0159%" height="15" fill="rgb(233,42,35)"/><text x="69.6927%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (68 samples, 0.09%)</title><rect x="69.4586%" y="133" width="0.0902%" height="15" fill="rgb(231,13,6)"/><text x="69.7086%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (54 samples, 0.07%)</title><rect x="69.4772%" y="117" width="0.0716%" height="15" fill="rgb(207,181,40)"/><text x="69.7272%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (10 samples, 0.01%)</title><rect x="69.5488%" y="133" width="0.0133%" height="15" fill="rgb(254,173,49)"/><text x="69.7988%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (138 samples, 0.18%)</title><rect x="69.5621%" y="133" width="0.1831%" height="15" fill="rgb(221,1,38)"/><text x="69.8121%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.01%)</title><rect x="69.7611%" y="133" width="0.0133%" height="15" fill="rgb(206,124,46)"/><text x="70.0111%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.02%)</title><rect x="69.7783%" y="133" width="0.0159%" height="15" fill="rgb(249,21,11)"/><text x="70.0283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="69.7943%" y="133" width="0.0106%" height="15" fill="rgb(222,201,40)"/><text x="70.0443%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (13,615 samples, 18.06%)</title><rect x="51.7491%" y="149" width="18.0611%" height="15" fill="rgb(235,61,29)"/><text x="51.9991%" y="159.50">async-redis`async_redis::pro..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (32 samples, 0.04%)</title><rect x="69.8539%" y="133" width="0.0424%" height="15" fill="rgb(219,207,3)"/><text x="70.1039%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (19 samples, 0.03%)</title><rect x="69.8712%" y="117" width="0.0252%" height="15" fill="rgb(222,56,46)"/><text x="70.1212%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (75 samples, 0.10%)</title><rect x="69.8102%" y="149" width="0.0995%" height="15" fill="rgb(239,76,54)"/><text x="70.0602%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (10 samples, 0.01%)</title><rect x="69.8964%" y="133" width="0.0133%" height="15" fill="rgb(231,124,27)"/><text x="70.1464%" y="143.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (34 samples, 0.05%)</title><rect x="69.9800%" y="133" width="0.0451%" height="15" fill="rgb(249,195,6)"/><text x="70.2300%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (50 samples, 0.07%)</title><rect x="70.0251%" y="133" width="0.0663%" height="15" fill="rgb(237,174,47)"/><text x="70.2751%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (174 samples, 0.23%)</title><rect x="70.0914%" y="133" width="0.2308%" height="15" fill="rgb(206,201,31)"/><text x="70.3414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (158 samples, 0.21%)</title><rect x="70.1126%" y="117" width="0.2096%" height="15" fill="rgb(231,57,52)"/><text x="70.3626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (152 samples, 0.20%)</title><rect x="70.1206%" y="101" width="0.2016%" height="15" fill="rgb(248,177,22)"/><text x="70.3706%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (85 samples, 0.11%)</title><rect x="70.2095%" y="85" width="0.1128%" height="15" fill="rgb(215,211,37)"/><text x="70.4595%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="70.3103%" y="69" width="0.0119%" height="15" fill="rgb(241,128,51)"/><text x="70.5603%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (70 samples, 0.09%)</title><rect x="70.3647%" y="117" width="0.0929%" height="15" fill="rgb(227,165,31)"/><text x="70.6147%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (63 samples, 0.08%)</title><rect x="70.3740%" y="101" width="0.0836%" height="15" fill="rgb(228,167,24)"/><text x="70.6240%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.13%)</title><rect x="70.3315%" y="133" width="0.1340%" height="15" fill="rgb(228,143,12)"/><text x="70.5815%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (128 samples, 0.17%)</title><rect x="70.4655%" y="133" width="0.1698%" height="15" fill="rgb(249,149,8)"/><text x="70.7155%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.09%)</title><rect x="70.5491%" y="117" width="0.0862%" height="15" fill="rgb(243,35,44)"/><text x="70.7991%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.04%)</title><rect x="70.5928%" y="101" width="0.0424%" height="15" fill="rgb(246,89,9)"/><text x="70.8428%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (581 samples, 0.77%)</title><rect x="69.9097%" y="149" width="0.7707%" height="15" fill="rgb(233,213,13)"/><text x="70.1597%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.03%)</title><rect x="70.6499%" y="133" width="0.0305%" height="15" fill="rgb(233,141,41)"/><text x="70.8999%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (36 samples, 0.05%)</title><rect x="70.6804%" y="149" width="0.0478%" height="15" fill="rgb(239,167,4)"/><text x="70.9304%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.04%)</title><rect x="71.0518%" y="53" width="0.0438%" height="15" fill="rgb(209,217,16)"/><text x="71.3018%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (305 samples, 0.40%)</title><rect x="70.8847%" y="85" width="0.4046%" height="15" fill="rgb(219,88,35)"/><text x="71.1347%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (297 samples, 0.39%)</title><rect x="70.8953%" y="69" width="0.3940%" height="15" fill="rgb(220,193,23)"/><text x="71.1453%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (139 samples, 0.18%)</title><rect x="71.1049%" y="53" width="0.1844%" height="15" fill="rgb(230,90,52)"/><text x="71.3549%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (49 samples, 0.07%)</title><rect x="71.2243%" y="37" width="0.0650%" height="15" fill="rgb(252,106,19)"/><text x="71.4743%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (361 samples, 0.48%)</title><rect x="70.8343%" y="101" width="0.4789%" height="15" fill="rgb(206,74,20)"/><text x="71.0843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.02%)</title><rect x="71.2893%" y="85" width="0.0239%" height="15" fill="rgb(230,138,44)"/><text x="71.5393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="71.3132%" y="101" width="0.0199%" height="15" fill="rgb(235,182,43)"/><text x="71.5632%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (421 samples, 0.56%)</title><rect x="70.7786%" y="117" width="0.5585%" height="15" fill="rgb(242,16,51)"/><text x="71.0286%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (461 samples, 0.61%)</title><rect x="70.7494%" y="133" width="0.6115%" height="15" fill="rgb(248,9,4)"/><text x="70.9994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.01%)</title><rect x="71.3463%" y="117" width="0.0146%" height="15" fill="rgb(210,31,22)"/><text x="71.5963%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (524 samples, 0.70%)</title><rect x="70.7281%" y="149" width="0.6951%" height="15" fill="rgb(239,54,39)"/><text x="70.9781%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (47 samples, 0.06%)</title><rect x="71.3609%" y="133" width="0.0623%" height="15" fill="rgb(230,99,41)"/><text x="71.6109%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (11 samples, 0.01%)</title><rect x="71.4233%" y="149" width="0.0146%" height="15" fill="rgb(253,106,12)"/><text x="71.6733%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (63 samples, 0.08%)</title><rect x="71.4379%" y="149" width="0.0836%" height="15" fill="rgb(213,46,41)"/><text x="71.6879%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (20 samples, 0.03%)</title><rect x="71.5214%" y="149" width="0.0265%" height="15" fill="rgb(215,133,35)"/><text x="71.7714%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (28 samples, 0.04%)</title><rect x="71.5480%" y="149" width="0.0371%" height="15" fill="rgb(213,28,5)"/><text x="71.7980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (64 samples, 0.08%)</title><rect x="71.5970%" y="149" width="0.0849%" height="15" fill="rgb(215,77,49)"/><text x="71.8470%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.04%)</title><rect x="71.6461%" y="133" width="0.0358%" height="15" fill="rgb(248,100,22)"/><text x="71.8961%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.03%)</title><rect x="71.6501%" y="117" width="0.0318%" height="15" fill="rgb(208,67,9)"/><text x="71.9001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.04%)</title><rect x="71.7722%" y="117" width="0.0438%" height="15" fill="rgb(219,133,21)"/><text x="72.0222%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (110 samples, 0.15%)</title><rect x="71.6819%" y="149" width="0.1459%" height="15" fill="rgb(246,46,29)"/><text x="71.9319%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (75 samples, 0.10%)</title><rect x="71.7284%" y="133" width="0.0995%" height="15" fill="rgb(246,185,52)"/><text x="71.9784%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="71.8159%" y="117" width="0.0119%" height="15" fill="rgb(252,136,11)"/><text x="72.0659%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (15,690 samples, 20.81%)</title><rect x="51.0407%" y="165" width="20.8137%" height="15" fill="rgb(219,138,53)"/><text x="51.2907%" y="175.50">async-redis`async_redis::protocol..</text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (15 samples, 0.02%)</title><rect x="71.8624%" y="165" width="0.0199%" height="15" fill="rgb(211,51,23)"/><text x="72.1124%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (11 samples, 0.01%)</title><rect x="71.8823%" y="165" width="0.0146%" height="15" fill="rgb(247,221,28)"/><text x="72.1323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (57 samples, 0.08%)</title><rect x="71.9924%" y="133" width="0.0756%" height="15" fill="rgb(251,222,45)"/><text x="72.2424%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.05%)</title><rect x="72.0680%" y="133" width="0.0491%" height="15" fill="rgb(217,162,53)"/><text x="72.3180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (33 samples, 0.04%)</title><rect x="72.0733%" y="117" width="0.0438%" height="15" fill="rgb(229,93,14)"/><text x="72.3233%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (120 samples, 0.16%)</title><rect x="71.9592%" y="149" width="0.1592%" height="15" fill="rgb(209,67,49)"/><text x="72.2092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (55 samples, 0.07%)</title><rect x="72.1184%" y="149" width="0.0730%" height="15" fill="rgb(213,87,29)"/><text x="72.3684%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (24 samples, 0.03%)</title><rect x="72.1595%" y="133" width="0.0318%" height="15" fill="rgb(205,151,52)"/><text x="72.4095%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (229 samples, 0.30%)</title><rect x="71.8968%" y="165" width="0.3038%" height="15" fill="rgb(253,215,39)"/><text x="72.1468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (118 samples, 0.16%)</title><rect x="72.5575%" y="117" width="0.1565%" height="15" fill="rgb(221,220,41)"/><text x="72.8075%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (374 samples, 0.50%)</title><rect x="72.2192%" y="165" width="0.4961%" height="15" fill="rgb(218,133,21)"/><text x="72.4692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (271 samples, 0.36%)</title><rect x="72.3558%" y="149" width="0.3595%" height="15" fill="rgb(221,193,43)"/><text x="72.6058%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (259 samples, 0.34%)</title><rect x="72.3718%" y="133" width="0.3436%" height="15" fill="rgb(240,128,52)"/><text x="72.6218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="72.7180%" y="165" width="0.0159%" height="15" fill="rgb(253,114,12)"/><text x="72.9680%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.07%)</title><rect x="72.7604%" y="149" width="0.0677%" height="15" fill="rgb(215,223,47)"/><text x="73.0104%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (48 samples, 0.06%)</title><rect x="72.7644%" y="133" width="0.0637%" height="15" fill="rgb(248,225,23)"/><text x="73.0144%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.10%)</title><rect x="72.7339%" y="165" width="0.0955%" height="15" fill="rgb(250,108,0)"/><text x="72.9839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.05%)</title><rect x="72.8997%" y="133" width="0.0517%" height="15" fill="rgb(228,208,7)"/><text x="73.1497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (93 samples, 0.12%)</title><rect x="72.8294%" y="165" width="0.1234%" height="15" fill="rgb(244,45,10)"/><text x="73.0794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.09%)</title><rect x="72.8599%" y="149" width="0.0929%" height="15" fill="rgb(207,125,25)"/><text x="73.1099%" y="159.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42,809 samples, 56.79%)</title><rect x="25.1502%" y="181" width="56.7887%" height="15" fill="rgb(210,195,18)"/><text x="25.4002%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6,763 samples, 8.97%)</title><rect x="72.9674%" y="165" width="8.9715%" height="15" fill="rgb(249,80,12)"/><text x="73.2174%" y="175.50">libsystem_pla..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (16 samples, 0.02%)</title><rect x="81.9389%" y="181" width="0.0212%" height="15" fill="rgb(221,65,9)"/><text x="82.1889%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (20 samples, 0.03%)</title><rect x="82.4019%" y="149" width="0.0265%" height="15" fill="rgb(235,49,36)"/><text x="82.6519%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="82.4350%" y="149" width="0.0106%" height="15" fill="rgb(225,32,20)"/><text x="82.6850%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (371 samples, 0.49%)</title><rect x="81.9827%" y="165" width="0.4922%" height="15" fill="rgb(215,141,46)"/><text x="82.2327%" y="175.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (22 samples, 0.03%)</title><rect x="82.4456%" y="149" width="0.0292%" height="15" fill="rgb(250,160,47)"/><text x="82.6956%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (390 samples, 0.52%)</title><rect x="81.9601%" y="181" width="0.5174%" height="15" fill="rgb(216,222,40)"/><text x="82.2101%" y="191.50"></text></g><g><title>async-redis`DYLD-STUB$$malloc (11 samples, 0.01%)</title><rect x="82.4775%" y="181" width="0.0146%" height="15" fill="rgb(234,217,39)"/><text x="82.7275%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (27 samples, 0.04%)</title><rect x="82.4961%" y="181" width="0.0358%" height="15" fill="rgb(207,178,40)"/><text x="82.7461%" y="191.50"></text></g><g><title>async-redis`__rust_alloc (19 samples, 0.03%)</title><rect x="82.5345%" y="181" width="0.0252%" height="15" fill="rgb(221,136,13)"/><text x="82.7845%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.02%)</title><rect x="82.5597%" y="181" width="0.0172%" height="15" fill="rgb(249,199,10)"/><text x="82.8097%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (48 samples, 0.06%)</title><rect x="82.5770%" y="181" width="0.0637%" height="15" fill="rgb(249,222,13)"/><text x="82.8270%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (19 samples, 0.03%)</title><rect x="82.6406%" y="181" width="0.0252%" height="15" fill="rgb(244,185,38)"/><text x="82.8906%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (17 samples, 0.02%)</title><rect x="82.6659%" y="181" width="0.0226%" height="15" fill="rgb(236,202,9)"/><text x="82.9159%" y="191.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (16 samples, 0.02%)</title><rect x="82.6950%" y="181" width="0.0212%" height="15" fill="rgb(250,229,37)"/><text x="82.9450%" y="191.50"></text></g><g><title>async-redis`tracing::span::Span::enter (11 samples, 0.01%)</title><rect x="82.7163%" y="181" width="0.0146%" height="15" fill="rgb(206,174,23)"/><text x="82.9663%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.04%)</title><rect x="82.7309%" y="181" width="0.0371%" height="15" fill="rgb(211,33,43)"/><text x="82.9809%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (42 samples, 0.06%)</title><rect x="82.7733%" y="181" width="0.0557%" height="15" fill="rgb(245,58,50)"/><text x="83.0233%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43,703 samples, 57.97%)</title><rect x="24.9234%" y="197" width="57.9746%" height="15" fill="rgb(244,68,36)"/><text x="25.1734%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.07%)</title><rect x="82.8330%" y="181" width="0.0650%" height="15" fill="rgb(232,229,15)"/><text x="83.0830%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (23 samples, 0.03%)</title><rect x="82.9007%" y="197" width="0.0305%" height="15" fill="rgb(254,30,23)"/><text x="83.1507%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (36 samples, 0.05%)</title><rect x="82.9312%" y="197" width="0.0478%" height="15" fill="rgb(235,160,14)"/><text x="83.1812%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (43,920 samples, 58.26%)</title><rect x="24.7775%" y="213" width="58.2625%" height="15" fill="rgb(212,155,44)"/><text x="25.0275%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (42 samples, 0.06%)</title><rect x="82.9842%" y="197" width="0.0557%" height="15" fill="rgb(226,2,50)"/><text x="83.2342%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (68 samples, 0.09%)</title><rect x="83.0399%" y="213" width="0.0902%" height="15" fill="rgb(234,177,6)"/><text x="83.2899%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (57 samples, 0.08%)</title><rect x="83.0545%" y="197" width="0.0756%" height="15" fill="rgb(217,24,9)"/><text x="83.3045%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9 samples, 0.01%)</title><rect x="83.1301%" y="213" width="0.0119%" height="15" fill="rgb(220,13,46)"/><text x="83.3801%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (18 samples, 0.02%)</title><rect x="83.1500%" y="213" width="0.0239%" height="15" fill="rgb(239,221,27)"/><text x="83.4000%" y="223.50"></text></g><g><title>async-redis`alloc::string::String::push (10 samples, 0.01%)</title><rect x="83.2456%" y="181" width="0.0133%" height="15" fill="rgb(222,198,25)"/><text x="83.4956%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (161 samples, 0.21%)</title><rect x="83.2588%" y="181" width="0.2136%" height="15" fill="rgb(211,99,13)"/><text x="83.5088%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (64 samples, 0.08%)</title><rect x="83.4724%" y="181" width="0.0849%" height="15" fill="rgb(232,111,31)"/><text x="83.7224%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.07%)</title><rect x="83.4857%" y="165" width="0.0716%" height="15" fill="rgb(245,82,37)"/><text x="83.7357%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.07%)</title><rect x="83.4870%" y="149" width="0.0703%" height="15" fill="rgb(227,149,46)"/><text x="83.7370%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.03%)</title><rect x="83.5281%" y="133" width="0.0292%" height="15" fill="rgb(218,36,50)"/><text x="83.7781%" y="143.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (252 samples, 0.33%)</title><rect x="83.2243%" y="197" width="0.3343%" height="15" fill="rgb(226,80,48)"/><text x="83.4743%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.02%)</title><rect x="83.7616%" y="133" width="0.0239%" height="15" fill="rgb(238,224,15)"/><text x="84.0116%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (190 samples, 0.25%)</title><rect x="83.6236%" y="181" width="0.2520%" height="15" fill="rgb(241,136,10)"/><text x="83.8736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (166 samples, 0.22%)</title><rect x="83.6555%" y="165" width="0.2202%" height="15" fill="rgb(208,32,45)"/><text x="83.9055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (161 samples, 0.21%)</title><rect x="83.6621%" y="149" width="0.2136%" height="15" fill="rgb(207,135,9)"/><text x="83.9121%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (68 samples, 0.09%)</title><rect x="83.7855%" y="133" width="0.0902%" height="15" fill="rgb(206,86,44)"/><text x="84.0355%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="83.8584%" y="117" width="0.0172%" height="15" fill="rgb(245,177,15)"/><text x="84.1084%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.05%)</title><rect x="83.8810%" y="181" width="0.0504%" height="15" fill="rgb(206,64,50)"/><text x="84.1310%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.04%)</title><rect x="83.8956%" y="165" width="0.0358%" height="15" fill="rgb(234,36,40)"/><text x="84.1456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.03%)</title><rect x="83.8969%" y="149" width="0.0345%" height="15" fill="rgb(213,64,8)"/><text x="84.1469%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.04%)</title><rect x="84.0136%" y="149" width="0.0398%" height="15" fill="rgb(210,75,36)"/><text x="84.2636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (96 samples, 0.13%)</title><rect x="83.9314%" y="181" width="0.1273%" height="15" fill="rgb(229,88,21)"/><text x="84.1814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.09%)</title><rect x="83.9725%" y="165" width="0.0862%" height="15" fill="rgb(252,204,47)"/><text x="84.2225%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (393 samples, 0.52%)</title><rect x="83.5626%" y="197" width="0.5213%" height="15" fill="rgb(208,77,27)"/><text x="83.8126%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.03%)</title><rect x="84.0587%" y="181" width="0.0252%" height="15" fill="rgb(221,76,26)"/><text x="84.3087%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_bytes (15 samples, 0.02%)</title><rect x="84.1224%" y="181" width="0.0199%" height="15" fill="rgb(225,139,18)"/><text x="84.3724%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (9 samples, 0.01%)</title><rect x="84.1304%" y="165" width="0.0119%" height="15" fill="rgb(230,137,11)"/><text x="84.3804%" y="175.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (12 samples, 0.02%)</title><rect x="84.1596%" y="165" width="0.0159%" height="15" fill="rgb(212,28,1)"/><text x="84.4096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (104 samples, 0.14%)</title><rect x="84.1755%" y="165" width="0.1380%" height="15" fill="rgb(248,164,17)"/><text x="84.4255%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (90 samples, 0.12%)</title><rect x="84.1940%" y="149" width="0.1194%" height="15" fill="rgb(222,171,42)"/><text x="84.4440%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (88 samples, 0.12%)</title><rect x="84.1967%" y="133" width="0.1167%" height="15" fill="rgb(243,84,45)"/><text x="84.4467%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.03%)</title><rect x="84.2882%" y="117" width="0.0252%" height="15" fill="rgb(252,49,23)"/><text x="84.5382%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="84.3320%" y="149" width="0.0119%" height="15" fill="rgb(215,19,7)"/><text x="84.5820%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="84.3333%" y="133" width="0.0106%" height="15" fill="rgb(238,81,41)"/><text x="84.5833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="84.3201%" y="165" width="0.0252%" height="15" fill="rgb(210,199,37)"/><text x="84.5701%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.02%)</title><rect x="84.3453%" y="165" width="0.0239%" height="15" fill="rgb(244,192,49)"/><text x="84.5953%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (187 samples, 0.25%)</title><rect x="84.1423%" y="181" width="0.2481%" height="15" fill="rgb(226,211,11)"/><text x="84.3923%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.02%)</title><rect x="84.3705%" y="165" width="0.0199%" height="15" fill="rgb(236,162,54)"/><text x="84.6205%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (240 samples, 0.32%)</title><rect x="84.0839%" y="197" width="0.3184%" height="15" fill="rgb(220,229,9)"/><text x="84.3339%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (14 samples, 0.02%)</title><rect x="84.4063%" y="197" width="0.0186%" height="15" fill="rgb(250,87,22)"/><text x="84.6563%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.05%)</title><rect x="84.4355%" y="197" width="0.0544%" height="15" fill="rgb(239,43,17)"/><text x="84.6855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.04%)</title><rect x="84.4501%" y="181" width="0.0398%" height="15" fill="rgb(231,177,25)"/><text x="84.7001%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.04%)</title><rect x="84.4541%" y="165" width="0.0358%" height="15" fill="rgb(219,179,1)"/><text x="84.7041%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (45 samples, 0.06%)</title><rect x="84.5973%" y="165" width="0.0597%" height="15" fill="rgb(238,219,53)"/><text x="84.8473%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (134 samples, 0.18%)</title><rect x="84.4899%" y="197" width="0.1778%" height="15" fill="rgb(232,167,36)"/><text x="84.7399%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (100 samples, 0.13%)</title><rect x="84.5350%" y="181" width="0.1327%" height="15" fill="rgb(244,19,51)"/><text x="84.7850%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="84.6570%" y="165" width="0.0106%" height="15" fill="rgb(224,6,22)"/><text x="84.9070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (16 samples, 0.02%)</title><rect x="84.6676%" y="197" width="0.0212%" height="15" fill="rgb(224,145,5)"/><text x="84.9176%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (1,154 samples, 1.53%)</title><rect x="83.1739%" y="213" width="1.5308%" height="15" fill="rgb(234,130,49)"/><text x="83.4239%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.01%)</title><rect x="84.6915%" y="197" width="0.0133%" height="15" fill="rgb(254,6,2)"/><text x="84.9415%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (14 samples, 0.02%)</title><rect x="84.7048%" y="213" width="0.0186%" height="15" fill="rgb(208,96,46)"/><text x="84.9548%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (19 samples, 0.03%)</title><rect x="84.7233%" y="213" width="0.0252%" height="15" fill="rgb(239,3,39)"/><text x="84.9733%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (30 samples, 0.04%)</title><rect x="84.9727%" y="165" width="0.0398%" height="15" fill="rgb(233,210,1)"/><text x="85.2227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.04%)</title><rect x="84.9714%" y="181" width="0.0438%" height="15" fill="rgb(244,137,37)"/><text x="85.2214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="85.0231%" y="165" width="0.0106%" height="15" fill="rgb(240,136,2)"/><text x="85.2731%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (60 samples, 0.08%)</title><rect x="84.9621%" y="197" width="0.0796%" height="15" fill="rgb(239,18,37)"/><text x="85.2121%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (20 samples, 0.03%)</title><rect x="85.0152%" y="181" width="0.0265%" height="15" fill="rgb(218,185,22)"/><text x="85.2652%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (46 samples, 0.06%)</title><rect x="85.2420%" y="181" width="0.0610%" height="15" fill="rgb(225,218,4)"/><text x="85.4920%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.03%)</title><rect x="85.2739%" y="165" width="0.0292%" height="15" fill="rgb(230,182,32)"/><text x="85.5239%" y="175.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (136 samples, 0.18%)</title><rect x="85.5325%" y="149" width="0.1804%" height="15" fill="rgb(242,56,43)"/><text x="85.7825%" y="159.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (124 samples, 0.16%)</title><rect x="85.5485%" y="133" width="0.1645%" height="15" fill="rgb(233,99,24)"/><text x="85.7985%" y="143.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (320 samples, 0.42%)</title><rect x="85.3031%" y="181" width="0.4245%" height="15" fill="rgb(234,209,42)"/><text x="85.5531%" y="191.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (225 samples, 0.30%)</title><rect x="85.4291%" y="165" width="0.2985%" height="15" fill="rgb(227,7,12)"/><text x="85.6791%" y="175.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (553 samples, 0.73%)</title><rect x="85.0417%" y="197" width="0.7336%" height="15" fill="rgb(245,203,43)"/><text x="85.2917%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (34 samples, 0.05%)</title><rect x="85.7302%" y="181" width="0.0451%" height="15" fill="rgb(238,205,33)"/><text x="85.9802%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.01%)</title><rect x="85.7886%" y="197" width="0.0133%" height="15" fill="rgb(231,56,7)"/><text x="86.0386%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (10 samples, 0.01%)</title><rect x="85.8018%" y="181" width="0.0133%" height="15" fill="rgb(244,186,29)"/><text x="86.0518%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (11 samples, 0.01%)</title><rect x="85.8018%" y="197" width="0.0146%" height="15" fill="rgb(234,111,31)"/><text x="86.0518%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (8 samples, 0.01%)</title><rect x="85.8164%" y="197" width="0.0106%" height="15" fill="rgb(241,149,10)"/><text x="86.0664%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (8 samples, 0.01%)</title><rect x="85.8164%" y="181" width="0.0106%" height="15" fill="rgb(249,206,44)"/><text x="86.0664%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (52 samples, 0.07%)</title><rect x="85.8270%" y="197" width="0.0690%" height="15" fill="rgb(251,153,30)"/><text x="86.0770%" y="207.50"></text></g><g><title>async-redis`async_redis::db::DB::set (886 samples, 1.18%)</title><rect x="84.7486%" y="213" width="1.1753%" height="15" fill="rgb(239,152,38)"/><text x="84.9986%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (21 samples, 0.03%)</title><rect x="85.8960%" y="197" width="0.0279%" height="15" fill="rgb(249,139,47)"/><text x="86.1460%" y="207.50"></text></g><g><title>async-redis`async_redis::protocol::Encode (15 samples, 0.02%)</title><rect x="85.9239%" y="213" width="0.0199%" height="15" fill="rgb(244,64,35)"/><text x="86.1739%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (10 samples, 0.01%)</title><rect x="85.9438%" y="213" width="0.0133%" height="15" fill="rgb(216,46,15)"/><text x="86.1938%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (18 samples, 0.02%)</title><rect x="85.9570%" y="213" width="0.0239%" height="15" fill="rgb(250,74,19)"/><text x="86.2070%" y="223.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.02%)</title><rect x="86.0950%" y="197" width="0.0186%" height="15" fill="rgb(249,42,33)"/><text x="86.3450%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="86.1162%" y="197" width="0.0119%" height="15" fill="rgb(242,149,17)"/><text x="86.3662%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (21 samples, 0.03%)</title><rect x="86.1282%" y="197" width="0.0279%" height="15" fill="rgb(244,29,21)"/><text x="86.3782%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (18 samples, 0.02%)</title><rect x="86.1322%" y="181" width="0.0239%" height="15" fill="rgb(220,130,37)"/><text x="86.3822%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (159 samples, 0.21%)</title><rect x="85.9809%" y="213" width="0.2109%" height="15" fill="rgb(211,67,2)"/><text x="86.2309%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (27 samples, 0.04%)</title><rect x="86.1560%" y="197" width="0.0358%" height="15" fill="rgb(235,68,52)"/><text x="86.4060%" y="207.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (38 samples, 0.05%)</title><rect x="86.3444%" y="149" width="0.0504%" height="15" fill="rgb(246,142,3)"/><text x="86.5944%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (10 samples, 0.01%)</title><rect x="86.4014%" y="149" width="0.0133%" height="15" fill="rgb(241,25,7)"/><text x="86.6514%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,263 samples, 12.29%)</title><rect x="86.3112%" y="165" width="12.2879%" height="15" fill="rgb(242,119,39)"/><text x="86.5612%" y="175.50">async-redis`&lt;&amp;mio:..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,185 samples, 12.18%)</title><rect x="86.4147%" y="149" width="12.1844%" height="15" fill="rgb(241,98,45)"/><text x="86.6647%" y="159.50">libsystem_kernel.d..</text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (19 samples, 0.03%)</title><rect x="98.6880%" y="149" width="0.0252%" height="15" fill="rgb(254,28,30)"/><text x="98.9380%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (119 samples, 0.16%)</title><rect x="98.6058%" y="165" width="0.1579%" height="15" fill="rgb(241,142,54)"/><text x="98.8558%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.04%)</title><rect x="98.7212%" y="149" width="0.0424%" height="15" fill="rgb(222,85,15)"/><text x="98.9712%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,436 samples, 12.52%)</title><rect x="86.2502%" y="197" width="12.5174%" height="15" fill="rgb(210,85,47)"/><text x="86.5002%" y="207.50">async-redis`&lt;tokio:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,423 samples, 12.50%)</title><rect x="86.2675%" y="181" width="12.5002%" height="15" fill="rgb(224,206,25)"/><text x="86.5175%" y="191.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,485 samples, 12.58%)</title><rect x="86.1958%" y="213" width="12.5824%" height="15" fill="rgb(243,201,19)"/><text x="86.4458%" y="223.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (8 samples, 0.01%)</title><rect x="98.7676%" y="197" width="0.0106%" height="15" fill="rgb(236,59,4)"/><text x="99.0176%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (9 samples, 0.01%)</title><rect x="98.7782%" y="213" width="0.0119%" height="15" fill="rgb(254,179,45)"/><text x="99.0282%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (21 samples, 0.03%)</title><rect x="98.7928%" y="213" width="0.0279%" height="15" fill="rgb(226,14,10)"/><text x="99.0428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (115 samples, 0.15%)</title><rect x="98.8286%" y="213" width="0.1526%" height="15" fill="rgb(244,27,41)"/><text x="99.0786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (72 samples, 0.10%)</title><rect x="98.8857%" y="197" width="0.0955%" height="15" fill="rgb(235,35,32)"/><text x="99.1357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (71 samples, 0.09%)</title><rect x="98.8870%" y="181" width="0.0942%" height="15" fill="rgb(218,68,31)"/><text x="99.1370%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.01%)</title><rect x="99.0489%" y="197" width="0.0133%" height="15" fill="rgb(207,120,37)"/><text x="99.2989%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.07%)</title><rect x="99.1338%" y="181" width="0.0677%" height="15" fill="rgb(227,98,0)"/><text x="99.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (211 samples, 0.28%)</title><rect x="98.9812%" y="213" width="0.2799%" height="15" fill="rgb(207,7,3)"/><text x="99.2312%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (150 samples, 0.20%)</title><rect x="99.0621%" y="197" width="0.1990%" height="15" fill="rgb(206,98,19)"/><text x="99.3121%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (45 samples, 0.06%)</title><rect x="99.2014%" y="181" width="0.0597%" height="15" fill="rgb(217,5,26)"/><text x="99.4514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.02%)</title><rect x="99.2664%" y="213" width="0.0212%" height="15" fill="rgb(235,190,38)"/><text x="99.5164%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56,433 samples, 74.86%)</title><rect x="24.4326%" y="229" width="74.8617%" height="15" fill="rgb(247,86,24)"/><text x="24.6826%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.03%)</title><rect x="99.2943%" y="229" width="0.0265%" height="15" fill="rgb(205,101,16)"/><text x="99.5443%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (9 samples, 0.01%)</title><rect x="99.3314%" y="229" width="0.0119%" height="15" fill="rgb(246,168,33)"/><text x="99.5814%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (19 samples, 0.03%)</title><rect x="99.3513%" y="229" width="0.0252%" height="15" fill="rgb(231,114,1)"/><text x="99.6013%" y="239.50"></text></g><g><title>async-redis`async_redis::db::DB::set (10 samples, 0.01%)</title><rect x="99.3765%" y="229" width="0.0133%" height="15" fill="rgb(207,184,53)"/><text x="99.6265%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (15 samples, 0.02%)</title><rect x="99.4017%" y="229" width="0.0199%" height="15" fill="rgb(224,95,51)"/><text x="99.6517%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (31 samples, 0.04%)</title><rect x="99.4216%" y="229" width="0.0411%" height="15" fill="rgb(212,188,45)"/><text x="99.6716%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (16 samples, 0.02%)</title><rect x="99.4415%" y="213" width="0.0212%" height="15" fill="rgb(223,154,38)"/><text x="99.6915%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (15 samples, 0.02%)</title><rect x="99.4428%" y="197" width="0.0199%" height="15" fill="rgb(251,22,52)"/><text x="99.6928%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (11 samples, 0.01%)</title><rect x="99.4654%" y="229" width="0.0146%" height="15" fill="rgb(229,209,22)"/><text x="99.7154%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="99.4826%" y="229" width="0.0252%" height="15" fill="rgb(234,138,34)"/><text x="99.7326%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56,726 samples, 75.25%)</title><rect x="24.2694%" y="245" width="75.2504%" height="15" fill="rgb(212,95,11)"/><text x="24.5194%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (56,763 samples, 75.30%)</title><rect x="24.2362%" y="261" width="75.2995%" height="15" fill="rgb(240,179,47)"/><text x="24.4862%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tracing::span::Span::enter (12 samples, 0.02%)</title><rect x="99.5198%" y="245" width="0.0159%" height="15" fill="rgb(240,163,11)"/><text x="99.7698%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (13 samples, 0.02%)</title><rect x="99.5450%" y="261" width="0.0172%" height="15" fill="rgb(236,37,12)"/><text x="99.7950%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (56,866 samples, 75.44%)</title><rect x="24.1487%" y="277" width="75.4361%" height="15" fill="rgb(232,164,16)"/><text x="24.3987%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (17 samples, 0.02%)</title><rect x="99.5622%" y="261" width="0.0226%" height="15" fill="rgb(244,205,15)"/><text x="99.8122%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (13 samples, 0.02%)</title><rect x="99.5888%" y="277" width="0.0172%" height="15" fill="rgb(223,117,47)"/><text x="99.8388%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (21 samples, 0.03%)</title><rect x="99.6060%" y="277" width="0.0279%" height="15" fill="rgb(244,107,35)"/><text x="99.8560%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (57,047 samples, 75.68%)</title><rect x="23.9815%" y="293" width="75.6762%" height="15" fill="rgb(205,140,8)"/><text x="24.2315%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.02%)</title><rect x="99.6339%" y="277" width="0.0239%" height="15" fill="rgb(228,84,46)"/><text x="99.8839%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (12 samples, 0.02%)</title><rect x="99.6577%" y="293" width="0.0159%" height="15" fill="rgb(254,188,9)"/><text x="99.9077%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (21 samples, 0.03%)</title><rect x="99.6737%" y="293" width="0.0279%" height="15" fill="rgb(206,112,54)"/><text x="99.9237%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (35 samples, 0.05%)</title><rect x="99.7015%" y="293" width="0.0464%" height="15" fill="rgb(216,84,49)"/><text x="99.9515%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (11 samples, 0.01%)</title><rect x="99.7599%" y="293" width="0.0146%" height="15" fill="rgb(214,194,35)"/><text x="100.0099%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (58,903 samples, 78.14%)</title><rect x="21.6494%" y="309" width="78.1383%" height="15" fill="rgb(249,28,3)"/><text x="21.8994%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (10 samples, 0.01%)</title><rect x="99.7745%" y="293" width="0.0133%" height="15" fill="rgb(222,56,52)"/><text x="100.0245%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (137 samples, 0.18%)</title><rect x="99.7878%" y="309" width="0.1817%" height="15" fill="rgb(245,217,50)"/><text x="100.0378%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (75,304 samples, 99.90%)</title><rect x="0.0756%" y="325" width="99.8952%" height="15" fill="rgb(213,201,24)"/><text x="0.3256%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>all (75,383 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(248,116,28)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (75,347 samples, 99.95%)</title><rect x="0.0478%" y="501" width="99.9522%" height="15" fill="rgb(219,72,43)"/><text x="0.2978%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (75,347 samples, 99.95%)</title><rect x="0.0478%" y="485" width="99.9522%" height="15" fill="rgb(209,138,14)"/><text x="0.2978%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (75,347 samples, 99.95%)</title><rect x="0.0478%" y="469" width="99.9522%" height="15" fill="rgb(222,18,33)"/><text x="0.2978%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (75,347 samples, 99.95%)</title><rect x="0.0478%" y="453" width="99.9522%" height="15" fill="rgb(213,199,7)"/><text x="0.2978%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (75,347 samples, 99.95%)</title><rect x="0.0478%" y="437" width="99.9522%" height="15" fill="rgb(250,110,10)"/><text x="0.2978%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (75,347 samples, 99.95%)</title><rect x="0.0478%" y="421" width="99.9522%" height="15" fill="rgb(248,123,6)"/><text x="0.2978%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (75,347 samples, 99.95%)</title><rect x="0.0478%" y="405" width="99.9522%" height="15" fill="rgb(206,91,31)"/><text x="0.2978%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (75,347 samples, 99.95%)</title><rect x="0.0478%" y="389" width="99.9522%" height="15" fill="rgb(211,154,13)"/><text x="0.2978%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (75,347 samples, 99.95%)</title><rect x="0.0478%" y="373" width="99.9522%" height="15" fill="rgb(225,148,7)"/><text x="0.2978%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (75,347 samples, 99.95%)</title><rect x="0.0478%" y="357" width="99.9522%" height="15" fill="rgb(220,160,43)"/><text x="0.2978%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (75,347 samples, 99.95%)</title><rect x="0.0478%" y="341" width="99.9522%" height="15" fill="rgb(213,52,39)"/><text x="0.2978%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (16 samples, 0.02%)</title><rect x="99.9788%" y="325" width="0.0212%" height="15" fill="rgb(243,137,7)"/><text x="100.2288%" y="335.50"></text></g></svg></svg>