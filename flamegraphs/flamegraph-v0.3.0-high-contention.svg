<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (21 samples, 0.02%)</title><rect x="0.0086%" y="245" width="0.0200%" height="15" fill="rgb(227,0,7)"/><text x="0.2586%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (19 samples, 0.02%)</title><rect x="0.0105%" y="229" width="0.0181%" height="15" fill="rgb(217,0,24)"/><text x="0.2605%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="0.0067%" y="293" width="0.0334%" height="15" fill="rgb(221,193,54)"/><text x="0.2567%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="0.0067%" y="277" width="0.0334%" height="15" fill="rgb(248,212,6)"/><text x="0.2567%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="0.0076%" y="261" width="0.0324%" height="15" fill="rgb(208,68,35)"/><text x="0.2576%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="0.0067%" y="309" width="0.0343%" height="15" fill="rgb(232,128,0)"/><text x="0.2567%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (44 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0420%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (44 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0420%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (44 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0420%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.04%)</title><rect x="0.0067%" y="341" width="0.0353%" height="15" fill="rgb(220,122,19)"/><text x="0.2567%" y="351.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.04%)</title><rect x="0.0067%" y="325" width="0.0353%" height="15" fill="rgb(250,228,42)"/><text x="0.2567%" y="335.50"></text></g><g><title>async-redis`0x1 (45 samples, 0.04%)</title><rect x="0.0000%" y="501" width="0.0429%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (45 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0429%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (45 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0429%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (45 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0429%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (45 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0429%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0429%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (45 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0429%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (17 samples, 0.02%)</title><rect x="0.0439%" y="325" width="0.0162%" height="15" fill="rgb(221,200,47)"/><text x="0.2939%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (26 samples, 0.02%)</title><rect x="0.6388%" y="309" width="0.0248%" height="15" fill="rgb(226,26,5)"/><text x="0.8888%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (15 samples, 0.01%)</title><rect x="0.6664%" y="309" width="0.0143%" height="15" fill="rgb(249,33,26)"/><text x="0.9164%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.02%)</title><rect x="0.6874%" y="309" width="0.0162%" height="15" fill="rgb(235,183,28)"/><text x="0.9374%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (14 samples, 0.01%)</title><rect x="0.7036%" y="309" width="0.0133%" height="15" fill="rgb(221,5,38)"/><text x="0.9536%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (299 samples, 0.29%)</title><rect x="0.7170%" y="309" width="0.2851%" height="15" fill="rgb(247,18,42)"/><text x="0.9670%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (13 samples, 0.01%)</title><rect x="2.4389%" y="293" width="0.0124%" height="15" fill="rgb(241,131,45)"/><text x="2.6889%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (11 samples, 0.01%)</title><rect x="2.4408%" y="277" width="0.0105%" height="15" fill="rgb(249,31,29)"/><text x="2.6908%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (21 samples, 0.02%)</title><rect x="2.9699%" y="277" width="0.0200%" height="15" fill="rgb(225,111,53)"/><text x="3.2199%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (15 samples, 0.01%)</title><rect x="3.1635%" y="261" width="0.0143%" height="15" fill="rgb(238,160,17)"/><text x="3.4135%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.02%)</title><rect x="3.1778%" y="261" width="0.0181%" height="15" fill="rgb(214,148,48)"/><text x="3.4278%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,733 samples, 2.61%)</title><rect x="3.1959%" y="261" width="2.6057%" height="15" fill="rgb(232,36,49)"/><text x="3.4459%" y="271.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (20 samples, 0.02%)</title><rect x="5.9560%" y="245" width="0.0191%" height="15" fill="rgb(209,103,24)"/><text x="6.2060%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (135 samples, 0.13%)</title><rect x="5.9751%" y="229" width="0.1287%" height="15" fill="rgb(229,88,8)"/><text x="6.2251%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (137 samples, 0.13%)</title><rect x="5.9751%" y="245" width="0.1306%" height="15" fill="rgb(213,181,19)"/><text x="6.2251%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (81 samples, 0.08%)</title><rect x="6.1057%" y="245" width="0.0772%" height="15" fill="rgb(254,191,54)"/><text x="6.3557%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (447 samples, 0.43%)</title><rect x="5.8016%" y="261" width="0.4262%" height="15" fill="rgb(241,83,37)"/><text x="6.0516%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (47 samples, 0.04%)</title><rect x="6.1830%" y="245" width="0.0448%" height="15" fill="rgb(233,36,39)"/><text x="6.4330%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (19 samples, 0.02%)</title><rect x="6.2306%" y="261" width="0.0181%" height="15" fill="rgb(226,3,54)"/><text x="6.4806%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (24 samples, 0.02%)</title><rect x="6.2487%" y="261" width="0.0229%" height="15" fill="rgb(245,192,40)"/><text x="6.4987%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (3,469 samples, 3.31%)</title><rect x="2.9899%" y="277" width="3.3074%" height="15" fill="rgb(238,167,29)"/><text x="3.2399%" y="287.50">asy..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (27 samples, 0.03%)</title><rect x="6.2716%" y="261" width="0.0257%" height="15" fill="rgb(232,182,51)"/><text x="6.5216%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::now (19 samples, 0.02%)</title><rect x="6.3088%" y="277" width="0.0181%" height="15" fill="rgb(231,60,39)"/><text x="6.5588%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (20 samples, 0.02%)</title><rect x="6.4661%" y="245" width="0.0191%" height="15" fill="rgb(208,69,12)"/><text x="6.7161%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (24 samples, 0.02%)</title><rect x="6.5005%" y="245" width="0.0229%" height="15" fill="rgb(235,93,37)"/><text x="6.7505%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (25 samples, 0.02%)</title><rect x="6.5300%" y="245" width="0.0238%" height="15" fill="rgb(213,116,39)"/><text x="6.7800%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (14 samples, 0.01%)</title><rect x="6.8904%" y="229" width="0.0133%" height="15" fill="rgb(222,207,29)"/><text x="7.1404%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (66 samples, 0.06%)</title><rect x="6.9038%" y="229" width="0.0629%" height="15" fill="rgb(206,96,30)"/><text x="7.1538%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (21 samples, 0.02%)</title><rect x="7.0611%" y="213" width="0.0200%" height="15" fill="rgb(218,138,4)"/><text x="7.3111%" y="223.50"></text></g><g><title> 32]&gt;::default (21 samples, 0.02%)</title><rect x="7.0611%" y="197" width="0.0200%" height="15" fill="rgb(250,191,14)"/><text x="7.3111%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (83 samples, 0.08%)</title><rect x="7.0811%" y="213" width="0.0791%" height="15" fill="rgb(239,60,40)"/><text x="7.3311%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (13 samples, 0.01%)</title><rect x="7.1640%" y="213" width="0.0124%" height="15" fill="rgb(206,27,48)"/><text x="7.4140%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (16 samples, 0.02%)</title><rect x="7.1869%" y="197" width="0.0153%" height="15" fill="rgb(225,35,8)"/><text x="7.4369%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (92 samples, 0.09%)</title><rect x="7.2022%" y="197" width="0.0877%" height="15" fill="rgb(250,213,24)"/><text x="7.4522%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (24 samples, 0.02%)</title><rect x="7.3214%" y="165" width="0.0229%" height="15" fill="rgb(247,123,22)"/><text x="7.5714%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (16 samples, 0.02%)</title><rect x="7.3442%" y="165" width="0.0153%" height="15" fill="rgb(231,138,38)"/><text x="7.5942%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (83 samples, 0.08%)</title><rect x="7.2994%" y="181" width="0.0791%" height="15" fill="rgb(231,145,46)"/><text x="7.5494%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.02%)</title><rect x="7.3595%" y="165" width="0.0191%" height="15" fill="rgb(251,118,11)"/><text x="7.6095%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (218 samples, 0.21%)</title><rect x="7.1764%" y="213" width="0.2078%" height="15" fill="rgb(217,147,25)"/><text x="7.4264%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (99 samples, 0.09%)</title><rect x="7.2899%" y="197" width="0.0944%" height="15" fill="rgb(247,81,37)"/><text x="7.5399%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (442 samples, 0.42%)</title><rect x="6.9667%" y="229" width="0.4214%" height="15" fill="rgb(209,12,38)"/><text x="7.2167%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (4,157 samples, 3.96%)</title><rect x="6.5538%" y="245" width="3.9634%" height="15" fill="rgb(227,1,9)"/><text x="6.8038%" y="255.50">asyn..</text></g><g><title>libsystem_kernel.dylib`kevent (3,271 samples, 3.12%)</title><rect x="7.3986%" y="229" width="3.1187%" height="15" fill="rgb(248,47,43)"/><text x="7.6486%" y="239.50">lib..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (14 samples, 0.01%)</title><rect x="10.5172%" y="245" width="0.0133%" height="15" fill="rgb(221,10,30)"/><text x="10.7672%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (33 samples, 0.03%)</title><rect x="10.5582%" y="213" width="0.0315%" height="15" fill="rgb(210,229,1)"/><text x="10.8082%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (56 samples, 0.05%)</title><rect x="10.5897%" y="213" width="0.0534%" height="15" fill="rgb(222,148,37)"/><text x="10.8397%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (130 samples, 0.12%)</title><rect x="10.5487%" y="229" width="0.1239%" height="15" fill="rgb(234,67,33)"/><text x="10.7987%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.03%)</title><rect x="10.6431%" y="213" width="0.0296%" height="15" fill="rgb(247,98,35)"/><text x="10.8931%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (152 samples, 0.14%)</title><rect x="10.5306%" y="245" width="0.1449%" height="15" fill="rgb(247,138,52)"/><text x="10.7806%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (4,502 samples, 4.29%)</title><rect x="6.4156%" y="261" width="4.2923%" height="15" fill="rgb(213,79,30)"/><text x="6.6656%" y="271.50">async..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (34 samples, 0.03%)</title><rect x="10.6755%" y="245" width="0.0324%" height="15" fill="rgb(246,177,23)"/><text x="10.9255%" y="255.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (93 samples, 0.09%)</title><rect x="10.7213%" y="261" width="0.0887%" height="15" fill="rgb(230,62,27)"/><text x="10.9713%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (17 samples, 0.02%)</title><rect x="10.8099%" y="261" width="0.0162%" height="15" fill="rgb(216,154,8)"/><text x="11.0599%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (36 samples, 0.03%)</title><rect x="10.8261%" y="261" width="0.0343%" height="15" fill="rgb(244,35,45)"/><text x="11.0761%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (19 samples, 0.02%)</title><rect x="10.8605%" y="261" width="0.0181%" height="15" fill="rgb(251,115,12)"/><text x="11.1105%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (83 samples, 0.08%)</title><rect x="10.9329%" y="245" width="0.0791%" height="15" fill="rgb(240,54,50)"/><text x="11.1829%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (42 samples, 0.04%)</title><rect x="11.0168%" y="245" width="0.0400%" height="15" fill="rgb(233,84,52)"/><text x="11.2668%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (30 samples, 0.03%)</title><rect x="11.0283%" y="229" width="0.0286%" height="15" fill="rgb(207,117,47)"/><text x="11.2783%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (86 samples, 0.08%)</title><rect x="11.0569%" y="245" width="0.0820%" height="15" fill="rgb(249,43,39)"/><text x="11.3069%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (63 samples, 0.06%)</title><rect x="11.0788%" y="229" width="0.0601%" height="15" fill="rgb(209,38,44)"/><text x="11.3288%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (286 samples, 0.27%)</title><rect x="10.8786%" y="261" width="0.2727%" height="15" fill="rgb(236,212,23)"/><text x="11.1286%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (13 samples, 0.01%)</title><rect x="11.1389%" y="245" width="0.0124%" height="15" fill="rgb(242,79,21)"/><text x="11.3889%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (81 samples, 0.08%)</title><rect x="11.1513%" y="261" width="0.0772%" height="15" fill="rgb(211,96,35)"/><text x="11.4013%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (71 samples, 0.07%)</title><rect x="11.1608%" y="245" width="0.0677%" height="15" fill="rgb(253,215,40)"/><text x="11.4108%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (5,235 samples, 4.99%)</title><rect x="6.3269%" y="277" width="4.9912%" height="15" fill="rgb(211,81,21)"/><text x="6.5769%" y="287.50">async-..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (84 samples, 0.08%)</title><rect x="11.2380%" y="261" width="0.0801%" height="15" fill="rgb(208,190,38)"/><text x="11.4880%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (36 samples, 0.03%)</title><rect x="11.3229%" y="277" width="0.0343%" height="15" fill="rgb(235,213,38)"/><text x="11.5729%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5,357 samples, 5.11%)</title><rect x="11.3572%" y="277" width="5.1075%" height="15" fill="rgb(237,122,38)"/><text x="11.6072%" y="287.50">libsys..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (29 samples, 0.03%)</title><rect x="16.4647%" y="277" width="0.0276%" height="15" fill="rgb(244,218,35)"/><text x="16.7147%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (12 samples, 0.01%)</title><rect x="16.4923%" y="277" width="0.0114%" height="15" fill="rgb(240,68,47)"/><text x="16.7423%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (178 samples, 0.17%)</title><rect x="16.5038%" y="277" width="0.1697%" height="15" fill="rgb(210,16,53)"/><text x="16.7538%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (14,970 samples, 14.27%)</title><rect x="2.4513%" y="293" width="14.2728%" height="15" fill="rgb(235,124,12)"/><text x="2.7013%" y="303.50">async-redis`&lt;tokio::ru..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (47 samples, 0.04%)</title><rect x="16.6792%" y="277" width="0.0448%" height="15" fill="rgb(224,169,11)"/><text x="16.9292%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (14 samples, 0.01%)</title><rect x="16.7746%" y="197" width="0.0133%" height="15" fill="rgb(250,166,2)"/><text x="17.0246%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (37 samples, 0.04%)</title><rect x="16.7564%" y="229" width="0.0353%" height="15" fill="rgb(242,216,29)"/><text x="17.0064%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (18 samples, 0.02%)</title><rect x="16.7746%" y="213" width="0.0172%" height="15" fill="rgb(230,116,27)"/><text x="17.0246%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (240 samples, 0.23%)</title><rect x="16.7355%" y="245" width="0.2288%" height="15" fill="rgb(228,99,48)"/><text x="16.9855%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (181 samples, 0.17%)</title><rect x="16.7917%" y="229" width="0.1726%" height="15" fill="rgb(253,11,6)"/><text x="17.0417%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (247 samples, 0.24%)</title><rect x="16.7317%" y="261" width="0.2355%" height="15" fill="rgb(247,143,39)"/><text x="16.9817%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (272 samples, 0.26%)</title><rect x="16.7298%" y="277" width="0.2593%" height="15" fill="rgb(236,97,10)"/><text x="16.9798%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (279 samples, 0.27%)</title><rect x="16.7240%" y="293" width="0.2660%" height="15" fill="rgb(233,208,19)"/><text x="16.9740%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (119 samples, 0.11%)</title><rect x="17.0139%" y="277" width="0.1135%" height="15" fill="rgb(216,164,2)"/><text x="17.2639%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (143 samples, 0.14%)</title><rect x="17.0034%" y="293" width="0.1363%" height="15" fill="rgb(220,129,5)"/><text x="17.2534%" y="303.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (11 samples, 0.01%)</title><rect x="17.1397%" y="293" width="0.0105%" height="15" fill="rgb(242,17,10)"/><text x="17.3897%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (26 samples, 0.02%)</title><rect x="17.1521%" y="293" width="0.0248%" height="15" fill="rgb(242,107,0)"/><text x="17.4021%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (62 samples, 0.06%)</title><rect x="17.1798%" y="293" width="0.0591%" height="15" fill="rgb(251,28,31)"/><text x="17.4298%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (17,038 samples, 16.24%)</title><rect x="1.0020%" y="309" width="16.2445%" height="15" fill="rgb(233,223,10)"/><text x="1.2520%" y="319.50">async-redis`tokio::runtim..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (42 samples, 0.04%)</title><rect x="17.3562%" y="293" width="0.0400%" height="15" fill="rgb(215,21,27)"/><text x="17.6062%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (37 samples, 0.04%)</title><rect x="17.3609%" y="277" width="0.0353%" height="15" fill="rgb(232,23,21)"/><text x="17.6109%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (39 samples, 0.04%)</title><rect x="17.3971%" y="293" width="0.0372%" height="15" fill="rgb(244,5,23)"/><text x="17.6471%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (67 samples, 0.06%)</title><rect x="17.4849%" y="277" width="0.0639%" height="15" fill="rgb(226,81,46)"/><text x="17.7349%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,425 samples, 1.36%)</title><rect x="17.5487%" y="277" width="1.3586%" height="15" fill="rgb(247,70,30)"/><text x="17.7987%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.01%)</title><rect x="18.9074%" y="277" width="0.0114%" height="15" fill="rgb(212,68,19)"/><text x="19.1574%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvsignal (12 samples, 0.01%)</title><rect x="18.9188%" y="277" width="0.0114%" height="15" fill="rgb(240,187,13)"/><text x="19.1688%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (85 samples, 0.08%)</title><rect x="18.9350%" y="277" width="0.0810%" height="15" fill="rgb(223,113,26)"/><text x="19.1850%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (85 samples, 0.08%)</title><rect x="18.9350%" y="261" width="0.0810%" height="15" fill="rgb(206,192,2)"/><text x="19.1850%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (42 samples, 0.04%)</title><rect x="19.0161%" y="277" width="0.0400%" height="15" fill="rgb(241,108,4)"/><text x="19.2661%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (13 samples, 0.01%)</title><rect x="19.0437%" y="261" width="0.0124%" height="15" fill="rgb(247,173,49)"/><text x="19.2937%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (20 samples, 0.02%)</title><rect x="19.0561%" y="277" width="0.0191%" height="15" fill="rgb(224,114,35)"/><text x="19.3061%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,723 samples, 1.64%)</title><rect x="17.4401%" y="293" width="1.6428%" height="15" fill="rgb(245,159,27)"/><text x="17.6901%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40 samples, 0.04%)</title><rect x="19.2592%" y="277" width="0.0381%" height="15" fill="rgb(245,172,44)"/><text x="19.5092%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.01%)</title><rect x="19.2973%" y="277" width="0.0105%" height="15" fill="rgb(236,23,11)"/><text x="19.5473%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (48 samples, 0.05%)</title><rect x="19.4604%" y="261" width="0.0458%" height="15" fill="rgb(205,117,38)"/><text x="19.7104%" y="271.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (11 samples, 0.01%)</title><rect x="20.0362%" y="229" width="0.0105%" height="15" fill="rgb(237,72,25)"/><text x="20.2862%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (22 samples, 0.02%)</title><rect x="20.0601%" y="213" width="0.0210%" height="15" fill="rgb(244,70,9)"/><text x="20.3101%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (38 samples, 0.04%)</title><rect x="20.0810%" y="213" width="0.0362%" height="15" fill="rgb(217,125,39)"/><text x="20.3310%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (370 samples, 0.35%)</title><rect x="20.3318%" y="197" width="0.3528%" height="15" fill="rgb(235,36,10)"/><text x="20.5818%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (319 samples, 0.30%)</title><rect x="20.3804%" y="181" width="0.3041%" height="15" fill="rgb(251,123,47)"/><text x="20.6304%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.04%)</title><rect x="20.6846%" y="197" width="0.0400%" height="15" fill="rgb(221,13,13)"/><text x="20.9346%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (6,434 samples, 6.13%)</title><rect x="21.1851%" y="165" width="6.1343%" height="15" fill="rgb(238,131,9)"/><text x="21.4351%" y="175.50">async-re..</text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6,332 samples, 6.04%)</title><rect x="21.2824%" y="149" width="6.0371%" height="15" fill="rgb(211,50,8)"/><text x="21.5324%" y="159.50">async-re..</text></g><g><title>libsystem_malloc.dylib`free_large (34 samples, 0.03%)</title><rect x="27.3252%" y="165" width="0.0324%" height="15" fill="rgb(245,182,24)"/><text x="27.5752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (33 samples, 0.03%)</title><rect x="27.3261%" y="149" width="0.0315%" height="15" fill="rgb(242,14,37)"/><text x="27.5761%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (33 samples, 0.03%)</title><rect x="27.3261%" y="133" width="0.0315%" height="15" fill="rgb(246,228,12)"/><text x="27.5761%" y="143.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (6,952 samples, 6.63%)</title><rect x="20.7370%" y="181" width="6.6282%" height="15" fill="rgb(213,55,15)"/><text x="20.9870%" y="191.50">async-red..</text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (7,134 samples, 6.80%)</title><rect x="20.7246%" y="197" width="6.8017%" height="15" fill="rgb(209,9,3)"/><text x="20.9746%" y="207.50">async-red..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (169 samples, 0.16%)</title><rect x="27.3652%" y="181" width="0.1611%" height="15" fill="rgb(230,59,30)"/><text x="27.6152%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7,775 samples, 7.41%)</title><rect x="20.1173%" y="213" width="7.4129%" height="15" fill="rgb(209,121,21)"/><text x="20.3673%" y="223.50">async-redi..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (39 samples, 0.04%)</title><rect x="27.5311%" y="213" width="0.0372%" height="15" fill="rgb(220,109,13)"/><text x="27.7811%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (7,884 samples, 7.52%)</title><rect x="20.0524%" y="229" width="7.5168%" height="15" fill="rgb(232,18,1)"/><text x="20.3024%" y="239.50">async-redi..</text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (80 samples, 0.08%)</title><rect x="28.3253%" y="213" width="0.0763%" height="15" fill="rgb(215,41,42)"/><text x="28.5753%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (64 samples, 0.06%)</title><rect x="28.3406%" y="197" width="0.0610%" height="15" fill="rgb(224,123,36)"/><text x="28.5906%" y="207.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.09%)</title><rect x="28.4016%" y="213" width="0.0906%" height="15" fill="rgb(240,125,3)"/><text x="28.6516%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (45 samples, 0.04%)</title><rect x="28.4493%" y="197" width="0.0429%" height="15" fill="rgb(205,98,50)"/><text x="28.6993%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="28.4979%" y="213" width="0.0210%" height="15" fill="rgb(205,185,37)"/><text x="28.7479%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="28.5189%" y="213" width="0.0210%" height="15" fill="rgb(238,207,15)"/><text x="28.7689%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="29.1700%" y="165" width="0.0143%" height="15" fill="rgb(213,199,42)"/><text x="29.4200%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (32 samples, 0.03%)</title><rect x="29.1843%" y="165" width="0.0305%" height="15" fill="rgb(235,201,11)"/><text x="29.4343%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (36 samples, 0.03%)</title><rect x="29.4341%" y="133" width="0.0343%" height="15" fill="rgb(207,46,11)"/><text x="29.6841%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (26 samples, 0.02%)</title><rect x="29.4685%" y="133" width="0.0248%" height="15" fill="rgb(241,35,35)"/><text x="29.7185%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (19 samples, 0.02%)</title><rect x="29.8003%" y="85" width="0.0181%" height="15" fill="rgb(243,32,47)"/><text x="30.0503%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (190 samples, 0.18%)</title><rect x="29.6830%" y="101" width="0.1812%" height="15" fill="rgb(247,202,23)"/><text x="29.9330%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (48 samples, 0.05%)</title><rect x="29.8184%" y="85" width="0.0458%" height="15" fill="rgb(219,102,11)"/><text x="30.0684%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (15 samples, 0.01%)</title><rect x="29.8641%" y="101" width="0.0143%" height="15" fill="rgb(243,110,44)"/><text x="30.1141%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (17 samples, 0.02%)</title><rect x="29.8794%" y="101" width="0.0162%" height="15" fill="rgb(222,74,54)"/><text x="30.1294%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (33 samples, 0.03%)</title><rect x="29.8956%" y="101" width="0.0315%" height="15" fill="rgb(216,99,12)"/><text x="30.1456%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (31 samples, 0.03%)</title><rect x="29.9271%" y="101" width="0.0296%" height="15" fill="rgb(226,22,26)"/><text x="30.1771%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (19,672 samples, 18.76%)</title><rect x="29.9566%" y="101" width="18.7558%" height="15" fill="rgb(217,163,10)"/><text x="30.2066%" y="111.50">libsystem_kernel.dylib`__recv..</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (20,053 samples, 19.12%)</title><rect x="29.6153%" y="117" width="19.1190%" height="15" fill="rgb(213,25,53)"/><text x="29.8653%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::s..</text></g><g><title>libsystem_kernel.dylib`cerror (23 samples, 0.02%)</title><rect x="48.7124%" y="101" width="0.0219%" height="15" fill="rgb(252,105,26)"/><text x="48.9624%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (17 samples, 0.02%)</title><rect x="48.7343%" y="117" width="0.0162%" height="15" fill="rgb(220,39,43)"/><text x="48.9843%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (12 samples, 0.01%)</title><rect x="48.7591%" y="117" width="0.0114%" height="15" fill="rgb(229,68,48)"/><text x="49.0091%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (35 samples, 0.03%)</title><rect x="49.0213%" y="101" width="0.0334%" height="15" fill="rgb(252,8,32)"/><text x="49.2713%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (84 samples, 0.08%)</title><rect x="49.0547%" y="101" width="0.0801%" height="15" fill="rgb(223,20,43)"/><text x="49.3047%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (11 samples, 0.01%)</title><rect x="49.1348%" y="101" width="0.0105%" height="15" fill="rgb(229,81,49)"/><text x="49.3848%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (436 samples, 0.42%)</title><rect x="48.7801%" y="117" width="0.4157%" height="15" fill="rgb(236,28,36)"/><text x="49.0301%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (53 samples, 0.05%)</title><rect x="49.1453%" y="101" width="0.0505%" height="15" fill="rgb(249,185,26)"/><text x="49.3953%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (20,676 samples, 19.71%)</title><rect x="29.4933%" y="133" width="19.7130%" height="15" fill="rgb(249,174,33)"/><text x="29.7433%" y="143.50">async-redis`tokio::io::driver::..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (11 samples, 0.01%)</title><rect x="49.1958%" y="117" width="0.0105%" height="15" fill="rgb(233,201,37)"/><text x="49.4458%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (20,850 samples, 19.88%)</title><rect x="29.3674%" y="149" width="19.8789%" height="15" fill="rgb(221,78,26)"/><text x="29.6174%" y="159.50">async-redis`&lt;tokio::net::tcp::s..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (42 samples, 0.04%)</title><rect x="49.2063%" y="133" width="0.0400%" height="15" fill="rgb(250,127,30)"/><text x="49.4563%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.01%)</title><rect x="49.2663%" y="101" width="0.0105%" height="15" fill="rgb(230,49,44)"/><text x="49.5163%" y="111.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="49.2654%" y="133" width="0.0124%" height="15" fill="rgb(229,67,23)"/><text x="49.5154%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.01%)</title><rect x="49.2654%" y="117" width="0.0124%" height="15" fill="rgb(249,83,47)"/><text x="49.5154%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (597 samples, 0.57%)</title><rect x="49.2473%" y="149" width="0.5692%" height="15" fill="rgb(215,43,3)"/><text x="49.4973%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (565 samples, 0.54%)</title><rect x="49.2778%" y="133" width="0.5387%" height="15" fill="rgb(238,154,13)"/><text x="49.5278%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (26 samples, 0.02%)</title><rect x="49.8165%" y="149" width="0.0248%" height="15" fill="rgb(219,56,2)"/><text x="50.0665%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (21,652 samples, 20.64%)</title><rect x="29.2149%" y="165" width="20.6436%" height="15" fill="rgb(233,0,4)"/><text x="29.4649%" y="175.50">async-redis`&lt;tokio::io::util::re..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.02%)</title><rect x="49.8413%" y="149" width="0.0172%" height="15" fill="rgb(235,30,7)"/><text x="50.0913%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 0.01%)</title><rect x="49.8584%" y="165" width="0.0143%" height="15" fill="rgb(250,79,13)"/><text x="50.1084%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (19 samples, 0.02%)</title><rect x="50.1845%" y="133" width="0.0181%" height="15" fill="rgb(211,146,34)"/><text x="50.4345%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.01%)</title><rect x="50.2055%" y="133" width="0.0114%" height="15" fill="rgb(228,22,38)"/><text x="50.4555%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (11 samples, 0.01%)</title><rect x="50.2064%" y="117" width="0.0105%" height="15" fill="rgb(235,168,5)"/><text x="50.4564%" y="127.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (32 samples, 0.03%)</title><rect x="50.2169%" y="133" width="0.0305%" height="15" fill="rgb(221,155,16)"/><text x="50.4669%" y="143.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (383 samples, 0.37%)</title><rect x="49.8842%" y="149" width="0.3652%" height="15" fill="rgb(215,215,53)"/><text x="50.1342%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (396 samples, 0.38%)</title><rect x="49.8727%" y="165" width="0.3776%" height="15" fill="rgb(223,4,10)"/><text x="50.1227%" y="175.50"></text></g><g><title>async-redis`__rdl_dealloc (16 samples, 0.02%)</title><rect x="50.2550%" y="165" width="0.0153%" height="15" fill="rgb(234,103,6)"/><text x="50.5050%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="50.2760%" y="165" width="0.0181%" height="15" fill="rgb(227,97,0)"/><text x="50.5260%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="50.4839%" y="149" width="0.0400%" height="15" fill="rgb(234,150,53)"/><text x="50.7339%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (21 samples, 0.02%)</title><rect x="50.5039%" y="133" width="0.0200%" height="15" fill="rgb(228,201,54)"/><text x="50.7539%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (30 samples, 0.03%)</title><rect x="50.5420%" y="149" width="0.0286%" height="15" fill="rgb(222,22,37)"/><text x="50.7920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (42 samples, 0.04%)</title><rect x="50.6984%" y="85" width="0.0400%" height="15" fill="rgb(237,53,32)"/><text x="50.9484%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (220 samples, 0.21%)</title><rect x="50.5954%" y="133" width="0.2098%" height="15" fill="rgb(233,25,53)"/><text x="50.8454%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (200 samples, 0.19%)</title><rect x="50.6145%" y="117" width="0.1907%" height="15" fill="rgb(210,40,34)"/><text x="50.8645%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (190 samples, 0.18%)</title><rect x="50.6240%" y="101" width="0.1812%" height="15" fill="rgb(241,220,44)"/><text x="50.8740%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (70 samples, 0.07%)</title><rect x="50.7384%" y="85" width="0.0667%" height="15" fill="rgb(235,28,35)"/><text x="50.9884%" y="95.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (246 samples, 0.23%)</title><rect x="50.5725%" y="149" width="0.2345%" height="15" fill="rgb(210,56,17)"/><text x="50.8225%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (138 samples, 0.13%)</title><rect x="63.4933%" y="117" width="0.1316%" height="15" fill="rgb(224,130,29)"/><text x="63.7433%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (91 samples, 0.09%)</title><rect x="63.5382%" y="101" width="0.0868%" height="15" fill="rgb(235,212,8)"/><text x="63.7882%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (13,338 samples, 12.72%)</title><rect x="50.9291%" y="133" width="12.7168%" height="15" fill="rgb(223,33,50)"/><text x="51.1791%" y="143.50">async-redis`async_r..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (22 samples, 0.02%)</title><rect x="63.6249%" y="117" width="0.0210%" height="15" fill="rgb(219,149,13)"/><text x="63.8749%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (38 samples, 0.04%)</title><rect x="63.6936%" y="117" width="0.0362%" height="15" fill="rgb(250,156,29)"/><text x="63.9436%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (34 samples, 0.03%)</title><rect x="63.7298%" y="117" width="0.0324%" height="15" fill="rgb(216,193,19)"/><text x="63.9798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (218 samples, 0.21%)</title><rect x="63.8337%" y="85" width="0.2078%" height="15" fill="rgb(216,135,14)"/><text x="64.0837%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (236 samples, 0.23%)</title><rect x="63.8175%" y="101" width="0.2250%" height="15" fill="rgb(241,47,5)"/><text x="64.0675%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (297 samples, 0.28%)</title><rect x="63.7622%" y="117" width="0.2832%" height="15" fill="rgb(233,42,35)"/><text x="64.0122%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.01%)</title><rect x="64.0454%" y="117" width="0.0124%" height="15" fill="rgb(231,13,6)"/><text x="64.2954%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (78 samples, 0.07%)</title><rect x="64.0988%" y="101" width="0.0744%" height="15" fill="rgb(207,181,40)"/><text x="64.3488%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (69 samples, 0.07%)</title><rect x="64.1074%" y="85" width="0.0658%" height="15" fill="rgb(254,173,49)"/><text x="64.3574%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (126 samples, 0.12%)</title><rect x="64.0578%" y="117" width="0.1201%" height="15" fill="rgb(221,1,38)"/><text x="64.3078%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (100 samples, 0.10%)</title><rect x="64.1779%" y="117" width="0.0953%" height="15" fill="rgb(206,124,46)"/><text x="64.4279%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (685 samples, 0.65%)</title><rect x="63.6459%" y="133" width="0.6531%" height="15" fill="rgb(249,21,11)"/><text x="63.8959%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.02%)</title><rect x="64.2780%" y="117" width="0.0210%" height="15" fill="rgb(222,201,40)"/><text x="64.5280%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (18 samples, 0.02%)</title><rect x="64.2990%" y="133" width="0.0172%" height="15" fill="rgb(235,61,29)"/><text x="64.5490%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (105 samples, 0.10%)</title><rect x="64.3162%" y="133" width="0.1001%" height="15" fill="rgb(219,207,3)"/><text x="64.5662%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (91 samples, 0.09%)</title><rect x="64.3295%" y="117" width="0.0868%" height="15" fill="rgb(222,56,46)"/><text x="64.5795%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (11 samples, 0.01%)</title><rect x="64.4163%" y="133" width="0.0105%" height="15" fill="rgb(239,76,54)"/><text x="64.6663%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (115 samples, 0.11%)</title><rect x="64.4268%" y="133" width="0.1096%" height="15" fill="rgb(231,124,27)"/><text x="64.6768%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (14,448 samples, 13.78%)</title><rect x="50.8071%" y="149" width="13.7751%" height="15" fill="rgb(249,195,6)"/><text x="51.0571%" y="159.50">async-redis`async_red..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (35 samples, 0.03%)</title><rect x="64.6165%" y="133" width="0.0334%" height="15" fill="rgb(237,174,47)"/><text x="64.8665%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (24 samples, 0.02%)</title><rect x="64.6270%" y="117" width="0.0229%" height="15" fill="rgb(206,201,31)"/><text x="64.8770%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (81 samples, 0.08%)</title><rect x="64.5822%" y="149" width="0.0772%" height="15" fill="rgb(231,57,52)"/><text x="64.8322%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (31 samples, 0.03%)</title><rect x="64.6966%" y="133" width="0.0296%" height="15" fill="rgb(248,177,22)"/><text x="64.9466%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (36 samples, 0.03%)</title><rect x="64.7261%" y="133" width="0.0343%" height="15" fill="rgb(215,211,37)"/><text x="64.9761%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (222 samples, 0.21%)</title><rect x="64.7605%" y="133" width="0.2117%" height="15" fill="rgb(241,128,51)"/><text x="65.0105%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (211 samples, 0.20%)</title><rect x="64.7709%" y="117" width="0.2012%" height="15" fill="rgb(227,165,31)"/><text x="65.0209%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (205 samples, 0.20%)</title><rect x="64.7767%" y="101" width="0.1955%" height="15" fill="rgb(228,167,24)"/><text x="65.0267%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (121 samples, 0.12%)</title><rect x="64.8567%" y="85" width="0.1154%" height="15" fill="rgb(228,143,12)"/><text x="65.1067%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (60 samples, 0.06%)</title><rect x="65.0026%" y="117" width="0.0572%" height="15" fill="rgb(249,149,8)"/><text x="65.2526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (54 samples, 0.05%)</title><rect x="65.0083%" y="101" width="0.0515%" height="15" fill="rgb(243,35,44)"/><text x="65.2583%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (95 samples, 0.09%)</title><rect x="64.9769%" y="133" width="0.0906%" height="15" fill="rgb(246,89,9)"/><text x="65.2269%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (97 samples, 0.09%)</title><rect x="65.0675%" y="133" width="0.0925%" height="15" fill="rgb(233,213,13)"/><text x="65.3175%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.05%)</title><rect x="65.1132%" y="117" width="0.0467%" height="15" fill="rgb(233,141,41)"/><text x="65.3632%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.02%)</title><rect x="65.1399%" y="101" width="0.0200%" height="15" fill="rgb(239,167,4)"/><text x="65.3899%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (548 samples, 0.52%)</title><rect x="64.6594%" y="149" width="0.5225%" height="15" fill="rgb(209,217,16)"/><text x="64.9094%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (31 samples, 0.03%)</title><rect x="65.1819%" y="149" width="0.0296%" height="15" fill="rgb(219,88,35)"/><text x="65.4319%" y="159.50"></text></g><g><title>async-redis`__rdl_alloc (12 samples, 0.01%)</title><rect x="65.2295%" y="117" width="0.0114%" height="15" fill="rgb(220,193,23)"/><text x="65.4795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.03%)</title><rect x="65.4784%" y="53" width="0.0305%" height="15" fill="rgb(230,90,52)"/><text x="65.7284%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (301 samples, 0.29%)</title><rect x="65.3335%" y="85" width="0.2870%" height="15" fill="rgb(252,106,19)"/><text x="65.5835%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (288 samples, 0.27%)</title><rect x="65.3459%" y="69" width="0.2746%" height="15" fill="rgb(206,74,20)"/><text x="65.5959%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (110 samples, 0.10%)</title><rect x="65.5156%" y="53" width="0.1049%" height="15" fill="rgb(230,138,44)"/><text x="65.7656%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.02%)</title><rect x="65.6004%" y="37" width="0.0200%" height="15" fill="rgb(235,182,43)"/><text x="65.8504%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (358 samples, 0.34%)</title><rect x="65.2886%" y="101" width="0.3413%" height="15" fill="rgb(242,16,51)"/><text x="65.5386%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (419 samples, 0.40%)</title><rect x="65.2477%" y="117" width="0.3995%" height="15" fill="rgb(248,9,4)"/><text x="65.4977%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.02%)</title><rect x="65.6300%" y="101" width="0.0172%" height="15" fill="rgb(210,31,22)"/><text x="65.8800%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (466 samples, 0.44%)</title><rect x="65.2190%" y="133" width="0.4443%" height="15" fill="rgb(239,54,39)"/><text x="65.4690%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (523 samples, 0.50%)</title><rect x="65.2114%" y="149" width="0.4986%" height="15" fill="rgb(230,99,41)"/><text x="65.4614%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (49 samples, 0.05%)</title><rect x="65.6633%" y="133" width="0.0467%" height="15" fill="rgb(253,106,12)"/><text x="65.9133%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (22 samples, 0.02%)</title><rect x="65.7101%" y="149" width="0.0210%" height="15" fill="rgb(213,46,41)"/><text x="65.9601%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (82 samples, 0.08%)</title><rect x="65.7310%" y="149" width="0.0782%" height="15" fill="rgb(215,133,35)"/><text x="65.9810%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (28 samples, 0.03%)</title><rect x="65.8092%" y="149" width="0.0267%" height="15" fill="rgb(213,28,5)"/><text x="66.0592%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (31 samples, 0.03%)</title><rect x="65.8359%" y="149" width="0.0296%" height="15" fill="rgb(215,77,49)"/><text x="66.0859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.01%)</title><rect x="65.8693%" y="149" width="0.0114%" height="15" fill="rgb(248,100,22)"/><text x="66.1193%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (58 samples, 0.06%)</title><rect x="65.8807%" y="149" width="0.0553%" height="15" fill="rgb(208,67,9)"/><text x="66.1307%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.02%)</title><rect x="65.9150%" y="133" width="0.0210%" height="15" fill="rgb(219,133,21)"/><text x="66.1650%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.02%)</title><rect x="65.9160%" y="117" width="0.0200%" height="15" fill="rgb(246,46,29)"/><text x="66.1660%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (56 samples, 0.05%)</title><rect x="66.0228%" y="117" width="0.0534%" height="15" fill="rgb(246,185,52)"/><text x="66.2728%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (148 samples, 0.14%)</title><rect x="65.9360%" y="149" width="0.1411%" height="15" fill="rgb(252,136,11)"/><text x="66.1860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (95 samples, 0.09%)</title><rect x="65.9866%" y="133" width="0.0906%" height="15" fill="rgb(219,138,53)"/><text x="66.2366%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (16,579 samples, 15.81%)</title><rect x="50.2941%" y="165" width="15.8068%" height="15" fill="rgb(211,51,23)"/><text x="50.5441%" y="175.50">async-redis`async_redis:..</text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (25 samples, 0.02%)</title><rect x="66.1124%" y="165" width="0.0238%" height="15" fill="rgb(247,221,28)"/><text x="66.3624%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (14 samples, 0.01%)</title><rect x="66.1362%" y="165" width="0.0133%" height="15" fill="rgb(251,222,45)"/><text x="66.3862%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (70 samples, 0.07%)</title><rect x="66.2487%" y="133" width="0.0667%" height="15" fill="rgb(217,162,53)"/><text x="66.4987%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (167 samples, 0.16%)</title><rect x="66.1934%" y="149" width="0.1592%" height="15" fill="rgb(229,93,14)"/><text x="66.4434%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (39 samples, 0.04%)</title><rect x="66.3155%" y="133" width="0.0372%" height="15" fill="rgb(209,67,49)"/><text x="66.5655%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (33 samples, 0.03%)</title><rect x="66.3212%" y="117" width="0.0315%" height="15" fill="rgb(213,87,29)"/><text x="66.5712%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (54 samples, 0.05%)</title><rect x="66.3527%" y="149" width="0.0515%" height="15" fill="rgb(205,151,52)"/><text x="66.6027%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (292 samples, 0.28%)</title><rect x="66.1496%" y="165" width="0.2784%" height="15" fill="rgb(253,215,39)"/><text x="66.3996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.02%)</title><rect x="66.4051%" y="149" width="0.0229%" height="15" fill="rgb(221,220,41)"/><text x="66.6551%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (12 samples, 0.01%)</title><rect x="66.4318%" y="165" width="0.0114%" height="15" fill="rgb(218,133,21)"/><text x="66.6818%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (12 samples, 0.01%)</title><rect x="66.4432%" y="165" width="0.0114%" height="15" fill="rgb(221,193,43)"/><text x="66.6932%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (320 samples, 0.31%)</title><rect x="66.5824%" y="133" width="0.3051%" height="15" fill="rgb(240,128,52)"/><text x="66.8324%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (148 samples, 0.14%)</title><rect x="66.7464%" y="117" width="0.1411%" height="15" fill="rgb(253,114,12)"/><text x="66.9964%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (456 samples, 0.43%)</title><rect x="66.4547%" y="165" width="0.4348%" height="15" fill="rgb(215,223,47)"/><text x="66.7047%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (351 samples, 0.33%)</title><rect x="66.5548%" y="149" width="0.3347%" height="15" fill="rgb(248,225,23)"/><text x="66.8048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (26 samples, 0.02%)</title><rect x="66.8942%" y="165" width="0.0248%" height="15" fill="rgb(250,108,0)"/><text x="67.1442%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (52 samples, 0.05%)</title><rect x="66.9438%" y="149" width="0.0496%" height="15" fill="rgb(228,208,7)"/><text x="67.1938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (52 samples, 0.05%)</title><rect x="66.9438%" y="133" width="0.0496%" height="15" fill="rgb(244,45,10)"/><text x="67.1938%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (79 samples, 0.08%)</title><rect x="66.9190%" y="165" width="0.0753%" height="15" fill="rgb(207,125,25)"/><text x="67.1690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (41 samples, 0.04%)</title><rect x="67.0725%" y="133" width="0.0391%" height="15" fill="rgb(210,195,18)"/><text x="67.3225%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (128 samples, 0.12%)</title><rect x="66.9943%" y="165" width="0.1220%" height="15" fill="rgb(249,80,12)"/><text x="67.2443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (98 samples, 0.09%)</title><rect x="67.0229%" y="149" width="0.0934%" height="15" fill="rgb(221,65,9)"/><text x="67.2729%" y="159.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (48,220 samples, 45.97%)</title><rect x="28.9145%" y="181" width="45.9742%" height="15" fill="rgb(235,49,36)"/><text x="29.1645%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::fu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8,130 samples, 7.75%)</title><rect x="67.1373%" y="165" width="7.7513%" height="15" fill="rgb(225,32,20)"/><text x="67.3873%" y="175.50">libsystem_p..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (27 samples, 0.03%)</title><rect x="74.8887%" y="181" width="0.0257%" height="15" fill="rgb(215,141,46)"/><text x="75.1387%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="74.9144%" y="181" width="0.0114%" height="15" fill="rgb(250,160,47)"/><text x="75.1644%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (31 samples, 0.03%)</title><rect x="75.0450%" y="149" width="0.0296%" height="15" fill="rgb(216,222,40)"/><text x="75.2950%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (107 samples, 0.10%)</title><rect x="75.0746%" y="149" width="0.1020%" height="15" fill="rgb(234,217,39)"/><text x="75.3246%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (45 samples, 0.04%)</title><rect x="75.1766%" y="149" width="0.0429%" height="15" fill="rgb(207,178,40)"/><text x="75.4266%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (11 samples, 0.01%)</title><rect x="75.2281%" y="149" width="0.0105%" height="15" fill="rgb(221,136,13)"/><text x="75.4781%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (16 samples, 0.02%)</title><rect x="75.2586%" y="133" width="0.0153%" height="15" fill="rgb(249,199,10)"/><text x="75.5086%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="75.2977%" y="117" width="0.0124%" height="15" fill="rgb(249,222,13)"/><text x="75.5477%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (195 samples, 0.19%)</title><rect x="75.3101%" y="117" width="0.1859%" height="15" fill="rgb(244,185,38)"/><text x="75.5601%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (152 samples, 0.14%)</title><rect x="75.3511%" y="101" width="0.1449%" height="15" fill="rgb(236,202,9)"/><text x="75.6011%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (16 samples, 0.02%)</title><rect x="75.4960%" y="117" width="0.0153%" height="15" fill="rgb(250,229,37)"/><text x="75.7460%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (13 samples, 0.01%)</title><rect x="75.5113%" y="117" width="0.0124%" height="15" fill="rgb(206,174,23)"/><text x="75.7613%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (36 samples, 0.03%)</title><rect x="75.5237%" y="117" width="0.0343%" height="15" fill="rgb(211,33,43)"/><text x="75.7737%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (332 samples, 0.32%)</title><rect x="75.2739%" y="133" width="0.3165%" height="15" fill="rgb(245,58,50)"/><text x="75.5239%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.03%)</title><rect x="75.5580%" y="117" width="0.0324%" height="15" fill="rgb(244,68,36)"/><text x="75.8080%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.01%)</title><rect x="75.5923%" y="133" width="0.0105%" height="15" fill="rgb(232,229,15)"/><text x="75.8423%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (28 samples, 0.03%)</title><rect x="75.6028%" y="133" width="0.0267%" height="15" fill="rgb(254,30,23)"/><text x="75.8528%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (48 samples, 0.05%)</title><rect x="75.6295%" y="133" width="0.0458%" height="15" fill="rgb(235,160,14)"/><text x="75.8795%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (23 samples, 0.02%)</title><rect x="75.6533%" y="117" width="0.0219%" height="15" fill="rgb(212,155,44)"/><text x="75.9033%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (11 samples, 0.01%)</title><rect x="75.6753%" y="133" width="0.0105%" height="15" fill="rgb(226,2,50)"/><text x="75.9253%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (479 samples, 0.46%)</title><rect x="75.2386%" y="149" width="0.4567%" height="15" fill="rgb(234,177,6)"/><text x="75.4886%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (59 samples, 0.06%)</title><rect x="75.6953%" y="149" width="0.0563%" height="15" fill="rgb(217,24,9)"/><text x="75.9453%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (852 samples, 0.81%)</title><rect x="74.9440%" y="165" width="0.8123%" height="15" fill="rgb(220,13,46)"/><text x="75.1940%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (32 samples, 0.03%)</title><rect x="75.7592%" y="165" width="0.0305%" height="15" fill="rgb(239,221,27)"/><text x="76.0092%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (17 samples, 0.02%)</title><rect x="75.7897%" y="165" width="0.0162%" height="15" fill="rgb(222,198,25)"/><text x="76.0397%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (920 samples, 0.88%)</title><rect x="74.9325%" y="181" width="0.8772%" height="15" fill="rgb(211,99,13)"/><text x="75.1825%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (11 samples, 0.01%)</title><rect x="75.8097%" y="181" width="0.0105%" height="15" fill="rgb(232,111,31)"/><text x="76.0597%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (33 samples, 0.03%)</title><rect x="75.8269%" y="181" width="0.0315%" height="15" fill="rgb(245,82,37)"/><text x="76.0769%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (32 samples, 0.03%)</title><rect x="75.8679%" y="165" width="0.0305%" height="15" fill="rgb(227,149,46)"/><text x="76.1179%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (42 samples, 0.04%)</title><rect x="75.9060%" y="165" width="0.0400%" height="15" fill="rgb(218,36,50)"/><text x="76.1560%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (14 samples, 0.01%)</title><rect x="75.9327%" y="149" width="0.0133%" height="15" fill="rgb(226,80,48)"/><text x="76.1827%" y="159.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (12 samples, 0.01%)</title><rect x="75.9470%" y="165" width="0.0114%" height="15" fill="rgb(238,224,15)"/><text x="76.1970%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (14 samples, 0.01%)</title><rect x="76.0013%" y="117" width="0.0133%" height="15" fill="rgb(241,136,10)"/><text x="76.2513%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (12 samples, 0.01%)</title><rect x="76.0032%" y="101" width="0.0114%" height="15" fill="rgb(208,32,45)"/><text x="76.2532%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (12 samples, 0.01%)</title><rect x="76.0032%" y="85" width="0.0114%" height="15" fill="rgb(207,135,9)"/><text x="76.2532%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.01%)</title><rect x="76.0395%" y="101" width="0.0124%" height="15" fill="rgb(206,86,44)"/><text x="76.2895%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.01%)</title><rect x="76.0395%" y="85" width="0.0124%" height="15" fill="rgb(245,177,15)"/><text x="76.2895%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.01%)</title><rect x="76.0395%" y="69" width="0.0124%" height="15" fill="rgb(206,64,50)"/><text x="76.2895%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.02%)</title><rect x="76.0519%" y="101" width="0.0162%" height="15" fill="rgb(234,36,40)"/><text x="76.3019%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.01%)</title><rect x="76.0566%" y="85" width="0.0114%" height="15" fill="rgb(213,64,8)"/><text x="76.3066%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (58 samples, 0.06%)</title><rect x="76.0175%" y="117" width="0.0553%" height="15" fill="rgb(210,75,36)"/><text x="76.2675%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (83 samples, 0.08%)</title><rect x="76.0004%" y="133" width="0.0791%" height="15" fill="rgb(229,88,21)"/><text x="76.2504%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (89 samples, 0.08%)</title><rect x="75.9966%" y="149" width="0.0849%" height="15" fill="rgb(252,204,47)"/><text x="76.2466%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (54 samples, 0.05%)</title><rect x="76.1653%" y="85" width="0.0515%" height="15" fill="rgb(208,77,27)"/><text x="76.4153%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (80 samples, 0.08%)</title><rect x="76.1415%" y="101" width="0.0763%" height="15" fill="rgb(221,76,26)"/><text x="76.3915%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (11 samples, 0.01%)</title><rect x="76.2178%" y="101" width="0.0105%" height="15" fill="rgb(225,139,18)"/><text x="76.4678%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (102 samples, 0.10%)</title><rect x="76.1367%" y="117" width="0.0972%" height="15" fill="rgb(230,137,11)"/><text x="76.3867%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (24 samples, 0.02%)</title><rect x="76.2397%" y="117" width="0.0229%" height="15" fill="rgb(212,28,1)"/><text x="76.4897%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (60 samples, 0.06%)</title><rect x="76.4409%" y="101" width="0.0572%" height="15" fill="rgb(248,164,17)"/><text x="76.6909%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (59 samples, 0.06%)</title><rect x="76.5086%" y="85" width="0.0563%" height="15" fill="rgb(222,171,42)"/><text x="76.7586%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (59 samples, 0.06%)</title><rect x="76.5086%" y="69" width="0.0563%" height="15" fill="rgb(243,84,45)"/><text x="76.7586%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.07%)</title><rect x="76.5000%" y="101" width="0.0658%" height="15" fill="rgb(252,49,23)"/><text x="76.7500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (42 samples, 0.04%)</title><rect x="76.6516%" y="69" width="0.0400%" height="15" fill="rgb(215,19,7)"/><text x="76.9016%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (139 samples, 0.13%)</title><rect x="76.5658%" y="101" width="0.1325%" height="15" fill="rgb(238,81,41)"/><text x="76.8158%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (91 samples, 0.09%)</title><rect x="76.6115%" y="85" width="0.0868%" height="15" fill="rgb(210,199,37)"/><text x="76.8615%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (17 samples, 0.02%)</title><rect x="76.7040%" y="101" width="0.0162%" height="15" fill="rgb(244,192,49)"/><text x="76.9540%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (481 samples, 0.46%)</title><rect x="76.2626%" y="117" width="0.4586%" height="15" fill="rgb(226,211,11)"/><text x="76.5126%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (45 samples, 0.04%)</title><rect x="76.7269%" y="117" width="0.0429%" height="15" fill="rgb(236,162,54)"/><text x="76.9769%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (695 samples, 0.66%)</title><rect x="76.1186%" y="133" width="0.6626%" height="15" fill="rgb(220,229,9)"/><text x="76.3686%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (755 samples, 0.72%)</title><rect x="76.0814%" y="149" width="0.7198%" height="15" fill="rgb(250,87,22)"/><text x="76.3314%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (15 samples, 0.01%)</title><rect x="76.7870%" y="133" width="0.0143%" height="15" fill="rgb(239,43,17)"/><text x="77.0370%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (904 samples, 0.86%)</title><rect x="75.9584%" y="165" width="0.8619%" height="15" fill="rgb(231,177,25)"/><text x="76.2084%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="76.8079%" y="149" width="0.0124%" height="15" fill="rgb(219,179,1)"/><text x="77.0579%" y="159.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (25 samples, 0.02%)</title><rect x="76.8213%" y="165" width="0.0238%" height="15" fill="rgb(238,219,53)"/><text x="77.0713%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (13 samples, 0.01%)</title><rect x="76.8508%" y="165" width="0.0124%" height="15" fill="rgb(232,167,36)"/><text x="77.1008%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (1,068 samples, 1.02%)</title><rect x="75.8583%" y="181" width="1.0183%" height="15" fill="rgb(244,19,51)"/><text x="76.1083%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.01%)</title><rect x="76.8632%" y="165" width="0.0133%" height="15" fill="rgb(224,6,22)"/><text x="77.1132%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (11 samples, 0.01%)</title><rect x="76.8794%" y="181" width="0.0105%" height="15" fill="rgb(224,145,5)"/><text x="77.1294%" y="191.50"></text></g><g><title>async-redis`DYLD-STUB$$malloc (11 samples, 0.01%)</title><rect x="76.8909%" y="181" width="0.0105%" height="15" fill="rgb(234,130,49)"/><text x="77.1409%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (19 samples, 0.02%)</title><rect x="76.9033%" y="181" width="0.0181%" height="15" fill="rgb(254,6,2)"/><text x="77.1533%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode (27 samples, 0.03%)</title><rect x="76.9347%" y="181" width="0.0257%" height="15" fill="rgb(208,96,46)"/><text x="77.1847%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (30 samples, 0.03%)</title><rect x="76.9605%" y="181" width="0.0286%" height="15" fill="rgb(239,3,39)"/><text x="77.2105%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (45 samples, 0.04%)</title><rect x="76.9891%" y="181" width="0.0429%" height="15" fill="rgb(233,210,1)"/><text x="77.2391%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (17 samples, 0.02%)</title><rect x="77.0329%" y="181" width="0.0162%" height="15" fill="rgb(244,137,37)"/><text x="77.2829%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (238 samples, 0.23%)</title><rect x="77.0663%" y="149" width="0.2269%" height="15" fill="rgb(240,136,2)"/><text x="77.3163%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (201 samples, 0.19%)</title><rect x="77.1016%" y="133" width="0.1916%" height="15" fill="rgb(239,18,37)"/><text x="77.3516%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (88 samples, 0.08%)</title><rect x="77.3285%" y="133" width="0.0839%" height="15" fill="rgb(218,185,22)"/><text x="77.5785%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (127 samples, 0.12%)</title><rect x="77.2932%" y="149" width="0.1211%" height="15" fill="rgb(225,218,4)"/><text x="77.5432%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (382 samples, 0.36%)</title><rect x="77.0615%" y="165" width="0.3642%" height="15" fill="rgb(230,182,32)"/><text x="77.3115%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (406 samples, 0.39%)</title><rect x="77.0539%" y="181" width="0.3871%" height="15" fill="rgb(242,56,43)"/><text x="77.3039%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (14 samples, 0.01%)</title><rect x="77.4420%" y="165" width="0.0133%" height="15" fill="rgb(233,99,24)"/><text x="77.6920%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (14 samples, 0.01%)</title><rect x="77.5144%" y="149" width="0.0133%" height="15" fill="rgb(234,209,42)"/><text x="77.7644%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (19 samples, 0.02%)</title><rect x="77.6708%" y="117" width="0.0181%" height="15" fill="rgb(227,7,12)"/><text x="77.9208%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (16 samples, 0.02%)</title><rect x="77.6736%" y="101" width="0.0153%" height="15" fill="rgb(245,203,43)"/><text x="77.9236%" y="111.50"></text></g><g><title>async-redis`__rdl_alloc (13 samples, 0.01%)</title><rect x="77.6994%" y="117" width="0.0124%" height="15" fill="rgb(238,205,33)"/><text x="77.9494%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 0.01%)</title><rect x="77.7165%" y="117" width="0.0114%" height="15" fill="rgb(231,56,7)"/><text x="77.9665%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (38 samples, 0.04%)</title><rect x="77.7461%" y="101" width="0.0362%" height="15" fill="rgb(244,186,29)"/><text x="77.9961%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (13 samples, 0.01%)</title><rect x="77.7699%" y="85" width="0.0124%" height="15" fill="rgb(234,111,31)"/><text x="78.0199%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (16 samples, 0.02%)</title><rect x="77.7823%" y="101" width="0.0153%" height="15" fill="rgb(241,149,10)"/><text x="78.0323%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 0.03%)</title><rect x="77.8958%" y="53" width="0.0286%" height="15" fill="rgb(249,206,44)"/><text x="78.1458%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (165 samples, 0.16%)</title><rect x="77.8357%" y="85" width="0.1573%" height="15" fill="rgb(251,153,30)"/><text x="78.0857%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (153 samples, 0.15%)</title><rect x="77.8472%" y="69" width="0.1459%" height="15" fill="rgb(239,152,38)"/><text x="78.0972%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (69 samples, 0.07%)</title><rect x="77.9273%" y="53" width="0.0658%" height="15" fill="rgb(249,139,47)"/><text x="78.1773%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (213 samples, 0.20%)</title><rect x="77.7976%" y="101" width="0.2031%" height="15" fill="rgb(244,64,35)"/><text x="78.0476%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (278 samples, 0.27%)</title><rect x="77.7385%" y="117" width="0.2651%" height="15" fill="rgb(216,46,15)"/><text x="77.9885%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.01%)</title><rect x="78.0035%" y="117" width="0.0143%" height="15" fill="rgb(250,74,19)"/><text x="78.2535%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.01%)</title><rect x="78.0178%" y="117" width="0.0133%" height="15" fill="rgb(249,42,33)"/><text x="78.2678%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (669 samples, 0.64%)</title><rect x="77.5430%" y="133" width="0.6378%" height="15" fill="rgb(242,149,17)"/><text x="77.7930%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (157 samples, 0.15%)</title><rect x="78.0312%" y="117" width="0.1497%" height="15" fill="rgb(244,29,21)"/><text x="78.2812%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (19 samples, 0.02%)</title><rect x="78.1952%" y="133" width="0.0181%" height="15" fill="rgb(220,130,37)"/><text x="78.4452%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (11 samples, 0.01%)</title><rect x="78.2419%" y="101" width="0.0105%" height="15" fill="rgb(211,67,2)"/><text x="78.4919%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (34 samples, 0.03%)</title><rect x="78.2219%" y="117" width="0.0324%" height="15" fill="rgb(235,68,52)"/><text x="78.4719%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (84 samples, 0.08%)</title><rect x="78.3134%" y="101" width="0.0801%" height="15" fill="rgb(246,142,3)"/><text x="78.5634%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (56 samples, 0.05%)</title><rect x="78.3935%" y="101" width="0.0534%" height="15" fill="rgb(241,25,7)"/><text x="78.6435%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (13 samples, 0.01%)</title><rect x="78.4469%" y="101" width="0.0124%" height="15" fill="rgb(242,119,39)"/><text x="78.6969%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (225 samples, 0.21%)</title><rect x="78.2543%" y="117" width="0.2145%" height="15" fill="rgb(241,98,45)"/><text x="78.5043%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (137 samples, 0.13%)</title><rect x="78.5317%" y="101" width="0.1306%" height="15" fill="rgb(254,28,30)"/><text x="78.7817%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::create_with (215 samples, 0.20%)</title><rect x="78.4698%" y="117" width="0.2050%" height="15" fill="rgb(241,142,54)"/><text x="78.7198%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (12 samples, 0.01%)</title><rect x="78.6938%" y="117" width="0.0114%" height="15" fill="rgb(222,85,15)"/><text x="78.9438%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (521 samples, 0.50%)</title><rect x="78.2133%" y="133" width="0.4967%" height="15" fill="rgb(210,85,47)"/><text x="78.4633%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (17 samples, 0.02%)</title><rect x="78.7462%" y="133" width="0.0162%" height="15" fill="rgb(224,206,25)"/><text x="78.9962%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1,329 samples, 1.27%)</title><rect x="77.5278%" y="149" width="1.2671%" height="15" fill="rgb(243,201,19)"/><text x="77.7778%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (34 samples, 0.03%)</title><rect x="78.7625%" y="133" width="0.0324%" height="15" fill="rgb(236,59,4)"/><text x="79.0125%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (16 samples, 0.02%)</title><rect x="78.8015%" y="149" width="0.0153%" height="15" fill="rgb(254,179,45)"/><text x="79.0515%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (15 samples, 0.01%)</title><rect x="78.8168%" y="149" width="0.0143%" height="15" fill="rgb(226,14,10)"/><text x="79.0668%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (22 samples, 0.02%)</title><rect x="78.8311%" y="149" width="0.0210%" height="15" fill="rgb(244,27,41)"/><text x="79.0811%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,481 samples, 1.41%)</title><rect x="77.4639%" y="165" width="1.4120%" height="15" fill="rgb(235,35,32)"/><text x="77.7139%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="78.8607%" y="149" width="0.0153%" height="15" fill="rgb(218,68,31)"/><text x="79.1107%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,514 samples, 1.44%)</title><rect x="77.4410%" y="181" width="1.4435%" height="15" fill="rgb(207,120,37)"/><text x="77.6910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.03%)</title><rect x="78.8988%" y="181" width="0.0296%" height="15" fill="rgb(227,98,0)"/><text x="79.1488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (44 samples, 0.04%)</title><rect x="78.9350%" y="181" width="0.0420%" height="15" fill="rgb(207,7,3)"/><text x="79.1850%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52,769 samples, 50.31%)</title><rect x="28.7114%" y="197" width="50.3113%" height="15" fill="rgb(206,98,19)"/><text x="28.9614%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Fu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.04%)</title><rect x="78.9779%" y="181" width="0.0448%" height="15" fill="rgb(217,5,26)"/><text x="79.2279%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (15 samples, 0.01%)</title><rect x="79.0313%" y="197" width="0.0143%" height="15" fill="rgb(235,190,38)"/><text x="79.2813%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (27 samples, 0.03%)</title><rect x="79.0475%" y="197" width="0.0257%" height="15" fill="rgb(247,86,24)"/><text x="79.2975%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (49 samples, 0.05%)</title><rect x="79.0752%" y="197" width="0.0467%" height="15" fill="rgb(205,101,16)"/><text x="79.3252%" y="207.50"></text></g><g><title>async-redis`tracing::__macro_support::MacroCallsite::is_enabled (11 samples, 0.01%)</title><rect x="79.1219%" y="197" width="0.0105%" height="15" fill="rgb(246,168,33)"/><text x="79.3719%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::new (15 samples, 0.01%)</title><rect x="79.1343%" y="197" width="0.0143%" height="15" fill="rgb(231,114,1)"/><text x="79.3843%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (19 samples, 0.02%)</title><rect x="79.1486%" y="197" width="0.0181%" height="15" fill="rgb(207,184,53)"/><text x="79.3986%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (53,135 samples, 50.66%)</title><rect x="28.5484%" y="213" width="50.6602%" height="15" fill="rgb(224,95,51)"/><text x="28.7984%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::po..</text></g><g><title>libdyld.dylib`tlv_get_addr (44 samples, 0.04%)</title><rect x="79.1667%" y="197" width="0.0420%" height="15" fill="rgb(212,188,45)"/><text x="79.4167%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (17 samples, 0.02%)</title><rect x="79.2087%" y="213" width="0.0162%" height="15" fill="rgb(223,154,38)"/><text x="79.4587%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (15 samples, 0.01%)</title><rect x="79.2973%" y="197" width="0.0143%" height="15" fill="rgb(251,22,52)"/><text x="79.5473%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (113 samples, 0.11%)</title><rect x="79.2249%" y="213" width="0.1077%" height="15" fill="rgb(229,209,22)"/><text x="79.4749%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (22 samples, 0.02%)</title><rect x="79.3116%" y="197" width="0.0210%" height="15" fill="rgb(234,138,34)"/><text x="79.5616%" y="207.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.01%)</title><rect x="79.3488%" y="213" width="0.0105%" height="15" fill="rgb(212,95,11)"/><text x="79.5988%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (29 samples, 0.03%)</title><rect x="79.3593%" y="213" width="0.0276%" height="15" fill="rgb(240,179,47)"/><text x="79.6093%" y="223.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.02%)</title><rect x="79.3869%" y="213" width="0.0162%" height="15" fill="rgb(240,163,11)"/><text x="79.6369%" y="223.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (192 samples, 0.18%)</title><rect x="79.4890%" y="181" width="0.1831%" height="15" fill="rgb(236,37,12)"/><text x="79.7390%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 0.08%)</title><rect x="79.6720%" y="181" width="0.0801%" height="15" fill="rgb(232,164,16)"/><text x="79.9220%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.07%)</title><rect x="79.6787%" y="165" width="0.0734%" height="15" fill="rgb(244,205,15)"/><text x="79.9287%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (71 samples, 0.07%)</title><rect x="79.6844%" y="149" width="0.0677%" height="15" fill="rgb(223,117,47)"/><text x="79.9344%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.03%)</title><rect x="79.7235%" y="133" width="0.0286%" height="15" fill="rgb(244,107,35)"/><text x="79.9735%" y="143.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (308 samples, 0.29%)</title><rect x="79.4623%" y="197" width="0.2937%" height="15" fill="rgb(205,140,8)"/><text x="79.7123%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (13 samples, 0.01%)</title><rect x="79.7855%" y="181" width="0.0124%" height="15" fill="rgb(228,84,46)"/><text x="80.0355%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.06%)</title><rect x="79.8208%" y="165" width="0.0639%" height="15" fill="rgb(254,188,9)"/><text x="80.0708%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (62 samples, 0.06%)</title><rect x="79.8255%" y="149" width="0.0591%" height="15" fill="rgb(206,112,54)"/><text x="80.0755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.01%)</title><rect x="79.8741%" y="133" width="0.0105%" height="15" fill="rgb(216,84,49)"/><text x="80.1241%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (93 samples, 0.09%)</title><rect x="79.7979%" y="181" width="0.0887%" height="15" fill="rgb(214,194,35)"/><text x="80.0479%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (159 samples, 0.15%)</title><rect x="79.7569%" y="197" width="0.1516%" height="15" fill="rgb(249,28,3)"/><text x="80.0069%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.02%)</title><rect x="79.8884%" y="181" width="0.0200%" height="15" fill="rgb(222,56,52)"/><text x="80.1384%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (14 samples, 0.01%)</title><rect x="79.9590%" y="181" width="0.0133%" height="15" fill="rgb(245,217,50)"/><text x="80.2090%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (85 samples, 0.08%)</title><rect x="79.9085%" y="197" width="0.0810%" height="15" fill="rgb(213,201,24)"/><text x="80.1585%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (17 samples, 0.02%)</title><rect x="79.9733%" y="181" width="0.0162%" height="15" fill="rgb(248,116,28)"/><text x="80.2233%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (14 samples, 0.01%)</title><rect x="80.0038%" y="197" width="0.0133%" height="15" fill="rgb(219,72,43)"/><text x="80.2538%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.02%)</title><rect x="80.0276%" y="181" width="0.0248%" height="15" fill="rgb(209,138,14)"/><text x="80.2776%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.02%)</title><rect x="80.0305%" y="165" width="0.0219%" height="15" fill="rgb(222,18,33)"/><text x="80.2805%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.03%)</title><rect x="80.0219%" y="197" width="0.0315%" height="15" fill="rgb(213,199,7)"/><text x="80.2719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (107 samples, 0.10%)</title><rect x="80.0534%" y="197" width="0.1020%" height="15" fill="rgb(250,110,10)"/><text x="80.3034%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.06%)</title><rect x="80.0934%" y="181" width="0.0620%" height="15" fill="rgb(248,123,6)"/><text x="80.3434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.03%)</title><rect x="80.1268%" y="165" width="0.0286%" height="15" fill="rgb(206,91,31)"/><text x="80.3768%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (804 samples, 0.77%)</title><rect x="79.4032%" y="213" width="0.7666%" height="15" fill="rgb(211,154,13)"/><text x="79.6532%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (20 samples, 0.02%)</title><rect x="80.1697%" y="213" width="0.0191%" height="15" fill="rgb(225,148,7)"/><text x="80.4197%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode (30 samples, 0.03%)</title><rect x="80.1916%" y="213" width="0.0286%" height="15" fill="rgb(220,160,43)"/><text x="80.4416%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 0.04%)</title><rect x="80.2307%" y="197" width="0.0391%" height="15" fill="rgb(213,52,39)"/><text x="80.4807%" y="207.50"></text></g><g><title>async-redis`async_redis::server::calculate_hash (57 samples, 0.05%)</title><rect x="80.2202%" y="213" width="0.0543%" height="15" fill="rgb(243,137,7)"/><text x="80.4702%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (11 samples, 0.01%)</title><rect x="80.2746%" y="213" width="0.0105%" height="15" fill="rgb(230,79,13)"/><text x="80.5246%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (13 samples, 0.01%)</title><rect x="80.3604%" y="197" width="0.0124%" height="15" fill="rgb(247,105,23)"/><text x="80.6104%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.01%)</title><rect x="80.3728%" y="197" width="0.0105%" height="15" fill="rgb(223,179,41)"/><text x="80.6228%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.01%)</title><rect x="80.3833%" y="197" width="0.0105%" height="15" fill="rgb(218,9,34)"/><text x="80.6333%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (22 samples, 0.02%)</title><rect x="80.3938%" y="197" width="0.0210%" height="15" fill="rgb(222,106,8)"/><text x="80.6438%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (20 samples, 0.02%)</title><rect x="80.3957%" y="181" width="0.0191%" height="15" fill="rgb(211,220,0)"/><text x="80.6457%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (160 samples, 0.15%)</title><rect x="80.2851%" y="213" width="0.1525%" height="15" fill="rgb(229,52,16)"/><text x="80.5351%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (24 samples, 0.02%)</title><rect x="80.4147%" y="197" width="0.0229%" height="15" fill="rgb(212,155,18)"/><text x="80.6647%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sysctl (15 samples, 0.01%)</title><rect x="80.5225%" y="181" width="0.0143%" height="15" fill="rgb(242,21,14)"/><text x="80.7725%" y="191.50"></text></g><g><title>libsystem_c.dylib`sysctl (19 samples, 0.02%)</title><rect x="80.5368%" y="181" width="0.0181%" height="15" fill="rgb(222,19,48)"/><text x="80.7868%" y="191.50"></text></g><g><title>libsystem_c.dylib`sysconf (3,527 samples, 3.36%)</title><rect x="80.4519%" y="197" width="3.3627%" height="15" fill="rgb(232,45,27)"/><text x="80.7019%" y="207.50">lib..</text></g><g><title>libsystem_kernel.dylib`__sysctl (3,419 samples, 3.26%)</title><rect x="80.5549%" y="181" width="3.2598%" height="15" fill="rgb(249,103,42)"/><text x="80.8049%" y="191.50">lib..</text></g><g><title>async-redis`num_cpus::get_num_cpus (3,554 samples, 3.39%)</title><rect x="80.4376%" y="213" width="3.3885%" height="15" fill="rgb(246,81,33)"/><text x="80.6876%" y="223.50">asy..</text></g><g><title>libsystem_c.dylib`sysctl (12 samples, 0.01%)</title><rect x="83.8147%" y="197" width="0.0114%" height="15" fill="rgb(252,33,42)"/><text x="84.0647%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (30 samples, 0.03%)</title><rect x="83.8261%" y="213" width="0.0286%" height="15" fill="rgb(209,212,41)"/><text x="84.0761%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (26 samples, 0.02%)</title><rect x="83.8585%" y="213" width="0.0248%" height="15" fill="rgb(207,154,6)"/><text x="84.1085%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (13 samples, 0.01%)</title><rect x="83.9662%" y="181" width="0.0124%" height="15" fill="rgb(223,64,47)"/><text x="84.2162%" y="191.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (46 samples, 0.04%)</title><rect x="84.0397%" y="149" width="0.0439%" height="15" fill="rgb(211,161,38)"/><text x="84.2897%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (13 samples, 0.01%)</title><rect x="84.0864%" y="149" width="0.0124%" height="15" fill="rgb(219,138,40)"/><text x="84.3364%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (20 samples, 0.02%)</title><rect x="84.0988%" y="149" width="0.0191%" height="15" fill="rgb(241,228,46)"/><text x="84.3488%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (11,316 samples, 10.79%)</title><rect x="84.0130%" y="165" width="10.7890%" height="15" fill="rgb(223,209,38)"/><text x="84.2630%" y="175.50">async-redis`&lt;&amp;mi..</text></g><g><title>libsystem_kernel.dylib`__sendto (11,206 samples, 10.68%)</title><rect x="84.1178%" y="149" width="10.6841%" height="15" fill="rgb(236,164,45)"/><text x="84.3678%" y="159.50">libsystem_kernel..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (32 samples, 0.03%)</title><rect x="94.9011%" y="149" width="0.0305%" height="15" fill="rgb(231,15,5)"/><text x="95.1511%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (133 samples, 0.13%)</title><rect x="94.8124%" y="165" width="0.1268%" height="15" fill="rgb(252,35,15)"/><text x="95.0624%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (11,557 samples, 11.02%)</title><rect x="83.9348%" y="197" width="11.0187%" height="15" fill="rgb(248,181,18)"/><text x="84.1848%" y="207.50">async-redis`&lt;tok..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (11,511 samples, 10.97%)</title><rect x="83.9786%" y="181" width="10.9749%" height="15" fill="rgb(233,39,42)"/><text x="84.2286%" y="191.50">async-redis`toki..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (15 samples, 0.01%)</title><rect x="94.9392%" y="165" width="0.0143%" height="15" fill="rgb(238,110,33)"/><text x="95.1892%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (11,615 samples, 11.07%)</title><rect x="83.8843%" y="213" width="11.0740%" height="15" fill="rgb(233,195,10)"/><text x="84.1343%" y="223.50">async-redis`toki..</text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (19 samples, 0.02%)</title><rect x="94.9650%" y="213" width="0.0181%" height="15" fill="rgb(254,105,3)"/><text x="95.2150%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (19 samples, 0.02%)</title><rect x="94.9650%" y="197" width="0.0181%" height="15" fill="rgb(221,225,9)"/><text x="95.2150%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (25 samples, 0.02%)</title><rect x="94.9831%" y="213" width="0.0238%" height="15" fill="rgb(224,227,45)"/><text x="95.2331%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (39 samples, 0.04%)</title><rect x="95.0203%" y="197" width="0.0372%" height="15" fill="rgb(229,198,43)"/><text x="95.2703%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (69 samples, 0.07%)</title><rect x="95.0574%" y="197" width="0.0658%" height="15" fill="rgb(206,209,35)"/><text x="95.3074%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (11 samples, 0.01%)</title><rect x="95.1652%" y="165" width="0.0105%" height="15" fill="rgb(245,195,53)"/><text x="95.4152%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (46 samples, 0.04%)</title><rect x="95.1442%" y="181" width="0.0439%" height="15" fill="rgb(240,92,26)"/><text x="95.3942%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (193 samples, 0.18%)</title><rect x="95.0069%" y="213" width="0.1840%" height="15" fill="rgb(207,40,23)"/><text x="95.2569%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (71 samples, 0.07%)</title><rect x="95.1232%" y="197" width="0.0677%" height="15" fill="rgb(223,111,35)"/><text x="95.3732%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (54 samples, 0.05%)</title><rect x="95.2825%" y="197" width="0.0515%" height="15" fill="rgb(229,147,28)"/><text x="95.5325%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (152 samples, 0.14%)</title><rect x="95.1909%" y="213" width="0.1449%" height="15" fill="rgb(211,29,28)"/><text x="95.4409%" y="223.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::load (21 samples, 0.02%)</title><rect x="95.3425%" y="213" width="0.0200%" height="15" fill="rgb(228,72,33)"/><text x="95.5925%" y="223.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::set_rx_task (13 samples, 0.01%)</title><rect x="95.3625%" y="213" width="0.0124%" height="15" fill="rgb(205,214,31)"/><text x="95.6125%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (27 samples, 0.03%)</title><rect x="95.3749%" y="213" width="0.0257%" height="15" fill="rgb(224,111,15)"/><text x="95.6249%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (13 samples, 0.01%)</title><rect x="95.4007%" y="213" width="0.0124%" height="15" fill="rgb(253,21,26)"/><text x="95.6507%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.02%)</title><rect x="95.4131%" y="213" width="0.0219%" height="15" fill="rgb(245,139,43)"/><text x="95.6631%" y="223.50"></text></g><g><title>libsystem_c.dylib`sysconf (38 samples, 0.04%)</title><rect x="95.4350%" y="213" width="0.0362%" height="15" fill="rgb(252,170,7)"/><text x="95.6850%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (22 samples, 0.02%)</title><rect x="95.5151%" y="165" width="0.0210%" height="15" fill="rgb(231,118,14)"/><text x="95.7651%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (118 samples, 0.11%)</title><rect x="95.4836%" y="197" width="0.1125%" height="15" fill="rgb(238,83,0)"/><text x="95.7336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (115 samples, 0.11%)</title><rect x="95.4865%" y="181" width="0.1096%" height="15" fill="rgb(221,39,39)"/><text x="95.7365%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (61 samples, 0.06%)</title><rect x="95.5380%" y="165" width="0.0582%" height="15" fill="rgb(222,119,46)"/><text x="95.7880%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (131 samples, 0.12%)</title><rect x="95.4722%" y="213" width="0.1249%" height="15" fill="rgb(222,165,49)"/><text x="95.7222%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (85 samples, 0.08%)</title><rect x="95.6810%" y="197" width="0.0810%" height="15" fill="rgb(219,113,52)"/><text x="95.9310%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (83 samples, 0.08%)</title><rect x="95.6829%" y="181" width="0.0791%" height="15" fill="rgb(214,7,15)"/><text x="95.9329%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (167 samples, 0.16%)</title><rect x="95.6038%" y="213" width="0.1592%" height="15" fill="rgb(235,32,4)"/><text x="95.8538%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (84 samples, 0.08%)</title><rect x="95.9089%" y="181" width="0.0801%" height="15" fill="rgb(238,90,54)"/><text x="96.1589%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (272 samples, 0.26%)</title><rect x="95.7630%" y="213" width="0.2593%" height="15" fill="rgb(213,208,19)"/><text x="96.0130%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (197 samples, 0.19%)</title><rect x="95.8345%" y="197" width="0.1878%" height="15" fill="rgb(233,156,4)"/><text x="96.0845%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (35 samples, 0.03%)</title><rect x="95.9889%" y="181" width="0.0334%" height="15" fill="rgb(207,194,5)"/><text x="96.2389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.03%)</title><rect x="96.0261%" y="213" width="0.0286%" height="15" fill="rgb(206,111,30)"/><text x="96.2761%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (90 samples, 0.09%)</title><rect x="96.0566%" y="213" width="0.0858%" height="15" fill="rgb(243,70,54)"/><text x="96.3066%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71,924 samples, 68.57%)</title><rect x="27.5692%" y="229" width="68.5742%" height="15" fill="rgb(242,28,8)"/><text x="27.8192%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (43 samples, 0.04%)</title><rect x="96.1434%" y="229" width="0.0410%" height="15" fill="rgb(219,106,18)"/><text x="96.3934%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.01%)</title><rect x="96.5467%" y="165" width="0.0114%" height="15" fill="rgb(244,222,10)"/><text x="96.7967%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (228 samples, 0.22%)</title><rect x="96.3484%" y="181" width="0.2174%" height="15" fill="rgb(236,179,52)"/><text x="96.5984%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (243 samples, 0.23%)</title><rect x="96.3398%" y="197" width="0.2317%" height="15" fill="rgb(213,23,39)"/><text x="96.5898%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (298 samples, 0.28%)</title><rect x="96.3064%" y="213" width="0.2841%" height="15" fill="rgb(238,48,10)"/><text x="96.5564%" y="223.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (20 samples, 0.02%)</title><rect x="96.5715%" y="197" width="0.0191%" height="15" fill="rgb(251,196,23)"/><text x="96.8215%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.01%)</title><rect x="96.5953%" y="213" width="0.0105%" height="15" fill="rgb(250,152,24)"/><text x="96.8453%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (15 samples, 0.01%)</title><rect x="96.6678%" y="181" width="0.0143%" height="15" fill="rgb(209,150,17)"/><text x="96.9178%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (14 samples, 0.01%)</title><rect x="96.6687%" y="165" width="0.0133%" height="15" fill="rgb(234,202,34)"/><text x="96.9187%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (26 samples, 0.02%)</title><rect x="96.6964%" y="165" width="0.0248%" height="15" fill="rgb(253,148,53)"/><text x="96.9464%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (30 samples, 0.03%)</title><rect x="96.7212%" y="165" width="0.0286%" height="15" fill="rgb(218,129,16)"/><text x="96.9712%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (78 samples, 0.07%)</title><rect x="96.7498%" y="165" width="0.0744%" height="15" fill="rgb(216,85,19)"/><text x="96.9998%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (30 samples, 0.03%)</title><rect x="96.7955%" y="149" width="0.0286%" height="15" fill="rgb(235,228,7)"/><text x="97.0455%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (227 samples, 0.22%)</title><rect x="96.6192%" y="197" width="0.2164%" height="15" fill="rgb(245,175,0)"/><text x="96.8692%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (153 samples, 0.15%)</title><rect x="96.6897%" y="181" width="0.1459%" height="15" fill="rgb(208,168,36)"/><text x="96.9397%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (12 samples, 0.01%)</title><rect x="96.8241%" y="165" width="0.0114%" height="15" fill="rgb(246,171,24)"/><text x="97.0741%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (12 samples, 0.01%)</title><rect x="96.8356%" y="197" width="0.0114%" height="15" fill="rgb(215,142,24)"/><text x="97.0856%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (266 samples, 0.25%)</title><rect x="96.6058%" y="213" width="0.2536%" height="15" fill="rgb(250,187,7)"/><text x="96.8558%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="96.8470%" y="197" width="0.0124%" height="15" fill="rgb(228,66,33)"/><text x="97.0970%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14 samples, 0.01%)</title><rect x="96.8670%" y="213" width="0.0133%" height="15" fill="rgb(234,215,21)"/><text x="97.1170%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="96.9080%" y="197" width="0.0114%" height="15" fill="rgb(222,191,20)"/><text x="97.1580%" y="207.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (16 samples, 0.02%)</title><rect x="96.9328%" y="197" width="0.0153%" height="15" fill="rgb(245,79,54)"/><text x="97.1828%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (75 samples, 0.07%)</title><rect x="97.0244%" y="181" width="0.0715%" height="15" fill="rgb(240,10,37)"/><text x="97.2744%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (104 samples, 0.10%)</title><rect x="97.2141%" y="165" width="0.0992%" height="15" fill="rgb(214,192,32)"/><text x="97.4641%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (226 samples, 0.22%)</title><rect x="97.1006%" y="181" width="0.2155%" height="15" fill="rgb(209,36,54)"/><text x="97.3506%" y="191.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (20 samples, 0.02%)</title><rect x="97.3161%" y="181" width="0.0191%" height="15" fill="rgb(220,10,11)"/><text x="97.5661%" y="191.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (408 samples, 0.39%)</title><rect x="96.9481%" y="197" width="0.3890%" height="15" fill="rgb(221,106,17)"/><text x="97.1981%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (517 samples, 0.49%)</title><rect x="96.8804%" y="213" width="0.4929%" height="15" fill="rgb(251,142,44)"/><text x="97.1304%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.03%)</title><rect x="97.3476%" y="197" width="0.0257%" height="15" fill="rgb(238,13,15)"/><text x="97.5976%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (16 samples, 0.02%)</title><rect x="97.3733%" y="213" width="0.0153%" height="15" fill="rgb(208,107,27)"/><text x="97.6233%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (13 samples, 0.01%)</title><rect x="97.3886%" y="213" width="0.0124%" height="15" fill="rgb(205,136,37)"/><text x="97.6386%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,280 samples, 1.22%)</title><rect x="96.1873%" y="229" width="1.2204%" height="15" fill="rgb(250,205,27)"/><text x="96.4373%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (16 samples, 0.02%)</title><rect x="97.4296%" y="229" width="0.0153%" height="15" fill="rgb(210,80,43)"/><text x="97.6796%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (78 samples, 0.07%)</title><rect x="97.4973%" y="197" width="0.0744%" height="15" fill="rgb(247,160,36)"/><text x="97.7473%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (17 samples, 0.02%)</title><rect x="97.5716%" y="197" width="0.0162%" height="15" fill="rgb(234,13,49)"/><text x="97.8216%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (161 samples, 0.15%)</title><rect x="97.6183%" y="165" width="0.1535%" height="15" fill="rgb(234,122,0)"/><text x="97.8683%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (121 samples, 0.12%)</title><rect x="97.6565%" y="149" width="0.1154%" height="15" fill="rgb(207,146,38)"/><text x="97.9065%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (21 samples, 0.02%)</title><rect x="97.7766%" y="165" width="0.0200%" height="15" fill="rgb(207,177,25)"/><text x="98.0266%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (216 samples, 0.21%)</title><rect x="97.6059%" y="181" width="0.2059%" height="15" fill="rgb(211,178,42)"/><text x="97.8559%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="97.7966%" y="165" width="0.0153%" height="15" fill="rgb(230,69,54)"/><text x="98.0466%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (25 samples, 0.02%)</title><rect x="97.8138%" y="181" width="0.0238%" height="15" fill="rgb(214,135,41)"/><text x="98.0638%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (13 samples, 0.01%)</title><rect x="97.8252%" y="165" width="0.0124%" height="15" fill="rgb(237,67,25)"/><text x="98.0752%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (264 samples, 0.25%)</title><rect x="97.5897%" y="197" width="0.2517%" height="15" fill="rgb(222,189,50)"/><text x="97.8397%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (422 samples, 0.40%)</title><rect x="97.4505%" y="213" width="0.4023%" height="15" fill="rgb(245,148,34)"/><text x="97.7005%" y="223.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.01%)</title><rect x="97.8586%" y="213" width="0.0105%" height="15" fill="rgb(222,29,6)"/><text x="98.1086%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (451 samples, 0.43%)</title><rect x="97.4448%" y="229" width="0.4300%" height="15" fill="rgb(221,189,43)"/><text x="97.6948%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (16 samples, 0.02%)</title><rect x="97.8777%" y="229" width="0.0153%" height="15" fill="rgb(207,36,27)"/><text x="98.1277%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (25 samples, 0.02%)</title><rect x="97.9101%" y="229" width="0.0238%" height="15" fill="rgb(217,90,24)"/><text x="98.1601%" y="239.50"></text></g><g><title>async-redis`__rust_dealloc (13 samples, 0.01%)</title><rect x="97.9339%" y="229" width="0.0124%" height="15" fill="rgb(224,66,35)"/><text x="98.1839%" y="239.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="97.9463%" y="229" width="0.0143%" height="15" fill="rgb(221,13,50)"/><text x="98.1963%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (27 samples, 0.03%)</title><rect x="97.9606%" y="229" width="0.0257%" height="15" fill="rgb(236,68,49)"/><text x="98.2106%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode (14 samples, 0.01%)</title><rect x="97.9864%" y="229" width="0.0133%" height="15" fill="rgb(229,146,28)"/><text x="98.2364%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (15 samples, 0.01%)</title><rect x="98.0112%" y="229" width="0.0143%" height="15" fill="rgb(225,31,38)"/><text x="98.2612%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (25 samples, 0.02%)</title><rect x="98.0255%" y="229" width="0.0238%" height="15" fill="rgb(250,208,3)"/><text x="98.2755%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (17 samples, 0.02%)</title><rect x="98.1170%" y="213" width="0.0162%" height="15" fill="rgb(246,54,23)"/><text x="98.3670%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (11 samples, 0.01%)</title><rect x="98.1227%" y="197" width="0.0105%" height="15" fill="rgb(243,76,11)"/><text x="98.3727%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (22 samples, 0.02%)</title><rect x="98.2390%" y="197" width="0.0210%" height="15" fill="rgb(245,21,50)"/><text x="98.4890%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (194 samples, 0.18%)</title><rect x="98.1427%" y="213" width="0.1850%" height="15" fill="rgb(228,9,43)"/><text x="98.3927%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (58 samples, 0.06%)</title><rect x="98.2724%" y="197" width="0.0553%" height="15" fill="rgb(208,100,47)"/><text x="98.5224%" y="207.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (20 samples, 0.02%)</title><rect x="98.3306%" y="213" width="0.0191%" height="15" fill="rgb(232,26,8)"/><text x="98.5806%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (317 samples, 0.30%)</title><rect x="98.0493%" y="229" width="0.3022%" height="15" fill="rgb(216,166,38)"/><text x="98.2993%" y="239.50"></text></g><g><title>async-redis`num_cpus::get_num_cpus (11 samples, 0.01%)</title><rect x="98.3525%" y="229" width="0.0105%" height="15" fill="rgb(251,202,51)"/><text x="98.6025%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (15 samples, 0.01%)</title><rect x="98.3668%" y="229" width="0.0143%" height="15" fill="rgb(254,216,34)"/><text x="98.6168%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::atomic_usize::AtomicUsize::new (20 samples, 0.02%)</title><rect x="98.3935%" y="229" width="0.0191%" height="15" fill="rgb(251,32,27)"/><text x="98.6435%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (14 samples, 0.01%)</title><rect x="98.4192%" y="229" width="0.0133%" height="15" fill="rgb(208,127,28)"/><text x="98.6692%" y="239.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="98.4574%" y="197" width="0.0229%" height="15" fill="rgb(224,137,22)"/><text x="98.7074%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (50 samples, 0.05%)</title><rect x="98.4345%" y="229" width="0.0477%" height="15" fill="rgb(254,70,32)"/><text x="98.6845%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (35 samples, 0.03%)</title><rect x="98.4488%" y="213" width="0.0334%" height="15" fill="rgb(229,75,37)"/><text x="98.6988%" y="223.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::as_usize (12 samples, 0.01%)</title><rect x="98.5031%" y="229" width="0.0114%" height="15" fill="rgb(252,64,23)"/><text x="98.7531%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::is_closed (12 samples, 0.01%)</title><rect x="98.5146%" y="229" width="0.0114%" height="15" fill="rgb(232,162,48)"/><text x="98.7646%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::is_rx_task_set (11 samples, 0.01%)</title><rect x="98.5298%" y="229" width="0.0105%" height="15" fill="rgb(246,160,12)"/><text x="98.7798%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::set_complete (20 samples, 0.02%)</title><rect x="98.5527%" y="229" width="0.0191%" height="15" fill="rgb(247,166,0)"/><text x="98.8027%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (15 samples, 0.01%)</title><rect x="98.5756%" y="229" width="0.0143%" height="15" fill="rgb(249,219,21)"/><text x="98.8256%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (44 samples, 0.04%)</title><rect x="98.6337%" y="213" width="0.0420%" height="15" fill="rgb(205,209,3)"/><text x="98.8837%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.01%)</title><rect x="98.6652%" y="197" width="0.0105%" height="15" fill="rgb(243,44,1)"/><text x="98.9152%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (13 samples, 0.01%)</title><rect x="98.6757%" y="213" width="0.0124%" height="15" fill="rgb(206,159,16)"/><text x="98.9257%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (125 samples, 0.12%)</title><rect x="98.5899%" y="229" width="0.1192%" height="15" fill="rgb(244,77,30)"/><text x="98.8399%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.02%)</title><rect x="98.6881%" y="213" width="0.0210%" height="15" fill="rgb(218,69,12)"/><text x="98.9381%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (284 samples, 0.27%)</title><rect x="98.7605%" y="197" width="0.2708%" height="15" fill="rgb(212,87,7)"/><text x="99.0105%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (235 samples, 0.22%)</title><rect x="98.8073%" y="181" width="0.2241%" height="15" fill="rgb(245,114,25)"/><text x="99.0573%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (18 samples, 0.02%)</title><rect x="99.2211%" y="165" width="0.0172%" height="15" fill="rgb(210,61,42)"/><text x="99.4711%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (171 samples, 0.16%)</title><rect x="99.0876%" y="181" width="0.1630%" height="15" fill="rgb(211,52,33)"/><text x="99.3376%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="99.2382%" y="165" width="0.0124%" height="15" fill="rgb(234,58,33)"/><text x="99.4882%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (245 samples, 0.23%)</title><rect x="99.0313%" y="197" width="0.2336%" height="15" fill="rgb(220,115,36)"/><text x="99.2813%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (15 samples, 0.01%)</title><rect x="99.2506%" y="181" width="0.0143%" height="15" fill="rgb(243,153,54)"/><text x="99.5006%" y="191.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (12 samples, 0.01%)</title><rect x="99.2735%" y="197" width="0.0114%" height="15" fill="rgb(251,47,18)"/><text x="99.5235%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (562 samples, 0.54%)</title><rect x="98.7567%" y="213" width="0.5358%" height="15" fill="rgb(242,102,42)"/><text x="99.0067%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (16 samples, 0.02%)</title><rect x="99.3011%" y="213" width="0.0153%" height="15" fill="rgb(234,31,38)"/><text x="99.5511%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (15 samples, 0.01%)</title><rect x="99.3164%" y="213" width="0.0143%" height="15" fill="rgb(221,117,51)"/><text x="99.5664%" y="223.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (11 samples, 0.01%)</title><rect x="99.3307%" y="213" width="0.0105%" height="15" fill="rgb(212,20,18)"/><text x="99.5807%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (651 samples, 0.62%)</title><rect x="98.7215%" y="229" width="0.6207%" height="15" fill="rgb(245,133,36)"/><text x="98.9715%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (47 samples, 0.04%)</title><rect x="99.3488%" y="229" width="0.0448%" height="15" fill="rgb(212,6,19)"/><text x="99.5988%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.03%)</title><rect x="99.3974%" y="229" width="0.0324%" height="15" fill="rgb(218,1,36)"/><text x="99.6474%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (83,752 samples, 79.85%)</title><rect x="19.6215%" y="245" width="79.8513%" height="15" fill="rgb(246,84,54)"/><text x="19.8715%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.04%)</title><rect x="99.4346%" y="229" width="0.0381%" height="15" fill="rgb(242,110,6)"/><text x="99.6846%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (19 samples, 0.02%)</title><rect x="99.4832%" y="245" width="0.0181%" height="15" fill="rgb(214,47,5)"/><text x="99.7332%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (14 samples, 0.01%)</title><rect x="99.5338%" y="245" width="0.0133%" height="15" fill="rgb(218,159,25)"/><text x="99.7838%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (83,956 samples, 80.05%)</title><rect x="19.5061%" y="261" width="80.0458%" height="15" fill="rgb(215,211,28)"/><text x="19.7561%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (11 samples, 0.01%)</title><rect x="99.5519%" y="261" width="0.0105%" height="15" fill="rgb(238,59,32)"/><text x="99.8019%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (34 samples, 0.03%)</title><rect x="99.5624%" y="261" width="0.0324%" height="15" fill="rgb(226,82,3)"/><text x="99.8124%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (84,242 samples, 80.32%)</title><rect x="19.3078%" y="277" width="80.3184%" height="15" fill="rgb(240,164,32)"/><text x="19.5578%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (33 samples, 0.03%)</title><rect x="99.5948%" y="261" width="0.0315%" height="15" fill="rgb(232,46,7)"/><text x="99.8448%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (11 samples, 0.01%)</title><rect x="99.6272%" y="277" width="0.0105%" height="15" fill="rgb(229,129,53)"/><text x="99.8772%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (11 samples, 0.01%)</title><rect x="99.6377%" y="277" width="0.0105%" height="15" fill="rgb(234,188,29)"/><text x="99.8877%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (24 samples, 0.02%)</title><rect x="99.6482%" y="277" width="0.0229%" height="15" fill="rgb(246,141,4)"/><text x="99.8982%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (84,541 samples, 80.60%)</title><rect x="19.0914%" y="293" width="80.6035%" height="15" fill="rgb(229,23,39)"/><text x="19.3414%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.02%)</title><rect x="99.6711%" y="277" width="0.0238%" height="15" fill="rgb(206,12,3)"/><text x="99.9211%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (17 samples, 0.02%)</title><rect x="99.6959%" y="293" width="0.0162%" height="15" fill="rgb(252,226,20)"/><text x="99.9459%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (38 samples, 0.04%)</title><rect x="99.7121%" y="293" width="0.0362%" height="15" fill="rgb(216,123,35)"/><text x="99.9621%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (81 samples, 0.08%)</title><rect x="99.7483%" y="293" width="0.0772%" height="15" fill="rgb(212,68,40)"/><text x="99.9983%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (86,653 samples, 82.62%)</title><rect x="17.2465%" y="309" width="82.6172%" height="15" fill="rgb(254,125,32)"/><text x="17.4965%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (18 samples, 0.02%)</title><rect x="99.8465%" y="293" width="0.0172%" height="15" fill="rgb(253,97,22)"/><text x="100.0965%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (104,799 samples, 99.92%)</title><rect x="0.0706%" y="325" width="99.9180%" height="15" fill="rgb(241,101,14)"/><text x="0.3206%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (131 samples, 0.12%)</title><rect x="99.8637%" y="309" width="0.1249%" height="15" fill="rgb(238,103,29)"/><text x="100.1137%" y="319.50"></text></g><g><title>all (104,885 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(233,195,47)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (104,840 samples, 99.96%)</title><rect x="0.0429%" y="501" width="99.9571%" height="15" fill="rgb(246,218,30)"/><text x="0.2929%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (104,840 samples, 99.96%)</title><rect x="0.0429%" y="485" width="99.9571%" height="15" fill="rgb(219,145,47)"/><text x="0.2929%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (104,840 samples, 99.96%)</title><rect x="0.0429%" y="469" width="99.9571%" height="15" fill="rgb(243,12,26)"/><text x="0.2929%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (104,840 samples, 99.96%)</title><rect x="0.0429%" y="453" width="99.9571%" height="15" fill="rgb(214,87,16)"/><text x="0.2929%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (104,840 samples, 99.96%)</title><rect x="0.0429%" y="437" width="99.9571%" height="15" fill="rgb(208,99,42)"/><text x="0.2929%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (104,840 samples, 99.96%)</title><rect x="0.0429%" y="421" width="99.9571%" height="15" fill="rgb(253,99,2)"/><text x="0.2929%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (104,840 samples, 99.96%)</title><rect x="0.0429%" y="405" width="99.9571%" height="15" fill="rgb(220,168,23)"/><text x="0.2929%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (104,840 samples, 99.96%)</title><rect x="0.0429%" y="389" width="99.9571%" height="15" fill="rgb(242,38,24)"/><text x="0.2929%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (104,840 samples, 99.96%)</title><rect x="0.0429%" y="373" width="99.9571%" height="15" fill="rgb(225,182,9)"/><text x="0.2929%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (104,840 samples, 99.96%)</title><rect x="0.0429%" y="357" width="99.9571%" height="15" fill="rgb(243,178,37)"/><text x="0.2929%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (104,840 samples, 99.96%)</title><rect x="0.0429%" y="341" width="99.9571%" height="15" fill="rgb(232,139,19)"/><text x="0.2929%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g></svg></svg>