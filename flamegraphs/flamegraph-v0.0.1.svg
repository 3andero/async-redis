<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (14 samples, 0.02%)</title><rect x="0.0119%" y="261" width="0.0184%" height="15" fill="rgb(227,0,7)"/><text x="0.2619%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__accept (14 samples, 0.02%)</title><rect x="0.0119%" y="245" width="0.0184%" height="15" fill="rgb(217,0,24)"/><text x="0.2619%" y="255.50"></text></g><g><title>async-redis`0x1 (32 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0422%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="479.50"></text></g><g><title>libdyld.dylib`start (32 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0422%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`main (32 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0422%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (32 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0422%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (31 samples, 0.04%)</title><rect x="0.0013%" y="405" width="0.0408%" height="15" fill="rgb(207,160,47)"/><text x="0.2513%" y="415.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (31 samples, 0.04%)</title><rect x="0.0013%" y="389" width="0.0408%" height="15" fill="rgb(228,23,34)"/><text x="0.2513%" y="399.50"></text></g><g><title>async-redis`async_redis::main (31 samples, 0.04%)</title><rect x="0.0013%" y="373" width="0.0408%" height="15" fill="rgb(218,30,26)"/><text x="0.2513%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (31 samples, 0.04%)</title><rect x="0.0013%" y="357" width="0.0408%" height="15" fill="rgb(220,122,19)"/><text x="0.2513%" y="367.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (31 samples, 0.04%)</title><rect x="0.0013%" y="341" width="0.0408%" height="15" fill="rgb(250,228,42)"/><text x="0.2513%" y="351.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.03%)</title><rect x="0.0105%" y="325" width="0.0316%" height="15" fill="rgb(240,193,28)"/><text x="0.2605%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.03%)</title><rect x="0.0105%" y="309" width="0.0316%" height="15" fill="rgb(216,20,37)"/><text x="0.2605%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (24 samples, 0.03%)</title><rect x="0.0105%" y="293" width="0.0316%" height="15" fill="rgb(206,188,39)"/><text x="0.2605%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.03%)</title><rect x="0.0105%" y="277" width="0.0316%" height="15" fill="rgb(217,207,13)"/><text x="0.2605%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (10 samples, 0.01%)</title><rect x="0.0422%" y="293" width="0.0132%" height="15" fill="rgb(231,73,38)"/><text x="0.2922%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (11 samples, 0.01%)</title><rect x="0.0567%" y="293" width="0.0145%" height="15" fill="rgb(225,20,46)"/><text x="0.3067%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (21 samples, 0.03%)</title><rect x="0.7827%" y="277" width="0.0277%" height="15" fill="rgb(210,31,41)"/><text x="1.0327%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (12 samples, 0.02%)</title><rect x="0.8130%" y="277" width="0.0158%" height="15" fill="rgb(221,200,47)"/><text x="1.0630%" y="287.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.01%)</title><rect x="0.8289%" y="277" width="0.0145%" height="15" fill="rgb(226,26,5)"/><text x="1.0789%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.01%)</title><rect x="0.8433%" y="277" width="0.0132%" height="15" fill="rgb(249,33,26)"/><text x="1.0933%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (12 samples, 0.02%)</title><rect x="0.8578%" y="277" width="0.0158%" height="15" fill="rgb(235,183,28)"/><text x="1.1078%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (225 samples, 0.30%)</title><rect x="0.8737%" y="277" width="0.2965%" height="15" fill="rgb(221,5,38)"/><text x="1.1237%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (14 samples, 0.02%)</title><rect x="3.4841%" y="245" width="0.0184%" height="15" fill="rgb(247,18,42)"/><text x="3.7341%" y="255.50"></text></g><g><title>async-redis`DYLD-STUB$$mach_absolute_time (10 samples, 0.01%)</title><rect x="3.5025%" y="245" width="0.0132%" height="15" fill="rgb(241,131,45)"/><text x="3.7525%" y="255.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (20 samples, 0.03%)</title><rect x="3.5157%" y="245" width="0.0264%" height="15" fill="rgb(249,31,29)"/><text x="3.7657%" y="255.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (24 samples, 0.03%)</title><rect x="3.7503%" y="229" width="0.0316%" height="15" fill="rgb(225,111,53)"/><text x="4.0003%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.04%)</title><rect x="3.7819%" y="229" width="0.0408%" height="15" fill="rgb(238,160,17)"/><text x="4.0319%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,317 samples, 3.05%)</title><rect x="3.8227%" y="229" width="3.0532%" height="15" fill="rgb(214,148,48)"/><text x="4.0727%" y="239.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (12 samples, 0.02%)</title><rect x="7.0314%" y="213" width="0.0158%" height="15" fill="rgb(232,36,49)"/><text x="7.2814%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (87 samples, 0.11%)</title><rect x="7.0538%" y="197" width="0.1146%" height="15" fill="rgb(209,103,24)"/><text x="7.3038%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (94 samples, 0.12%)</title><rect x="7.0472%" y="213" width="0.1239%" height="15" fill="rgb(229,88,8)"/><text x="7.2972%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (86 samples, 0.11%)</title><rect x="7.1711%" y="213" width="0.1133%" height="15" fill="rgb(213,181,19)"/><text x="7.4211%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (348 samples, 0.46%)</title><rect x="6.8786%" y="229" width="0.4586%" height="15" fill="rgb(254,191,54)"/><text x="7.1286%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (40 samples, 0.05%)</title><rect x="7.2844%" y="213" width="0.0527%" height="15" fill="rgb(241,83,37)"/><text x="7.5344%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (10 samples, 0.01%)</title><rect x="7.3371%" y="229" width="0.0132%" height="15" fill="rgb(233,36,39)"/><text x="7.5871%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (16 samples, 0.02%)</title><rect x="7.3503%" y="229" width="0.0211%" height="15" fill="rgb(226,3,54)"/><text x="7.6003%" y="239.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (2,935 samples, 3.87%)</title><rect x="3.5421%" y="245" width="3.8675%" height="15" fill="rgb(245,192,40)"/><text x="3.7921%" y="255.50">asyn..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (29 samples, 0.04%)</title><rect x="7.3714%" y="229" width="0.0382%" height="15" fill="rgb(238,167,29)"/><text x="7.6214%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (28 samples, 0.04%)</title><rect x="7.4149%" y="245" width="0.0369%" height="15" fill="rgb(232,182,51)"/><text x="7.6649%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (17 samples, 0.02%)</title><rect x="7.6178%" y="213" width="0.0224%" height="15" fill="rgb(231,60,39)"/><text x="7.8678%" y="223.50"></text></g><g><title>async-redis`mio::event::event::Event::token (13 samples, 0.02%)</title><rect x="7.6534%" y="213" width="0.0171%" height="15" fill="rgb(208,69,12)"/><text x="7.9034%" y="223.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (10 samples, 0.01%)</title><rect x="7.6705%" y="213" width="0.0132%" height="15" fill="rgb(235,93,37)"/><text x="7.9205%" y="223.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (8 samples, 0.01%)</title><rect x="7.6837%" y="213" width="0.0105%" height="15" fill="rgb(213,116,39)"/><text x="7.9337%" y="223.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="8.1739%" y="197" width="0.0119%" height="15" fill="rgb(222,207,29)"/><text x="8.4239%" y="207.50"></text></g><g><title>async-redis`mio::event::event::Event::token (10 samples, 0.01%)</title><rect x="8.2068%" y="197" width="0.0132%" height="15" fill="rgb(206,96,30)"/><text x="8.4568%" y="207.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (80 samples, 0.11%)</title><rect x="8.2200%" y="197" width="0.1054%" height="15" fill="rgb(218,138,4)"/><text x="8.4700%" y="207.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (14 samples, 0.02%)</title><rect x="8.4546%" y="181" width="0.0184%" height="15" fill="rgb(250,191,14)"/><text x="8.7046%" y="191.50"></text></g><g><title> 32]&gt;::default (14 samples, 0.02%)</title><rect x="8.4546%" y="165" width="0.0184%" height="15" fill="rgb(239,60,40)"/><text x="8.7046%" y="175.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (66 samples, 0.09%)</title><rect x="8.4730%" y="181" width="0.0870%" height="15" fill="rgb(206,27,48)"/><text x="8.7230%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (16 samples, 0.02%)</title><rect x="8.5942%" y="165" width="0.0211%" height="15" fill="rgb(225,35,8)"/><text x="8.8442%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (90 samples, 0.12%)</title><rect x="8.6153%" y="165" width="0.1186%" height="15" fill="rgb(250,213,24)"/><text x="8.8653%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (16 samples, 0.02%)</title><rect x="8.7695%" y="133" width="0.0211%" height="15" fill="rgb(247,123,22)"/><text x="9.0195%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (19 samples, 0.03%)</title><rect x="8.7906%" y="133" width="0.0250%" height="15" fill="rgb(231,138,38)"/><text x="9.0406%" y="143.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (68 samples, 0.09%)</title><rect x="8.7405%" y="149" width="0.0896%" height="15" fill="rgb(231,145,46)"/><text x="8.9905%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.01%)</title><rect x="8.8156%" y="133" width="0.0145%" height="15" fill="rgb(251,118,11)"/><text x="9.0656%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (191 samples, 0.25%)</title><rect x="8.5824%" y="181" width="0.2517%" height="15" fill="rgb(217,147,25)"/><text x="8.8324%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (76 samples, 0.10%)</title><rect x="8.7339%" y="165" width="0.1001%" height="15" fill="rgb(247,81,37)"/><text x="8.9839%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (387 samples, 0.51%)</title><rect x="8.3254%" y="197" width="0.5100%" height="15" fill="rgb(209,12,38)"/><text x="8.5754%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,751 samples, 4.94%)</title><rect x="7.6942%" y="213" width="4.9428%" height="15" fill="rgb(227,1,9)"/><text x="7.9442%" y="223.50">async-..</text></g><g><title>libsystem_kernel.dylib`kevent (2,879 samples, 3.79%)</title><rect x="8.8433%" y="197" width="3.7937%" height="15" fill="rgb(248,47,43)"/><text x="9.0933%" y="207.50">libs..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (20 samples, 0.03%)</title><rect x="12.6370%" y="213" width="0.0264%" height="15" fill="rgb(221,10,30)"/><text x="12.8870%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (13 samples, 0.02%)</title><rect x="12.6739%" y="197" width="0.0171%" height="15" fill="rgb(210,229,1)"/><text x="12.9239%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (24 samples, 0.03%)</title><rect x="12.6963%" y="181" width="0.0316%" height="15" fill="rgb(222,148,37)"/><text x="12.9463%" y="191.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (44 samples, 0.06%)</title><rect x="12.7280%" y="181" width="0.0580%" height="15" fill="rgb(234,67,33)"/><text x="12.9780%" y="191.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (116 samples, 0.15%)</title><rect x="12.6647%" y="213" width="0.1529%" height="15" fill="rgb(247,98,35)"/><text x="12.9147%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (96 samples, 0.13%)</title><rect x="12.6911%" y="197" width="0.1265%" height="15" fill="rgb(247,138,52)"/><text x="12.9411%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.03%)</title><rect x="12.7859%" y="181" width="0.0316%" height="15" fill="rgb(213,79,30)"/><text x="13.0359%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (4,009 samples, 5.28%)</title><rect x="7.5783%" y="229" width="5.2828%" height="15" fill="rgb(246,177,23)"/><text x="7.8283%" y="239.50">async-..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (33 samples, 0.04%)</title><rect x="12.8176%" y="213" width="0.0435%" height="15" fill="rgb(230,62,27)"/><text x="13.0676%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (14 samples, 0.02%)</title><rect x="12.8611%" y="229" width="0.0184%" height="15" fill="rgb(216,154,8)"/><text x="13.1111%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (53 samples, 0.07%)</title><rect x="12.8795%" y="229" width="0.0698%" height="15" fill="rgb(244,35,45)"/><text x="13.1295%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (14 samples, 0.02%)</title><rect x="12.9493%" y="229" width="0.0184%" height="15" fill="rgb(251,115,12)"/><text x="13.1993%" y="239.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (22 samples, 0.03%)</title><rect x="12.9678%" y="229" width="0.0290%" height="15" fill="rgb(240,54,50)"/><text x="13.2178%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (9 samples, 0.01%)</title><rect x="12.9968%" y="229" width="0.0119%" height="15" fill="rgb(233,84,52)"/><text x="13.2468%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (76 samples, 0.10%)</title><rect x="13.0824%" y="213" width="0.1001%" height="15" fill="rgb(207,117,47)"/><text x="13.3324%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (28 samples, 0.04%)</title><rect x="13.1826%" y="213" width="0.0369%" height="15" fill="rgb(249,43,39)"/><text x="13.4326%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (12 samples, 0.02%)</title><rect x="13.2037%" y="197" width="0.0158%" height="15" fill="rgb(209,38,44)"/><text x="13.4537%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (61 samples, 0.08%)</title><rect x="13.2195%" y="213" width="0.0804%" height="15" fill="rgb(236,212,23)"/><text x="13.4695%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (30 samples, 0.04%)</title><rect x="13.2603%" y="197" width="0.0395%" height="15" fill="rgb(242,79,21)"/><text x="13.5103%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (239 samples, 0.31%)</title><rect x="13.0086%" y="229" width="0.3149%" height="15" fill="rgb(211,96,35)"/><text x="13.2586%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (18 samples, 0.02%)</title><rect x="13.2999%" y="213" width="0.0237%" height="15" fill="rgb(253,215,40)"/><text x="13.5499%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (65 samples, 0.09%)</title><rect x="13.3236%" y="229" width="0.0857%" height="15" fill="rgb(211,81,21)"/><text x="13.5736%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (53 samples, 0.07%)</title><rect x="13.3394%" y="213" width="0.0698%" height="15" fill="rgb(208,190,38)"/><text x="13.5894%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,589 samples, 6.05%)</title><rect x="7.4518%" y="245" width="6.0471%" height="15" fill="rgb(235,213,38)"/><text x="7.7018%" y="255.50">async-re..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (60 samples, 0.08%)</title><rect x="13.4198%" y="229" width="0.0791%" height="15" fill="rgb(237,122,38)"/><text x="13.6698%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (22 samples, 0.03%)</title><rect x="13.5028%" y="245" width="0.0290%" height="15" fill="rgb(244,218,35)"/><text x="13.7528%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,308 samples, 5.68%)</title><rect x="13.5318%" y="245" width="5.6768%" height="15" fill="rgb(240,68,47)"/><text x="13.7818%" y="255.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (30 samples, 0.04%)</title><rect x="19.2086%" y="245" width="0.0395%" height="15" fill="rgb(210,16,53)"/><text x="19.4586%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (129 samples, 0.17%)</title><rect x="19.2560%" y="245" width="0.1700%" height="15" fill="rgb(235,124,12)"/><text x="19.5060%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12,511 samples, 16.49%)</title><rect x="2.9926%" y="261" width="16.4861%" height="15" fill="rgb(224,169,11)"/><text x="3.2426%" y="271.50">async-redis`&lt;tokio::runti..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (36 samples, 0.05%)</title><rect x="19.4313%" y="245" width="0.0474%" height="15" fill="rgb(250,166,2)"/><text x="19.6813%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (8 samples, 0.01%)</title><rect x="19.5367%" y="181" width="0.0105%" height="15" fill="rgb(242,216,29)"/><text x="19.7867%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (10 samples, 0.01%)</title><rect x="19.5472%" y="181" width="0.0132%" height="15" fill="rgb(230,116,27)"/><text x="19.7972%" y="191.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (26 samples, 0.03%)</title><rect x="19.5275%" y="197" width="0.0343%" height="15" fill="rgb(228,99,48)"/><text x="19.7775%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (196 samples, 0.26%)</title><rect x="19.4866%" y="213" width="0.2583%" height="15" fill="rgb(253,11,6)"/><text x="19.7366%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`kevent (139 samples, 0.18%)</title><rect x="19.5617%" y="197" width="0.1832%" height="15" fill="rgb(247,143,39)"/><text x="19.8117%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (207 samples, 0.27%)</title><rect x="19.4827%" y="229" width="0.2728%" height="15" fill="rgb(236,97,10)"/><text x="19.7327%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (222 samples, 0.29%)</title><rect x="19.4787%" y="261" width="0.2925%" height="15" fill="rgb(233,208,19)"/><text x="19.7287%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (220 samples, 0.29%)</title><rect x="19.4813%" y="245" width="0.2899%" height="15" fill="rgb(216,164,2)"/><text x="19.7313%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (11 samples, 0.01%)</title><rect x="19.7712%" y="261" width="0.0145%" height="15" fill="rgb(220,129,5)"/><text x="20.0212%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (102 samples, 0.13%)</title><rect x="19.8081%" y="245" width="0.1344%" height="15" fill="rgb(242,17,10)"/><text x="20.0581%" y="255.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (122 samples, 0.16%)</title><rect x="19.7950%" y="261" width="0.1608%" height="15" fill="rgb(242,107,0)"/><text x="20.0450%" y="271.50"></text></g><g><title>async-redis`std::thread::yield_now (19 samples, 0.03%)</title><rect x="19.9663%" y="261" width="0.0250%" height="15" fill="rgb(251,28,31)"/><text x="20.2163%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (62 samples, 0.08%)</title><rect x="19.9992%" y="261" width="0.0817%" height="15" fill="rgb(233,223,10)"/><text x="20.2492%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (14,352 samples, 18.91%)</title><rect x="1.1701%" y="277" width="18.9121%" height="15" fill="rgb(215,21,27)"/><text x="1.4201%" y="287.50">async-redis`tokio::runtime::th..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (50 samples, 0.07%)</title><rect x="20.1850%" y="261" width="0.0659%" height="15" fill="rgb(232,23,21)"/><text x="20.4350%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`kevent (44 samples, 0.06%)</title><rect x="20.1929%" y="245" width="0.0580%" height="15" fill="rgb(244,5,23)"/><text x="20.4429%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (46 samples, 0.06%)</title><rect x="20.2509%" y="261" width="0.0606%" height="15" fill="rgb(226,81,46)"/><text x="20.5009%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (53 samples, 0.07%)</title><rect x="20.3682%" y="245" width="0.0698%" height="15" fill="rgb(247,70,30)"/><text x="20.6182%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,213 samples, 1.60%)</title><rect x="20.4380%" y="245" width="1.5984%" height="15" fill="rgb(212,68,19)"/><text x="20.6880%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (15 samples, 0.02%)</title><rect x="22.0364%" y="245" width="0.0198%" height="15" fill="rgb(240,187,13)"/><text x="22.2864%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvsignal (13 samples, 0.02%)</title><rect x="22.0562%" y="245" width="0.0171%" height="15" fill="rgb(223,113,26)"/><text x="22.3062%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (11 samples, 0.01%)</title><rect x="22.0733%" y="245" width="0.0145%" height="15" fill="rgb(206,192,2)"/><text x="22.3233%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (67 samples, 0.09%)</title><rect x="22.0891%" y="245" width="0.0883%" height="15" fill="rgb(241,108,4)"/><text x="22.3391%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (67 samples, 0.09%)</title><rect x="22.0891%" y="229" width="0.0883%" height="15" fill="rgb(247,173,49)"/><text x="22.3391%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (28 samples, 0.04%)</title><rect x="22.1774%" y="245" width="0.0369%" height="15" fill="rgb(224,114,35)"/><text x="22.4274%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (8 samples, 0.01%)</title><rect x="22.2038%" y="229" width="0.0105%" height="15" fill="rgb(245,159,27)"/><text x="22.4538%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (39 samples, 0.05%)</title><rect x="22.2143%" y="245" width="0.0514%" height="15" fill="rgb(245,172,44)"/><text x="22.4643%" y="255.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,485 samples, 1.96%)</title><rect x="20.3168%" y="261" width="1.9568%" height="15" fill="rgb(236,23,11)"/><text x="20.5668%" y="271.50">a..</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (56 samples, 0.07%)</title><rect x="22.4291%" y="245" width="0.0738%" height="15" fill="rgb(205,117,38)"/><text x="22.6791%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (11 samples, 0.01%)</title><rect x="22.5029%" y="245" width="0.0145%" height="15" fill="rgb(237,72,25)"/><text x="22.7529%" y="255.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.02%)</title><rect x="22.5174%" y="229" width="0.0211%" height="15" fill="rgb(244,70,9)"/><text x="22.7674%" y="239.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="22.5727%" y="213" width="0.0105%" height="15" fill="rgb(217,125,39)"/><text x="22.8227%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.05%)</title><rect x="22.9786%" y="165" width="0.0488%" height="15" fill="rgb(235,36,10)"/><text x="23.2286%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.05%)</title><rect x="22.9799%" y="149" width="0.0474%" height="15" fill="rgb(251,123,47)"/><text x="23.2299%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.06%)</title><rect x="22.9707%" y="181" width="0.0593%" height="15" fill="rgb(221,13,13)"/><text x="23.2207%" y="191.50"></text></g><g><title>async-redis`&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.08%)</title><rect x="22.9628%" y="197" width="0.0764%" height="15" fill="rgb(238,131,9)"/><text x="23.2128%" y="207.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.04%)</title><rect x="23.0392%" y="197" width="0.0435%" height="15" fill="rgb(211,50,8)"/><text x="23.2892%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (19 samples, 0.03%)</title><rect x="23.0577%" y="181" width="0.0250%" height="15" fill="rgb(245,182,24)"/><text x="23.3077%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.03%)</title><rect x="23.0853%" y="197" width="0.0316%" height="15" fill="rgb(242,14,37)"/><text x="23.3353%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (9 samples, 0.01%)</title><rect x="23.2645%" y="181" width="0.0119%" height="15" fill="rgb(246,228,12)"/><text x="23.5145%" y="191.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="23.8022%" y="165" width="0.0237%" height="15" fill="rgb(213,55,15)"/><text x="24.0522%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (29 samples, 0.04%)</title><rect x="23.8259%" y="165" width="0.0382%" height="15" fill="rgb(209,9,3)"/><text x="24.0759%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (31 samples, 0.04%)</title><rect x="24.1448%" y="133" width="0.0408%" height="15" fill="rgb(230,59,30)"/><text x="24.3948%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (17 samples, 0.02%)</title><rect x="24.1856%" y="133" width="0.0224%" height="15" fill="rgb(209,121,21)"/><text x="24.4356%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (22 samples, 0.03%)</title><rect x="24.5783%" y="85" width="0.0290%" height="15" fill="rgb(220,109,13)"/><text x="24.8283%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (166 samples, 0.22%)</title><rect x="24.4334%" y="101" width="0.2187%" height="15" fill="rgb(232,18,1)"/><text x="24.6834%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (34 samples, 0.04%)</title><rect x="24.6073%" y="85" width="0.0448%" height="15" fill="rgb(215,41,42)"/><text x="24.8573%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (15 samples, 0.02%)</title><rect x="24.6521%" y="101" width="0.0198%" height="15" fill="rgb(224,123,36)"/><text x="24.9021%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (8 samples, 0.01%)</title><rect x="24.6745%" y="101" width="0.0105%" height="15" fill="rgb(240,125,3)"/><text x="24.9245%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (17 samples, 0.02%)</title><rect x="24.6851%" y="101" width="0.0224%" height="15" fill="rgb(205,98,50)"/><text x="24.9351%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (20 samples, 0.03%)</title><rect x="24.7075%" y="101" width="0.0264%" height="15" fill="rgb(205,185,37)"/><text x="24.9575%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17,526 samples, 23.09%)</title><rect x="24.7338%" y="101" width="23.0946%" height="15" fill="rgb(238,207,15)"/><text x="24.9838%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (17,828 samples, 23.49%)</title><rect x="24.3649%" y="117" width="23.4925%" height="15" fill="rgb(213,199,42)"/><text x="24.6149%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::..</text></g><g><title>libsystem_kernel.dylib`cerror (22 samples, 0.03%)</title><rect x="47.8284%" y="101" width="0.0290%" height="15" fill="rgb(235,201,11)"/><text x="48.0784%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (10 samples, 0.01%)</title><rect x="47.8574%" y="117" width="0.0132%" height="15" fill="rgb(207,46,11)"/><text x="48.1074%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (15 samples, 0.02%)</title><rect x="47.8837%" y="117" width="0.0198%" height="15" fill="rgb(241,35,35)"/><text x="48.1337%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (39 samples, 0.05%)</title><rect x="48.1710%" y="101" width="0.0514%" height="15" fill="rgb(243,32,47)"/><text x="48.4210%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (99 samples, 0.13%)</title><rect x="48.2224%" y="101" width="0.1305%" height="15" fill="rgb(247,202,23)"/><text x="48.4724%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (10 samples, 0.01%)</title><rect x="48.3397%" y="85" width="0.0132%" height="15" fill="rgb(219,102,11)"/><text x="48.5897%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.01%)</title><rect x="48.3410%" y="69" width="0.0119%" height="15" fill="rgb(243,110,44)"/><text x="48.5910%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.02%)</title><rect x="48.3528%" y="101" width="0.0158%" height="15" fill="rgb(222,74,54)"/><text x="48.6028%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (417 samples, 0.55%)</title><rect x="47.9035%" y="117" width="0.5495%" height="15" fill="rgb(216,99,12)"/><text x="48.1535%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (64 samples, 0.08%)</title><rect x="48.3686%" y="101" width="0.0843%" height="15" fill="rgb(226,22,26)"/><text x="48.6186%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (18,406 samples, 24.25%)</title><rect x="24.2080%" y="133" width="24.2542%" height="15" fill="rgb(217,163,10)"/><text x="24.4580%" y="143.50">async-redis`tokio::io::driver::registra..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18,559 samples, 24.46%)</title><rect x="24.0222%" y="149" width="24.4558%" height="15" fill="rgb(213,25,53)"/><text x="24.2722%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::T..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (12 samples, 0.02%)</title><rect x="48.4622%" y="133" width="0.0158%" height="15" fill="rgb(252,105,26)"/><text x="48.7122%" y="143.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (604 samples, 0.80%)</title><rect x="48.4846%" y="149" width="0.7959%" height="15" fill="rgb(220,39,43)"/><text x="48.7346%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (585 samples, 0.77%)</title><rect x="48.5096%" y="133" width="0.7709%" height="15" fill="rgb(229,68,48)"/><text x="48.7596%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (20 samples, 0.03%)</title><rect x="49.2805%" y="149" width="0.0264%" height="15" fill="rgb(252,8,32)"/><text x="49.5305%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (19,313 samples, 25.45%)</title><rect x="23.8641%" y="165" width="25.4493%" height="15" fill="rgb(223,20,43)"/><text x="24.1141%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::R..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18 samples, 0.02%)</title><rect x="49.3135%" y="165" width="0.0237%" height="15" fill="rgb(229,81,49)"/><text x="49.5635%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (34 samples, 0.04%)</title><rect x="49.7430%" y="133" width="0.0448%" height="15" fill="rgb(236,28,36)"/><text x="49.9930%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (21 samples, 0.03%)</title><rect x="49.7602%" y="117" width="0.0277%" height="15" fill="rgb(249,185,26)"/><text x="50.0102%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="49.7918%" y="133" width="0.0171%" height="15" fill="rgb(249,174,33)"/><text x="50.0418%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (12 samples, 0.02%)</title><rect x="49.7931%" y="117" width="0.0158%" height="15" fill="rgb(233,201,37)"/><text x="50.0431%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (365 samples, 0.48%)</title><rect x="49.3517%" y="149" width="0.4810%" height="15" fill="rgb(221,78,26)"/><text x="49.6017%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (18 samples, 0.02%)</title><rect x="49.8089%" y="133" width="0.0237%" height="15" fill="rgb(250,127,30)"/><text x="50.0589%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (379 samples, 0.50%)</title><rect x="49.3372%" y="165" width="0.4994%" height="15" fill="rgb(230,49,44)"/><text x="49.5872%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="49.8524%" y="165" width="0.0119%" height="15" fill="rgb(229,67,23)"/><text x="50.1024%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.05%)</title><rect x="50.0435%" y="149" width="0.0540%" height="15" fill="rgb(249,83,47)"/><text x="50.2935%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (21 samples, 0.03%)</title><rect x="50.0698%" y="133" width="0.0277%" height="15" fill="rgb(215,43,3)"/><text x="50.3198%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (11 samples, 0.01%)</title><rect x="50.1081%" y="149" width="0.0145%" height="15" fill="rgb(238,154,13)"/><text x="50.3581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (38 samples, 0.05%)</title><rect x="50.2517%" y="85" width="0.0501%" height="15" fill="rgb(219,56,2)"/><text x="50.5017%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (126 samples, 0.17%)</title><rect x="50.1739%" y="117" width="0.1660%" height="15" fill="rgb(233,0,4)"/><text x="50.4239%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (122 samples, 0.16%)</title><rect x="50.1792%" y="101" width="0.1608%" height="15" fill="rgb(235,30,7)"/><text x="50.4292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.04%)</title><rect x="50.3018%" y="85" width="0.0382%" height="15" fill="rgb(250,79,13)"/><text x="50.5518%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (141 samples, 0.19%)</title><rect x="50.1555%" y="133" width="0.1858%" height="15" fill="rgb(211,146,34)"/><text x="50.4055%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (167 samples, 0.22%)</title><rect x="50.1265%" y="149" width="0.2201%" height="15" fill="rgb(228,22,38)"/><text x="50.3765%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (139 samples, 0.18%)</title><rect x="67.3110%" y="117" width="0.1832%" height="15" fill="rgb(235,168,5)"/><text x="67.5610%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (90 samples, 0.12%)</title><rect x="67.3756%" y="101" width="0.1186%" height="15" fill="rgb(221,155,16)"/><text x="67.6256%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (12,898 samples, 17.00%)</title><rect x="50.5152%" y="133" width="16.9961%" height="15" fill="rgb(215,215,53)"/><text x="50.7652%" y="143.50">async-redis`async_redis::p..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (13 samples, 0.02%)</title><rect x="67.4942%" y="117" width="0.0171%" height="15" fill="rgb(223,4,10)"/><text x="67.7442%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (34 samples, 0.04%)</title><rect x="67.5799%" y="117" width="0.0448%" height="15" fill="rgb(234,103,6)"/><text x="67.8299%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (32 samples, 0.04%)</title><rect x="67.6247%" y="117" width="0.0422%" height="15" fill="rgb(227,97,0)"/><text x="67.8747%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (222 samples, 0.29%)</title><rect x="67.7182%" y="101" width="0.2925%" height="15" fill="rgb(234,150,53)"/><text x="67.9682%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (212 samples, 0.28%)</title><rect x="67.7314%" y="85" width="0.2794%" height="15" fill="rgb(228,201,54)"/><text x="67.9814%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (262 samples, 0.35%)</title><rect x="67.6668%" y="117" width="0.3452%" height="15" fill="rgb(222,22,37)"/><text x="67.9168%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="68.0121%" y="117" width="0.0132%" height="15" fill="rgb(237,53,32)"/><text x="68.2621%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.11%)</title><rect x="68.0740%" y="101" width="0.1054%" height="15" fill="rgb(233,25,53)"/><text x="68.3240%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (73 samples, 0.10%)</title><rect x="68.0832%" y="85" width="0.0962%" height="15" fill="rgb(210,40,34)"/><text x="68.3332%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (120 samples, 0.16%)</title><rect x="68.0252%" y="117" width="0.1581%" height="15" fill="rgb(241,220,44)"/><text x="68.2752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (102 samples, 0.13%)</title><rect x="68.1834%" y="117" width="0.1344%" height="15" fill="rgb(235,28,35)"/><text x="68.4334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="68.3217%" y="117" width="0.0119%" height="15" fill="rgb(210,56,17)"/><text x="68.5717%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (640 samples, 0.84%)</title><rect x="67.5113%" y="133" width="0.8433%" height="15" fill="rgb(224,130,29)"/><text x="67.7613%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.02%)</title><rect x="68.3336%" y="117" width="0.0211%" height="15" fill="rgb(235,212,8)"/><text x="68.5836%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (15 samples, 0.02%)</title><rect x="68.3547%" y="133" width="0.0198%" height="15" fill="rgb(223,33,50)"/><text x="68.6047%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (79 samples, 0.10%)</title><rect x="68.3744%" y="133" width="0.1041%" height="15" fill="rgb(219,149,13)"/><text x="68.6244%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (66 samples, 0.09%)</title><rect x="68.3916%" y="117" width="0.0870%" height="15" fill="rgb(250,156,29)"/><text x="68.6416%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (94 samples, 0.12%)</title><rect x="68.4865%" y="133" width="0.1239%" height="15" fill="rgb(216,193,19)"/><text x="68.7365%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.01%)</title><rect x="68.6261%" y="133" width="0.0145%" height="15" fill="rgb(216,135,14)"/><text x="68.8761%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.01%)</title><rect x="68.6446%" y="133" width="0.0145%" height="15" fill="rgb(241,47,5)"/><text x="68.8946%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (13,907 samples, 18.33%)</title><rect x="50.3466%" y="149" width="18.3257%" height="15" fill="rgb(233,42,35)"/><text x="50.5966%" y="159.50">async-redis`async_redis::prot..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (23 samples, 0.03%)</title><rect x="68.7184%" y="133" width="0.0303%" height="15" fill="rgb(231,13,6)"/><text x="68.9684%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (14 samples, 0.02%)</title><rect x="68.7302%" y="117" width="0.0184%" height="15" fill="rgb(207,181,40)"/><text x="68.9802%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (61 samples, 0.08%)</title><rect x="68.6723%" y="149" width="0.0804%" height="15" fill="rgb(254,173,49)"/><text x="68.9223%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (44 samples, 0.06%)</title><rect x="68.8027%" y="133" width="0.0580%" height="15" fill="rgb(221,1,38)"/><text x="69.0527%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (39 samples, 0.05%)</title><rect x="68.8607%" y="133" width="0.0514%" height="15" fill="rgb(206,124,46)"/><text x="69.1107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (158 samples, 0.21%)</title><rect x="68.9134%" y="133" width="0.2082%" height="15" fill="rgb(249,21,11)"/><text x="69.1634%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (142 samples, 0.19%)</title><rect x="68.9345%" y="117" width="0.1871%" height="15" fill="rgb(222,201,40)"/><text x="69.1845%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (135 samples, 0.18%)</title><rect x="68.9437%" y="101" width="0.1779%" height="15" fill="rgb(235,61,29)"/><text x="69.1937%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (75 samples, 0.10%)</title><rect x="69.0228%" y="85" width="0.0988%" height="15" fill="rgb(219,207,3)"/><text x="69.2728%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="69.1045%" y="69" width="0.0171%" height="15" fill="rgb(222,56,46)"/><text x="69.3545%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (65 samples, 0.09%)</title><rect x="69.1572%" y="117" width="0.0857%" height="15" fill="rgb(239,76,54)"/><text x="69.4072%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (60 samples, 0.08%)</title><rect x="69.1638%" y="101" width="0.0791%" height="15" fill="rgb(231,124,27)"/><text x="69.4138%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (96 samples, 0.13%)</title><rect x="69.1269%" y="133" width="0.1265%" height="15" fill="rgb(249,195,6)"/><text x="69.3769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="69.2428%" y="117" width="0.0105%" height="15" fill="rgb(237,174,47)"/><text x="69.4928%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (112 samples, 0.15%)</title><rect x="69.2534%" y="133" width="0.1476%" height="15" fill="rgb(206,201,31)"/><text x="69.5034%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (53 samples, 0.07%)</title><rect x="69.3311%" y="117" width="0.0698%" height="15" fill="rgb(231,57,52)"/><text x="69.5811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.02%)</title><rect x="69.3812%" y="101" width="0.0198%" height="15" fill="rgb(248,177,22)"/><text x="69.6312%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (513 samples, 0.68%)</title><rect x="68.7526%" y="149" width="0.6760%" height="15" fill="rgb(215,211,37)"/><text x="69.0026%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="69.4141%" y="133" width="0.0145%" height="15" fill="rgb(241,128,51)"/><text x="69.6641%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (9 samples, 0.01%)</title><rect x="69.4286%" y="149" width="0.0119%" height="15" fill="rgb(227,165,31)"/><text x="69.6786%" y="159.50"></text></g><g><title>async-redis`__rdl_alloc (10 samples, 0.01%)</title><rect x="69.4616%" y="117" width="0.0132%" height="15" fill="rgb(228,167,24)"/><text x="69.7116%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.03%)</title><rect x="69.8174%" y="53" width="0.0303%" height="15" fill="rgb(228,143,12)"/><text x="70.0674%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (162 samples, 0.21%)</title><rect x="69.8503%" y="53" width="0.2135%" height="15" fill="rgb(249,149,8)"/><text x="70.1003%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (73 samples, 0.10%)</title><rect x="69.9676%" y="37" width="0.0962%" height="15" fill="rgb(243,35,44)"/><text x="70.2176%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (366 samples, 0.48%)</title><rect x="69.5828%" y="85" width="0.4823%" height="15" fill="rgb(246,89,9)"/><text x="69.8328%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (358 samples, 0.47%)</title><rect x="69.5933%" y="69" width="0.4717%" height="15" fill="rgb(233,213,13)"/><text x="69.8433%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (419 samples, 0.55%)</title><rect x="69.5275%" y="101" width="0.5521%" height="15" fill="rgb(233,141,41)"/><text x="69.7775%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.01%)</title><rect x="70.0651%" y="85" width="0.0145%" height="15" fill="rgb(239,167,4)"/><text x="70.3151%" y="95.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (474 samples, 0.62%)</title><rect x="69.4761%" y="117" width="0.6246%" height="15" fill="rgb(209,217,16)"/><text x="69.7261%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.02%)</title><rect x="70.0796%" y="101" width="0.0211%" height="15" fill="rgb(219,88,35)"/><text x="70.3296%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (518 samples, 0.68%)</title><rect x="69.4497%" y="133" width="0.6826%" height="15" fill="rgb(220,193,23)"/><text x="69.6997%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.02%)</title><rect x="70.1099%" y="117" width="0.0224%" height="15" fill="rgb(230,90,52)"/><text x="70.3599%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (553 samples, 0.73%)</title><rect x="69.4405%" y="149" width="0.7287%" height="15" fill="rgb(252,106,19)"/><text x="69.6905%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (28 samples, 0.04%)</title><rect x="70.1323%" y="133" width="0.0369%" height="15" fill="rgb(206,74,20)"/><text x="70.3823%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (23 samples, 0.03%)</title><rect x="70.1692%" y="149" width="0.0303%" height="15" fill="rgb(230,138,44)"/><text x="70.4192%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (89 samples, 0.12%)</title><rect x="70.1995%" y="149" width="0.1173%" height="15" fill="rgb(235,182,43)"/><text x="70.4495%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (34 samples, 0.04%)</title><rect x="70.3168%" y="149" width="0.0448%" height="15" fill="rgb(242,16,51)"/><text x="70.5668%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (35 samples, 0.05%)</title><rect x="70.3616%" y="149" width="0.0461%" height="15" fill="rgb(248,9,4)"/><text x="70.6116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="70.4117%" y="149" width="0.0105%" height="15" fill="rgb(210,31,22)"/><text x="70.6617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.08%)</title><rect x="70.4222%" y="149" width="0.0817%" height="15" fill="rgb(239,54,39)"/><text x="70.6722%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.03%)</title><rect x="70.4749%" y="133" width="0.0290%" height="15" fill="rgb(230,99,41)"/><text x="70.7249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.03%)</title><rect x="70.4762%" y="117" width="0.0277%" height="15" fill="rgb(253,106,12)"/><text x="70.7262%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.05%)</title><rect x="70.6054%" y="117" width="0.0501%" height="15" fill="rgb(213,46,41)"/><text x="70.8554%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (125 samples, 0.16%)</title><rect x="70.5039%" y="149" width="0.1647%" height="15" fill="rgb(215,133,35)"/><text x="70.7539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (84 samples, 0.11%)</title><rect x="70.5579%" y="133" width="0.1107%" height="15" fill="rgb(213,28,5)"/><text x="70.8079%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.01%)</title><rect x="70.6554%" y="117" width="0.0132%" height="15" fill="rgb(215,77,49)"/><text x="70.9054%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (15,805 samples, 20.83%)</title><rect x="49.8643%" y="165" width="20.8267%" height="15" fill="rgb(248,100,22)"/><text x="50.1143%" y="175.50">async-redis`async_redis::protocol..</text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (13 samples, 0.02%)</title><rect x="70.7042%" y="165" width="0.0171%" height="15" fill="rgb(208,67,9)"/><text x="70.9542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (53 samples, 0.07%)</title><rect x="70.8030%" y="133" width="0.0698%" height="15" fill="rgb(219,133,21)"/><text x="71.0530%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 0.14%)</title><rect x="70.7806%" y="149" width="0.1450%" height="15" fill="rgb(246,46,29)"/><text x="71.0306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.05%)</title><rect x="70.8729%" y="133" width="0.0527%" height="15" fill="rgb(246,185,52)"/><text x="71.1229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.05%)</title><rect x="70.8768%" y="117" width="0.0488%" height="15" fill="rgb(252,136,11)"/><text x="71.1268%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (77 samples, 0.10%)</title><rect x="70.9256%" y="149" width="0.1015%" height="15" fill="rgb(219,138,53)"/><text x="71.1756%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (52 samples, 0.07%)</title><rect x="70.9585%" y="133" width="0.0685%" height="15" fill="rgb(211,51,23)"/><text x="71.2085%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (245 samples, 0.32%)</title><rect x="70.7213%" y="165" width="0.3228%" height="15" fill="rgb(247,221,28)"/><text x="70.9713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.01%)</title><rect x="71.0297%" y="149" width="0.0145%" height="15" fill="rgb(251,222,45)"/><text x="71.2797%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (17 samples, 0.02%)</title><rect x="71.0442%" y="165" width="0.0224%" height="15" fill="rgb(217,162,53)"/><text x="71.2942%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (10 samples, 0.01%)</title><rect x="71.0692%" y="165" width="0.0132%" height="15" fill="rgb(229,93,14)"/><text x="71.3192%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (14 samples, 0.02%)</title><rect x="71.0824%" y="165" width="0.0184%" height="15" fill="rgb(209,67,49)"/><text x="71.3324%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (8 samples, 0.01%)</title><rect x="71.3841%" y="117" width="0.0105%" height="15" fill="rgb(213,87,29)"/><text x="71.6341%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (376 samples, 0.50%)</title><rect x="71.1008%" y="165" width="0.4955%" height="15" fill="rgb(205,151,52)"/><text x="71.3508%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (289 samples, 0.38%)</title><rect x="71.2155%" y="149" width="0.3808%" height="15" fill="rgb(253,215,39)"/><text x="71.4655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (278 samples, 0.37%)</title><rect x="71.2300%" y="133" width="0.3663%" height="15" fill="rgb(221,220,41)"/><text x="71.4800%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (146 samples, 0.19%)</title><rect x="71.4039%" y="117" width="0.1924%" height="15" fill="rgb(218,133,21)"/><text x="71.6539%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="71.5844%" y="101" width="0.0119%" height="15" fill="rgb(221,193,43)"/><text x="71.8344%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="71.6003%" y="165" width="0.0277%" height="15" fill="rgb(240,128,52)"/><text x="71.8503%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.04%)</title><rect x="71.6569%" y="149" width="0.0422%" height="15" fill="rgb(253,114,12)"/><text x="71.9069%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.04%)</title><rect x="71.6582%" y="133" width="0.0408%" height="15" fill="rgb(215,223,47)"/><text x="71.9082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.07%)</title><rect x="71.6279%" y="165" width="0.0725%" height="15" fill="rgb(248,225,23)"/><text x="71.8779%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.04%)</title><rect x="71.7637%" y="133" width="0.0356%" height="15" fill="rgb(250,108,0)"/><text x="72.0137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (74 samples, 0.10%)</title><rect x="71.7030%" y="165" width="0.0975%" height="15" fill="rgb(228,208,7)"/><text x="71.9530%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (52 samples, 0.07%)</title><rect x="71.7320%" y="149" width="0.0685%" height="15" fill="rgb(244,45,10)"/><text x="71.9820%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6,786 samples, 8.94%)</title><rect x="71.8071%" y="165" width="8.9421%" height="15" fill="rgb(207,125,25)"/><text x="72.0571%" y="175.50">libsystem_pla..</text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43,616 samples, 57.47%)</title><rect x="23.2764%" y="181" width="57.4742%" height="15" fill="rgb(210,195,18)"/><text x="23.5264%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="80.7506%" y="181" width="0.0171%" height="15" fill="rgb(249,80,12)"/><text x="81.0006%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (9 samples, 0.01%)</title><rect x="80.7848%" y="181" width="0.0119%" height="15" fill="rgb(221,65,9)"/><text x="81.0348%" y="191.50"></text></g><g><title>async-redis`__rust_alloc (8 samples, 0.01%)</title><rect x="80.7967%" y="181" width="0.0105%" height="15" fill="rgb(235,49,36)"/><text x="81.0467%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.01%)</title><rect x="80.8086%" y="181" width="0.0132%" height="15" fill="rgb(225,32,20)"/><text x="81.0586%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (29 samples, 0.04%)</title><rect x="80.8217%" y="181" width="0.0382%" height="15" fill="rgb(215,141,46)"/><text x="81.0717%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (22 samples, 0.03%)</title><rect x="80.8600%" y="181" width="0.0290%" height="15" fill="rgb(250,160,47)"/><text x="81.1100%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (15 samples, 0.02%)</title><rect x="80.8889%" y="181" width="0.0198%" height="15" fill="rgb(216,222,40)"/><text x="81.1389%" y="191.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (40 samples, 0.05%)</title><rect x="80.9153%" y="181" width="0.0527%" height="15" fill="rgb(234,217,39)"/><text x="81.1653%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (40 samples, 0.05%)</title><rect x="80.9680%" y="181" width="0.0527%" height="15" fill="rgb(207,178,40)"/><text x="81.2180%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.03%)</title><rect x="81.0207%" y="181" width="0.0343%" height="15" fill="rgb(221,136,13)"/><text x="81.2707%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (45 samples, 0.06%)</title><rect x="81.0589%" y="181" width="0.0593%" height="15" fill="rgb(249,199,10)"/><text x="81.3089%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (44,048 samples, 58.04%)</title><rect x="23.1170%" y="197" width="58.0434%" height="15" fill="rgb(249,222,13)"/><text x="23.3670%" y="207.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (31 samples, 0.04%)</title><rect x="81.1195%" y="181" width="0.0408%" height="15" fill="rgb(244,185,38)"/><text x="81.3695%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_buf::WriteBuf&lt;W,B&gt; as core::future::future::Future&gt;::poll (91 samples, 0.12%)</title><rect x="81.1604%" y="197" width="0.1199%" height="15" fill="rgb(236,202,9)"/><text x="81.4104%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (77 samples, 0.10%)</title><rect x="81.1788%" y="181" width="0.1015%" height="15" fill="rgb(250,229,37)"/><text x="81.4288%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (16 samples, 0.02%)</title><rect x="81.2856%" y="197" width="0.0211%" height="15" fill="rgb(206,174,23)"/><text x="81.5356%" y="207.50"></text></g><g><title>async-redis`__rdl_dealloc (9 samples, 0.01%)</title><rect x="81.3172%" y="197" width="0.0119%" height="15" fill="rgb(211,33,43)"/><text x="81.5672%" y="207.50"></text></g><g><title>async-redis`alloc::fmt::format (12 samples, 0.02%)</title><rect x="81.3357%" y="197" width="0.0158%" height="15" fill="rgb(245,58,50)"/><text x="81.5857%" y="207.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (20 samples, 0.03%)</title><rect x="81.3607%" y="197" width="0.0264%" height="15" fill="rgb(244,68,36)"/><text x="81.6107%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (151 samples, 0.20%)</title><rect x="81.4714%" y="165" width="0.1990%" height="15" fill="rgb(232,229,15)"/><text x="81.7214%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.09%)</title><rect x="81.6704%" y="165" width="0.0922%" height="15" fill="rgb(254,30,23)"/><text x="81.9204%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 0.08%)</title><rect x="81.6783%" y="149" width="0.0843%" height="15" fill="rgb(235,160,14)"/><text x="81.9283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (64 samples, 0.08%)</title><rect x="81.6783%" y="133" width="0.0843%" height="15" fill="rgb(212,155,44)"/><text x="81.9283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.05%)</title><rect x="81.7152%" y="117" width="0.0474%" height="15" fill="rgb(226,2,50)"/><text x="81.9652%" y="127.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (240 samples, 0.32%)</title><rect x="81.4477%" y="181" width="0.3163%" height="15" fill="rgb(234,177,6)"/><text x="81.6977%" y="191.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (13 samples, 0.02%)</title><rect x="81.8258%" y="165" width="0.0171%" height="15" fill="rgb(217,24,9)"/><text x="82.0758%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="81.9945%" y="117" width="0.0171%" height="15" fill="rgb(220,13,46)"/><text x="82.2445%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (163 samples, 0.21%)</title><rect x="81.8878%" y="149" width="0.2148%" height="15" fill="rgb(239,221,27)"/><text x="82.1378%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (156 samples, 0.21%)</title><rect x="81.8970%" y="133" width="0.2056%" height="15" fill="rgb(222,198,25)"/><text x="82.1470%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (68 samples, 0.09%)</title><rect x="82.0130%" y="117" width="0.0896%" height="15" fill="rgb(211,99,13)"/><text x="82.2630%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (199 samples, 0.26%)</title><rect x="81.8430%" y="165" width="0.2622%" height="15" fill="rgb(232,111,31)"/><text x="82.0930%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.05%)</title><rect x="82.1131%" y="165" width="0.0540%" height="15" fill="rgb(245,82,37)"/><text x="82.3631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.04%)</title><rect x="82.1263%" y="149" width="0.0408%" height="15" fill="rgb(227,149,46)"/><text x="82.3763%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (29 samples, 0.04%)</title><rect x="82.1289%" y="133" width="0.0382%" height="15" fill="rgb(218,36,50)"/><text x="82.3789%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.04%)</title><rect x="82.2423%" y="133" width="0.0422%" height="15" fill="rgb(226,80,48)"/><text x="82.4923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (93 samples, 0.12%)</title><rect x="82.1671%" y="165" width="0.1225%" height="15" fill="rgb(238,224,15)"/><text x="82.4171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.09%)</title><rect x="82.1974%" y="149" width="0.0922%" height="15" fill="rgb(241,136,10)"/><text x="82.4474%" y="159.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (420 samples, 0.55%)</title><rect x="81.7705%" y="181" width="0.5534%" height="15" fill="rgb(208,32,45)"/><text x="82.0205%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.02%)</title><rect x="82.3002%" y="165" width="0.0237%" height="15" fill="rgb(207,135,9)"/><text x="82.5502%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_bytes (12 samples, 0.02%)</title><rect x="82.3384%" y="165" width="0.0158%" height="15" fill="rgb(206,86,44)"/><text x="82.5884%" y="175.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (9 samples, 0.01%)</title><rect x="82.3740%" y="149" width="0.0119%" height="15" fill="rgb(245,177,15)"/><text x="82.6240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (91 samples, 0.12%)</title><rect x="82.3859%" y="149" width="0.1199%" height="15" fill="rgb(206,64,50)"/><text x="82.6359%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (81 samples, 0.11%)</title><rect x="82.3991%" y="133" width="0.1067%" height="15" fill="rgb(234,36,40)"/><text x="82.6491%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (78 samples, 0.10%)</title><rect x="82.4030%" y="117" width="0.1028%" height="15" fill="rgb(213,64,8)"/><text x="82.6530%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.03%)</title><rect x="82.4768%" y="101" width="0.0290%" height="15" fill="rgb(210,75,36)"/><text x="82.7268%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="82.5071%" y="149" width="0.0264%" height="15" fill="rgb(229,88,21)"/><text x="82.7571%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.01%)</title><rect x="82.5203%" y="133" width="0.0132%" height="15" fill="rgb(252,204,47)"/><text x="82.7703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="82.5216%" y="117" width="0.0119%" height="15" fill="rgb(208,77,27)"/><text x="82.7716%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="82.5335%" y="149" width="0.0171%" height="15" fill="rgb(221,76,26)"/><text x="82.7835%" y="159.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (171 samples, 0.23%)</title><rect x="82.3543%" y="165" width="0.2253%" height="15" fill="rgb(225,139,18)"/><text x="82.6043%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.02%)</title><rect x="82.5572%" y="149" width="0.0224%" height="15" fill="rgb(230,137,11)"/><text x="82.8072%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (9 samples, 0.01%)</title><rect x="82.5796%" y="165" width="0.0119%" height="15" fill="rgb(212,28,1)"/><text x="82.8296%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (216 samples, 0.28%)</title><rect x="82.3240%" y="181" width="0.2846%" height="15" fill="rgb(248,164,17)"/><text x="82.5740%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (23 samples, 0.03%)</title><rect x="82.6152%" y="181" width="0.0303%" height="15" fill="rgb(222,171,42)"/><text x="82.8652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="82.6455%" y="181" width="0.0132%" height="15" fill="rgb(243,84,45)"/><text x="82.8955%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.03%)</title><rect x="82.6890%" y="165" width="0.0290%" height="15" fill="rgb(252,49,23)"/><text x="82.9390%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.03%)</title><rect x="82.6903%" y="149" width="0.0277%" height="15" fill="rgb(215,19,7)"/><text x="82.9403%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.06%)</title><rect x="82.6639%" y="181" width="0.0567%" height="15" fill="rgb(238,81,41)"/><text x="82.9139%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 0.03%)</title><rect x="82.8379%" y="149" width="0.0343%" height="15" fill="rgb(210,199,37)"/><text x="83.0879%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (125 samples, 0.16%)</title><rect x="82.7206%" y="181" width="0.1647%" height="15" fill="rgb(244,192,49)"/><text x="82.9706%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (80 samples, 0.11%)</title><rect x="82.7799%" y="165" width="0.1054%" height="15" fill="rgb(226,211,11)"/><text x="83.0299%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.01%)</title><rect x="82.8721%" y="149" width="0.0132%" height="15" fill="rgb(236,162,54)"/><text x="83.1221%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (15 samples, 0.02%)</title><rect x="82.8853%" y="181" width="0.0198%" height="15" fill="rgb(220,229,9)"/><text x="83.1353%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (1,161 samples, 1.53%)</title><rect x="81.3870%" y="197" width="1.5299%" height="15" fill="rgb(250,87,22)"/><text x="81.6370%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (10 samples, 0.01%)</title><rect x="82.9169%" y="197" width="0.0132%" height="15" fill="rgb(239,43,17)"/><text x="83.1669%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (21 samples, 0.03%)</title><rect x="82.9301%" y="197" width="0.0277%" height="15" fill="rgb(231,177,25)"/><text x="83.1801%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (26 samples, 0.03%)</title><rect x="83.0065%" y="149" width="0.0343%" height="15" fill="rgb(219,179,1)"/><text x="83.2565%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.04%)</title><rect x="83.0052%" y="165" width="0.0382%" height="15" fill="rgb(238,219,53)"/><text x="83.2552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (18 samples, 0.02%)</title><rect x="83.0579%" y="149" width="0.0237%" height="15" fill="rgb(232,167,36)"/><text x="83.3079%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (30 samples, 0.04%)</title><rect x="83.0434%" y="165" width="0.0395%" height="15" fill="rgb(244,19,51)"/><text x="83.2934%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (68 samples, 0.09%)</title><rect x="82.9947%" y="181" width="0.0896%" height="15" fill="rgb(224,6,22)"/><text x="83.2447%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (115 samples, 0.15%)</title><rect x="83.3241%" y="165" width="0.1515%" height="15" fill="rgb(224,145,5)"/><text x="83.5741%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.03%)</title><rect x="83.4440%" y="149" width="0.0316%" height="15" fill="rgb(234,130,49)"/><text x="83.6940%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (155 samples, 0.20%)</title><rect x="83.7537%" y="133" width="0.2042%" height="15" fill="rgb(254,6,2)"/><text x="84.0037%" y="143.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (141 samples, 0.19%)</title><rect x="83.7721%" y="117" width="0.1858%" height="15" fill="rgb(208,96,46)"/><text x="84.0221%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (375 samples, 0.49%)</title><rect x="83.4756%" y="165" width="0.4941%" height="15" fill="rgb(239,3,39)"/><text x="83.7256%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (291 samples, 0.38%)</title><rect x="83.5863%" y="149" width="0.3835%" height="15" fill="rgb(233,210,1)"/><text x="83.8363%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (724 samples, 0.95%)</title><rect x="83.0843%" y="181" width="0.9540%" height="15" fill="rgb(244,137,37)"/><text x="83.3343%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (48 samples, 0.06%)</title><rect x="83.9751%" y="165" width="0.0633%" height="15" fill="rgb(240,136,2)"/><text x="84.2251%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="84.0515%" y="181" width="0.0171%" height="15" fill="rgb(239,18,37)"/><text x="84.3015%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (165 samples, 0.22%)</title><rect x="84.0739%" y="165" width="0.2174%" height="15" fill="rgb(218,185,22)"/><text x="84.3239%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (172 samples, 0.23%)</title><rect x="84.0726%" y="181" width="0.2266%" height="15" fill="rgb(225,218,4)"/><text x="84.3226%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (114 samples, 0.15%)</title><rect x="84.3032%" y="165" width="0.1502%" height="15" fill="rgb(230,182,32)"/><text x="84.5532%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (118 samples, 0.16%)</title><rect x="84.2992%" y="181" width="0.1555%" height="15" fill="rgb(242,56,43)"/><text x="84.5492%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (62 samples, 0.08%)</title><rect x="84.4560%" y="181" width="0.0817%" height="15" fill="rgb(233,99,24)"/><text x="84.7060%" y="191.50"></text></g><g><title>async-redis`async_redis::db::DB::set (1,212 samples, 1.60%)</title><rect x="82.9578%" y="197" width="1.5971%" height="15" fill="rgb(234,209,42)"/><text x="83.2078%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (13 samples, 0.02%)</title><rect x="84.5377%" y="181" width="0.0171%" height="15" fill="rgb(227,7,12)"/><text x="84.7877%" y="191.50"></text></g><g><title>async-redis`__rdl_realloc (10 samples, 0.01%)</title><rect x="84.6497%" y="165" width="0.0132%" height="15" fill="rgb(245,203,43)"/><text x="84.8997%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (17 samples, 0.02%)</title><rect x="84.6985%" y="149" width="0.0224%" height="15" fill="rgb(238,205,33)"/><text x="84.9485%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (17 samples, 0.02%)</title><rect x="84.7341%" y="133" width="0.0224%" height="15" fill="rgb(231,56,7)"/><text x="84.9841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (26 samples, 0.03%)</title><rect x="84.7565%" y="133" width="0.0343%" height="15" fill="rgb(244,186,29)"/><text x="85.0065%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="84.7723%" y="117" width="0.0184%" height="15" fill="rgb(234,111,31)"/><text x="85.0223%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.02%)</title><rect x="84.7723%" y="101" width="0.0184%" height="15" fill="rgb(241,149,10)"/><text x="85.0223%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (60 samples, 0.08%)</title><rect x="84.7209%" y="149" width="0.0791%" height="15" fill="rgb(249,206,44)"/><text x="84.9709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.01%)</title><rect x="84.8000%" y="149" width="0.0119%" height="15" fill="rgb(251,153,30)"/><text x="85.0500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.02%)</title><rect x="84.8118%" y="149" width="0.0224%" height="15" fill="rgb(239,152,38)"/><text x="85.0618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="84.8145%" y="133" width="0.0198%" height="15" fill="rgb(249,139,47)"/><text x="85.0645%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (126 samples, 0.17%)</title><rect x="84.6695%" y="165" width="0.1660%" height="15" fill="rgb(244,64,35)"/><text x="84.9195%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (149 samples, 0.20%)</title><rect x="84.6432%" y="181" width="0.1963%" height="15" fill="rgb(216,46,15)"/><text x="84.8932%" y="191.50"></text></g><g><title>async-redis`__rdl_realloc (9 samples, 0.01%)</title><rect x="84.8435%" y="181" width="0.0119%" height="15" fill="rgb(250,74,19)"/><text x="85.0935%" y="191.50"></text></g><g><title>async-redis`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (30 samples, 0.04%)</title><rect x="84.8962%" y="165" width="0.0395%" height="15" fill="rgb(249,42,33)"/><text x="85.1462%" y="175.50"></text></g><g><title>async-redis`&lt;str as core::fmt::Display&gt;::fmt (22 samples, 0.03%)</title><rect x="84.9423%" y="165" width="0.0290%" height="15" fill="rgb(242,149,17)"/><text x="85.1923%" y="175.50"></text></g><g><title>async-redis`core::fmt::Formatter::pad (8 samples, 0.01%)</title><rect x="84.9713%" y="165" width="0.0105%" height="15" fill="rgb(244,29,21)"/><text x="85.2213%" y="175.50"></text></g><g><title>async-redis`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (31 samples, 0.04%)</title><rect x="85.0055%" y="149" width="0.0408%" height="15" fill="rgb(220,130,37)"/><text x="85.2555%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (27 samples, 0.04%)</title><rect x="85.0108%" y="133" width="0.0356%" height="15" fill="rgb(211,67,2)"/><text x="85.2608%" y="143.50"></text></g><g><title>async-redis`core::fmt::Formatter::pad (15 samples, 0.02%)</title><rect x="85.0464%" y="149" width="0.0198%" height="15" fill="rgb(235,68,52)"/><text x="85.2964%" y="159.50"></text></g><g><title>async-redis`core::fmt::write (70 samples, 0.09%)</title><rect x="84.9818%" y="165" width="0.0922%" height="15" fill="rgb(246,142,3)"/><text x="85.2318%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.10%)</title><rect x="85.0780%" y="149" width="0.1015%" height="15" fill="rgb(241,25,7)"/><text x="85.3280%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (76 samples, 0.10%)</title><rect x="85.0793%" y="133" width="0.1001%" height="15" fill="rgb(242,119,39)"/><text x="85.3293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.05%)</title><rect x="85.1307%" y="117" width="0.0488%" height="15" fill="rgb(241,98,45)"/><text x="85.3807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="85.1676%" y="101" width="0.0119%" height="15" fill="rgb(254,28,30)"/><text x="85.4176%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.11%)</title><rect x="85.0741%" y="165" width="0.1094%" height="15" fill="rgb(241,142,54)"/><text x="85.3241%" y="175.50"></text></g><g><title>async-redis`alloc::fmt::format (248 samples, 0.33%)</title><rect x="84.8579%" y="181" width="0.3268%" height="15" fill="rgb(222,85,15)"/><text x="85.1079%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.04%)</title><rect x="85.2599%" y="117" width="0.0408%" height="15" fill="rgb(210,85,47)"/><text x="85.5099%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.03%)</title><rect x="85.2664%" y="101" width="0.0343%" height="15" fill="rgb(224,206,25)"/><text x="85.5164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.05%)</title><rect x="85.2506%" y="133" width="0.0527%" height="15" fill="rgb(243,201,19)"/><text x="85.5006%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 0.06%)</title><rect x="85.2440%" y="149" width="0.0606%" height="15" fill="rgb(236,59,4)"/><text x="85.4940%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (87 samples, 0.11%)</title><rect x="85.1992%" y="165" width="0.1146%" height="15" fill="rgb(254,179,45)"/><text x="85.4492%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::extend_from_slice (97 samples, 0.13%)</title><rect x="85.1887%" y="181" width="0.1278%" height="15" fill="rgb(226,14,10)"/><text x="85.4387%" y="191.50"></text></g><g><title>async-redis`core::fmt::write (8 samples, 0.01%)</title><rect x="85.3205%" y="181" width="0.0105%" height="15" fill="rgb(244,27,41)"/><text x="85.5705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.11%)</title><rect x="85.3350%" y="181" width="0.1146%" height="15" fill="rgb(235,35,32)"/><text x="85.5850%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (76 samples, 0.10%)</title><rect x="85.3495%" y="165" width="0.1001%" height="15" fill="rgb(218,68,31)"/><text x="85.5995%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (74 samples, 0.10%)</title><rect x="85.3521%" y="149" width="0.0975%" height="15" fill="rgb(207,120,37)"/><text x="85.6021%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.04%)</title><rect x="85.4114%" y="133" width="0.0382%" height="15" fill="rgb(227,98,0)"/><text x="85.6614%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="85.4391%" y="117" width="0.0105%" height="15" fill="rgb(207,7,3)"/><text x="85.6891%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.04%)</title><rect x="85.4720%" y="165" width="0.0395%" height="15" fill="rgb(206,98,19)"/><text x="85.7220%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.03%)</title><rect x="85.4786%" y="149" width="0.0329%" height="15" fill="rgb(217,5,26)"/><text x="85.7286%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.06%)</title><rect x="85.4536%" y="181" width="0.0593%" height="15" fill="rgb(235,190,38)"/><text x="85.7036%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (39 samples, 0.05%)</title><rect x="85.5129%" y="181" width="0.0514%" height="15" fill="rgb(247,86,24)"/><text x="85.7629%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.02%)</title><rect x="85.5656%" y="181" width="0.0224%" height="15" fill="rgb(205,101,16)"/><text x="85.8156%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::Encode (811 samples, 1.07%)</title><rect x="84.5549%" y="197" width="1.0687%" height="15" fill="rgb(246,168,33)"/><text x="84.8049%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.03%)</title><rect x="85.5946%" y="181" width="0.0290%" height="15" fill="rgb(231,114,1)"/><text x="85.8446%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (16 samples, 0.02%)</title><rect x="85.6341%" y="197" width="0.0211%" height="15" fill="rgb(207,184,53)"/><text x="85.8841%" y="207.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::extend_from_slice (18 samples, 0.02%)</title><rect x="85.6552%" y="197" width="0.0237%" height="15" fill="rgb(224,95,51)"/><text x="85.9052%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (8 samples, 0.01%)</title><rect x="85.6973%" y="165" width="0.0105%" height="15" fill="rgb(212,188,45)"/><text x="85.9473%" y="175.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (18 samples, 0.02%)</title><rect x="85.6894%" y="181" width="0.0237%" height="15" fill="rgb(223,154,38)"/><text x="85.9394%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (21 samples, 0.03%)</title><rect x="85.6881%" y="197" width="0.0277%" height="15" fill="rgb(251,22,52)"/><text x="85.9381%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (21 samples, 0.03%)</title><rect x="85.7277%" y="181" width="0.0277%" height="15" fill="rgb(229,209,22)"/><text x="85.9777%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (31 samples, 0.04%)</title><rect x="85.7158%" y="197" width="0.0408%" height="15" fill="rgb(234,138,34)"/><text x="85.9658%" y="207.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (69 samples, 0.09%)</title><rect x="85.9187%" y="133" width="0.0909%" height="15" fill="rgb(212,95,11)"/><text x="86.1687%" y="143.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (13 samples, 0.02%)</title><rect x="86.0096%" y="133" width="0.0171%" height="15" fill="rgb(240,179,47)"/><text x="86.2596%" y="143.50"></text></g><g><title>libsystem_c.dylib`send (9 samples, 0.01%)</title><rect x="86.0268%" y="133" width="0.0119%" height="15" fill="rgb(240,163,11)"/><text x="86.2768%" y="143.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,517 samples, 12.54%)</title><rect x="85.8937%" y="149" width="12.5408%" height="15" fill="rgb(236,37,12)"/><text x="86.1437%" y="159.50">async-redis`&lt;&amp;mio::..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,407 samples, 12.40%)</title><rect x="86.0386%" y="133" width="12.3959%" height="15" fill="rgb(232,164,16)"/><text x="86.2886%" y="143.50">libsystem_kernel.dy..</text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (20 samples, 0.03%)</title><rect x="98.5347%" y="133" width="0.0264%" height="15" fill="rgb(244,205,15)"/><text x="98.7847%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (22 samples, 0.03%)</title><rect x="98.5610%" y="133" width="0.0290%" height="15" fill="rgb(223,117,47)"/><text x="98.8110%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (137 samples, 0.18%)</title><rect x="98.4464%" y="149" width="0.1805%" height="15" fill="rgb(244,107,35)"/><text x="98.6964%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.04%)</title><rect x="98.5900%" y="133" width="0.0369%" height="15" fill="rgb(205,140,8)"/><text x="98.8400%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,726 samples, 12.82%)</title><rect x="85.8159%" y="181" width="12.8163%" height="15" fill="rgb(228,84,46)"/><text x="86.0659%" y="191.50">async-redis`&lt;tokio:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,699 samples, 12.78%)</title><rect x="85.8515%" y="165" width="12.7807%" height="15" fill="rgb(254,188,9)"/><text x="86.1015%" y="175.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,777 samples, 12.88%)</title><rect x="85.7566%" y="197" width="12.8835%" height="15" fill="rgb(206,112,54)"/><text x="86.0066%" y="207.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (17 samples, 0.02%)</title><rect x="98.6467%" y="197" width="0.0224%" height="15" fill="rgb(216,84,49)"/><text x="98.8967%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="98.6533%" y="181" width="0.0158%" height="15" fill="rgb(214,194,35)"/><text x="98.9033%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (42 samples, 0.06%)</title><rect x="98.6691%" y="197" width="0.0553%" height="15" fill="rgb(249,28,3)"/><text x="98.9191%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (10 samples, 0.01%)</title><rect x="98.7244%" y="197" width="0.0132%" height="15" fill="rgb(222,56,52)"/><text x="98.9744%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (78 samples, 0.10%)</title><rect x="98.8233%" y="181" width="0.1028%" height="15" fill="rgb(245,217,50)"/><text x="99.0733%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (78 samples, 0.10%)</title><rect x="98.8233%" y="165" width="0.1028%" height="15" fill="rgb(213,201,24)"/><text x="99.0733%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (130 samples, 0.17%)</title><rect x="98.7574%" y="197" width="0.1713%" height="15" fill="rgb(248,116,28)"/><text x="99.0074%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (62 samples, 0.08%)</title><rect x="99.1619%" y="165" width="0.0817%" height="15" fill="rgb(219,72,43)"/><text x="99.4119%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (289 samples, 0.38%)</title><rect x="98.9287%" y="197" width="0.3808%" height="15" fill="rgb(209,138,14)"/><text x="99.1787%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (214 samples, 0.28%)</title><rect x="99.0275%" y="181" width="0.2820%" height="15" fill="rgb(222,18,33)"/><text x="99.2775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (50 samples, 0.07%)</title><rect x="99.2436%" y="165" width="0.0659%" height="15" fill="rgb(213,199,7)"/><text x="99.4936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.01%)</title><rect x="99.3095%" y="197" width="0.0105%" height="15" fill="rgb(250,110,10)"/><text x="99.5595%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.03%)</title><rect x="99.3240%" y="197" width="0.0264%" height="15" fill="rgb(248,123,6)"/><text x="99.5740%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (58,271 samples, 76.79%)</title><rect x="22.5872%" y="213" width="76.7855%" height="15" fill="rgb(206,91,31)"/><text x="22.8372%" y="223.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 0.03%)</title><rect x="99.3728%" y="213" width="0.0250%" height="15" fill="rgb(211,154,13)"/><text x="99.6228%" y="223.50"></text></g><g><title>async-redis`__rdl_dealloc (12 samples, 0.02%)</title><rect x="99.4110%" y="213" width="0.0158%" height="15" fill="rgb(225,148,7)"/><text x="99.6610%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (22 samples, 0.03%)</title><rect x="99.4321%" y="213" width="0.0290%" height="15" fill="rgb(220,160,43)"/><text x="99.6821%" y="223.50"></text></g><g><title>async-redis`async_redis::db::DB::set (13 samples, 0.02%)</title><rect x="99.4610%" y="213" width="0.0171%" height="15" fill="rgb(213,52,39)"/><text x="99.7110%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (12 samples, 0.02%)</title><rect x="99.4795%" y="213" width="0.0158%" height="15" fill="rgb(243,137,7)"/><text x="99.7295%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (27 samples, 0.04%)</title><rect x="99.5098%" y="213" width="0.0356%" height="15" fill="rgb(230,79,13)"/><text x="99.7598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.03%)</title><rect x="99.5572%" y="213" width="0.0303%" height="15" fill="rgb(247,105,23)"/><text x="99.8072%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (58,475 samples, 77.05%)</title><rect x="22.5411%" y="229" width="77.0543%" height="15" fill="rgb(223,179,41)"/><text x="22.7911%" y="239.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (13 samples, 0.02%)</title><rect x="99.6113%" y="229" width="0.0171%" height="15" fill="rgb(218,9,34)"/><text x="99.8613%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (58,519 samples, 77.11%)</title><rect x="22.5174%" y="245" width="77.1123%" height="15" fill="rgb(222,106,8)"/><text x="22.7674%" y="255.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (15 samples, 0.02%)</title><rect x="99.6389%" y="245" width="0.0198%" height="15" fill="rgb(211,220,0)"/><text x="99.8889%" y="255.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (58,731 samples, 77.39%)</title><rect x="22.2881%" y="261" width="77.3917%" height="15" fill="rgb(229,52,16)"/><text x="22.5381%" y="271.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="99.6587%" y="245" width="0.0211%" height="15" fill="rgb(212,155,18)"/><text x="99.9087%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (23 samples, 0.03%)</title><rect x="99.6811%" y="261" width="0.0303%" height="15" fill="rgb(242,21,14)"/><text x="99.9311%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (21 samples, 0.03%)</title><rect x="99.7114%" y="261" width="0.0277%" height="15" fill="rgb(222,19,48)"/><text x="99.9614%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (18 samples, 0.02%)</title><rect x="99.7391%" y="261" width="0.0237%" height="15" fill="rgb(232,45,27)"/><text x="99.9891%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (8 samples, 0.01%)</title><rect x="99.7681%" y="261" width="0.0105%" height="15" fill="rgb(249,103,42)"/><text x="100.0181%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (60,498 samples, 79.72%)</title><rect x="20.0822%" y="277" width="79.7201%" height="15" fill="rgb(246,81,33)"/><text x="20.3322%" y="287.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (11 samples, 0.01%)</title><rect x="99.7878%" y="261" width="0.0145%" height="15" fill="rgb(252,33,42)"/><text x="100.0378%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (128 samples, 0.17%)</title><rect x="99.8023%" y="277" width="0.1687%" height="15" fill="rgb(209,212,41)"/><text x="100.0523%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (75,813 samples, 99.90%)</title><rect x="0.0712%" y="293" width="99.9012%" height="15" fill="rgb(207,154,6)"/><text x="0.3212%" y="303.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (8 samples, 0.01%)</title><rect x="99.9723%" y="293" width="0.0105%" height="15" fill="rgb(223,64,47)"/><text x="100.2223%" y="303.50"></text></g><g><title>all (75,888 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(211,161,38)"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (75,856 samples, 99.96%)</title><rect x="0.0422%" y="469" width="99.9578%" height="15" fill="rgb(219,138,40)"/><text x="0.2922%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (75,856 samples, 99.96%)</title><rect x="0.0422%" y="453" width="99.9578%" height="15" fill="rgb(241,228,46)"/><text x="0.2922%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (75,856 samples, 99.96%)</title><rect x="0.0422%" y="437" width="99.9578%" height="15" fill="rgb(223,209,38)"/><text x="0.2922%" y="447.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (75,856 samples, 99.96%)</title><rect x="0.0422%" y="421" width="99.9578%" height="15" fill="rgb(236,164,45)"/><text x="0.2922%" y="431.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (75,856 samples, 99.96%)</title><rect x="0.0422%" y="405" width="99.9578%" height="15" fill="rgb(231,15,5)"/><text x="0.2922%" y="415.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (75,856 samples, 99.96%)</title><rect x="0.0422%" y="389" width="99.9578%" height="15" fill="rgb(252,35,15)"/><text x="0.2922%" y="399.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (75,856 samples, 99.96%)</title><rect x="0.0422%" y="373" width="99.9578%" height="15" fill="rgb(248,181,18)"/><text x="0.2922%" y="383.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (75,856 samples, 99.96%)</title><rect x="0.0422%" y="357" width="99.9578%" height="15" fill="rgb(233,39,42)"/><text x="0.2922%" y="367.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (75,856 samples, 99.96%)</title><rect x="0.0422%" y="341" width="99.9578%" height="15" fill="rgb(238,110,33)"/><text x="0.2922%" y="351.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (75,856 samples, 99.96%)</title><rect x="0.0422%" y="325" width="99.9578%" height="15" fill="rgb(233,195,10)"/><text x="0.2922%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (75,856 samples, 99.96%)</title><rect x="0.0422%" y="309" width="99.9578%" height="15" fill="rgb(254,105,3)"/><text x="0.2922%" y="319.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (13 samples, 0.02%)</title><rect x="99.9829%" y="293" width="0.0171%" height="15" fill="rgb(221,225,9)"/><text x="100.2329%" y="303.50"></text></g></svg></svg>