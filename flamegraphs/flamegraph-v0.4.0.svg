<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (14 samples, 0.02%)</title><rect x="0.0080%" y="245" width="0.0223%" height="15" fill="rgb(227,0,7)"/><text x="0.2580%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (12 samples, 0.02%)</title><rect x="0.0111%" y="229" width="0.0191%" height="15" fill="rgb(217,0,24)"/><text x="0.2611%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.04%)</title><rect x="0.0032%" y="293" width="0.0414%" height="15" fill="rgb(221,193,54)"/><text x="0.2532%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.04%)</title><rect x="0.0032%" y="277" width="0.0414%" height="15" fill="rgb(248,212,6)"/><text x="0.2532%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.04%)</title><rect x="0.0032%" y="261" width="0.0414%" height="15" fill="rgb(208,68,35)"/><text x="0.2532%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.04%)</title><rect x="0.0032%" y="325" width="0.0429%" height="15" fill="rgb(232,128,0)"/><text x="0.2532%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.04%)</title><rect x="0.0032%" y="309" width="0.0429%" height="15" fill="rgb(207,160,47)"/><text x="0.2532%" y="319.50"></text></g><g><title>async-redis`0x1 (33 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0525%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="495.50"></text></g><g><title>libdyld.dylib`start (33 samples, 0.05%)</title><rect x="0.0000%" y="469" width="0.0525%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`main (33 samples, 0.05%)</title><rect x="0.0000%" y="453" width="0.0525%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (32 samples, 0.05%)</title><rect x="0.0016%" y="437" width="0.0509%" height="15" fill="rgb(250,228,42)"/><text x="0.2516%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (32 samples, 0.05%)</title><rect x="0.0016%" y="421" width="0.0509%" height="15" fill="rgb(240,193,28)"/><text x="0.2516%" y="431.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (32 samples, 0.05%)</title><rect x="0.0016%" y="405" width="0.0509%" height="15" fill="rgb(216,20,37)"/><text x="0.2516%" y="415.50"></text></g><g><title>async-redis`async_redis::main (32 samples, 0.05%)</title><rect x="0.0016%" y="389" width="0.0509%" height="15" fill="rgb(206,188,39)"/><text x="0.2516%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (32 samples, 0.05%)</title><rect x="0.0016%" y="373" width="0.0509%" height="15" fill="rgb(217,207,13)"/><text x="0.2516%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (32 samples, 0.05%)</title><rect x="0.0016%" y="357" width="0.0509%" height="15" fill="rgb(231,73,38)"/><text x="0.2516%" y="367.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (31 samples, 0.05%)</title><rect x="0.0032%" y="341" width="0.0493%" height="15" fill="rgb(225,20,46)"/><text x="0.2532%" y="351.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (10 samples, 0.02%)</title><rect x="0.0541%" y="325" width="0.0159%" height="15" fill="rgb(210,31,41)"/><text x="0.3041%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12 samples, 0.02%)</title><rect x="0.8892%" y="309" width="0.0191%" height="15" fill="rgb(221,200,47)"/><text x="1.1392%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.01%)</title><rect x="0.9131%" y="309" width="0.0143%" height="15" fill="rgb(226,26,5)"/><text x="1.1631%" y="319.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (10 samples, 0.02%)</title><rect x="0.9274%" y="309" width="0.0159%" height="15" fill="rgb(249,33,26)"/><text x="1.1774%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.01%)</title><rect x="0.9433%" y="309" width="0.0143%" height="15" fill="rgb(235,183,28)"/><text x="1.1933%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (14 samples, 0.02%)</title><rect x="0.9576%" y="309" width="0.0223%" height="15" fill="rgb(221,5,38)"/><text x="1.2076%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (282 samples, 0.45%)</title><rect x="0.9799%" y="309" width="0.4486%" height="15" fill="rgb(247,18,42)"/><text x="1.2299%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (7 samples, 0.01%)</title><rect x="3.5823%" y="293" width="0.0111%" height="15" fill="rgb(241,131,45)"/><text x="3.8323%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (7 samples, 0.01%)</title><rect x="3.5823%" y="277" width="0.0111%" height="15" fill="rgb(249,31,29)"/><text x="3.8323%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (14 samples, 0.02%)</title><rect x="4.2313%" y="277" width="0.0223%" height="15" fill="rgb(225,111,53)"/><text x="4.4813%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (15 samples, 0.02%)</title><rect x="4.5128%" y="261" width="0.0239%" height="15" fill="rgb(238,160,17)"/><text x="4.7628%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.04%)</title><rect x="4.5367%" y="261" width="0.0366%" height="15" fill="rgb(214,148,48)"/><text x="4.7867%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,146 samples, 3.41%)</title><rect x="4.5733%" y="261" width="3.4137%" height="15" fill="rgb(232,36,49)"/><text x="4.8233%" y="271.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (19 samples, 0.03%)</title><rect x="8.1953%" y="245" width="0.0302%" height="15" fill="rgb(209,103,24)"/><text x="8.4453%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (50 samples, 0.08%)</title><rect x="8.2256%" y="229" width="0.0795%" height="15" fill="rgb(229,88,8)"/><text x="8.4756%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (57 samples, 0.09%)</title><rect x="8.2256%" y="245" width="0.0907%" height="15" fill="rgb(213,181,19)"/><text x="8.4756%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (7 samples, 0.01%)</title><rect x="8.3051%" y="229" width="0.0111%" height="15" fill="rgb(254,191,54)"/><text x="8.5551%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (61 samples, 0.10%)</title><rect x="8.3162%" y="245" width="0.0970%" height="15" fill="rgb(241,83,37)"/><text x="8.5662%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (298 samples, 0.47%)</title><rect x="7.9870%" y="261" width="0.4740%" height="15" fill="rgb(233,36,39)"/><text x="8.2370%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (30 samples, 0.05%)</title><rect x="8.4133%" y="245" width="0.0477%" height="15" fill="rgb(226,3,54)"/><text x="8.6633%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (13 samples, 0.02%)</title><rect x="8.4642%" y="261" width="0.0207%" height="15" fill="rgb(245,192,40)"/><text x="8.7142%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (8 samples, 0.01%)</title><rect x="8.4848%" y="261" width="0.0127%" height="15" fill="rgb(238,167,29)"/><text x="8.7348%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (2,691 samples, 4.28%)</title><rect x="4.2536%" y="277" width="4.2806%" height="15" fill="rgb(232,182,51)"/><text x="4.5036%" y="287.50">async..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (23 samples, 0.04%)</title><rect x="8.4976%" y="261" width="0.0366%" height="15" fill="rgb(231,60,39)"/><text x="8.7476%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::now (13 samples, 0.02%)</title><rect x="8.5469%" y="277" width="0.0207%" height="15" fill="rgb(208,69,12)"/><text x="8.7969%" y="287.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="8.7648%" y="245" width="0.0111%" height="15" fill="rgb(235,93,37)"/><text x="9.0148%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (11 samples, 0.02%)</title><rect x="8.7759%" y="245" width="0.0175%" height="15" fill="rgb(213,116,39)"/><text x="9.0259%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (22 samples, 0.03%)</title><rect x="8.8205%" y="245" width="0.0350%" height="15" fill="rgb(222,207,29)"/><text x="9.0705%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (9 samples, 0.01%)</title><rect x="8.8634%" y="245" width="0.0143%" height="15" fill="rgb(206,96,30)"/><text x="9.1134%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="9.3788%" y="229" width="0.0143%" height="15" fill="rgb(218,138,4)"/><text x="9.6288%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (16 samples, 0.03%)</title><rect x="9.4281%" y="229" width="0.0255%" height="15" fill="rgb(250,191,14)"/><text x="9.6781%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (71 samples, 0.11%)</title><rect x="9.4552%" y="229" width="0.1129%" height="15" fill="rgb(239,60,40)"/><text x="9.7052%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (22 samples, 0.03%)</title><rect x="9.7320%" y="213" width="0.0350%" height="15" fill="rgb(206,27,48)"/><text x="9.9820%" y="223.50"></text></g><g><title> 32]&gt;::default (22 samples, 0.03%)</title><rect x="9.7320%" y="197" width="0.0350%" height="15" fill="rgb(225,35,8)"/><text x="9.9820%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (75 samples, 0.12%)</title><rect x="9.7670%" y="213" width="0.1193%" height="15" fill="rgb(250,213,24)"/><text x="10.0170%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (19 samples, 0.03%)</title><rect x="9.9149%" y="197" width="0.0302%" height="15" fill="rgb(247,123,22)"/><text x="10.1649%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (67 samples, 0.11%)</title><rect x="9.9451%" y="197" width="0.1066%" height="15" fill="rgb(231,138,38)"/><text x="10.1951%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (13 samples, 0.02%)</title><rect x="10.0883%" y="165" width="0.0207%" height="15" fill="rgb(231,145,46)"/><text x="10.3383%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (16 samples, 0.03%)</title><rect x="10.1090%" y="165" width="0.0255%" height="15" fill="rgb(251,118,11)"/><text x="10.3590%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (48 samples, 0.08%)</title><rect x="10.0628%" y="181" width="0.0764%" height="15" fill="rgb(217,147,25)"/><text x="10.3128%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (154 samples, 0.24%)</title><rect x="9.8990%" y="213" width="0.2450%" height="15" fill="rgb(247,81,37)"/><text x="10.1490%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (58 samples, 0.09%)</title><rect x="10.0517%" y="197" width="0.0923%" height="15" fill="rgb(209,12,38)"/><text x="10.3017%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (369 samples, 0.59%)</title><rect x="9.5681%" y="229" width="0.5870%" height="15" fill="rgb(227,1,9)"/><text x="9.8181%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (7 samples, 0.01%)</title><rect x="10.1440%" y="213" width="0.0111%" height="15" fill="rgb(248,47,43)"/><text x="10.3940%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (7 samples, 0.01%)</title><rect x="10.1551%" y="229" width="0.0111%" height="15" fill="rgb(221,10,30)"/><text x="10.4051%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,678 samples, 5.85%)</title><rect x="8.8778%" y="245" width="5.8506%" height="15" fill="rgb(210,229,1)"/><text x="9.1278%" y="255.50">async-r..</text></g><g><title>libsystem_kernel.dylib`kevent (2,866 samples, 4.56%)</title><rect x="10.1694%" y="229" width="4.5590%" height="15" fill="rgb(222,148,37)"/><text x="10.4194%" y="239.50">libsy..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (9 samples, 0.01%)</title><rect x="14.7284%" y="245" width="0.0143%" height="15" fill="rgb(234,67,33)"/><text x="14.9784%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (27 samples, 0.04%)</title><rect x="14.7952%" y="213" width="0.0429%" height="15" fill="rgb(247,98,35)"/><text x="15.0452%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (62 samples, 0.10%)</title><rect x="14.8381%" y="213" width="0.0986%" height="15" fill="rgb(247,138,52)"/><text x="15.0881%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (129 samples, 0.21%)</title><rect x="14.7713%" y="229" width="0.2052%" height="15" fill="rgb(213,79,30)"/><text x="15.0213%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.04%)</title><rect x="14.9368%" y="213" width="0.0398%" height="15" fill="rgb(246,177,23)"/><text x="15.1868%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (145 samples, 0.23%)</title><rect x="14.7475%" y="245" width="0.2307%" height="15" fill="rgb(230,62,27)"/><text x="14.9975%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (20 samples, 0.03%)</title><rect x="14.9781%" y="245" width="0.0318%" height="15" fill="rgb(216,154,8)"/><text x="15.2281%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (3,960 samples, 6.30%)</title><rect x="8.7123%" y="261" width="6.2992%" height="15" fill="rgb(244,35,45)"/><text x="8.9623%" y="271.50">async-re..</text></g><g><title>async-redis`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="15.0115%" y="261" width="0.0111%" height="15" fill="rgb(251,115,12)"/><text x="15.2615%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (91 samples, 0.14%)</title><rect x="15.0338%" y="261" width="0.1448%" height="15" fill="rgb(240,54,50)"/><text x="15.2838%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (27 samples, 0.04%)</title><rect x="15.1786%" y="261" width="0.0429%" height="15" fill="rgb(233,84,52)"/><text x="15.4286%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (19 samples, 0.03%)</title><rect x="15.2215%" y="261" width="0.0302%" height="15" fill="rgb(207,117,47)"/><text x="15.4715%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.02%)</title><rect x="15.2517%" y="261" width="0.0159%" height="15" fill="rgb(249,43,39)"/><text x="15.5017%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (61 samples, 0.10%)</title><rect x="15.3710%" y="245" width="0.0970%" height="15" fill="rgb(209,38,44)"/><text x="15.6210%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (41 samples, 0.07%)</title><rect x="15.4712%" y="245" width="0.0652%" height="15" fill="rgb(236,212,23)"/><text x="15.7212%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (33 samples, 0.05%)</title><rect x="15.4840%" y="229" width="0.0525%" height="15" fill="rgb(242,79,21)"/><text x="15.7340%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (71 samples, 0.11%)</title><rect x="15.5365%" y="245" width="0.1129%" height="15" fill="rgb(211,96,35)"/><text x="15.7865%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (51 samples, 0.08%)</title><rect x="15.5683%" y="229" width="0.0811%" height="15" fill="rgb(253,215,40)"/><text x="15.8183%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (243 samples, 0.39%)</title><rect x="15.2676%" y="261" width="0.3865%" height="15" fill="rgb(211,81,21)"/><text x="15.5176%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (69 samples, 0.11%)</title><rect x="15.6542%" y="261" width="0.1098%" height="15" fill="rgb(208,190,38)"/><text x="15.9042%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (60 samples, 0.10%)</title><rect x="15.6685%" y="245" width="0.0954%" height="15" fill="rgb(235,213,38)"/><text x="15.9185%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,607 samples, 7.33%)</title><rect x="8.5676%" y="277" width="7.3284%" height="15" fill="rgb(237,122,38)"/><text x="8.8176%" y="287.50">async-redi..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (77 samples, 0.12%)</title><rect x="15.7735%" y="261" width="0.1225%" height="15" fill="rgb(244,218,35)"/><text x="16.0235%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (7 samples, 0.01%)</title><rect x="15.8960%" y="277" width="0.0111%" height="15" fill="rgb(240,68,47)"/><text x="16.1460%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (26 samples, 0.04%)</title><rect x="15.9119%" y="277" width="0.0414%" height="15" fill="rgb(210,16,53)"/><text x="16.1619%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,327 samples, 6.88%)</title><rect x="15.9532%" y="277" width="6.8830%" height="15" fill="rgb(235,124,12)"/><text x="16.2032%" y="287.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (18 samples, 0.03%)</title><rect x="22.8362%" y="277" width="0.0286%" height="15" fill="rgb(224,169,11)"/><text x="23.0862%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (7 samples, 0.01%)</title><rect x="22.8649%" y="277" width="0.0111%" height="15" fill="rgb(250,166,2)"/><text x="23.1149%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (97 samples, 0.15%)</title><rect x="22.8760%" y="277" width="0.1543%" height="15" fill="rgb(242,216,29)"/><text x="23.1260%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12,261 samples, 19.50%)</title><rect x="3.5950%" y="293" width="19.5037%" height="15" fill="rgb(230,116,27)"/><text x="3.8450%" y="303.50">async-redis`&lt;tokio::runtime::pa..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (40 samples, 0.06%)</title><rect x="23.0351%" y="277" width="0.0636%" height="15" fill="rgb(228,99,48)"/><text x="23.2851%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (16 samples, 0.03%)</title><rect x="23.1337%" y="229" width="0.0255%" height="15" fill="rgb(253,11,6)"/><text x="23.3837%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (128 samples, 0.20%)</title><rect x="23.1146%" y="245" width="0.2036%" height="15" fill="rgb(247,143,39)"/><text x="23.3646%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (99 samples, 0.16%)</title><rect x="23.1607%" y="229" width="0.1575%" height="15" fill="rgb(236,97,10)"/><text x="23.4107%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (131 samples, 0.21%)</title><rect x="23.1146%" y="261" width="0.2084%" height="15" fill="rgb(233,208,19)"/><text x="23.3646%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (9 samples, 0.01%)</title><rect x="23.3294%" y="261" width="0.0143%" height="15" fill="rgb(216,164,2)"/><text x="23.5794%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (152 samples, 0.24%)</title><rect x="23.1067%" y="277" width="0.2418%" height="15" fill="rgb(220,129,5)"/><text x="23.3567%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (159 samples, 0.25%)</title><rect x="23.0987%" y="293" width="0.2529%" height="15" fill="rgb(242,17,10)"/><text x="23.3487%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (9 samples, 0.01%)</title><rect x="23.3516%" y="293" width="0.0143%" height="15" fill="rgb(242,107,0)"/><text x="23.6016%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (140 samples, 0.22%)</title><rect x="23.3818%" y="277" width="0.2227%" height="15" fill="rgb(251,28,31)"/><text x="23.6318%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (166 samples, 0.26%)</title><rect x="23.3691%" y="293" width="0.2641%" height="15" fill="rgb(233,223,10)"/><text x="23.6191%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (20 samples, 0.03%)</title><rect x="23.6395%" y="293" width="0.0318%" height="15" fill="rgb(215,21,27)"/><text x="23.8895%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (8 samples, 0.01%)</title><rect x="23.6714%" y="293" width="0.0127%" height="15" fill="rgb(232,23,21)"/><text x="23.9214%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (46 samples, 0.07%)</title><rect x="23.6841%" y="293" width="0.0732%" height="15" fill="rgb(244,5,23)"/><text x="23.9341%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (14,039 samples, 22.33%)</title><rect x="1.4285%" y="309" width="22.3320%" height="15" fill="rgb(226,81,46)"/><text x="1.6785%" y="319.50">async-redis`tokio::runtime::thread_..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (80 samples, 0.13%)</title><rect x="23.9195%" y="293" width="0.1273%" height="15" fill="rgb(247,70,30)"/><text x="24.1695%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (73 samples, 0.12%)</title><rect x="23.9306%" y="277" width="0.1161%" height="15" fill="rgb(212,68,19)"/><text x="24.1806%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (46 samples, 0.07%)</title><rect x="24.0484%" y="293" width="0.0732%" height="15" fill="rgb(240,187,13)"/><text x="24.2984%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (54 samples, 0.09%)</title><rect x="24.1788%" y="277" width="0.0859%" height="15" fill="rgb(223,113,26)"/><text x="24.4288%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,071 samples, 1.70%)</title><rect x="24.2647%" y="277" width="1.7037%" height="15" fill="rgb(206,192,2)"/><text x="24.5147%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.02%)</title><rect x="25.9683%" y="277" width="0.0159%" height="15" fill="rgb(241,108,4)"/><text x="26.2183%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (37 samples, 0.06%)</title><rect x="26.0033%" y="277" width="0.0589%" height="15" fill="rgb(247,173,49)"/><text x="26.2533%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (36 samples, 0.06%)</title><rect x="26.0049%" y="261" width="0.0573%" height="15" fill="rgb(224,114,35)"/><text x="26.2549%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (33 samples, 0.05%)</title><rect x="26.0622%" y="277" width="0.0525%" height="15" fill="rgb(245,159,27)"/><text x="26.3122%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (13 samples, 0.02%)</title><rect x="26.0940%" y="261" width="0.0207%" height="15" fill="rgb(245,172,44)"/><text x="26.3440%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (21 samples, 0.03%)</title><rect x="26.1147%" y="277" width="0.0334%" height="15" fill="rgb(236,23,11)"/><text x="26.3647%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,276 samples, 2.03%)</title><rect x="24.1279%" y="293" width="2.0297%" height="15" fill="rgb(205,117,38)"/><text x="24.3779%" y="303.50">a..</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.03%)</title><rect x="26.4122%" y="277" width="0.0318%" height="15" fill="rgb(237,72,25)"/><text x="26.6622%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.02%)</title><rect x="26.4440%" y="277" width="0.0159%" height="15" fill="rgb(244,70,9)"/><text x="26.6940%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.05%)</title><rect x="26.6237%" y="261" width="0.0525%" height="15" fill="rgb(217,125,39)"/><text x="26.8737%" y="271.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (27 samples, 0.04%)</title><rect x="27.7802%" y="213" width="0.0429%" height="15" fill="rgb(235,36,10)"/><text x="28.0302%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (56 samples, 0.09%)</title><rect x="28.0617%" y="197" width="0.0891%" height="15" fill="rgb(251,123,47)"/><text x="28.3117%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (19 samples, 0.03%)</title><rect x="28.1206%" y="181" width="0.0302%" height="15" fill="rgb(221,13,13)"/><text x="28.3706%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="28.1508%" y="197" width="0.0366%" height="15" fill="rgb(238,131,9)"/><text x="28.4008%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (282 samples, 0.45%)</title><rect x="28.6105%" y="165" width="0.4486%" height="15" fill="rgb(211,50,8)"/><text x="28.8605%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (253 samples, 0.40%)</title><rect x="28.6566%" y="149" width="0.4024%" height="15" fill="rgb(245,182,24)"/><text x="28.9066%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="29.0591%" y="165" width="0.0207%" height="15" fill="rgb(242,14,37)"/><text x="29.3091%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (554 samples, 0.88%)</title><rect x="28.2033%" y="181" width="0.8813%" height="15" fill="rgb(246,228,12)"/><text x="28.4533%" y="191.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (624 samples, 0.99%)</title><rect x="28.1890%" y="197" width="0.9926%" height="15" fill="rgb(213,55,15)"/><text x="28.4390%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (61 samples, 0.10%)</title><rect x="29.0845%" y="181" width="0.0970%" height="15" fill="rgb(209,9,3)"/><text x="29.3345%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (853 samples, 1.36%)</title><rect x="27.8295%" y="213" width="1.3569%" height="15" fill="rgb(230,59,30)"/><text x="28.0795%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (32 samples, 0.05%)</title><rect x="29.1895%" y="213" width="0.0509%" height="15" fill="rgb(209,121,21)"/><text x="29.4395%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (936 samples, 1.49%)</title><rect x="27.7547%" y="229" width="1.4889%" height="15" fill="rgb(220,109,13)"/><text x="28.0047%" y="239.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.11%)</title><rect x="30.1042%" y="213" width="0.1066%" height="15" fill="rgb(232,18,1)"/><text x="30.3542%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (24 samples, 0.04%)</title><rect x="30.1726%" y="197" width="0.0382%" height="15" fill="rgb(215,41,42)"/><text x="30.4226%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;&amp;str&gt;&gt;::from (15 samples, 0.02%)</title><rect x="30.2108%" y="213" width="0.0239%" height="15" fill="rgb(224,123,36)"/><text x="30.4608%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.03%)</title><rect x="30.2346%" y="213" width="0.0350%" height="15" fill="rgb(240,125,3)"/><text x="30.4846%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="30.2696%" y="213" width="0.0127%" height="15" fill="rgb(205,98,50)"/><text x="30.5196%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="30.2824%" y="213" width="0.0159%" height="15" fill="rgb(205,185,37)"/><text x="30.5324%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (9 samples, 0.01%)</title><rect x="31.1302%" y="165" width="0.0143%" height="15" fill="rgb(238,207,15)"/><text x="31.3802%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (27 samples, 0.04%)</title><rect x="31.2527%" y="149" width="0.0429%" height="15" fill="rgb(213,199,42)"/><text x="31.5027%" y="159.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (26 samples, 0.04%)</title><rect x="31.2956%" y="149" width="0.0414%" height="15" fill="rgb(235,201,11)"/><text x="31.5456%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (16 samples, 0.03%)</title><rect x="31.7856%" y="101" width="0.0255%" height="15" fill="rgb(207,46,11)"/><text x="32.0356%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (173 samples, 0.28%)</title><rect x="31.6042%" y="117" width="0.2752%" height="15" fill="rgb(241,35,35)"/><text x="31.8542%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (43 samples, 0.07%)</title><rect x="31.8110%" y="101" width="0.0684%" height="15" fill="rgb(243,32,47)"/><text x="32.0610%" y="111.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (22 samples, 0.03%)</title><rect x="31.8794%" y="117" width="0.0350%" height="15" fill="rgb(247,202,23)"/><text x="32.1294%" y="127.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (11 samples, 0.02%)</title><rect x="31.9144%" y="117" width="0.0175%" height="15" fill="rgb(219,102,11)"/><text x="32.1644%" y="127.50"></text></g><g><title>libsystem_c.dylib`recv (16 samples, 0.03%)</title><rect x="31.9319%" y="117" width="0.0255%" height="15" fill="rgb(243,110,44)"/><text x="32.1819%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__error (16 samples, 0.03%)</title><rect x="31.9574%" y="117" width="0.0255%" height="15" fill="rgb(222,74,54)"/><text x="32.2074%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17,233 samples, 27.41%)</title><rect x="31.9828%" y="117" width="27.4127%" height="15" fill="rgb(216,99,12)"/><text x="32.2328%" y="127.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (17,553 samples, 27.92%)</title><rect x="31.5136%" y="133" width="27.9217%" height="15" fill="rgb(226,22,26)"/><text x="31.7636%" y="143.50">async-redis`&lt;&amp;mio::net::tcp::stream::TcpStrea..</text></g><g><title>libsystem_kernel.dylib`cerror (25 samples, 0.04%)</title><rect x="59.3955%" y="117" width="0.0398%" height="15" fill="rgb(217,163,10)"/><text x="59.6455%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (23 samples, 0.04%)</title><rect x="59.7646%" y="117" width="0.0366%" height="15" fill="rgb(213,25,53)"/><text x="60.0146%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (81 samples, 0.13%)</title><rect x="59.8012%" y="117" width="0.1288%" height="15" fill="rgb(252,105,26)"/><text x="60.0512%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (9 samples, 0.01%)</title><rect x="59.9157%" y="101" width="0.0143%" height="15" fill="rgb(220,39,43)"/><text x="60.1657%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (8 samples, 0.01%)</title><rect x="59.9173%" y="85" width="0.0127%" height="15" fill="rgb(229,68,48)"/><text x="60.1673%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (7 samples, 0.01%)</title><rect x="59.9300%" y="117" width="0.0111%" height="15" fill="rgb(252,8,32)"/><text x="60.1800%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (347 samples, 0.55%)</title><rect x="59.4623%" y="133" width="0.5520%" height="15" fill="rgb(223,20,43)"/><text x="59.7123%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (46 samples, 0.07%)</title><rect x="59.9411%" y="117" width="0.0732%" height="15" fill="rgb(229,81,49)"/><text x="60.1911%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (18,036 samples, 28.69%)</title><rect x="31.3370%" y="149" width="28.6901%" height="15" fill="rgb(236,28,36)"/><text x="31.5870%" y="159.50">async-redis`tokio::io::driver::registration::R..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (8 samples, 0.01%)</title><rect x="60.0143%" y="133" width="0.0127%" height="15" fill="rgb(249,185,26)"/><text x="60.2643%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18,172 samples, 28.91%)</title><rect x="31.1445%" y="165" width="28.9064%" height="15" fill="rgb(249,174,33)"/><text x="31.3945%" y="175.50">async-redis`&lt;tokio::net::tcp::stream::TcpStrea..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (15 samples, 0.02%)</title><rect x="60.0270%" y="149" width="0.0239%" height="15" fill="rgb(233,201,37)"/><text x="60.2770%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7 samples, 0.01%)</title><rect x="60.5138%" y="117" width="0.0111%" height="15" fill="rgb(221,78,26)"/><text x="60.7638%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (15 samples, 0.02%)</title><rect x="60.5249%" y="117" width="0.0239%" height="15" fill="rgb(250,127,30)"/><text x="60.7749%" y="127.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (33 samples, 0.05%)</title><rect x="60.4979%" y="133" width="0.0525%" height="15" fill="rgb(230,49,44)"/><text x="60.7479%" y="143.50"></text></g><g><title>async-redis`parking_lot::raw_rwlock::RawRwLock::lock_shared_slow (8 samples, 0.01%)</title><rect x="60.5552%" y="133" width="0.0127%" height="15" fill="rgb(229,67,23)"/><text x="60.8052%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (15 samples, 0.02%)</title><rect x="60.5711%" y="133" width="0.0239%" height="15" fill="rgb(249,83,47)"/><text x="60.8211%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (15 samples, 0.02%)</title><rect x="60.5711%" y="117" width="0.0239%" height="15" fill="rgb(215,43,3)"/><text x="60.8211%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (367 samples, 0.58%)</title><rect x="60.0509%" y="165" width="0.5838%" height="15" fill="rgb(238,154,13)"/><text x="60.3009%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (353 samples, 0.56%)</title><rect x="60.0732%" y="149" width="0.5615%" height="15" fill="rgb(219,56,2)"/><text x="60.3232%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (25 samples, 0.04%)</title><rect x="60.5949%" y="133" width="0.0398%" height="15" fill="rgb(233,0,4)"/><text x="60.8449%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (7 samples, 0.01%)</title><rect x="60.6363%" y="165" width="0.0111%" height="15" fill="rgb(235,30,7)"/><text x="60.8863%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.03%)</title><rect x="60.6474%" y="165" width="0.0302%" height="15" fill="rgb(250,79,13)"/><text x="60.8974%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.04%)</title><rect x="60.9528%" y="149" width="0.0414%" height="15" fill="rgb(211,146,34)"/><text x="61.2028%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (15 samples, 0.02%)</title><rect x="60.9703%" y="133" width="0.0239%" height="15" fill="rgb(228,22,38)"/><text x="61.2203%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.05%)</title><rect x="61.1708%" y="85" width="0.0509%" height="15" fill="rgb(235,168,5)"/><text x="61.4208%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (182 samples, 0.29%)</title><rect x="61.0260%" y="133" width="0.2895%" height="15" fill="rgb(221,155,16)"/><text x="61.2760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (170 samples, 0.27%)</title><rect x="61.0451%" y="117" width="0.2704%" height="15" fill="rgb(215,215,53)"/><text x="61.2951%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (165 samples, 0.26%)</title><rect x="61.0531%" y="101" width="0.2625%" height="15" fill="rgb(223,4,10)"/><text x="61.3031%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (59 samples, 0.09%)</title><rect x="61.2217%" y="85" width="0.0939%" height="15" fill="rgb(234,103,6)"/><text x="61.4717%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="61.3044%" y="69" width="0.0111%" height="15" fill="rgb(227,97,0)"/><text x="61.5544%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="61.3155%" y="133" width="0.0111%" height="15" fill="rgb(234,150,53)"/><text x="61.5655%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (205 samples, 0.33%)</title><rect x="61.0021%" y="149" width="0.3261%" height="15" fill="rgb(228,201,54)"/><text x="61.2521%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (127 samples, 0.20%)</title><rect x="64.1088%" y="117" width="0.2020%" height="15" fill="rgb(222,22,37)"/><text x="64.3588%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (91 samples, 0.14%)</title><rect x="64.1661%" y="101" width="0.1448%" height="15" fill="rgb(237,53,32)"/><text x="64.4161%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,770 samples, 2.82%)</title><rect x="61.5128%" y="133" width="2.8156%" height="15" fill="rgb(233,25,53)"/><text x="61.7628%" y="143.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (11 samples, 0.02%)</title><rect x="64.3108%" y="117" width="0.0175%" height="15" fill="rgb(210,40,34)"/><text x="64.5608%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (11 samples, 0.02%)</title><rect x="64.3283%" y="133" width="0.0175%" height="15" fill="rgb(241,220,44)"/><text x="64.5783%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (111 samples, 0.18%)</title><rect x="64.3458%" y="133" width="0.1766%" height="15" fill="rgb(235,28,35)"/><text x="64.5958%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (90 samples, 0.14%)</title><rect x="64.3792%" y="117" width="0.1432%" height="15" fill="rgb(210,56,17)"/><text x="64.6292%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,119 samples, 3.37%)</title><rect x="61.3282%" y="149" width="3.3707%" height="15" fill="rgb(224,130,29)"/><text x="61.5782%" y="159.50">asy..</text></g><g><title>async-redis`bytes::bytes::shared_drop (106 samples, 0.17%)</title><rect x="64.5303%" y="133" width="0.1686%" height="15" fill="rgb(235,212,8)"/><text x="64.7803%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (29 samples, 0.05%)</title><rect x="64.7801%" y="133" width="0.0461%" height="15" fill="rgb(223,33,50)"/><text x="65.0301%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (12 samples, 0.02%)</title><rect x="64.8071%" y="117" width="0.0191%" height="15" fill="rgb(219,149,13)"/><text x="65.0571%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (86 samples, 0.14%)</title><rect x="64.6990%" y="149" width="0.1368%" height="15" fill="rgb(250,156,29)"/><text x="64.9490%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (19 samples, 0.03%)</title><rect x="64.8358%" y="149" width="0.0302%" height="15" fill="rgb(216,193,19)"/><text x="65.0858%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.02%)</title><rect x="65.1428%" y="53" width="0.0223%" height="15" fill="rgb(216,135,14)"/><text x="65.3928%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (179 samples, 0.28%)</title><rect x="64.9694%" y="85" width="0.2847%" height="15" fill="rgb(241,47,5)"/><text x="65.2194%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (172 samples, 0.27%)</title><rect x="64.9805%" y="69" width="0.2736%" height="15" fill="rgb(233,42,35)"/><text x="65.2305%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.08%)</title><rect x="65.1698%" y="53" width="0.0843%" height="15" fill="rgb(231,13,6)"/><text x="65.4198%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.04%)</title><rect x="65.2112%" y="37" width="0.0429%" height="15" fill="rgb(207,181,40)"/><text x="65.4612%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (194 samples, 0.31%)</title><rect x="64.9471%" y="101" width="0.3086%" height="15" fill="rgb(254,173,49)"/><text x="65.1971%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (239 samples, 0.38%)</title><rect x="64.8914%" y="117" width="0.3802%" height="15" fill="rgb(221,1,38)"/><text x="65.1414%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.02%)</title><rect x="65.2557%" y="101" width="0.0159%" height="15" fill="rgb(206,124,46)"/><text x="65.5057%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (253 samples, 0.40%)</title><rect x="64.8803%" y="133" width="0.4024%" height="15" fill="rgb(249,21,11)"/><text x="65.1303%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (278 samples, 0.44%)</title><rect x="64.8660%" y="149" width="0.4422%" height="15" fill="rgb(222,201,40)"/><text x="65.1160%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (16 samples, 0.03%)</title><rect x="65.2827%" y="133" width="0.0255%" height="15" fill="rgb(235,61,29)"/><text x="65.5327%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (9 samples, 0.01%)</title><rect x="65.3082%" y="149" width="0.0143%" height="15" fill="rgb(219,207,3)"/><text x="65.5582%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (56 samples, 0.09%)</title><rect x="65.3225%" y="149" width="0.0891%" height="15" fill="rgb(222,56,46)"/><text x="65.5725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (33 samples, 0.05%)</title><rect x="65.4545%" y="133" width="0.0525%" height="15" fill="rgb(239,76,54)"/><text x="65.7045%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.04%)</title><rect x="65.4641%" y="117" width="0.0429%" height="15" fill="rgb(231,124,27)"/><text x="65.7141%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 0.10%)</title><rect x="65.4164%" y="149" width="0.0970%" height="15" fill="rgb(249,195,6)"/><text x="65.6664%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.05%)</title><rect x="65.5134%" y="149" width="0.0509%" height="15" fill="rgb(237,174,47)"/><text x="65.7634%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="65.5532%" y="133" width="0.0111%" height="15" fill="rgb(206,201,31)"/><text x="65.8032%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (3,079 samples, 4.90%)</title><rect x="60.6776%" y="165" width="4.8978%" height="15" fill="rgb(231,57,52)"/><text x="60.9276%" y="175.50">async-..</text></g><g><title>async-redis`async_redis::protocol::get_line (13 samples, 0.02%)</title><rect x="65.5754%" y="165" width="0.0207%" height="15" fill="rgb(248,177,22)"/><text x="65.8254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="65.6868%" y="133" width="0.0334%" height="15" fill="rgb(215,211,37)"/><text x="65.9368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.03%)</title><rect x="65.6868%" y="117" width="0.0334%" height="15" fill="rgb(241,128,51)"/><text x="65.9368%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.08%)</title><rect x="65.6438%" y="149" width="0.0779%" height="15" fill="rgb(227,165,31)"/><text x="65.8938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.05%)</title><rect x="65.8697%" y="117" width="0.0509%" height="15" fill="rgb(228,167,24)"/><text x="66.1197%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (134 samples, 0.21%)</title><rect x="65.7234%" y="149" width="0.2132%" height="15" fill="rgb(228,143,12)"/><text x="65.9734%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.14%)</title><rect x="65.7997%" y="133" width="0.1368%" height="15" fill="rgb(249,149,8)"/><text x="66.0497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="65.9206%" y="117" width="0.0159%" height="15" fill="rgb(243,35,44)"/><text x="66.1706%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="65.9365%" y="149" width="0.0127%" height="15" fill="rgb(246,89,9)"/><text x="66.1865%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (216 samples, 0.34%)</title><rect x="65.6073%" y="165" width="0.3436%" height="15" fill="rgb(233,213,13)"/><text x="65.8573%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (7 samples, 0.01%)</title><rect x="65.9508%" y="165" width="0.0111%" height="15" fill="rgb(233,141,41)"/><text x="66.2008%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (73 samples, 0.12%)</title><rect x="65.9620%" y="165" width="0.1161%" height="15" fill="rgb(239,167,4)"/><text x="66.2120%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (62 samples, 0.10%)</title><rect x="65.9795%" y="149" width="0.0986%" height="15" fill="rgb(209,217,16)"/><text x="66.2295%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (9 samples, 0.01%)</title><rect x="66.0781%" y="165" width="0.0143%" height="15" fill="rgb(219,88,35)"/><text x="66.3281%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (13 samples, 0.02%)</title><rect x="66.0924%" y="165" width="0.0207%" height="15" fill="rgb(220,193,23)"/><text x="66.3424%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (9 samples, 0.01%)</title><rect x="66.1131%" y="165" width="0.0143%" height="15" fill="rgb(230,90,52)"/><text x="66.3631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (143 samples, 0.23%)</title><rect x="66.2865%" y="133" width="0.2275%" height="15" fill="rgb(252,106,19)"/><text x="66.5365%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (55 samples, 0.09%)</title><rect x="66.4265%" y="117" width="0.0875%" height="15" fill="rgb(206,74,20)"/><text x="66.6765%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.03%)</title><rect x="66.6555%" y="117" width="0.0302%" height="15" fill="rgb(230,138,44)"/><text x="66.9055%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (62 samples, 0.10%)</title><rect x="66.6873%" y="117" width="0.0986%" height="15" fill="rgb(235,182,43)"/><text x="66.9373%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.02%)</title><rect x="66.7621%" y="101" width="0.0239%" height="15" fill="rgb(242,16,51)"/><text x="67.0121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (333 samples, 0.53%)</title><rect x="66.2579%" y="149" width="0.5297%" height="15" fill="rgb(248,9,4)"/><text x="66.5079%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (171 samples, 0.27%)</title><rect x="66.5155%" y="133" width="0.2720%" height="15" fill="rgb(210,31,22)"/><text x="66.7655%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (419 samples, 0.67%)</title><rect x="66.1274%" y="165" width="0.6665%" height="15" fill="rgb(239,54,39)"/><text x="66.3774%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="66.7939%" y="165" width="0.0111%" height="15" fill="rgb(230,99,41)"/><text x="67.0439%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="66.8051%" y="165" width="0.0334%" height="15" fill="rgb(253,106,12)"/><text x="67.0551%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="66.8814%" y="149" width="0.0223%" height="15" fill="rgb(213,46,41)"/><text x="67.1314%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.02%)</title><rect x="66.8814%" y="133" width="0.0223%" height="15" fill="rgb(215,133,35)"/><text x="67.1314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.07%)</title><rect x="66.8385%" y="165" width="0.0668%" height="15" fill="rgb(213,28,5)"/><text x="67.0885%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="67.0532%" y="133" width="0.0334%" height="15" fill="rgb(215,77,49)"/><text x="67.3032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.12%)</title><rect x="66.9816%" y="149" width="0.1209%" height="15" fill="rgb(248,100,22)"/><text x="67.2316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="67.0866%" y="133" width="0.0159%" height="15" fill="rgb(208,67,9)"/><text x="67.3366%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (125 samples, 0.20%)</title><rect x="66.9053%" y="165" width="0.1988%" height="15" fill="rgb(219,133,21)"/><text x="67.1553%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,567 samples, 2.49%)</title><rect x="67.1137%" y="165" width="2.4926%" height="15" fill="rgb(246,46,29)"/><text x="67.3637%" y="175.50">li..</text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24,426 samples, 38.85%)</title><rect x="30.7532%" y="181" width="38.8547%" height="15" fill="rgb(246,185,52)"/><text x="31.0032%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (9 samples, 0.01%)</title><rect x="69.6079%" y="181" width="0.0143%" height="15" fill="rgb(252,136,11)"/><text x="69.8579%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (14 samples, 0.02%)</title><rect x="69.7415%" y="149" width="0.0223%" height="15" fill="rgb(219,138,53)"/><text x="69.9915%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (27 samples, 0.04%)</title><rect x="69.7638%" y="149" width="0.0429%" height="15" fill="rgb(211,51,23)"/><text x="70.0138%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (70 samples, 0.11%)</title><rect x="69.8067%" y="149" width="0.1113%" height="15" fill="rgb(247,221,28)"/><text x="70.0567%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (25 samples, 0.04%)</title><rect x="69.9181%" y="149" width="0.0398%" height="15" fill="rgb(251,222,45)"/><text x="70.1681%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (26 samples, 0.04%)</title><rect x="69.9578%" y="149" width="0.0414%" height="15" fill="rgb(217,162,53)"/><text x="70.2078%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (27 samples, 0.04%)</title><rect x="70.0135%" y="133" width="0.0429%" height="15" fill="rgb(229,93,14)"/><text x="70.2635%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="70.0771%" y="117" width="0.0175%" height="15" fill="rgb(209,67,49)"/><text x="70.3271%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (180 samples, 0.29%)</title><rect x="70.0946%" y="117" width="0.2863%" height="15" fill="rgb(213,87,29)"/><text x="70.3446%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (139 samples, 0.22%)</title><rect x="70.1599%" y="101" width="0.2211%" height="15" fill="rgb(205,151,52)"/><text x="70.4099%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (10 samples, 0.02%)</title><rect x="70.3810%" y="117" width="0.0159%" height="15" fill="rgb(253,215,39)"/><text x="70.6310%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (27 samples, 0.04%)</title><rect x="70.4032%" y="117" width="0.0429%" height="15" fill="rgb(221,220,41)"/><text x="70.6532%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (261 samples, 0.42%)</title><rect x="70.0565%" y="133" width="0.4152%" height="15" fill="rgb(218,133,21)"/><text x="70.3065%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.03%)</title><rect x="70.4462%" y="117" width="0.0255%" height="15" fill="rgb(221,193,43)"/><text x="70.6962%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (20 samples, 0.03%)</title><rect x="70.4748%" y="133" width="0.0318%" height="15" fill="rgb(240,128,52)"/><text x="70.7248%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (14 samples, 0.02%)</title><rect x="70.5066%" y="133" width="0.0223%" height="15" fill="rgb(253,114,12)"/><text x="70.7566%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (45 samples, 0.07%)</title><rect x="70.5289%" y="133" width="0.0716%" height="15" fill="rgb(215,223,47)"/><text x="70.7789%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (17 samples, 0.03%)</title><rect x="70.5735%" y="117" width="0.0270%" height="15" fill="rgb(248,225,23)"/><text x="70.8235%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (9 samples, 0.01%)</title><rect x="70.6005%" y="133" width="0.0143%" height="15" fill="rgb(250,108,0)"/><text x="70.8505%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (395 samples, 0.63%)</title><rect x="70.0040%" y="149" width="0.6283%" height="15" fill="rgb(228,208,7)"/><text x="70.2540%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="70.6148%" y="133" width="0.0175%" height="15" fill="rgb(244,45,10)"/><text x="70.8648%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (45 samples, 0.07%)</title><rect x="70.6323%" y="149" width="0.0716%" height="15" fill="rgb(207,125,25)"/><text x="70.8823%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (675 samples, 1.07%)</title><rect x="69.6477%" y="165" width="1.0737%" height="15" fill="rgb(210,195,18)"/><text x="69.8977%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="70.7039%" y="149" width="0.0175%" height="15" fill="rgb(249,80,12)"/><text x="70.9539%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (10 samples, 0.02%)</title><rect x="70.7277%" y="165" width="0.0159%" height="15" fill="rgb(221,65,9)"/><text x="70.9777%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (18 samples, 0.03%)</title><rect x="70.7437%" y="165" width="0.0286%" height="15" fill="rgb(235,49,36)"/><text x="70.9937%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (718 samples, 1.14%)</title><rect x="69.6365%" y="181" width="1.1421%" height="15" fill="rgb(225,32,20)"/><text x="69.8865%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (10 samples, 0.02%)</title><rect x="70.7787%" y="181" width="0.0159%" height="15" fill="rgb(215,141,46)"/><text x="71.0287%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (26 samples, 0.04%)</title><rect x="70.8009%" y="181" width="0.0414%" height="15" fill="rgb(250,160,47)"/><text x="71.0509%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (17 samples, 0.03%)</title><rect x="70.8582%" y="165" width="0.0270%" height="15" fill="rgb(216,222,40)"/><text x="71.1082%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="70.8852%" y="165" width="0.0223%" height="15" fill="rgb(234,217,39)"/><text x="71.1352%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (32 samples, 0.05%)</title><rect x="70.9075%" y="165" width="0.0509%" height="15" fill="rgb(207,178,40)"/><text x="71.1575%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (16 samples, 0.03%)</title><rect x="70.9330%" y="149" width="0.0255%" height="15" fill="rgb(221,136,13)"/><text x="71.1830%" y="159.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (16 samples, 0.03%)</title><rect x="70.9632%" y="165" width="0.0255%" height="15" fill="rgb(249,199,10)"/><text x="71.2132%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (19 samples, 0.03%)</title><rect x="71.0252%" y="149" width="0.0302%" height="15" fill="rgb(249,222,13)"/><text x="71.2752%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (7 samples, 0.01%)</title><rect x="71.0586%" y="117" width="0.0111%" height="15" fill="rgb(244,185,38)"/><text x="71.3086%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="71.1079%" y="101" width="0.0207%" height="15" fill="rgb(236,202,9)"/><text x="71.3579%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (38 samples, 0.06%)</title><rect x="71.0729%" y="117" width="0.0604%" height="15" fill="rgb(250,229,37)"/><text x="71.3229%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (54 samples, 0.09%)</title><rect x="71.0570%" y="133" width="0.0859%" height="15" fill="rgb(206,174,23)"/><text x="71.3070%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (56 samples, 0.09%)</title><rect x="71.0554%" y="149" width="0.0891%" height="15" fill="rgb(211,33,43)"/><text x="71.3054%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (62 samples, 0.10%)</title><rect x="71.1986%" y="101" width="0.0986%" height="15" fill="rgb(245,58,50)"/><text x="71.4486%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (47 samples, 0.07%)</title><rect x="71.2225%" y="85" width="0.0748%" height="15" fill="rgb(244,68,36)"/><text x="71.4725%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (9 samples, 0.01%)</title><rect x="71.2988%" y="101" width="0.0143%" height="15" fill="rgb(232,229,15)"/><text x="71.5488%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (86 samples, 0.14%)</title><rect x="71.1859%" y="117" width="0.1368%" height="15" fill="rgb(254,30,23)"/><text x="71.4359%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (19 samples, 0.03%)</title><rect x="71.3243%" y="117" width="0.0302%" height="15" fill="rgb(235,160,14)"/><text x="71.5743%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (42 samples, 0.07%)</title><rect x="71.5358%" y="101" width="0.0668%" height="15" fill="rgb(212,155,44)"/><text x="71.7858%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.07%)</title><rect x="71.6138%" y="85" width="0.0716%" height="15" fill="rgb(226,2,50)"/><text x="71.8638%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (44 samples, 0.07%)</title><rect x="71.6154%" y="69" width="0.0700%" height="15" fill="rgb(234,177,6)"/><text x="71.8654%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.08%)</title><rect x="71.6058%" y="101" width="0.0843%" height="15" fill="rgb(217,24,9)"/><text x="71.8558%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.05%)</title><rect x="71.8381%" y="69" width="0.0461%" height="15" fill="rgb(220,13,46)"/><text x="72.0881%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (126 samples, 0.20%)</title><rect x="71.6901%" y="101" width="0.2004%" height="15" fill="rgb(239,221,27)"/><text x="71.9401%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (68 samples, 0.11%)</title><rect x="71.7824%" y="85" width="0.1082%" height="15" fill="rgb(222,198,25)"/><text x="72.0324%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="71.8953%" y="101" width="0.0207%" height="15" fill="rgb(211,99,13)"/><text x="72.1453%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (355 samples, 0.56%)</title><rect x="71.3545%" y="117" width="0.5647%" height="15" fill="rgb(232,111,31)"/><text x="71.6045%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (52 samples, 0.08%)</title><rect x="71.9287%" y="117" width="0.0827%" height="15" fill="rgb(245,82,37)"/><text x="72.1787%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (534 samples, 0.85%)</title><rect x="71.1716%" y="133" width="0.8494%" height="15" fill="rgb(227,149,46)"/><text x="71.4216%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (565 samples, 0.90%)</title><rect x="71.1445%" y="149" width="0.8988%" height="15" fill="rgb(218,36,50)"/><text x="71.3945%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (12 samples, 0.02%)</title><rect x="72.0242%" y="133" width="0.0191%" height="15" fill="rgb(226,80,48)"/><text x="72.2742%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (674 samples, 1.07%)</title><rect x="70.9886%" y="165" width="1.0721%" height="15" fill="rgb(238,224,15)"/><text x="71.2386%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="72.0449%" y="149" width="0.0159%" height="15" fill="rgb(241,136,10)"/><text x="72.2949%" y="159.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (9 samples, 0.01%)</title><rect x="72.0608%" y="165" width="0.0143%" height="15" fill="rgb(208,32,45)"/><text x="72.3108%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (11 samples, 0.02%)</title><rect x="72.0878%" y="165" width="0.0175%" height="15" fill="rgb(207,135,9)"/><text x="72.3378%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (801 samples, 1.27%)</title><rect x="70.8423%" y="181" width="1.2742%" height="15" fill="rgb(206,86,44)"/><text x="71.0923%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="72.1053%" y="165" width="0.0111%" height="15" fill="rgb(245,177,15)"/><text x="72.3553%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (8 samples, 0.01%)</title><rect x="72.1196%" y="181" width="0.0127%" height="15" fill="rgb(206,64,50)"/><text x="72.3696%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (12 samples, 0.02%)</title><rect x="72.1403%" y="181" width="0.0191%" height="15" fill="rgb(234,36,40)"/><text x="72.3903%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.04%)</title><rect x="72.1689%" y="181" width="0.0414%" height="15" fill="rgb(213,64,8)"/><text x="72.4189%" y="191.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (7 samples, 0.01%)</title><rect x="72.2151%" y="181" width="0.0111%" height="15" fill="rgb(210,75,36)"/><text x="72.4651%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (17 samples, 0.03%)</title><rect x="72.2262%" y="181" width="0.0270%" height="15" fill="rgb(229,88,21)"/><text x="72.4762%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (33 samples, 0.05%)</title><rect x="72.2532%" y="181" width="0.0525%" height="15" fill="rgb(252,204,47)"/><text x="72.5032%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (189 samples, 0.30%)</title><rect x="72.3439%" y="149" width="0.3006%" height="15" fill="rgb(208,77,27)"/><text x="72.5939%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (160 samples, 0.25%)</title><rect x="72.3900%" y="133" width="0.2545%" height="15" fill="rgb(221,76,26)"/><text x="72.6400%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.01%)</title><rect x="72.8068%" y="117" width="0.0143%" height="15" fill="rgb(225,139,18)"/><text x="73.0568%" y="127.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (87 samples, 0.14%)</title><rect x="72.6986%" y="133" width="0.1384%" height="15" fill="rgb(230,137,11)"/><text x="72.9486%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="72.8211%" y="117" width="0.0159%" height="15" fill="rgb(212,28,1)"/><text x="73.0711%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (122 samples, 0.19%)</title><rect x="72.6446%" y="149" width="0.1941%" height="15" fill="rgb(248,164,17)"/><text x="72.8946%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (317 samples, 0.50%)</title><rect x="72.3407%" y="165" width="0.5043%" height="15" fill="rgb(222,171,42)"/><text x="72.5907%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (10 samples, 0.02%)</title><rect x="72.8450%" y="165" width="0.0159%" height="15" fill="rgb(243,84,45)"/><text x="73.0950%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (344 samples, 0.55%)</title><rect x="72.3248%" y="181" width="0.5472%" height="15" fill="rgb(252,49,23)"/><text x="72.5748%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (12 samples, 0.02%)</title><rect x="72.8720%" y="165" width="0.0191%" height="15" fill="rgb(215,19,7)"/><text x="73.1220%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (11 samples, 0.02%)</title><rect x="72.8911%" y="165" width="0.0175%" height="15" fill="rgb(238,81,41)"/><text x="73.1411%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (9 samples, 0.01%)</title><rect x="72.9866%" y="149" width="0.0143%" height="15" fill="rgb(210,199,37)"/><text x="73.2366%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (10 samples, 0.02%)</title><rect x="73.1424%" y="117" width="0.0159%" height="15" fill="rgb(244,192,49)"/><text x="73.3924%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (14 samples, 0.02%)</title><rect x="73.1584%" y="101" width="0.0223%" height="15" fill="rgb(226,211,11)"/><text x="73.4084%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (15 samples, 0.02%)</title><rect x="73.1584%" y="117" width="0.0239%" height="15" fill="rgb(236,162,54)"/><text x="73.4084%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (13 samples, 0.02%)</title><rect x="73.2633%" y="101" width="0.0207%" height="15" fill="rgb(220,229,9)"/><text x="73.5133%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.04%)</title><rect x="73.4399%" y="53" width="0.0366%" height="15" fill="rgb(250,87,22)"/><text x="73.6899%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (187 samples, 0.30%)</title><rect x="73.2840%" y="101" width="0.2975%" height="15" fill="rgb(239,43,17)"/><text x="73.5340%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (155 samples, 0.25%)</title><rect x="73.3349%" y="85" width="0.2466%" height="15" fill="rgb(231,177,25)"/><text x="73.5849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (144 samples, 0.23%)</title><rect x="73.3524%" y="69" width="0.2291%" height="15" fill="rgb(219,179,1)"/><text x="73.6024%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (66 samples, 0.10%)</title><rect x="73.4765%" y="53" width="0.1050%" height="15" fill="rgb(238,219,53)"/><text x="73.7265%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.03%)</title><rect x="73.5560%" y="37" width="0.0255%" height="15" fill="rgb(232,167,36)"/><text x="73.8060%" y="47.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (226 samples, 0.36%)</title><rect x="73.2236%" y="117" width="0.3595%" height="15" fill="rgb(244,19,51)"/><text x="73.4736%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="73.5831%" y="117" width="0.0159%" height="15" fill="rgb(224,6,22)"/><text x="73.8331%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.02%)</title><rect x="73.5990%" y="117" width="0.0175%" height="15" fill="rgb(224,145,5)"/><text x="73.8490%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (490 samples, 0.78%)</title><rect x="73.0041%" y="133" width="0.7794%" height="15" fill="rgb(234,130,49)"/><text x="73.2541%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (105 samples, 0.17%)</title><rect x="73.6165%" y="117" width="0.1670%" height="15" fill="rgb(254,6,2)"/><text x="73.8665%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (15 samples, 0.02%)</title><rect x="73.7930%" y="133" width="0.0239%" height="15" fill="rgb(208,96,46)"/><text x="74.0430%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (33 samples, 0.05%)</title><rect x="73.9362%" y="117" width="0.0525%" height="15" fill="rgb(239,3,39)"/><text x="74.1862%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (15 samples, 0.02%)</title><rect x="73.9648%" y="101" width="0.0239%" height="15" fill="rgb(233,210,1)"/><text x="74.2148%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (63 samples, 0.10%)</title><rect x="74.0507%" y="101" width="0.1002%" height="15" fill="rgb(244,137,37)"/><text x="74.3007%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (65 samples, 0.10%)</title><rect x="74.1510%" y="101" width="0.1034%" height="15" fill="rgb(240,136,2)"/><text x="74.4010%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (187 samples, 0.30%)</title><rect x="73.9887%" y="117" width="0.2975%" height="15" fill="rgb(239,18,37)"/><text x="74.2387%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="74.2639%" y="101" width="0.0223%" height="15" fill="rgb(218,185,22)"/><text x="74.5139%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (98 samples, 0.16%)</title><rect x="74.2862%" y="117" width="0.1559%" height="15" fill="rgb(225,218,4)"/><text x="74.5362%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (14 samples, 0.02%)</title><rect x="74.4516%" y="117" width="0.0223%" height="15" fill="rgb(230,182,32)"/><text x="74.7016%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (422 samples, 0.67%)</title><rect x="73.8169%" y="133" width="0.6713%" height="15" fill="rgb(242,56,43)"/><text x="74.0669%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="74.4771%" y="117" width="0.0111%" height="15" fill="rgb(233,99,24)"/><text x="74.7271%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (10 samples, 0.02%)</title><rect x="74.5232%" y="133" width="0.0159%" height="15" fill="rgb(234,209,42)"/><text x="74.7732%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (11 samples, 0.02%)</title><rect x="74.5391%" y="133" width="0.0175%" height="15" fill="rgb(227,7,12)"/><text x="74.7891%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1,007 samples, 1.60%)</title><rect x="73.0009%" y="149" width="1.6018%" height="15" fill="rgb(245,203,43)"/><text x="73.2509%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (29 samples, 0.05%)</title><rect x="74.5566%" y="133" width="0.0461%" height="15" fill="rgb(238,205,33)"/><text x="74.8066%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (11 samples, 0.02%)</title><rect x="74.6027%" y="149" width="0.0175%" height="15" fill="rgb(231,56,7)"/><text x="74.8527%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (11 samples, 0.02%)</title><rect x="74.6202%" y="149" width="0.0175%" height="15" fill="rgb(244,186,29)"/><text x="74.8702%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (16 samples, 0.03%)</title><rect x="74.6377%" y="149" width="0.0255%" height="15" fill="rgb(234,111,31)"/><text x="74.8877%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,112 samples, 1.77%)</title><rect x="72.9166%" y="165" width="1.7689%" height="15" fill="rgb(241,149,10)"/><text x="73.1666%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="74.6632%" y="149" width="0.0223%" height="15" fill="rgb(249,206,44)"/><text x="74.9132%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,146 samples, 1.82%)</title><rect x="72.8720%" y="181" width="1.8230%" height="15" fill="rgb(251,153,30)"/><text x="73.1220%" y="191.50">a..</text></g><g><title>async-redis`tracing_core::dispatcher::get_default (13 samples, 0.02%)</title><rect x="74.6950%" y="181" width="0.0207%" height="15" fill="rgb(239,152,38)"/><text x="74.9450%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="74.7316%" y="181" width="0.0366%" height="15" fill="rgb(249,139,47)"/><text x="74.9816%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (26 samples, 0.04%)</title><rect x="74.7729%" y="181" width="0.0414%" height="15" fill="rgb(244,64,35)"/><text x="75.0229%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27,898 samples, 44.38%)</title><rect x="30.4987%" y="197" width="44.3776%" height="15" fill="rgb(216,46,15)"/><text x="30.7487%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.06%)</title><rect x="74.8159%" y="181" width="0.0604%" height="15" fill="rgb(250,74,19)"/><text x="75.0659%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="74.8763%" y="197" width="0.0159%" height="15" fill="rgb(249,42,33)"/><text x="75.1263%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (16 samples, 0.03%)</title><rect x="74.8922%" y="197" width="0.0255%" height="15" fill="rgb(242,149,17)"/><text x="75.1422%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (7 samples, 0.01%)</title><rect x="74.9177%" y="197" width="0.0111%" height="15" fill="rgb(244,29,21)"/><text x="75.1677%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (22 samples, 0.03%)</title><rect x="74.9288%" y="197" width="0.0350%" height="15" fill="rgb(220,130,37)"/><text x="75.1788%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (37 samples, 0.06%)</title><rect x="74.9638%" y="197" width="0.0589%" height="15" fill="rgb(211,67,2)"/><text x="75.2138%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (14 samples, 0.02%)</title><rect x="75.0338%" y="197" width="0.0223%" height="15" fill="rgb(235,68,52)"/><text x="75.2838%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (28,171 samples, 44.81%)</title><rect x="30.2983%" y="213" width="44.8119%" height="15" fill="rgb(246,142,3)"/><text x="30.5483%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::F..</text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.05%)</title><rect x="75.0561%" y="197" width="0.0541%" height="15" fill="rgb(241,25,7)"/><text x="75.3061%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (57 samples, 0.09%)</title><rect x="75.1102%" y="213" width="0.0907%" height="15" fill="rgb(242,119,39)"/><text x="75.3602%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (42 samples, 0.07%)</title><rect x="75.1340%" y="197" width="0.0668%" height="15" fill="rgb(241,98,45)"/><text x="75.3840%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (11 samples, 0.02%)</title><rect x="75.2183%" y="213" width="0.0175%" height="15" fill="rgb(254,28,30)"/><text x="75.4683%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (84 samples, 0.13%)</title><rect x="75.2358%" y="213" width="0.1336%" height="15" fill="rgb(241,142,54)"/><text x="75.4858%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="75.3488%" y="197" width="0.0207%" height="15" fill="rgb(222,85,15)"/><text x="75.5988%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (7 samples, 0.01%)</title><rect x="75.3774%" y="213" width="0.0111%" height="15" fill="rgb(210,85,47)"/><text x="75.6274%" y="223.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.01%)</title><rect x="75.4013%" y="213" width="0.0111%" height="15" fill="rgb(224,206,25)"/><text x="75.6513%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (19 samples, 0.03%)</title><rect x="75.4124%" y="213" width="0.0302%" height="15" fill="rgb(243,201,19)"/><text x="75.6624%" y="223.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (134 samples, 0.21%)</title><rect x="75.5556%" y="181" width="0.2132%" height="15" fill="rgb(236,59,4)"/><text x="75.8056%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (65 samples, 0.10%)</title><rect x="75.7687%" y="181" width="0.1034%" height="15" fill="rgb(254,179,45)"/><text x="76.0187%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (57 samples, 0.09%)</title><rect x="75.7814%" y="165" width="0.0907%" height="15" fill="rgb(226,14,10)"/><text x="76.0314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 0.09%)</title><rect x="75.7830%" y="149" width="0.0891%" height="15" fill="rgb(244,27,41)"/><text x="76.0330%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 0.04%)</title><rect x="75.8339%" y="133" width="0.0382%" height="15" fill="rgb(235,35,32)"/><text x="76.0839%" y="143.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (214 samples, 0.34%)</title><rect x="75.5349%" y="197" width="0.3404%" height="15" fill="rgb(218,68,31)"/><text x="75.7849%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (23 samples, 0.04%)</title><rect x="75.9119%" y="181" width="0.0366%" height="15" fill="rgb(207,120,37)"/><text x="76.1619%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (102 samples, 0.16%)</title><rect x="75.9803%" y="149" width="0.1623%" height="15" fill="rgb(227,98,0)"/><text x="76.2303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (50 samples, 0.08%)</title><rect x="76.0630%" y="133" width="0.0795%" height="15" fill="rgb(207,7,3)"/><text x="76.3130%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (123 samples, 0.20%)</title><rect x="75.9485%" y="181" width="0.1957%" height="15" fill="rgb(206,98,19)"/><text x="76.1985%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (110 samples, 0.17%)</title><rect x="75.9691%" y="165" width="0.1750%" height="15" fill="rgb(217,5,26)"/><text x="76.2191%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (181 samples, 0.29%)</title><rect x="75.8753%" y="197" width="0.2879%" height="15" fill="rgb(235,190,38)"/><text x="76.1253%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="76.1473%" y="181" width="0.0159%" height="15" fill="rgb(247,86,24)"/><text x="76.3973%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (19 samples, 0.03%)</title><rect x="76.2077%" y="181" width="0.0302%" height="15" fill="rgb(205,101,16)"/><text x="76.4577%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (10 samples, 0.02%)</title><rect x="76.2221%" y="165" width="0.0159%" height="15" fill="rgb(246,168,33)"/><text x="76.4721%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (66 samples, 0.10%)</title><rect x="76.1632%" y="197" width="0.1050%" height="15" fill="rgb(231,114,1)"/><text x="76.4132%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (19 samples, 0.03%)</title><rect x="76.2380%" y="181" width="0.0302%" height="15" fill="rgb(207,184,53)"/><text x="76.4880%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (14 samples, 0.02%)</title><rect x="76.2682%" y="197" width="0.0223%" height="15" fill="rgb(224,95,51)"/><text x="76.5182%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (16 samples, 0.03%)</title><rect x="76.2905%" y="197" width="0.0255%" height="15" fill="rgb(212,188,45)"/><text x="76.5405%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (7 samples, 0.01%)</title><rect x="76.3159%" y="197" width="0.0111%" height="15" fill="rgb(223,154,38)"/><text x="76.5659%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.04%)</title><rect x="76.3668%" y="181" width="0.0414%" height="15" fill="rgb(251,22,52)"/><text x="76.6168%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.04%)</title><rect x="76.3700%" y="165" width="0.0382%" height="15" fill="rgb(229,209,22)"/><text x="76.6200%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.07%)</title><rect x="76.3366%" y="197" width="0.0732%" height="15" fill="rgb(234,138,34)"/><text x="76.5866%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (94 samples, 0.15%)</title><rect x="76.4098%" y="197" width="0.1495%" height="15" fill="rgb(212,95,11)"/><text x="76.6598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (62 samples, 0.10%)</title><rect x="76.4607%" y="181" width="0.0986%" height="15" fill="rgb(240,179,47)"/><text x="76.7107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (37 samples, 0.06%)</title><rect x="76.5004%" y="165" width="0.0589%" height="15" fill="rgb(240,163,11)"/><text x="76.7504%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (712 samples, 1.13%)</title><rect x="75.4426%" y="213" width="1.1326%" height="15" fill="rgb(236,37,12)"/><text x="75.6926%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (14 samples, 0.02%)</title><rect x="76.5847%" y="213" width="0.0223%" height="15" fill="rgb(232,164,16)"/><text x="76.8347%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode (20 samples, 0.03%)</title><rect x="76.6070%" y="213" width="0.0318%" height="15" fill="rgb(244,205,15)"/><text x="76.8570%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.05%)</title><rect x="76.6547%" y="197" width="0.0525%" height="15" fill="rgb(223,117,47)"/><text x="76.9047%" y="207.50"></text></g><g><title>async-redis`async_redis::server::Dispatcher::determine_database (58 samples, 0.09%)</title><rect x="76.6388%" y="213" width="0.0923%" height="15" fill="rgb(244,107,35)"/><text x="76.8888%" y="223.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (15 samples, 0.02%)</title><rect x="76.7072%" y="197" width="0.0239%" height="15" fill="rgb(205,140,8)"/><text x="76.9572%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (8 samples, 0.01%)</title><rect x="76.7311%" y="213" width="0.0127%" height="15" fill="rgb(228,84,46)"/><text x="76.9811%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (11 samples, 0.02%)</title><rect x="76.8583%" y="197" width="0.0175%" height="15" fill="rgb(254,188,9)"/><text x="77.1083%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (8 samples, 0.01%)</title><rect x="76.8965%" y="181" width="0.0127%" height="15" fill="rgb(206,112,54)"/><text x="77.1465%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (21 samples, 0.03%)</title><rect x="76.8774%" y="197" width="0.0334%" height="15" fill="rgb(216,84,49)"/><text x="77.1274%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (13 samples, 0.02%)</title><rect x="76.9220%" y="197" width="0.0207%" height="15" fill="rgb(214,194,35)"/><text x="77.1720%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (13 samples, 0.02%)</title><rect x="76.9220%" y="181" width="0.0207%" height="15" fill="rgb(249,28,3)"/><text x="77.1720%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (144 samples, 0.23%)</title><rect x="76.7438%" y="213" width="0.2291%" height="15" fill="rgb(222,56,52)"/><text x="76.9938%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (19 samples, 0.03%)</title><rect x="76.9427%" y="197" width="0.0302%" height="15" fill="rgb(245,217,50)"/><text x="77.1927%" y="207.50"></text></g><g><title>async-redis`tokio::coop::Budget::decrement (14 samples, 0.02%)</title><rect x="77.0174%" y="197" width="0.0223%" height="15" fill="rgb(213,201,24)"/><text x="77.2674%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (8 samples, 0.01%)</title><rect x="77.0397%" y="197" width="0.0127%" height="15" fill="rgb(248,116,28)"/><text x="77.2897%" y="207.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (48 samples, 0.08%)</title><rect x="76.9824%" y="213" width="0.0764%" height="15" fill="rgb(219,72,43)"/><text x="77.2324%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (28 samples, 0.04%)</title><rect x="77.0620%" y="213" width="0.0445%" height="15" fill="rgb(209,138,14)"/><text x="77.3120%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (47 samples, 0.07%)</title><rect x="77.3467%" y="149" width="0.0748%" height="15" fill="rgb(222,18,33)"/><text x="77.5967%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (9 samples, 0.01%)</title><rect x="77.4215%" y="149" width="0.0143%" height="15" fill="rgb(213,199,7)"/><text x="77.6715%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,738 samples, 15.49%)</title><rect x="77.3069%" y="165" width="15.4903%" height="15" fill="rgb(250,110,10)"/><text x="77.5569%" y="175.50">async-redis`&lt;&amp;mio::net::..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,652 samples, 15.35%)</title><rect x="77.4437%" y="149" width="15.3535%" height="15" fill="rgb(248,123,6)"/><text x="77.6937%" y="159.50">libsystem_kernel.dylib`_..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (29 samples, 0.05%)</title><rect x="92.9023%" y="149" width="0.0461%" height="15" fill="rgb(206,91,31)"/><text x="93.1523%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (94 samples, 0.15%)</title><rect x="92.8036%" y="165" width="0.1495%" height="15" fill="rgb(211,154,13)"/><text x="93.0536%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,926 samples, 15.79%)</title><rect x="77.1829%" y="197" width="15.7894%" height="15" fill="rgb(225,148,7)"/><text x="77.4329%" y="207.50">async-redis`&lt;tokio::net:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,901 samples, 15.75%)</title><rect x="77.2226%" y="181" width="15.7496%" height="15" fill="rgb(220,160,43)"/><text x="77.4726%" y="191.50">async-redis`tokio::io::d..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (12 samples, 0.02%)</title><rect x="92.9532%" y="165" width="0.0191%" height="15" fill="rgb(213,52,39)"/><text x="93.2032%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,979 samples, 15.87%)</title><rect x="77.1113%" y="213" width="15.8737%" height="15" fill="rgb(243,137,7)"/><text x="77.3613%" y="223.50">async-redis`tokio::io::u..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (8 samples, 0.01%)</title><rect x="92.9722%" y="197" width="0.0127%" height="15" fill="rgb(230,79,13)"/><text x="93.2222%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (15 samples, 0.02%)</title><rect x="93.0295%" y="197" width="0.0239%" height="15" fill="rgb(247,105,23)"/><text x="93.2795%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (33 samples, 0.05%)</title><rect x="93.0693%" y="197" width="0.0525%" height="15" fill="rgb(223,179,41)"/><text x="93.3193%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (72 samples, 0.11%)</title><rect x="93.3508%" y="181" width="0.1145%" height="15" fill="rgb(218,9,34)"/><text x="93.6008%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (216 samples, 0.34%)</title><rect x="93.1265%" y="197" width="0.3436%" height="15" fill="rgb(222,106,8)"/><text x="93.3765%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (337 samples, 0.54%)</title><rect x="92.9850%" y="213" width="0.5361%" height="15" fill="rgb(211,220,0)"/><text x="93.2350%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (32 samples, 0.05%)</title><rect x="93.4701%" y="197" width="0.0509%" height="15" fill="rgb(229,52,16)"/><text x="93.7201%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (11 samples, 0.02%)</title><rect x="93.5035%" y="181" width="0.0175%" height="15" fill="rgb(212,155,18)"/><text x="93.7535%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (10 samples, 0.02%)</title><rect x="93.5051%" y="165" width="0.0159%" height="15" fill="rgb(242,21,14)"/><text x="93.7551%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (7 samples, 0.01%)</title><rect x="93.5274%" y="213" width="0.0111%" height="15" fill="rgb(222,19,48)"/><text x="93.7774%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (22 samples, 0.03%)</title><rect x="93.5449%" y="197" width="0.0350%" height="15" fill="rgb(232,45,27)"/><text x="93.7949%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (32 samples, 0.05%)</title><rect x="93.5799%" y="197" width="0.0509%" height="15" fill="rgb(249,103,42)"/><text x="93.8299%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (7 samples, 0.01%)</title><rect x="93.7135%" y="165" width="0.0111%" height="15" fill="rgb(246,81,33)"/><text x="93.9635%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (120 samples, 0.19%)</title><rect x="93.5385%" y="213" width="0.1909%" height="15" fill="rgb(252,33,42)"/><text x="93.7885%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (62 samples, 0.10%)</title><rect x="93.6308%" y="197" width="0.0986%" height="15" fill="rgb(209,212,41)"/><text x="93.8808%" y="207.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (53 samples, 0.08%)</title><rect x="93.6451%" y="181" width="0.0843%" height="15" fill="rgb(207,154,6)"/><text x="93.8951%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (18 samples, 0.03%)</title><rect x="93.7310%" y="213" width="0.0286%" height="15" fill="rgb(223,64,47)"/><text x="93.9810%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (37 samples, 0.06%)</title><rect x="93.8169%" y="197" width="0.0589%" height="15" fill="rgb(211,161,38)"/><text x="94.0669%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (74 samples, 0.12%)</title><rect x="93.7596%" y="213" width="0.1177%" height="15" fill="rgb(219,138,40)"/><text x="94.0096%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (17 samples, 0.03%)</title><rect x="93.8789%" y="213" width="0.0270%" height="15" fill="rgb(241,228,46)"/><text x="94.1289%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (46 samples, 0.07%)</title><rect x="93.9648%" y="197" width="0.0732%" height="15" fill="rgb(223,209,38)"/><text x="94.2148%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.07%)</title><rect x="93.9648%" y="181" width="0.0732%" height="15" fill="rgb(236,164,45)"/><text x="94.2148%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (74 samples, 0.12%)</title><rect x="93.9235%" y="213" width="0.1177%" height="15" fill="rgb(231,15,5)"/><text x="94.1735%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.06%)</title><rect x="94.1828%" y="181" width="0.0636%" height="15" fill="rgb(252,35,15)"/><text x="94.4328%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (132 samples, 0.21%)</title><rect x="94.0412%" y="213" width="0.2100%" height="15" fill="rgb(248,181,18)"/><text x="94.2912%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (84 samples, 0.13%)</title><rect x="94.1176%" y="197" width="0.1336%" height="15" fill="rgb(233,39,42)"/><text x="94.3676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.03%)</title><rect x="94.2512%" y="213" width="0.0350%" height="15" fill="rgb(238,110,33)"/><text x="94.5012%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.07%)</title><rect x="94.2862%" y="213" width="0.0652%" height="15" fill="rgb(233,195,10)"/><text x="94.5362%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (40,931 samples, 65.11%)</title><rect x="29.2436%" y="229" width="65.1094%" height="15" fill="rgb(254,105,3)"/><text x="29.4936%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (58 samples, 0.09%)</title><rect x="94.3530%" y="229" width="0.0923%" height="15" fill="rgb(221,225,9)"/><text x="94.6030%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (27 samples, 0.04%)</title><rect x="94.9845%" y="165" width="0.0429%" height="15" fill="rgb(224,227,45)"/><text x="95.2345%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (9 samples, 0.01%)</title><rect x="95.0131%" y="149" width="0.0143%" height="15" fill="rgb(229,198,43)"/><text x="95.2631%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="95.0338%" y="165" width="0.0127%" height="15" fill="rgb(206,209,35)"/><text x="95.2838%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (7 samples, 0.01%)</title><rect x="95.0354%" y="149" width="0.0111%" height="15" fill="rgb(245,195,53)"/><text x="95.2854%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (233 samples, 0.37%)</title><rect x="94.6838%" y="181" width="0.3706%" height="15" fill="rgb(240,92,26)"/><text x="94.9338%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (250 samples, 0.40%)</title><rect x="94.6600%" y="197" width="0.3977%" height="15" fill="rgb(207,40,23)"/><text x="94.9100%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (285 samples, 0.45%)</title><rect x="94.6123%" y="213" width="0.4534%" height="15" fill="rgb(223,111,35)"/><text x="94.8623%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.02%)</title><rect x="95.1197%" y="181" width="0.0191%" height="15" fill="rgb(229,147,28)"/><text x="95.3697%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (12 samples, 0.02%)</title><rect x="95.1197%" y="165" width="0.0191%" height="15" fill="rgb(211,29,28)"/><text x="95.3697%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (18 samples, 0.03%)</title><rect x="95.1531%" y="165" width="0.0286%" height="15" fill="rgb(228,72,33)"/><text x="95.4031%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (31 samples, 0.05%)</title><rect x="95.1817%" y="165" width="0.0493%" height="15" fill="rgb(205,214,31)"/><text x="95.4317%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (12 samples, 0.02%)</title><rect x="95.3058%" y="149" width="0.0191%" height="15" fill="rgb(224,111,15)"/><text x="95.5558%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (83 samples, 0.13%)</title><rect x="95.2311%" y="165" width="0.1320%" height="15" fill="rgb(253,21,26)"/><text x="95.4811%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (24 samples, 0.04%)</title><rect x="95.3249%" y="149" width="0.0382%" height="15" fill="rgb(245,139,43)"/><text x="95.5749%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (176 samples, 0.28%)</title><rect x="95.0879%" y="197" width="0.2800%" height="15" fill="rgb(252,170,7)"/><text x="95.3379%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (140 samples, 0.22%)</title><rect x="95.1452%" y="181" width="0.2227%" height="15" fill="rgb(231,118,14)"/><text x="95.3952%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (7 samples, 0.01%)</title><rect x="95.3679%" y="197" width="0.0111%" height="15" fill="rgb(238,83,0)"/><text x="95.6179%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (197 samples, 0.31%)</title><rect x="95.0752%" y="213" width="0.3134%" height="15" fill="rgb(221,39,39)"/><text x="95.3252%" y="223.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (11 samples, 0.02%)</title><rect x="95.3981%" y="213" width="0.0175%" height="15" fill="rgb(222,119,46)"/><text x="95.6481%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="95.4617%" y="197" width="0.0111%" height="15" fill="rgb(222,165,49)"/><text x="95.7117%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (8 samples, 0.01%)</title><rect x="95.4808%" y="197" width="0.0127%" height="15" fill="rgb(219,113,52)"/><text x="95.7308%" y="207.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (13 samples, 0.02%)</title><rect x="95.4935%" y="197" width="0.0207%" height="15" fill="rgb(214,7,15)"/><text x="95.7435%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (13 samples, 0.02%)</title><rect x="95.6192%" y="181" width="0.0207%" height="15" fill="rgb(235,32,4)"/><text x="95.8692%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (58 samples, 0.09%)</title><rect x="95.6526%" y="181" width="0.0923%" height="15" fill="rgb(238,90,54)"/><text x="95.9026%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (76 samples, 0.12%)</title><rect x="95.8912%" y="165" width="0.1209%" height="15" fill="rgb(213,208,19)"/><text x="96.1412%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (163 samples, 0.26%)</title><rect x="95.7560%" y="181" width="0.2593%" height="15" fill="rgb(233,156,4)"/><text x="96.0060%" y="191.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (41 samples, 0.07%)</title><rect x="96.0153%" y="181" width="0.0652%" height="15" fill="rgb(207,194,5)"/><text x="96.2653%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="96.0598%" y="165" width="0.0207%" height="15" fill="rgb(206,111,30)"/><text x="96.3098%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (11 samples, 0.02%)</title><rect x="96.0630%" y="149" width="0.0175%" height="15" fill="rgb(243,70,54)"/><text x="96.3130%" y="159.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (358 samples, 0.57%)</title><rect x="95.5142%" y="197" width="0.5695%" height="15" fill="rgb(242,28,8)"/><text x="95.7642%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (438 samples, 0.70%)</title><rect x="95.4156%" y="213" width="0.6967%" height="15" fill="rgb(219,106,18)"/><text x="95.6656%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="96.0916%" y="197" width="0.0207%" height="15" fill="rgb(244,222,10)"/><text x="96.3416%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (9 samples, 0.01%)</title><rect x="96.1123%" y="213" width="0.0143%" height="15" fill="rgb(236,179,52)"/><text x="96.3623%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (17 samples, 0.03%)</title><rect x="96.1266%" y="213" width="0.0270%" height="15" fill="rgb(213,23,39)"/><text x="96.3766%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,077 samples, 1.71%)</title><rect x="94.4500%" y="229" width="1.7132%" height="15" fill="rgb(238,48,10)"/><text x="94.7000%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (11 samples, 0.02%)</title><rect x="96.1632%" y="229" width="0.0175%" height="15" fill="rgb(251,196,23)"/><text x="96.4132%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (50 samples, 0.08%)</title><rect x="96.1887%" y="229" width="0.0795%" height="15" fill="rgb(250,152,24)"/><text x="96.4387%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (26 samples, 0.04%)</title><rect x="96.2857%" y="229" width="0.0414%" height="15" fill="rgb(209,150,17)"/><text x="96.5357%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (60 samples, 0.10%)</title><rect x="96.3907%" y="197" width="0.0954%" height="15" fill="rgb(234,202,34)"/><text x="96.6407%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.01%)</title><rect x="96.4861%" y="197" width="0.0143%" height="15" fill="rgb(253,148,53)"/><text x="96.7361%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="96.5402%" y="165" width="0.0127%" height="15" fill="rgb(218,129,16)"/><text x="96.7902%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (82 samples, 0.13%)</title><rect x="96.6086%" y="149" width="0.1304%" height="15" fill="rgb(216,85,19)"/><text x="96.8586%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (119 samples, 0.19%)</title><rect x="96.5529%" y="165" width="0.1893%" height="15" fill="rgb(235,228,7)"/><text x="96.8029%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (9 samples, 0.01%)</title><rect x="96.7502%" y="165" width="0.0143%" height="15" fill="rgb(245,175,0)"/><text x="97.0002%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (160 samples, 0.25%)</title><rect x="96.5227%" y="181" width="0.2545%" height="15" fill="rgb(208,168,36)"/><text x="96.7727%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="96.7645%" y="165" width="0.0127%" height="15" fill="rgb(246,171,24)"/><text x="97.0145%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (15 samples, 0.02%)</title><rect x="96.7852%" y="181" width="0.0239%" height="15" fill="rgb(215,142,24)"/><text x="97.0352%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (206 samples, 0.33%)</title><rect x="96.5036%" y="197" width="0.3277%" height="15" fill="rgb(250,187,7)"/><text x="96.7536%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="96.8138%" y="181" width="0.0175%" height="15" fill="rgb(228,66,33)"/><text x="97.0638%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (323 samples, 0.51%)</title><rect x="96.3334%" y="213" width="0.5138%" height="15" fill="rgb(234,215,21)"/><text x="96.5834%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="96.8313%" y="197" width="0.0159%" height="15" fill="rgb(222,191,20)"/><text x="97.0813%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (335 samples, 0.53%)</title><rect x="96.3271%" y="229" width="0.5329%" height="15" fill="rgb(245,79,54)"/><text x="96.5771%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (12 samples, 0.02%)</title><rect x="96.8663%" y="229" width="0.0191%" height="15" fill="rgb(240,10,37)"/><text x="97.1163%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (11 samples, 0.02%)</title><rect x="96.8965%" y="229" width="0.0175%" height="15" fill="rgb(214,192,32)"/><text x="97.1465%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (18 samples, 0.03%)</title><rect x="96.9204%" y="229" width="0.0286%" height="15" fill="rgb(209,36,54)"/><text x="97.1704%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode (12 samples, 0.02%)</title><rect x="96.9490%" y="229" width="0.0191%" height="15" fill="rgb(220,10,11)"/><text x="97.1990%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (8 samples, 0.01%)</title><rect x="96.9681%" y="229" width="0.0127%" height="15" fill="rgb(221,106,17)"/><text x="97.2181%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (23 samples, 0.04%)</title><rect x="96.9808%" y="229" width="0.0366%" height="15" fill="rgb(251,142,44)"/><text x="97.2308%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (14 samples, 0.02%)</title><rect x="97.0174%" y="229" width="0.0223%" height="15" fill="rgb(238,13,15)"/><text x="97.2674%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.02%)</title><rect x="97.1590%" y="213" width="0.0223%" height="15" fill="rgb(208,107,27)"/><text x="97.4090%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (11 samples, 0.02%)</title><rect x="97.1829%" y="213" width="0.0175%" height="15" fill="rgb(205,136,37)"/><text x="97.4329%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="97.1860%" y="197" width="0.0143%" height="15" fill="rgb(250,205,27)"/><text x="97.4360%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (20 samples, 0.03%)</title><rect x="97.3244%" y="197" width="0.0318%" height="15" fill="rgb(210,80,43)"/><text x="97.5744%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (9 samples, 0.01%)</title><rect x="97.3419%" y="181" width="0.0143%" height="15" fill="rgb(247,160,36)"/><text x="97.5919%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (142 samples, 0.23%)</title><rect x="97.2003%" y="213" width="0.2259%" height="15" fill="rgb(234,13,49)"/><text x="97.4503%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (37 samples, 0.06%)</title><rect x="97.3674%" y="197" width="0.0589%" height="15" fill="rgb(234,122,0)"/><text x="97.6174%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (261 samples, 0.42%)</title><rect x="97.0397%" y="229" width="0.4152%" height="15" fill="rgb(207,146,38)"/><text x="97.2897%" y="239.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (16 samples, 0.03%)</title><rect x="97.4294%" y="213" width="0.0255%" height="15" fill="rgb(207,177,25)"/><text x="97.6794%" y="223.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.01%)</title><rect x="97.4549%" y="229" width="0.0127%" height="15" fill="rgb(211,178,42)"/><text x="97.7049%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.03%)</title><rect x="97.4676%" y="229" width="0.0286%" height="15" fill="rgb(230,69,54)"/><text x="97.7176%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (16 samples, 0.03%)</title><rect x="97.4962%" y="229" width="0.0255%" height="15" fill="rgb(214,135,41)"/><text x="97.7462%" y="239.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (7 samples, 0.01%)</title><rect x="97.5217%" y="229" width="0.0111%" height="15" fill="rgb(237,67,25)"/><text x="97.7717%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (17 samples, 0.03%)</title><rect x="97.5328%" y="229" width="0.0270%" height="15" fill="rgb(222,189,50)"/><text x="97.7828%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="97.5726%" y="213" width="0.0191%" height="15" fill="rgb(245,148,34)"/><text x="97.8226%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (13 samples, 0.02%)</title><rect x="97.5917%" y="213" width="0.0207%" height="15" fill="rgb(222,29,6)"/><text x="97.8417%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (8 samples, 0.01%)</title><rect x="97.6776%" y="165" width="0.0127%" height="15" fill="rgb(221,189,43)"/><text x="97.9276%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`kevent (7 samples, 0.01%)</title><rect x="97.6792%" y="149" width="0.0111%" height="15" fill="rgb(207,36,27)"/><text x="97.9292%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (14 samples, 0.02%)</title><rect x="97.6935%" y="149" width="0.0223%" height="15" fill="rgb(217,90,24)"/><text x="97.9435%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (54 samples, 0.09%)</title><rect x="97.6362%" y="181" width="0.0859%" height="15" fill="rgb(224,66,35)"/><text x="97.8862%" y="191.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (18 samples, 0.03%)</title><rect x="97.6935%" y="165" width="0.0286%" height="15" fill="rgb(221,13,50)"/><text x="97.9435%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (102 samples, 0.16%)</title><rect x="97.5646%" y="229" width="0.1623%" height="15" fill="rgb(236,68,49)"/><text x="97.8146%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (72 samples, 0.11%)</title><rect x="97.6123%" y="213" width="0.1145%" height="15" fill="rgb(229,146,28)"/><text x="97.8623%" y="223.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (66 samples, 0.10%)</title><rect x="97.6219%" y="197" width="0.1050%" height="15" fill="rgb(225,31,38)"/><text x="97.8719%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::acquire (9 samples, 0.01%)</title><rect x="97.7269%" y="229" width="0.0143%" height="15" fill="rgb(250,208,3)"/><text x="97.9769%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (7 samples, 0.01%)</title><rect x="97.7412%" y="229" width="0.0111%" height="15" fill="rgb(246,54,23)"/><text x="97.9912%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (40 samples, 0.06%)</title><rect x="97.8859%" y="197" width="0.0636%" height="15" fill="rgb(243,76,11)"/><text x="98.1359%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (55 samples, 0.09%)</title><rect x="97.8669%" y="213" width="0.0875%" height="15" fill="rgb(245,21,50)"/><text x="98.1169%" y="223.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (123 samples, 0.20%)</title><rect x="97.7603%" y="229" width="0.1957%" height="15" fill="rgb(228,9,43)"/><text x="98.0103%" y="239.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (27 samples, 0.04%)</title><rect x="97.9559%" y="229" width="0.0429%" height="15" fill="rgb(208,100,47)"/><text x="98.2059%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.05%)</title><rect x="98.0657%" y="213" width="0.0509%" height="15" fill="rgb(232,26,8)"/><text x="98.3157%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (8 samples, 0.01%)</title><rect x="98.1166%" y="213" width="0.0127%" height="15" fill="rgb(216,166,38)"/><text x="98.3666%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (90 samples, 0.14%)</title><rect x="98.0084%" y="229" width="0.1432%" height="15" fill="rgb(251,202,51)"/><text x="98.2584%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.02%)</title><rect x="98.1293%" y="213" width="0.0223%" height="15" fill="rgb(254,216,34)"/><text x="98.3793%" y="223.50"></text></g><g><title>async-redis`tokio::time::instant::Instant::now (7 samples, 0.01%)</title><rect x="98.1516%" y="229" width="0.0111%" height="15" fill="rgb(251,32,27)"/><text x="98.4016%" y="239.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (8 samples, 0.01%)</title><rect x="98.1675%" y="229" width="0.0127%" height="15" fill="rgb(208,127,28)"/><text x="98.4175%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (282 samples, 0.45%)</title><rect x="98.2407%" y="197" width="0.4486%" height="15" fill="rgb(224,137,22)"/><text x="98.4907%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (238 samples, 0.38%)</title><rect x="98.3107%" y="181" width="0.3786%" height="15" fill="rgb(254,70,32)"/><text x="98.5607%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (10 samples, 0.02%)</title><rect x="98.9247%" y="165" width="0.0159%" height="15" fill="rgb(229,75,37)"/><text x="99.1747%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (129 samples, 0.21%)</title><rect x="98.7688%" y="181" width="0.2052%" height="15" fill="rgb(252,64,23)"/><text x="99.0188%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.03%)</title><rect x="98.9406%" y="165" width="0.0334%" height="15" fill="rgb(232,162,48)"/><text x="99.1906%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (182 samples, 0.29%)</title><rect x="98.6893%" y="197" width="0.2895%" height="15" fill="rgb(246,160,12)"/><text x="98.9393%" y="207.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (15 samples, 0.02%)</title><rect x="98.9867%" y="197" width="0.0239%" height="15" fill="rgb(247,166,0)"/><text x="99.2367%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (501 samples, 0.80%)</title><rect x="98.2295%" y="213" width="0.7969%" height="15" fill="rgb(249,219,21)"/><text x="98.4795%" y="223.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (10 samples, 0.02%)</title><rect x="99.0106%" y="197" width="0.0159%" height="15" fill="rgb(205,209,3)"/><text x="99.2606%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (16 samples, 0.03%)</title><rect x="99.0265%" y="213" width="0.0255%" height="15" fill="rgb(243,44,1)"/><text x="99.2765%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (560 samples, 0.89%)</title><rect x="98.1802%" y="229" width="0.8908%" height="15" fill="rgb(206,159,16)"/><text x="98.4302%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (44 samples, 0.07%)</title><rect x="99.0901%" y="229" width="0.0700%" height="15" fill="rgb(244,77,30)"/><text x="99.3401%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="99.1617%" y="229" width="0.0191%" height="15" fill="rgb(218,69,12)"/><text x="99.4117%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45,532 samples, 72.43%)</title><rect x="26.7907%" y="245" width="72.4282%" height="15" fill="rgb(212,87,7)"/><text x="27.0407%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.03%)</title><rect x="99.1887%" y="229" width="0.0302%" height="15" fill="rgb(245,114,25)"/><text x="99.4387%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.02%)</title><rect x="99.2269%" y="245" width="0.0159%" height="15" fill="rgb(210,61,42)"/><text x="99.4769%" y="255.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (10 samples, 0.02%)</title><rect x="99.2460%" y="245" width="0.0159%" height="15" fill="rgb(211,52,33)"/><text x="99.4960%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.02%)</title><rect x="99.2730%" y="245" width="0.0159%" height="15" fill="rgb(234,58,33)"/><text x="99.5230%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (8 samples, 0.01%)</title><rect x="99.2953%" y="245" width="0.0127%" height="15" fill="rgb(220,115,36)"/><text x="99.5453%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (8 samples, 0.01%)</title><rect x="99.3208%" y="245" width="0.0127%" height="15" fill="rgb(243,153,54)"/><text x="99.5708%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (45,679 samples, 72.66%)</title><rect x="26.6762%" y="261" width="72.6621%" height="15" fill="rgb(251,47,18)"/><text x="26.9262%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (7 samples, 0.01%)</title><rect x="99.3414%" y="261" width="0.0111%" height="15" fill="rgb(242,102,42)"/><text x="99.5914%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (27 samples, 0.04%)</title><rect x="99.3542%" y="261" width="0.0429%" height="15" fill="rgb(234,31,38)"/><text x="99.6042%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (48 samples, 0.08%)</title><rect x="99.3971%" y="261" width="0.0764%" height="15" fill="rgb(221,117,51)"/><text x="99.6471%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (45,904 samples, 73.02%)</title><rect x="26.4599%" y="277" width="73.0200%" height="15" fill="rgb(212,20,18)"/><text x="26.7099%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (9 samples, 0.01%)</title><rect x="99.4798%" y="277" width="0.0143%" height="15" fill="rgb(245,133,36)"/><text x="99.7298%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (17 samples, 0.03%)</title><rect x="99.5005%" y="277" width="0.0270%" height="15" fill="rgb(212,6,19)"/><text x="99.7505%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (46,124 samples, 73.37%)</title><rect x="26.1799%" y="293" width="73.3699%" height="15" fill="rgb(218,1,36)"/><text x="26.4299%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="99.5276%" y="277" width="0.0223%" height="15" fill="rgb(246,84,54)"/><text x="99.7776%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (24 samples, 0.04%)</title><rect x="99.5498%" y="293" width="0.0382%" height="15" fill="rgb(242,110,6)"/><text x="99.7998%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (55 samples, 0.09%)</title><rect x="99.5880%" y="293" width="0.0875%" height="15" fill="rgb(214,47,5)"/><text x="99.8380%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (41 samples, 0.07%)</title><rect x="99.6755%" y="293" width="0.0652%" height="15" fill="rgb(218,159,25)"/><text x="99.9255%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (47,786 samples, 76.01%)</title><rect x="23.7604%" y="309" width="76.0137%" height="15" fill="rgb(215,211,28)"/><text x="24.0104%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (11 samples, 0.02%)</title><rect x="99.7566%" y="293" width="0.0175%" height="15" fill="rgb(238,59,32)"/><text x="100.0066%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (62,802 samples, 99.90%)</title><rect x="0.0811%" y="325" width="99.8998%" height="15" fill="rgb(226,82,3)"/><text x="0.3311%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (130 samples, 0.21%)</title><rect x="99.7741%" y="309" width="0.2068%" height="15" fill="rgb(240,164,32)"/><text x="100.0241%" y="319.50"></text></g><g><title>all (62,865 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(232,46,7)"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (62,832 samples, 99.95%)</title><rect x="0.0525%" y="485" width="99.9475%" height="15" fill="rgb(229,129,53)"/><text x="0.3025%" y="495.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (62,832 samples, 99.95%)</title><rect x="0.0525%" y="469" width="99.9475%" height="15" fill="rgb(234,188,29)"/><text x="0.3025%" y="479.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (62,832 samples, 99.95%)</title><rect x="0.0525%" y="453" width="99.9475%" height="15" fill="rgb(246,141,4)"/><text x="0.3025%" y="463.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (62,832 samples, 99.95%)</title><rect x="0.0525%" y="437" width="99.9475%" height="15" fill="rgb(229,23,39)"/><text x="0.3025%" y="447.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (62,832 samples, 99.95%)</title><rect x="0.0525%" y="421" width="99.9475%" height="15" fill="rgb(206,12,3)"/><text x="0.3025%" y="431.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (62,832 samples, 99.95%)</title><rect x="0.0525%" y="405" width="99.9475%" height="15" fill="rgb(252,226,20)"/><text x="0.3025%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (62,832 samples, 99.95%)</title><rect x="0.0525%" y="389" width="99.9475%" height="15" fill="rgb(216,123,35)"/><text x="0.3025%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (62,832 samples, 99.95%)</title><rect x="0.0525%" y="373" width="99.9475%" height="15" fill="rgb(212,68,40)"/><text x="0.3025%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (62,832 samples, 99.95%)</title><rect x="0.0525%" y="357" width="99.9475%" height="15" fill="rgb(254,125,32)"/><text x="0.3025%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (62,832 samples, 99.95%)</title><rect x="0.0525%" y="341" width="99.9475%" height="15" fill="rgb(253,97,22)"/><text x="0.3025%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g></svg></svg>