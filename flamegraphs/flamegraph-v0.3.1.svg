<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (11 samples, 0.02%)</title><rect x="0.0085%" y="245" width="0.0156%" height="15" fill="rgb(227,0,7)"/><text x="0.2585%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (18 samples, 0.03%)</title><rect x="0.0057%" y="293" width="0.0256%" height="15" fill="rgb(217,0,24)"/><text x="0.2557%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.03%)</title><rect x="0.0057%" y="277" width="0.0256%" height="15" fill="rgb(221,193,54)"/><text x="0.2557%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.03%)</title><rect x="0.0057%" y="261" width="0.0256%" height="15" fill="rgb(248,212,6)"/><text x="0.2557%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (23 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0327%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (23 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0327%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (23 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0327%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (19 samples, 0.03%)</title><rect x="0.0057%" y="341" width="0.0270%" height="15" fill="rgb(228,23,34)"/><text x="0.2557%" y="351.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.03%)</title><rect x="0.0057%" y="325" width="0.0270%" height="15" fill="rgb(218,30,26)"/><text x="0.2557%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.03%)</title><rect x="0.0057%" y="309" width="0.0270%" height="15" fill="rgb(220,122,19)"/><text x="0.2557%" y="319.50"></text></g><g><title>async-redis`0x1 (24 samples, 0.03%)</title><rect x="0.0000%" y="501" width="0.0341%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (24 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0341%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (24 samples, 0.03%)</title><rect x="0.0000%" y="469" width="0.0341%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (24 samples, 0.03%)</title><rect x="0.0000%" y="453" width="0.0341%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (24 samples, 0.03%)</title><rect x="0.0000%" y="437" width="0.0341%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.03%)</title><rect x="0.0000%" y="421" width="0.0341%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (24 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0341%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (18 samples, 0.03%)</title><rect x="0.0341%" y="325" width="0.0256%" height="15" fill="rgb(210,31,41)"/><text x="0.2841%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (11 samples, 0.02%)</title><rect x="0.0625%" y="325" width="0.0156%" height="15" fill="rgb(221,200,47)"/><text x="0.3125%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (27 samples, 0.04%)</title><rect x="0.9306%" y="309" width="0.0384%" height="15" fill="rgb(226,26,5)"/><text x="1.1806%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (9 samples, 0.01%)</title><rect x="0.9931%" y="293" width="0.0128%" height="15" fill="rgb(249,33,26)"/><text x="1.2431%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.02%)</title><rect x="0.9860%" y="309" width="0.0213%" height="15" fill="rgb(235,183,28)"/><text x="1.2360%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.04%)</title><rect x="1.0073%" y="309" width="0.0355%" height="15" fill="rgb(221,5,38)"/><text x="1.2573%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (19 samples, 0.03%)</title><rect x="1.0429%" y="309" width="0.0270%" height="15" fill="rgb(247,18,42)"/><text x="1.2929%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (268 samples, 0.38%)</title><rect x="1.0699%" y="309" width="0.3808%" height="15" fill="rgb(241,131,45)"/><text x="1.3199%" y="319.50"></text></g><g><title>async-redis`DYLD-STUB$$mach_absolute_time (10 samples, 0.01%)</title><rect x="4.2596%" y="277" width="0.0142%" height="15" fill="rgb(249,31,29)"/><text x="4.5096%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (19 samples, 0.03%)</title><rect x="4.2752%" y="277" width="0.0270%" height="15" fill="rgb(225,111,53)"/><text x="4.5252%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (10 samples, 0.01%)</title><rect x="4.5679%" y="261" width="0.0142%" height="15" fill="rgb(238,160,17)"/><text x="4.8179%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.03%)</title><rect x="4.5821%" y="261" width="0.0327%" height="15" fill="rgb(214,148,48)"/><text x="4.8321%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,807 samples, 3.99%)</title><rect x="4.6148%" y="261" width="3.9882%" height="15" fill="rgb(232,36,49)"/><text x="4.8648%" y="271.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (24 samples, 0.03%)</title><rect x="8.8729%" y="245" width="0.0341%" height="15" fill="rgb(209,103,24)"/><text x="9.1229%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (90 samples, 0.13%)</title><rect x="8.9098%" y="229" width="0.1279%" height="15" fill="rgb(229,88,8)"/><text x="9.1598%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (96 samples, 0.14%)</title><rect x="8.9070%" y="245" width="0.1364%" height="15" fill="rgb(213,181,19)"/><text x="9.1570%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (83 samples, 0.12%)</title><rect x="9.0434%" y="245" width="0.1179%" height="15" fill="rgb(254,191,54)"/><text x="9.2934%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (436 samples, 0.62%)</title><rect x="8.6058%" y="261" width="0.6195%" height="15" fill="rgb(241,83,37)"/><text x="8.8558%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (45 samples, 0.06%)</title><rect x="9.1613%" y="245" width="0.0639%" height="15" fill="rgb(233,36,39)"/><text x="9.4113%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (16 samples, 0.02%)</title><rect x="9.2295%" y="261" width="0.0227%" height="15" fill="rgb(226,3,54)"/><text x="9.4795%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (20 samples, 0.03%)</title><rect x="9.2522%" y="261" width="0.0284%" height="15" fill="rgb(245,192,40)"/><text x="9.5022%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (3,538 samples, 5.03%)</title><rect x="4.3022%" y="277" width="5.0268%" height="15" fill="rgb(238,167,29)"/><text x="4.5522%" y="287.50">async-..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (34 samples, 0.05%)</title><rect x="9.2807%" y="261" width="0.0483%" height="15" fill="rgb(232,182,51)"/><text x="9.5307%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (10 samples, 0.01%)</title><rect x="9.3290%" y="277" width="0.0142%" height="15" fill="rgb(231,60,39)"/><text x="9.5790%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (23 samples, 0.03%)</title><rect x="9.3503%" y="277" width="0.0327%" height="15" fill="rgb(208,69,12)"/><text x="9.6003%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (13 samples, 0.02%)</title><rect x="9.5605%" y="245" width="0.0185%" height="15" fill="rgb(235,93,37)"/><text x="9.8105%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_writable (10 samples, 0.01%)</title><rect x="9.5918%" y="245" width="0.0142%" height="15" fill="rgb(213,116,39)"/><text x="9.8418%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (19 samples, 0.03%)</title><rect x="9.6131%" y="245" width="0.0270%" height="15" fill="rgb(222,207,29)"/><text x="9.8631%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (9 samples, 0.01%)</title><rect x="9.6401%" y="245" width="0.0128%" height="15" fill="rgb(206,96,30)"/><text x="9.8901%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (10 samples, 0.01%)</title><rect x="9.6529%" y="245" width="0.0142%" height="15" fill="rgb(218,138,4)"/><text x="9.9029%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="10.1530%" y="229" width="0.0170%" height="15" fill="rgb(250,191,14)"/><text x="10.4030%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (8 samples, 0.01%)</title><rect x="10.1772%" y="229" width="0.0114%" height="15" fill="rgb(239,60,40)"/><text x="10.4272%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (10 samples, 0.01%)</title><rect x="10.1900%" y="229" width="0.0142%" height="15" fill="rgb(206,27,48)"/><text x="10.4400%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (8 samples, 0.01%)</title><rect x="10.2099%" y="229" width="0.0114%" height="15" fill="rgb(225,35,8)"/><text x="10.4599%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (41 samples, 0.06%)</title><rect x="10.2241%" y="229" width="0.0583%" height="15" fill="rgb(250,213,24)"/><text x="10.4741%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (18 samples, 0.03%)</title><rect x="10.4130%" y="213" width="0.0256%" height="15" fill="rgb(247,123,22)"/><text x="10.6630%" y="223.50"></text></g><g><title> 32]&gt;::default (18 samples, 0.03%)</title><rect x="10.4130%" y="197" width="0.0256%" height="15" fill="rgb(231,138,38)"/><text x="10.6630%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (75 samples, 0.11%)</title><rect x="10.4386%" y="213" width="0.1066%" height="15" fill="rgb(231,145,46)"/><text x="10.6886%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (9 samples, 0.01%)</title><rect x="10.5508%" y="213" width="0.0128%" height="15" fill="rgb(251,118,11)"/><text x="10.8008%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (26 samples, 0.04%)</title><rect x="10.5835%" y="197" width="0.0369%" height="15" fill="rgb(217,147,25)"/><text x="10.8335%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (79 samples, 0.11%)</title><rect x="10.6205%" y="197" width="0.1122%" height="15" fill="rgb(247,81,37)"/><text x="10.8705%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (20 samples, 0.03%)</title><rect x="10.7668%" y="165" width="0.0284%" height="15" fill="rgb(209,12,38)"/><text x="11.0168%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (17 samples, 0.02%)</title><rect x="10.7952%" y="165" width="0.0242%" height="15" fill="rgb(227,1,9)"/><text x="11.0452%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (76 samples, 0.11%)</title><rect x="10.7441%" y="181" width="0.1080%" height="15" fill="rgb(248,47,43)"/><text x="10.9941%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.03%)</title><rect x="10.8194%" y="165" width="0.0327%" height="15" fill="rgb(221,10,30)"/><text x="11.0694%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (209 samples, 0.30%)</title><rect x="10.5636%" y="213" width="0.2969%" height="15" fill="rgb(210,229,1)"/><text x="10.8136%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (90 samples, 0.13%)</title><rect x="10.7327%" y="197" width="0.1279%" height="15" fill="rgb(222,148,37)"/><text x="10.9827%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (410 samples, 0.58%)</title><rect x="10.2823%" y="229" width="0.5825%" height="15" fill="rgb(234,67,33)"/><text x="10.5323%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (12 samples, 0.02%)</title><rect x="10.8648%" y="229" width="0.0170%" height="15" fill="rgb(247,98,35)"/><text x="11.1148%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,997 samples, 5.68%)</title><rect x="9.6671%" y="245" width="5.6789%" height="15" fill="rgb(247,138,52)"/><text x="9.9171%" y="255.50">async-r..</text></g><g><title>libsystem_kernel.dylib`kevent (3,140 samples, 4.46%)</title><rect x="10.8847%" y="229" width="4.4613%" height="15" fill="rgb(213,79,30)"/><text x="11.1347%" y="239.50">libsy..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (14 samples, 0.02%)</title><rect x="15.3460%" y="245" width="0.0199%" height="15" fill="rgb(246,177,23)"/><text x="15.5960%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (27 samples, 0.04%)</title><rect x="15.4157%" y="213" width="0.0384%" height="15" fill="rgb(230,62,27)"/><text x="15.6657%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (66 samples, 0.09%)</title><rect x="15.4540%" y="213" width="0.0938%" height="15" fill="rgb(216,154,8)"/><text x="15.7040%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (115 samples, 0.16%)</title><rect x="15.4043%" y="229" width="0.1634%" height="15" fill="rgb(244,35,45)"/><text x="15.6543%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="15.5478%" y="213" width="0.0199%" height="15" fill="rgb(251,115,12)"/><text x="15.7978%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (141 samples, 0.20%)</title><rect x="15.3702%" y="245" width="0.2003%" height="15" fill="rgb(240,54,50)"/><text x="15.6202%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (26 samples, 0.04%)</title><rect x="15.5705%" y="245" width="0.0369%" height="15" fill="rgb(233,84,52)"/><text x="15.8205%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (4,282 samples, 6.08%)</title><rect x="9.5250%" y="261" width="6.0839%" height="15" fill="rgb(207,117,47)"/><text x="9.7750%" y="271.50">async-re..</text></g><g><title>async-redis`core::ptr::drop_in_place (9 samples, 0.01%)</title><rect x="15.6089%" y="261" width="0.0128%" height="15" fill="rgb(249,43,39)"/><text x="15.8589%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (101 samples, 0.14%)</title><rect x="15.6245%" y="261" width="0.1435%" height="15" fill="rgb(209,38,44)"/><text x="15.8745%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (15 samples, 0.02%)</title><rect x="15.7680%" y="261" width="0.0213%" height="15" fill="rgb(236,212,23)"/><text x="16.0180%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (29 samples, 0.04%)</title><rect x="15.7893%" y="261" width="0.0412%" height="15" fill="rgb(242,79,21)"/><text x="16.0393%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (22 samples, 0.03%)</title><rect x="15.8305%" y="261" width="0.0313%" height="15" fill="rgb(211,96,35)"/><text x="16.0805%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (104 samples, 0.15%)</title><rect x="15.9556%" y="245" width="0.1478%" height="15" fill="rgb(253,215,40)"/><text x="16.2056%" y="255.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.01%)</title><rect x="16.1033%" y="245" width="0.0114%" height="15" fill="rgb(211,81,21)"/><text x="16.3533%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (52 samples, 0.07%)</title><rect x="16.1147%" y="245" width="0.0739%" height="15" fill="rgb(208,190,38)"/><text x="16.3647%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (43 samples, 0.06%)</title><rect x="16.1275%" y="229" width="0.0611%" height="15" fill="rgb(235,213,38)"/><text x="16.3775%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (105 samples, 0.15%)</title><rect x="16.1886%" y="245" width="0.1492%" height="15" fill="rgb(237,122,38)"/><text x="16.4386%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (62 samples, 0.09%)</title><rect x="16.2497%" y="229" width="0.0881%" height="15" fill="rgb(244,218,35)"/><text x="16.4997%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (353 samples, 0.50%)</title><rect x="15.8618%" y="261" width="0.5015%" height="15" fill="rgb(240,68,47)"/><text x="16.1118%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (18 samples, 0.03%)</title><rect x="16.3378%" y="245" width="0.0256%" height="15" fill="rgb(210,16,53)"/><text x="16.5878%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (76 samples, 0.11%)</title><rect x="16.3633%" y="261" width="0.1080%" height="15" fill="rgb(235,124,12)"/><text x="16.6133%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (70 samples, 0.10%)</title><rect x="16.3719%" y="245" width="0.0995%" height="15" fill="rgb(224,169,11)"/><text x="16.6219%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (5,084 samples, 7.22%)</title><rect x="9.3829%" y="277" width="7.2233%" height="15" fill="rgb(250,166,2)"/><text x="9.6329%" y="287.50">async-redi..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (84 samples, 0.12%)</title><rect x="16.4869%" y="261" width="0.1193%" height="15" fill="rgb(242,216,29)"/><text x="16.7369%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (28 samples, 0.04%)</title><rect x="16.6105%" y="277" width="0.0398%" height="15" fill="rgb(230,116,27)"/><text x="16.8605%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,524 samples, 6.43%)</title><rect x="16.6503%" y="277" width="6.4277%" height="15" fill="rgb(228,99,48)"/><text x="16.9003%" y="287.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (29 samples, 0.04%)</title><rect x="23.0780%" y="277" width="0.0412%" height="15" fill="rgb(253,11,6)"/><text x="23.3280%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (173 samples, 0.25%)</title><rect x="23.1263%" y="277" width="0.2458%" height="15" fill="rgb(247,143,39)"/><text x="23.3763%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (14,022 samples, 19.92%)</title><rect x="3.5151%" y="293" width="19.9224%" height="15" fill="rgb(236,97,10)"/><text x="3.7651%" y="303.50">async-redis`&lt;tokio::runtime::pa..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (34 samples, 0.05%)</title><rect x="23.3892%" y="277" width="0.0483%" height="15" fill="rgb(233,208,19)"/><text x="23.6392%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (130 samples, 0.18%)</title><rect x="23.4531%" y="245" width="0.1847%" height="15" fill="rgb(216,164,2)"/><text x="23.7031%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (111 samples, 0.16%)</title><rect x="23.4801%" y="229" width="0.1577%" height="15" fill="rgb(220,129,5)"/><text x="23.7301%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (142 samples, 0.20%)</title><rect x="23.4488%" y="261" width="0.2018%" height="15" fill="rgb(242,17,10)"/><text x="23.6988%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (14 samples, 0.02%)</title><rect x="23.6534%" y="261" width="0.0199%" height="15" fill="rgb(242,107,0)"/><text x="23.9034%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (164 samples, 0.23%)</title><rect x="23.4446%" y="277" width="0.2330%" height="15" fill="rgb(251,28,31)"/><text x="23.6946%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (170 samples, 0.24%)</title><rect x="23.4375%" y="293" width="0.2415%" height="15" fill="rgb(233,223,10)"/><text x="23.6875%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (12 samples, 0.02%)</title><rect x="23.6790%" y="293" width="0.0170%" height="15" fill="rgb(215,21,27)"/><text x="23.9290%" y="303.50"></text></g><g><title>async-redis`DYLD-STUB$$sched_yield (8 samples, 0.01%)</title><rect x="23.6961%" y="293" width="0.0114%" height="15" fill="rgb(232,23,21)"/><text x="23.9461%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (134 samples, 0.19%)</title><rect x="23.7145%" y="277" width="0.1904%" height="15" fill="rgb(244,5,23)"/><text x="23.9645%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (159 samples, 0.23%)</title><rect x="23.7074%" y="293" width="0.2259%" height="15" fill="rgb(226,81,46)"/><text x="23.9574%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.01%)</title><rect x="23.9220%" y="277" width="0.0114%" height="15" fill="rgb(247,70,30)"/><text x="24.1720%" y="287.50"></text></g><g><title>async-redis`std::thread::yield_now (13 samples, 0.02%)</title><rect x="23.9404%" y="293" width="0.0185%" height="15" fill="rgb(212,68,19)"/><text x="24.1904%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (11 samples, 0.02%)</title><rect x="23.9589%" y="293" width="0.0156%" height="15" fill="rgb(240,187,13)"/><text x="24.2089%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (65 samples, 0.09%)</title><rect x="23.9745%" y="293" width="0.0924%" height="15" fill="rgb(223,113,26)"/><text x="24.2245%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (15,926 samples, 22.63%)</title><rect x="1.4506%" y="309" width="22.6276%" height="15" fill="rgb(206,192,2)"/><text x="1.7006%" y="319.50">async-redis`tokio::runtime::thread_p..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (58 samples, 0.08%)</title><rect x="24.2360%" y="293" width="0.0824%" height="15" fill="rgb(241,108,4)"/><text x="24.4860%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (50 samples, 0.07%)</title><rect x="24.2473%" y="277" width="0.0710%" height="15" fill="rgb(247,173,49)"/><text x="24.4973%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (50 samples, 0.07%)</title><rect x="24.3184%" y="293" width="0.0710%" height="15" fill="rgb(224,114,35)"/><text x="24.5684%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (69 samples, 0.10%)</title><rect x="24.4576%" y="277" width="0.0980%" height="15" fill="rgb(245,159,27)"/><text x="24.7076%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,276 samples, 1.81%)</title><rect x="24.5556%" y="277" width="1.8129%" height="15" fill="rgb(245,172,44)"/><text x="24.8056%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (13 samples, 0.02%)</title><rect x="26.3686%" y="277" width="0.0185%" height="15" fill="rgb(236,23,11)"/><text x="26.6186%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (13 samples, 0.02%)</title><rect x="26.3970%" y="277" width="0.0185%" height="15" fill="rgb(205,117,38)"/><text x="26.6470%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (62 samples, 0.09%)</title><rect x="26.4183%" y="277" width="0.0881%" height="15" fill="rgb(237,72,25)"/><text x="26.6683%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (62 samples, 0.09%)</title><rect x="26.4183%" y="261" width="0.0881%" height="15" fill="rgb(244,70,9)"/><text x="26.6683%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (43 samples, 0.06%)</title><rect x="26.5064%" y="277" width="0.0611%" height="15" fill="rgb(217,125,39)"/><text x="26.7564%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (19 samples, 0.03%)</title><rect x="26.5405%" y="261" width="0.0270%" height="15" fill="rgb(235,36,10)"/><text x="26.7905%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (28 samples, 0.04%)</title><rect x="26.5675%" y="277" width="0.0398%" height="15" fill="rgb(251,123,47)"/><text x="26.8175%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,561 samples, 2.22%)</title><rect x="24.3994%" y="293" width="2.2179%" height="15" fill="rgb(221,13,13)"/><text x="24.6494%" y="303.50">a..</text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (10 samples, 0.01%)</title><rect x="26.6215%" y="293" width="0.0142%" height="15" fill="rgb(238,131,9)"/><text x="26.8715%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (31 samples, 0.04%)</title><rect x="26.8303%" y="277" width="0.0440%" height="15" fill="rgb(211,50,8)"/><text x="27.0803%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (9 samples, 0.01%)</title><rect x="26.8744%" y="277" width="0.0128%" height="15" fill="rgb(245,182,24)"/><text x="27.1244%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.04%)</title><rect x="27.0662%" y="261" width="0.0384%" height="15" fill="rgb(242,14,37)"/><text x="27.3162%" y="271.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="28.3463%" y="229" width="0.0156%" height="15" fill="rgb(246,228,12)"/><text x="28.5963%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (27 samples, 0.04%)</title><rect x="28.3861%" y="213" width="0.0384%" height="15" fill="rgb(213,55,15)"/><text x="28.6361%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (43 samples, 0.06%)</title><rect x="28.6703%" y="197" width="0.0611%" height="15" fill="rgb(209,9,3)"/><text x="28.9203%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (20 samples, 0.03%)</title><rect x="28.7030%" y="181" width="0.0284%" height="15" fill="rgb(230,59,30)"/><text x="28.9530%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.04%)</title><rect x="28.7314%" y="197" width="0.0398%" height="15" fill="rgb(209,121,21)"/><text x="28.9814%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (314 samples, 0.45%)</title><rect x="29.1420%" y="165" width="0.4461%" height="15" fill="rgb(220,109,13)"/><text x="29.3920%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (274 samples, 0.39%)</title><rect x="29.1988%" y="149" width="0.3893%" height="15" fill="rgb(232,18,1)"/><text x="29.4488%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (11 samples, 0.02%)</title><rect x="29.5952%" y="165" width="0.0156%" height="15" fill="rgb(215,41,42)"/><text x="29.8452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.02%)</title><rect x="29.5952%" y="149" width="0.0156%" height="15" fill="rgb(224,123,36)"/><text x="29.8452%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.02%)</title><rect x="29.5952%" y="133" width="0.0156%" height="15" fill="rgb(240,125,3)"/><text x="29.8452%" y="143.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (590 samples, 0.84%)</title><rect x="28.7783%" y="181" width="0.8383%" height="15" fill="rgb(205,98,50)"/><text x="29.0283%" y="191.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (648 samples, 0.92%)</title><rect x="28.7726%" y="197" width="0.9207%" height="15" fill="rgb(205,185,37)"/><text x="29.0226%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.08%)</title><rect x="29.6165%" y="181" width="0.0767%" height="15" fill="rgb(238,207,15)"/><text x="29.8665%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (892 samples, 1.27%)</title><rect x="28.4316%" y="213" width="1.2674%" height="15" fill="rgb(213,199,42)"/><text x="28.6816%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (982 samples, 1.40%)</title><rect x="28.3620%" y="229" width="1.3952%" height="15" fill="rgb(235,201,11)"/><text x="28.6120%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (39 samples, 0.06%)</title><rect x="29.7018%" y="213" width="0.0554%" height="15" fill="rgb(207,46,11)"/><text x="29.9518%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.11%)</title><rect x="30.7489%" y="213" width="0.1080%" height="15" fill="rgb(241,35,35)"/><text x="30.9989%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (36 samples, 0.05%)</title><rect x="30.8057%" y="197" width="0.0511%" height="15" fill="rgb(243,32,47)"/><text x="31.0557%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.02%)</title><rect x="30.8739%" y="213" width="0.0213%" height="15" fill="rgb(247,202,23)"/><text x="31.1239%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="31.6753%" y="165" width="0.0199%" height="15" fill="rgb(219,102,11)"/><text x="31.9253%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (19 samples, 0.03%)</title><rect x="31.6952%" y="165" width="0.0270%" height="15" fill="rgb(243,110,44)"/><text x="31.9452%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (34 samples, 0.05%)</title><rect x="31.9992%" y="133" width="0.0483%" height="15" fill="rgb(222,74,54)"/><text x="32.2492%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (26 samples, 0.04%)</title><rect x="32.0475%" y="133" width="0.0369%" height="15" fill="rgb(216,99,12)"/><text x="32.2975%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (8 samples, 0.01%)</title><rect x="32.4510%" y="85" width="0.0114%" height="15" fill="rgb(226,22,26)"/><text x="32.7010%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (21 samples, 0.03%)</title><rect x="32.4723%" y="85" width="0.0298%" height="15" fill="rgb(217,163,10)"/><text x="32.7223%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (145 samples, 0.21%)</title><rect x="32.3359%" y="101" width="0.2060%" height="15" fill="rgb(213,25,53)"/><text x="32.5859%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (28 samples, 0.04%)</title><rect x="32.5022%" y="85" width="0.0398%" height="15" fill="rgb(252,105,26)"/><text x="32.7522%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (13 samples, 0.02%)</title><rect x="32.5419%" y="101" width="0.0185%" height="15" fill="rgb(220,39,43)"/><text x="32.7919%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (15 samples, 0.02%)</title><rect x="32.5618%" y="101" width="0.0213%" height="15" fill="rgb(229,68,48)"/><text x="32.8118%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (23 samples, 0.03%)</title><rect x="32.5832%" y="101" width="0.0327%" height="15" fill="rgb(252,8,32)"/><text x="32.8332%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (17 samples, 0.02%)</title><rect x="32.6158%" y="101" width="0.0242%" height="15" fill="rgb(223,20,43)"/><text x="32.8658%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17,504 samples, 24.87%)</title><rect x="32.6400%" y="101" width="24.8696%" height="15" fill="rgb(229,81,49)"/><text x="32.8900%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (17,782 samples, 25.26%)</title><rect x="32.2748%" y="117" width="25.2646%" height="15" fill="rgb(236,28,36)"/><text x="32.5248%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::Tcp..</text></g><g><title>libsystem_kernel.dylib`cerror (21 samples, 0.03%)</title><rect x="57.5096%" y="101" width="0.0298%" height="15" fill="rgb(249,185,26)"/><text x="57.7596%" y="111.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.02%)</title><rect x="57.5650%" y="117" width="0.0156%" height="15" fill="rgb(249,174,33)"/><text x="57.8150%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (35 samples, 0.05%)</title><rect x="57.8947%" y="101" width="0.0497%" height="15" fill="rgb(233,201,37)"/><text x="58.1447%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (90 samples, 0.13%)</title><rect x="57.9444%" y="101" width="0.1279%" height="15" fill="rgb(221,78,26)"/><text x="58.1944%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (10 samples, 0.01%)</title><rect x="58.0581%" y="85" width="0.0142%" height="15" fill="rgb(250,127,30)"/><text x="58.3081%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.01%)</title><rect x="58.0595%" y="69" width="0.0128%" height="15" fill="rgb(230,49,44)"/><text x="58.3095%" y="79.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (407 samples, 0.58%)</title><rect x="57.5807%" y="117" width="0.5783%" height="15" fill="rgb(229,67,23)"/><text x="57.8307%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (56 samples, 0.08%)</title><rect x="58.0794%" y="101" width="0.0796%" height="15" fill="rgb(249,83,47)"/><text x="58.3294%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (18,370 samples, 26.10%)</title><rect x="32.0845%" y="133" width="26.1001%" height="15" fill="rgb(215,43,3)"/><text x="32.3345%" y="143.50">async-redis`tokio::io::driver::registratio..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.03%)</title><rect x="58.1589%" y="117" width="0.0256%" height="15" fill="rgb(238,154,13)"/><text x="58.4089%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18,527 samples, 26.32%)</title><rect x="31.8870%" y="149" width="26.3231%" height="15" fill="rgb(219,56,2)"/><text x="32.1370%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::TcpS..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (18 samples, 0.03%)</title><rect x="58.1845%" y="133" width="0.0256%" height="15" fill="rgb(233,0,4)"/><text x="58.4345%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="58.2285%" y="133" width="0.0128%" height="15" fill="rgb(235,30,7)"/><text x="58.4785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="58.2300%" y="117" width="0.0114%" height="15" fill="rgb(250,79,13)"/><text x="58.4800%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (78 samples, 0.11%)</title><rect x="58.2129%" y="149" width="0.1108%" height="15" fill="rgb(211,146,34)"/><text x="58.4629%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (58 samples, 0.08%)</title><rect x="58.2413%" y="133" width="0.0824%" height="15" fill="rgb(228,22,38)"/><text x="58.4913%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (19 samples, 0.03%)</title><rect x="58.3237%" y="149" width="0.0270%" height="15" fill="rgb(235,168,5)"/><text x="58.5737%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (18,748 samples, 26.64%)</title><rect x="31.7221%" y="165" width="26.6371%" height="15" fill="rgb(221,155,16)"/><text x="31.9721%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::Rea..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (26 samples, 0.04%)</title><rect x="58.3593%" y="165" width="0.0369%" height="15" fill="rgb(215,215,53)"/><text x="58.6093%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (12 samples, 0.02%)</title><rect x="58.8210%" y="117" width="0.0170%" height="15" fill="rgb(223,4,10)"/><text x="59.0710%" y="127.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (27 samples, 0.04%)</title><rect x="58.8011%" y="133" width="0.0384%" height="15" fill="rgb(234,103,6)"/><text x="59.0511%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.02%)</title><rect x="58.8423%" y="133" width="0.0170%" height="15" fill="rgb(227,97,0)"/><text x="59.0923%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (12 samples, 0.02%)</title><rect x="58.8423%" y="117" width="0.0170%" height="15" fill="rgb(234,150,53)"/><text x="59.0923%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (339 samples, 0.48%)</title><rect x="58.4090%" y="149" width="0.4817%" height="15" fill="rgb(228,201,54)"/><text x="58.6590%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (22 samples, 0.03%)</title><rect x="58.8594%" y="133" width="0.0313%" height="15" fill="rgb(222,22,37)"/><text x="59.1094%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (352 samples, 0.50%)</title><rect x="58.3962%" y="165" width="0.5001%" height="15" fill="rgb(237,53,32)"/><text x="58.6462%" y="175.50"></text></g><g><title>async-redis`DYLD-STUB$$free (25 samples, 0.04%)</title><rect x="58.8963%" y="165" width="0.0355%" height="15" fill="rgb(233,25,53)"/><text x="59.1463%" y="175.50"></text></g><g><title>async-redis`__rdl_dealloc (28 samples, 0.04%)</title><rect x="58.9318%" y="165" width="0.0398%" height="15" fill="rgb(210,40,34)"/><text x="59.1818%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.01%)</title><rect x="58.9716%" y="165" width="0.0114%" height="15" fill="rgb(241,220,44)"/><text x="59.2216%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.06%)</title><rect x="59.2018%" y="149" width="0.0625%" height="15" fill="rgb(235,28,35)"/><text x="59.4518%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (20 samples, 0.03%)</title><rect x="59.2359%" y="133" width="0.0284%" height="15" fill="rgb(210,56,17)"/><text x="59.4859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.03%)</title><rect x="59.4575%" y="85" width="0.0341%" height="15" fill="rgb(224,130,29)"/><text x="59.7075%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (54 samples, 0.08%)</title><rect x="59.4931%" y="85" width="0.0767%" height="15" fill="rgb(235,212,8)"/><text x="59.7431%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (169 samples, 0.24%)</title><rect x="59.3311%" y="101" width="0.2401%" height="15" fill="rgb(223,33,50)"/><text x="59.5811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (178 samples, 0.25%)</title><rect x="59.3197%" y="117" width="0.2529%" height="15" fill="rgb(219,149,13)"/><text x="59.5697%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (194 samples, 0.28%)</title><rect x="59.2984%" y="133" width="0.2756%" height="15" fill="rgb(250,156,29)"/><text x="59.5484%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (214 samples, 0.30%)</title><rect x="59.2728%" y="149" width="0.3041%" height="15" fill="rgb(216,193,19)"/><text x="59.5228%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (118 samples, 0.17%)</title><rect x="62.0405%" y="117" width="0.1677%" height="15" fill="rgb(216,135,14)"/><text x="62.2905%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (82 samples, 0.12%)</title><rect x="62.0917%" y="101" width="0.1165%" height="15" fill="rgb(241,47,5)"/><text x="62.3417%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,748 samples, 2.48%)</title><rect x="59.7360%" y="133" width="2.4836%" height="15" fill="rgb(233,42,35)"/><text x="59.9860%" y="143.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (8 samples, 0.01%)</title><rect x="62.2082%" y="117" width="0.0114%" height="15" fill="rgb(231,13,6)"/><text x="62.4582%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (13 samples, 0.02%)</title><rect x="62.2196%" y="133" width="0.0185%" height="15" fill="rgb(207,181,40)"/><text x="62.4696%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (89 samples, 0.13%)</title><rect x="62.2380%" y="133" width="0.1265%" height="15" fill="rgb(254,173,49)"/><text x="62.4880%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (72 samples, 0.10%)</title><rect x="62.2622%" y="117" width="0.1023%" height="15" fill="rgb(221,1,38)"/><text x="62.5122%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (10 samples, 0.01%)</title><rect x="62.3645%" y="133" width="0.0142%" height="15" fill="rgb(206,124,46)"/><text x="62.6145%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,073 samples, 2.95%)</title><rect x="59.5769%" y="149" width="2.9453%" height="15" fill="rgb(249,21,11)"/><text x="59.8269%" y="159.50">as..</text></g><g><title>async-redis`bytes::bytes::shared_drop (101 samples, 0.14%)</title><rect x="62.3787%" y="133" width="0.1435%" height="15" fill="rgb(222,201,40)"/><text x="62.6287%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (40 samples, 0.06%)</title><rect x="62.5719%" y="133" width="0.0568%" height="15" fill="rgb(235,61,29)"/><text x="62.8219%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (25 samples, 0.04%)</title><rect x="62.5932%" y="117" width="0.0355%" height="15" fill="rgb(219,207,3)"/><text x="62.8432%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (81 samples, 0.12%)</title><rect x="62.5222%" y="149" width="0.1151%" height="15" fill="rgb(222,56,46)"/><text x="62.7722%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (33 samples, 0.05%)</title><rect x="62.6373%" y="149" width="0.0469%" height="15" fill="rgb(239,76,54)"/><text x="62.8873%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="62.9470%" y="53" width="0.0170%" height="15" fill="rgb(231,124,27)"/><text x="63.1970%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (153 samples, 0.22%)</title><rect x="62.8291%" y="85" width="0.2174%" height="15" fill="rgb(249,195,6)"/><text x="63.0791%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (148 samples, 0.21%)</title><rect x="62.8362%" y="69" width="0.2103%" height="15" fill="rgb(237,174,47)"/><text x="63.0862%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (56 samples, 0.08%)</title><rect x="62.9669%" y="53" width="0.0796%" height="15" fill="rgb(206,201,31)"/><text x="63.2169%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.04%)</title><rect x="63.0110%" y="37" width="0.0355%" height="15" fill="rgb(231,57,52)"/><text x="63.2610%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (171 samples, 0.24%)</title><rect x="62.8049%" y="101" width="0.2430%" height="15" fill="rgb(248,177,22)"/><text x="63.0549%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="63.0479%" y="101" width="0.0114%" height="15" fill="rgb(215,211,37)"/><text x="63.2979%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (237 samples, 0.34%)</title><rect x="62.7268%" y="117" width="0.3367%" height="15" fill="rgb(241,128,51)"/><text x="62.9768%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (266 samples, 0.38%)</title><rect x="62.6998%" y="133" width="0.3779%" height="15" fill="rgb(227,165,31)"/><text x="62.9498%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (306 samples, 0.43%)</title><rect x="62.6842%" y="149" width="0.4348%" height="15" fill="rgb(228,167,24)"/><text x="62.9342%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (29 samples, 0.04%)</title><rect x="63.0777%" y="133" width="0.0412%" height="15" fill="rgb(228,143,12)"/><text x="63.3277%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (16 samples, 0.02%)</title><rect x="63.1189%" y="149" width="0.0227%" height="15" fill="rgb(249,149,8)"/><text x="63.3689%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (61 samples, 0.09%)</title><rect x="63.1417%" y="149" width="0.0867%" height="15" fill="rgb(243,35,44)"/><text x="63.3917%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.05%)</title><rect x="63.2525%" y="133" width="0.0455%" height="15" fill="rgb(246,89,9)"/><text x="63.5025%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.04%)</title><rect x="63.2553%" y="117" width="0.0426%" height="15" fill="rgb(233,213,13)"/><text x="63.5053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.08%)</title><rect x="63.2312%" y="149" width="0.0781%" height="15" fill="rgb(233,141,41)"/><text x="63.4812%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="63.2980%" y="133" width="0.0114%" height="15" fill="rgb(239,167,4)"/><text x="63.5480%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.04%)</title><rect x="63.3093%" y="149" width="0.0369%" height="15" fill="rgb(209,217,16)"/><text x="63.5593%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode (3,079 samples, 4.37%)</title><rect x="58.9830%" y="165" width="4.3746%" height="15" fill="rgb(219,88,35)"/><text x="59.2330%" y="175.50">async..</text></g><g><title>async-redis`async_redis::protocol::get_line (17 samples, 0.02%)</title><rect x="63.3576%" y="165" width="0.0242%" height="15" fill="rgb(220,193,23)"/><text x="63.6076%" y="175.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (18 samples, 0.03%)</title><rect x="63.3818%" y="165" width="0.0256%" height="15" fill="rgb(230,90,52)"/><text x="63.6318%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.04%)</title><rect x="63.5125%" y="133" width="0.0426%" height="15" fill="rgb(252,106,19)"/><text x="63.7625%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.04%)</title><rect x="63.5125%" y="117" width="0.0426%" height="15" fill="rgb(206,74,20)"/><text x="63.7625%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.10%)</title><rect x="63.4599%" y="149" width="0.0980%" height="15" fill="rgb(230,138,44)"/><text x="63.7099%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (56 samples, 0.08%)</title><rect x="63.7128%" y="117" width="0.0796%" height="15" fill="rgb(235,182,43)"/><text x="63.9628%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (182 samples, 0.26%)</title><rect x="63.5580%" y="149" width="0.2586%" height="15" fill="rgb(242,16,51)"/><text x="63.8080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (124 samples, 0.18%)</title><rect x="63.6404%" y="133" width="0.1762%" height="15" fill="rgb(248,9,4)"/><text x="63.8904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.02%)</title><rect x="63.7924%" y="117" width="0.0242%" height="15" fill="rgb(210,31,22)"/><text x="64.0424%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (286 samples, 0.41%)</title><rect x="63.4173%" y="165" width="0.4063%" height="15" fill="rgb(239,54,39)"/><text x="63.6673%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (10 samples, 0.01%)</title><rect x="63.8421%" y="165" width="0.0142%" height="15" fill="rgb(230,99,41)"/><text x="64.0921%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (161 samples, 0.23%)</title><rect x="64.0112%" y="133" width="0.2287%" height="15" fill="rgb(253,106,12)"/><text x="64.2612%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (57 samples, 0.08%)</title><rect x="64.1590%" y="117" width="0.0810%" height="15" fill="rgb(213,46,41)"/><text x="64.4090%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (25 samples, 0.04%)</title><rect x="64.3721%" y="117" width="0.0355%" height="15" fill="rgb(215,133,35)"/><text x="64.6221%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (385 samples, 0.55%)</title><rect x="63.9885%" y="149" width="0.5470%" height="15" fill="rgb(213,28,5)"/><text x="64.2385%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (208 samples, 0.30%)</title><rect x="64.2399%" y="133" width="0.2955%" height="15" fill="rgb(215,77,49)"/><text x="64.4899%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (89 samples, 0.13%)</title><rect x="64.4090%" y="117" width="0.1265%" height="15" fill="rgb(248,100,22)"/><text x="64.6590%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.04%)</title><rect x="64.5000%" y="101" width="0.0355%" height="15" fill="rgb(208,67,9)"/><text x="64.7500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (481 samples, 0.68%)</title><rect x="63.8634%" y="165" width="0.6834%" height="15" fill="rgb(219,133,21)"/><text x="64.1134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="64.5355%" y="149" width="0.0114%" height="15" fill="rgb(246,46,29)"/><text x="64.7855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.01%)</title><rect x="64.5468%" y="165" width="0.0142%" height="15" fill="rgb(246,185,52)"/><text x="64.7968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.04%)</title><rect x="64.5610%" y="165" width="0.0440%" height="15" fill="rgb(252,136,11)"/><text x="64.8110%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="64.6619%" y="149" width="0.0270%" height="15" fill="rgb(219,138,53)"/><text x="64.9119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.02%)</title><rect x="64.6648%" y="133" width="0.0242%" height="15" fill="rgb(211,51,23)"/><text x="64.9148%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (60 samples, 0.09%)</title><rect x="64.6051%" y="165" width="0.0852%" height="15" fill="rgb(247,221,28)"/><text x="64.8551%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="64.8225%" y="133" width="0.0185%" height="15" fill="rgb(251,222,45)"/><text x="65.0725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (118 samples, 0.17%)</title><rect x="64.6903%" y="165" width="0.1677%" height="15" fill="rgb(217,162,53)"/><text x="64.9403%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (80 samples, 0.11%)</title><rect x="64.7443%" y="149" width="0.1137%" height="15" fill="rgb(229,93,14)"/><text x="64.9943%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="64.8409%" y="133" width="0.0170%" height="15" fill="rgb(209,67,49)"/><text x="65.0909%" y="143.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25,257 samples, 35.89%)</title><rect x="31.3641%" y="181" width="35.8851%" height="15" fill="rgb(213,87,29)"/><text x="31.6141%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,672 samples, 2.38%)</title><rect x="64.8736%" y="165" width="2.3756%" height="15" fill="rgb(205,151,52)"/><text x="65.1236%" y="175.50">li..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (20 samples, 0.03%)</title><rect x="67.2492%" y="181" width="0.0284%" height="15" fill="rgb(253,215,39)"/><text x="67.4992%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.01%)</title><rect x="67.2776%" y="181" width="0.0128%" height="15" fill="rgb(221,220,41)"/><text x="67.5276%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (13 samples, 0.02%)</title><rect x="67.4154%" y="149" width="0.0185%" height="15" fill="rgb(218,133,21)"/><text x="67.6654%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (21 samples, 0.03%)</title><rect x="67.4339%" y="149" width="0.0298%" height="15" fill="rgb(221,193,43)"/><text x="67.6839%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (97 samples, 0.14%)</title><rect x="67.4637%" y="149" width="0.1378%" height="15" fill="rgb(240,128,52)"/><text x="67.7137%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (14 samples, 0.02%)</title><rect x="67.6016%" y="149" width="0.0199%" height="15" fill="rgb(253,114,12)"/><text x="67.8516%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (13 samples, 0.02%)</title><rect x="67.6214%" y="149" width="0.0185%" height="15" fill="rgb(215,223,47)"/><text x="67.8714%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (13 samples, 0.02%)</title><rect x="67.6655%" y="133" width="0.0185%" height="15" fill="rgb(248,225,23)"/><text x="67.9155%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="67.6967%" y="117" width="0.0142%" height="15" fill="rgb(250,108,0)"/><text x="67.9467%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (127 samples, 0.18%)</title><rect x="67.7806%" y="101" width="0.1804%" height="15" fill="rgb(228,208,7)"/><text x="68.0306%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (178 samples, 0.25%)</title><rect x="67.7110%" y="117" width="0.2529%" height="15" fill="rgb(244,45,10)"/><text x="67.9610%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (20 samples, 0.03%)</title><rect x="67.9639%" y="117" width="0.0284%" height="15" fill="rgb(207,125,25)"/><text x="68.2139%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (9 samples, 0.01%)</title><rect x="67.9923%" y="117" width="0.0128%" height="15" fill="rgb(210,195,18)"/><text x="68.2423%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (23 samples, 0.03%)</title><rect x="68.0051%" y="117" width="0.0327%" height="15" fill="rgb(249,80,12)"/><text x="68.2551%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (256 samples, 0.36%)</title><rect x="67.6854%" y="133" width="0.3637%" height="15" fill="rgb(221,65,9)"/><text x="67.9354%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="68.0377%" y="117" width="0.0114%" height="15" fill="rgb(235,49,36)"/><text x="68.2877%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (11 samples, 0.02%)</title><rect x="68.0562%" y="133" width="0.0156%" height="15" fill="rgb(225,32,20)"/><text x="68.3062%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (47 samples, 0.07%)</title><rect x="68.0718%" y="133" width="0.0668%" height="15" fill="rgb(215,141,46)"/><text x="68.3218%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (24 samples, 0.03%)</title><rect x="68.1045%" y="117" width="0.0341%" height="15" fill="rgb(250,160,47)"/><text x="68.3545%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (18 samples, 0.03%)</title><rect x="68.1386%" y="133" width="0.0256%" height="15" fill="rgb(216,222,40)"/><text x="68.3886%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (383 samples, 0.54%)</title><rect x="67.6413%" y="149" width="0.5442%" height="15" fill="rgb(234,217,39)"/><text x="67.8913%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.02%)</title><rect x="68.1642%" y="133" width="0.0213%" height="15" fill="rgb(207,178,40)"/><text x="68.4142%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (41 samples, 0.06%)</title><rect x="68.1855%" y="149" width="0.0583%" height="15" fill="rgb(221,136,13)"/><text x="68.4355%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (669 samples, 0.95%)</title><rect x="67.3060%" y="165" width="0.9505%" height="15" fill="rgb(249,199,10)"/><text x="67.5560%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.01%)</title><rect x="68.2438%" y="149" width="0.0128%" height="15" fill="rgb(249,222,13)"/><text x="68.4938%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (18 samples, 0.03%)</title><rect x="68.2636%" y="165" width="0.0256%" height="15" fill="rgb(244,185,38)"/><text x="68.5136%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (12 samples, 0.02%)</title><rect x="68.2892%" y="165" width="0.0170%" height="15" fill="rgb(236,202,9)"/><text x="68.5392%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (714 samples, 1.01%)</title><rect x="67.2975%" y="181" width="1.0144%" height="15" fill="rgb(250,229,37)"/><text x="67.5475%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (18 samples, 0.03%)</title><rect x="68.3120%" y="181" width="0.0256%" height="15" fill="rgb(206,174,23)"/><text x="68.5620%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (26 samples, 0.04%)</title><rect x="68.3404%" y="181" width="0.0369%" height="15" fill="rgb(211,33,43)"/><text x="68.5904%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (25 samples, 0.04%)</title><rect x="68.3986%" y="165" width="0.0355%" height="15" fill="rgb(245,58,50)"/><text x="68.6486%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="68.4341%" y="165" width="0.0128%" height="15" fill="rgb(244,68,36)"/><text x="68.6841%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (39 samples, 0.06%)</title><rect x="68.4469%" y="165" width="0.0554%" height="15" fill="rgb(232,229,15)"/><text x="68.6969%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (13 samples, 0.02%)</title><rect x="68.4839%" y="149" width="0.0185%" height="15" fill="rgb(254,30,23)"/><text x="68.7339%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (9 samples, 0.01%)</title><rect x="68.5691%" y="149" width="0.0128%" height="15" fill="rgb(235,160,14)"/><text x="68.8191%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (9 samples, 0.01%)</title><rect x="68.5876%" y="117" width="0.0128%" height="15" fill="rgb(212,155,44)"/><text x="68.8376%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.03%)</title><rect x="68.6316%" y="101" width="0.0284%" height="15" fill="rgb(226,2,50)"/><text x="68.8816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="68.6444%" y="85" width="0.0156%" height="15" fill="rgb(234,177,6)"/><text x="68.8944%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (45 samples, 0.06%)</title><rect x="68.6004%" y="117" width="0.0639%" height="15" fill="rgb(217,24,9)"/><text x="68.8504%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (69 samples, 0.10%)</title><rect x="68.5876%" y="133" width="0.0980%" height="15" fill="rgb(220,13,46)"/><text x="68.8376%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (14 samples, 0.02%)</title><rect x="68.6657%" y="117" width="0.0199%" height="15" fill="rgb(239,221,27)"/><text x="68.9157%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (74 samples, 0.11%)</title><rect x="68.5819%" y="149" width="0.1051%" height="15" fill="rgb(222,198,25)"/><text x="68.8319%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (59 samples, 0.08%)</title><rect x="68.8021%" y="85" width="0.0838%" height="15" fill="rgb(211,99,13)"/><text x="69.0521%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (77 samples, 0.11%)</title><rect x="68.7780%" y="101" width="0.1094%" height="15" fill="rgb(232,111,31)"/><text x="69.0280%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (10 samples, 0.01%)</title><rect x="68.8888%" y="101" width="0.0142%" height="15" fill="rgb(245,82,37)"/><text x="69.1388%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (103 samples, 0.15%)</title><rect x="68.7666%" y="117" width="0.1463%" height="15" fill="rgb(227,149,46)"/><text x="69.0166%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (15 samples, 0.02%)</title><rect x="68.9172%" y="117" width="0.0213%" height="15" fill="rgb(218,36,50)"/><text x="69.1672%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (52 samples, 0.07%)</title><rect x="69.1474%" y="101" width="0.0739%" height="15" fill="rgb(226,80,48)"/><text x="69.3974%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.07%)</title><rect x="69.2227%" y="101" width="0.0668%" height="15" fill="rgb(238,224,15)"/><text x="69.4727%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.06%)</title><rect x="69.2312%" y="85" width="0.0583%" height="15" fill="rgb(241,136,10)"/><text x="69.4812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 0.05%)</title><rect x="69.2355%" y="69" width="0.0540%" height="15" fill="rgb(208,32,45)"/><text x="69.4855%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.03%)</title><rect x="69.4159%" y="69" width="0.0284%" height="15" fill="rgb(207,135,9)"/><text x="69.6659%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (116 samples, 0.16%)</title><rect x="69.2895%" y="101" width="0.1648%" height="15" fill="rgb(206,86,44)"/><text x="69.5395%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (67 samples, 0.10%)</title><rect x="69.3591%" y="85" width="0.0952%" height="15" fill="rgb(245,177,15)"/><text x="69.6091%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="69.4557%" y="101" width="0.0185%" height="15" fill="rgb(206,64,50)"/><text x="69.7057%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (379 samples, 0.54%)</title><rect x="68.9385%" y="117" width="0.5385%" height="15" fill="rgb(234,36,40)"/><text x="69.1885%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (43 samples, 0.06%)</title><rect x="69.4784%" y="117" width="0.0611%" height="15" fill="rgb(213,64,8)"/><text x="69.7284%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (569 samples, 0.81%)</title><rect x="68.7496%" y="133" width="0.8084%" height="15" fill="rgb(210,75,36)"/><text x="68.9996%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (624 samples, 0.89%)</title><rect x="68.6870%" y="149" width="0.8866%" height="15" fill="rgb(229,88,21)"/><text x="68.9370%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (8 samples, 0.01%)</title><rect x="69.5623%" y="133" width="0.0114%" height="15" fill="rgb(252,204,47)"/><text x="69.8123%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (755 samples, 1.07%)</title><rect x="68.5109%" y="165" width="1.0727%" height="15" fill="rgb(208,77,27)"/><text x="68.7609%" y="175.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (12 samples, 0.02%)</title><rect x="69.5836%" y="165" width="0.0170%" height="15" fill="rgb(221,76,26)"/><text x="69.8336%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (11 samples, 0.02%)</title><rect x="69.6049%" y="165" width="0.0156%" height="15" fill="rgb(225,139,18)"/><text x="69.8549%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (881 samples, 1.25%)</title><rect x="68.3773%" y="181" width="1.2517%" height="15" fill="rgb(230,137,11)"/><text x="68.6273%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (26 samples, 0.04%)</title><rect x="69.6347%" y="181" width="0.0369%" height="15" fill="rgb(212,28,1)"/><text x="69.8847%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (15 samples, 0.02%)</title><rect x="69.6830%" y="181" width="0.0213%" height="15" fill="rgb(248,164,17)"/><text x="69.9330%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.03%)</title><rect x="69.7043%" y="181" width="0.0313%" height="15" fill="rgb(222,171,42)"/><text x="69.9543%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode (26 samples, 0.04%)</title><rect x="69.7356%" y="181" width="0.0369%" height="15" fill="rgb(243,84,45)"/><text x="69.9856%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (21 samples, 0.03%)</title><rect x="69.7725%" y="181" width="0.0298%" height="15" fill="rgb(252,49,23)"/><text x="70.0225%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (36 samples, 0.05%)</title><rect x="69.8024%" y="181" width="0.0511%" height="15" fill="rgb(215,19,7)"/><text x="70.0524%" y="191.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (8 samples, 0.01%)</title><rect x="69.8535%" y="181" width="0.0114%" height="15" fill="rgb(238,81,41)"/><text x="70.1035%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (224 samples, 0.32%)</title><rect x="69.9004%" y="149" width="0.3183%" height="15" fill="rgb(210,199,37)"/><text x="70.1504%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (187 samples, 0.27%)</title><rect x="69.9530%" y="133" width="0.2657%" height="15" fill="rgb(244,192,49)"/><text x="70.2030%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (88 samples, 0.13%)</title><rect x="70.2812%" y="133" width="0.1250%" height="15" fill="rgb(226,211,11)"/><text x="70.5312%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.01%)</title><rect x="70.3934%" y="117" width="0.0128%" height="15" fill="rgb(236,162,54)"/><text x="70.6434%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (133 samples, 0.19%)</title><rect x="70.2187%" y="149" width="0.1890%" height="15" fill="rgb(220,229,9)"/><text x="70.4687%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (365 samples, 0.52%)</title><rect x="69.8976%" y="165" width="0.5186%" height="15" fill="rgb(250,87,22)"/><text x="70.1476%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (9 samples, 0.01%)</title><rect x="70.4162%" y="165" width="0.0128%" height="15" fill="rgb(239,43,17)"/><text x="70.6662%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (400 samples, 0.57%)</title><rect x="69.8706%" y="181" width="0.5683%" height="15" fill="rgb(231,177,25)"/><text x="70.1206%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (13 samples, 0.02%)</title><rect x="70.4417%" y="165" width="0.0185%" height="15" fill="rgb(219,179,1)"/><text x="70.6917%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (10 samples, 0.01%)</title><rect x="70.4602%" y="165" width="0.0142%" height="15" fill="rgb(238,219,53)"/><text x="70.7102%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (8 samples, 0.01%)</title><rect x="70.4744%" y="165" width="0.0114%" height="15" fill="rgb(232,167,36)"/><text x="70.7244%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (12 samples, 0.02%)</title><rect x="70.5625%" y="149" width="0.0170%" height="15" fill="rgb(244,19,51)"/><text x="70.8125%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (12 samples, 0.02%)</title><rect x="70.7827%" y="117" width="0.0170%" height="15" fill="rgb(224,6,22)"/><text x="71.0327%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (27 samples, 0.04%)</title><rect x="70.7998%" y="117" width="0.0384%" height="15" fill="rgb(224,145,5)"/><text x="71.0498%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (22 samples, 0.03%)</title><rect x="70.8069%" y="101" width="0.0313%" height="15" fill="rgb(234,130,49)"/><text x="71.0569%" y="111.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (24 samples, 0.03%)</title><rect x="70.8935%" y="101" width="0.0341%" height="15" fill="rgb(254,6,2)"/><text x="71.1435%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (8 samples, 0.01%)</title><rect x="70.9163%" y="85" width="0.0114%" height="15" fill="rgb(208,96,46)"/><text x="71.1663%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (10 samples, 0.01%)</title><rect x="70.9276%" y="101" width="0.0142%" height="15" fill="rgb(239,3,39)"/><text x="71.1776%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (22 samples, 0.03%)</title><rect x="71.0910%" y="53" width="0.0313%" height="15" fill="rgb(233,210,1)"/><text x="71.3410%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (169 samples, 0.24%)</title><rect x="70.9930%" y="85" width="0.2401%" height="15" fill="rgb(244,137,37)"/><text x="71.2430%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (161 samples, 0.23%)</title><rect x="71.0044%" y="69" width="0.2287%" height="15" fill="rgb(240,136,2)"/><text x="71.2544%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (78 samples, 0.11%)</title><rect x="71.1223%" y="53" width="0.1108%" height="15" fill="rgb(239,18,37)"/><text x="71.3723%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="71.2132%" y="37" width="0.0199%" height="15" fill="rgb(218,185,22)"/><text x="71.4632%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (209 samples, 0.30%)</title><rect x="70.9418%" y="101" width="0.2969%" height="15" fill="rgb(225,218,4)"/><text x="71.1918%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (263 samples, 0.37%)</title><rect x="70.8694%" y="117" width="0.3737%" height="15" fill="rgb(230,182,32)"/><text x="71.1194%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (18 samples, 0.03%)</title><rect x="71.2502%" y="117" width="0.0256%" height="15" fill="rgb(242,56,43)"/><text x="71.5002%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (620 samples, 0.88%)</title><rect x="70.5909%" y="133" width="0.8809%" height="15" fill="rgb(233,99,24)"/><text x="70.8409%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (138 samples, 0.20%)</title><rect x="71.2757%" y="117" width="0.1961%" height="15" fill="rgb(234,209,42)"/><text x="71.5257%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (8 samples, 0.01%)</title><rect x="71.4789%" y="133" width="0.0114%" height="15" fill="rgb(227,7,12)"/><text x="71.7289%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (25 samples, 0.04%)</title><rect x="71.6082%" y="117" width="0.0355%" height="15" fill="rgb(245,203,43)"/><text x="71.8582%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (9 samples, 0.01%)</title><rect x="71.6309%" y="101" width="0.0128%" height="15" fill="rgb(238,205,33)"/><text x="71.8809%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (68 samples, 0.10%)</title><rect x="71.7119%" y="101" width="0.0966%" height="15" fill="rgb(231,56,7)"/><text x="71.9619%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (48 samples, 0.07%)</title><rect x="71.8085%" y="101" width="0.0682%" height="15" fill="rgb(244,186,29)"/><text x="72.0585%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (15 samples, 0.02%)</title><rect x="71.8767%" y="101" width="0.0213%" height="15" fill="rgb(234,111,31)"/><text x="72.1267%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (195 samples, 0.28%)</title><rect x="71.6437%" y="117" width="0.2771%" height="15" fill="rgb(241,149,10)"/><text x="71.8937%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="71.8980%" y="101" width="0.0227%" height="15" fill="rgb(249,206,44)"/><text x="72.1480%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (125 samples, 0.18%)</title><rect x="71.9208%" y="117" width="0.1776%" height="15" fill="rgb(251,153,30)"/><text x="72.1708%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.02%)</title><rect x="72.1055%" y="117" width="0.0156%" height="15" fill="rgb(239,152,38)"/><text x="72.3555%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (454 samples, 0.65%)</title><rect x="71.4903%" y="133" width="0.6450%" height="15" fill="rgb(249,139,47)"/><text x="71.7403%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (16 samples, 0.02%)</title><rect x="72.1609%" y="133" width="0.0227%" height="15" fill="rgb(244,64,35)"/><text x="72.4109%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (8 samples, 0.01%)</title><rect x="72.1836%" y="133" width="0.0114%" height="15" fill="rgb(216,46,15)"/><text x="72.4336%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1,173 samples, 1.67%)</title><rect x="70.5795%" y="149" width="1.6666%" height="15" fill="rgb(250,74,19)"/><text x="70.8295%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (36 samples, 0.05%)</title><rect x="72.1950%" y="133" width="0.0511%" height="15" fill="rgb(249,42,33)"/><text x="72.4450%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (10 samples, 0.01%)</title><rect x="72.2504%" y="149" width="0.0142%" height="15" fill="rgb(242,149,17)"/><text x="72.5004%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (30 samples, 0.04%)</title><rect x="72.2717%" y="149" width="0.0426%" height="15" fill="rgb(244,29,21)"/><text x="72.5217%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (12 samples, 0.02%)</title><rect x="72.2973%" y="133" width="0.0170%" height="15" fill="rgb(220,130,37)"/><text x="72.5473%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,298 samples, 1.84%)</title><rect x="70.4858%" y="165" width="1.8442%" height="15" fill="rgb(211,67,2)"/><text x="70.7358%" y="175.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="72.3143%" y="149" width="0.0156%" height="15" fill="rgb(235,68,52)"/><text x="72.5643%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,341 samples, 1.91%)</title><rect x="70.4389%" y="181" width="1.9053%" height="15" fill="rgb(246,142,3)"/><text x="70.6889%" y="191.50">a..</text></g><g><title>async-redis`tracing_core::span::Attributes::new (10 samples, 0.01%)</title><rect x="72.3300%" y="165" width="0.0142%" height="15" fill="rgb(241,25,7)"/><text x="72.5800%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (11 samples, 0.02%)</title><rect x="72.3470%" y="181" width="0.0156%" height="15" fill="rgb(242,119,39)"/><text x="72.5970%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.03%)</title><rect x="72.3655%" y="181" width="0.0341%" height="15" fill="rgb(241,98,45)"/><text x="72.6155%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.04%)</title><rect x="72.4038%" y="181" width="0.0398%" height="15" fill="rgb(254,28,30)"/><text x="72.6538%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29,124 samples, 41.38%)</title><rect x="31.1325%" y="197" width="41.3793%" height="15" fill="rgb(241,142,54)"/><text x="31.3825%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::fut..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (42 samples, 0.06%)</title><rect x="72.4522%" y="181" width="0.0597%" height="15" fill="rgb(222,85,15)"/><text x="72.7022%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="72.5118%" y="197" width="0.0156%" height="15" fill="rgb(210,85,47)"/><text x="72.7618%" y="207.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="72.5275%" y="197" width="0.0114%" height="15" fill="rgb(224,206,25)"/><text x="72.7775%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (19 samples, 0.03%)</title><rect x="72.5388%" y="197" width="0.0270%" height="15" fill="rgb(243,201,19)"/><text x="72.7888%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (18 samples, 0.03%)</title><rect x="72.5672%" y="197" width="0.0256%" height="15" fill="rgb(236,59,4)"/><text x="72.8172%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (30 samples, 0.04%)</title><rect x="72.6667%" y="181" width="0.0426%" height="15" fill="rgb(254,179,45)"/><text x="72.9167%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (70 samples, 0.10%)</title><rect x="72.9793%" y="165" width="0.0995%" height="15" fill="rgb(226,14,10)"/><text x="73.2293%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (258 samples, 0.37%)</title><rect x="72.7136%" y="181" width="0.3666%" height="15" fill="rgb(244,27,41)"/><text x="72.9636%" y="191.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (39 samples, 0.06%)</title><rect x="73.0801%" y="181" width="0.0554%" height="15" fill="rgb(235,35,32)"/><text x="73.3301%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="73.1171%" y="165" width="0.0185%" height="15" fill="rgb(218,68,31)"/><text x="73.3671%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (13 samples, 0.02%)</title><rect x="73.1171%" y="149" width="0.0185%" height="15" fill="rgb(207,120,37)"/><text x="73.3671%" y="159.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (371 samples, 0.53%)</title><rect x="72.6099%" y="197" width="0.5271%" height="15" fill="rgb(227,98,0)"/><text x="72.8599%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.01%)</title><rect x="73.1384%" y="197" width="0.0114%" height="15" fill="rgb(207,7,3)"/><text x="73.3884%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (28 samples, 0.04%)</title><rect x="73.1526%" y="197" width="0.0398%" height="15" fill="rgb(206,98,19)"/><text x="73.4026%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::new (8 samples, 0.01%)</title><rect x="73.2038%" y="197" width="0.0114%" height="15" fill="rgb(217,5,26)"/><text x="73.4538%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (19 samples, 0.03%)</title><rect x="73.2151%" y="197" width="0.0270%" height="15" fill="rgb(235,190,38)"/><text x="73.4651%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (29,843 samples, 42.40%)</title><rect x="30.9023%" y="213" width="42.4009%" height="15" fill="rgb(247,86,24)"/><text x="31.1523%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::futur..</text></g><g><title>libdyld.dylib`tlv_get_addr (43 samples, 0.06%)</title><rect x="73.2421%" y="197" width="0.0611%" height="15" fill="rgb(205,101,16)"/><text x="73.4921%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (62 samples, 0.09%)</title><rect x="73.3032%" y="213" width="0.0881%" height="15" fill="rgb(246,168,33)"/><text x="73.5532%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (46 samples, 0.07%)</title><rect x="73.3259%" y="197" width="0.0654%" height="15" fill="rgb(231,114,1)"/><text x="73.5759%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (12 samples, 0.02%)</title><rect x="73.3970%" y="213" width="0.0170%" height="15" fill="rgb(207,184,53)"/><text x="73.6470%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.02%)</title><rect x="73.4908%" y="197" width="0.0156%" height="15" fill="rgb(224,95,51)"/><text x="73.7408%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (79 samples, 0.11%)</title><rect x="73.4140%" y="213" width="0.1122%" height="15" fill="rgb(212,188,45)"/><text x="73.6640%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="73.5064%" y="197" width="0.0199%" height="15" fill="rgb(223,154,38)"/><text x="73.7564%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (11 samples, 0.02%)</title><rect x="73.5334%" y="213" width="0.0156%" height="15" fill="rgb(251,22,52)"/><text x="73.7834%" y="223.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="73.5575%" y="213" width="0.0170%" height="15" fill="rgb(229,209,22)"/><text x="73.8075%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (21 samples, 0.03%)</title><rect x="73.5746%" y="213" width="0.0298%" height="15" fill="rgb(234,138,34)"/><text x="73.8246%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.02%)</title><rect x="73.6712%" y="197" width="0.0185%" height="15" fill="rgb(212,95,11)"/><text x="73.9212%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (154 samples, 0.22%)</title><rect x="73.7223%" y="181" width="0.2188%" height="15" fill="rgb(240,179,47)"/><text x="73.9723%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.06%)</title><rect x="73.9511%" y="165" width="0.0625%" height="15" fill="rgb(240,163,11)"/><text x="74.2011%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (42 samples, 0.06%)</title><rect x="73.9539%" y="149" width="0.0597%" height="15" fill="rgb(236,37,12)"/><text x="74.2039%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="73.9980%" y="133" width="0.0156%" height="15" fill="rgb(232,164,16)"/><text x="74.2480%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.07%)</title><rect x="73.9412%" y="181" width="0.0739%" height="15" fill="rgb(244,205,15)"/><text x="74.1912%" y="191.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (225 samples, 0.32%)</title><rect x="73.6996%" y="197" width="0.3197%" height="15" fill="rgb(223,117,47)"/><text x="73.9496%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (41 samples, 0.06%)</title><rect x="74.0591%" y="181" width="0.0583%" height="15" fill="rgb(244,107,35)"/><text x="74.3091%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (111 samples, 0.16%)</title><rect x="74.1173%" y="181" width="0.1577%" height="15" fill="rgb(205,140,8)"/><text x="74.3673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (103 samples, 0.15%)</title><rect x="74.1287%" y="165" width="0.1463%" height="15" fill="rgb(228,84,46)"/><text x="74.3787%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.14%)</title><rect x="74.1315%" y="149" width="0.1435%" height="15" fill="rgb(254,188,9)"/><text x="74.3815%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (59 samples, 0.08%)</title><rect x="74.1912%" y="133" width="0.0838%" height="15" fill="rgb(206,112,54)"/><text x="74.4412%" y="143.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (195 samples, 0.28%)</title><rect x="74.0221%" y="197" width="0.2771%" height="15" fill="rgb(216,84,49)"/><text x="74.2721%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.02%)</title><rect x="74.2779%" y="181" width="0.0213%" height="15" fill="rgb(214,194,35)"/><text x="74.5279%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (12 samples, 0.02%)</title><rect x="74.3475%" y="181" width="0.0170%" height="15" fill="rgb(249,28,3)"/><text x="74.5975%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (65 samples, 0.09%)</title><rect x="74.2992%" y="197" width="0.0924%" height="15" fill="rgb(222,56,52)"/><text x="74.5492%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (18 samples, 0.03%)</title><rect x="74.3660%" y="181" width="0.0256%" height="15" fill="rgb(245,217,50)"/><text x="74.6160%" y="191.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (18 samples, 0.03%)</title><rect x="74.3972%" y="197" width="0.0256%" height="15" fill="rgb(213,201,24)"/><text x="74.6472%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (17 samples, 0.02%)</title><rect x="74.4228%" y="197" width="0.0242%" height="15" fill="rgb(248,116,28)"/><text x="74.6728%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.06%)</title><rect x="74.4725%" y="181" width="0.0597%" height="15" fill="rgb(219,72,43)"/><text x="74.7225%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.05%)</title><rect x="74.4796%" y="165" width="0.0526%" height="15" fill="rgb(209,138,14)"/><text x="74.7296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.08%)</title><rect x="74.4526%" y="197" width="0.0810%" height="15" fill="rgb(222,18,33)"/><text x="74.7026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.04%)</title><rect x="74.6388%" y="165" width="0.0355%" height="15" fill="rgb(213,199,7)"/><text x="74.8888%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (100 samples, 0.14%)</title><rect x="74.5336%" y="197" width="0.1421%" height="15" fill="rgb(250,110,10)"/><text x="74.7836%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (55 samples, 0.08%)</title><rect x="74.5976%" y="181" width="0.0781%" height="15" fill="rgb(248,123,6)"/><text x="74.8476%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (769 samples, 1.09%)</title><rect x="73.6044%" y="213" width="1.0926%" height="15" fill="rgb(206,91,31)"/><text x="73.8544%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (16 samples, 0.02%)</title><rect x="74.6970%" y="213" width="0.0227%" height="15" fill="rgb(211,154,13)"/><text x="74.9470%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (21 samples, 0.03%)</title><rect x="74.7197%" y="213" width="0.0298%" height="15" fill="rgb(225,148,7)"/><text x="74.9697%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode (22 samples, 0.03%)</title><rect x="74.7496%" y="213" width="0.0313%" height="15" fill="rgb(220,160,43)"/><text x="74.9996%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="74.7922%" y="197" width="0.0369%" height="15" fill="rgb(213,52,39)"/><text x="75.0422%" y="207.50"></text></g><g><title>async-redis`async_redis::server::calculate_hash (49 samples, 0.07%)</title><rect x="74.7808%" y="213" width="0.0696%" height="15" fill="rgb(243,137,7)"/><text x="75.0308%" y="223.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (15 samples, 0.02%)</title><rect x="74.8291%" y="197" width="0.0213%" height="15" fill="rgb(230,79,13)"/><text x="75.0791%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (9 samples, 0.01%)</title><rect x="74.8505%" y="213" width="0.0128%" height="15" fill="rgb(247,105,23)"/><text x="75.1005%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (12 samples, 0.02%)</title><rect x="74.9613%" y="197" width="0.0170%" height="15" fill="rgb(223,179,41)"/><text x="75.2113%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.01%)</title><rect x="74.9783%" y="197" width="0.0128%" height="15" fill="rgb(218,9,34)"/><text x="75.2283%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (23 samples, 0.03%)</title><rect x="74.9996%" y="197" width="0.0327%" height="15" fill="rgb(222,106,8)"/><text x="75.2496%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (19 samples, 0.03%)</title><rect x="75.0053%" y="181" width="0.0270%" height="15" fill="rgb(211,220,0)"/><text x="75.2553%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (148 samples, 0.21%)</title><rect x="74.8661%" y="213" width="0.2103%" height="15" fill="rgb(229,52,16)"/><text x="75.1161%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (31 samples, 0.04%)</title><rect x="75.0323%" y="197" width="0.0440%" height="15" fill="rgb(212,155,18)"/><text x="75.2823%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sysctl (10 samples, 0.01%)</title><rect x="75.1829%" y="181" width="0.0142%" height="15" fill="rgb(242,21,14)"/><text x="75.4329%" y="191.50"></text></g><g><title>libsystem_c.dylib`sysctl (11 samples, 0.02%)</title><rect x="75.1971%" y="181" width="0.0156%" height="15" fill="rgb(222,19,48)"/><text x="75.4471%" y="191.50"></text></g><g><title>libsystem_c.dylib`sysconf (3,001 samples, 4.26%)</title><rect x="75.0863%" y="197" width="4.2638%" height="15" fill="rgb(232,45,27)"/><text x="75.3363%" y="207.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__sysctl (2,912 samples, 4.14%)</title><rect x="75.2128%" y="181" width="4.1374%" height="15" fill="rgb(249,103,42)"/><text x="75.4628%" y="191.50">libsy..</text></g><g><title>async-redis`num_cpus::get_num_cpus (3,016 samples, 4.29%)</title><rect x="75.0764%" y="213" width="4.2851%" height="15" fill="rgb(246,81,33)"/><text x="75.3264%" y="223.50">async..</text></g><g><title>libsystem_c.dylib`sysctl (8 samples, 0.01%)</title><rect x="79.3501%" y="197" width="0.0114%" height="15" fill="rgb(252,33,42)"/><text x="79.6001%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (13 samples, 0.02%)</title><rect x="79.3686%" y="213" width="0.0185%" height="15" fill="rgb(209,212,41)"/><text x="79.6186%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (35 samples, 0.05%)</title><rect x="79.5789%" y="149" width="0.0497%" height="15" fill="rgb(207,154,6)"/><text x="79.8289%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (16 samples, 0.02%)</title><rect x="79.6314%" y="149" width="0.0227%" height="15" fill="rgb(223,64,47)"/><text x="79.8814%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (12 samples, 0.02%)</title><rect x="79.6542%" y="149" width="0.0170%" height="15" fill="rgb(211,161,38)"/><text x="79.9042%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,785 samples, 13.90%)</title><rect x="79.5448%" y="165" width="13.9025%" height="15" fill="rgb(219,138,40)"/><text x="79.7948%" y="175.50">async-redis`&lt;&amp;mio::ne..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,696 samples, 13.78%)</title><rect x="79.6712%" y="149" width="13.7761%" height="15" fill="rgb(241,228,46)"/><text x="79.9212%" y="159.50">libsystem_kernel.dyli..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (21 samples, 0.03%)</title><rect x="93.5780%" y="149" width="0.0298%" height="15" fill="rgb(223,209,38)"/><text x="93.8280%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (118 samples, 0.17%)</title><rect x="93.4515%" y="165" width="0.1677%" height="15" fill="rgb(236,164,45)"/><text x="93.7015%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="93.6078%" y="149" width="0.0114%" height="15" fill="rgb(231,15,5)"/><text x="93.8578%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,986 samples, 14.19%)</title><rect x="79.4453%" y="197" width="14.1881%" height="15" fill="rgb(252,35,15)"/><text x="79.6953%" y="207.50">async-redis`&lt;tokio::ne..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,959 samples, 14.15%)</title><rect x="79.4837%" y="181" width="14.1497%" height="15" fill="rgb(248,181,18)"/><text x="79.7337%" y="191.50">async-redis`tokio::io..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.01%)</title><rect x="93.6192%" y="165" width="0.0142%" height="15" fill="rgb(233,39,42)"/><text x="93.8692%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (10,031 samples, 14.25%)</title><rect x="79.3871%" y="213" width="14.2520%" height="15" fill="rgb(238,110,33)"/><text x="79.6371%" y="223.50">async-redis`tokio::io:..</text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 0.02%)</title><rect x="93.6391%" y="213" width="0.0185%" height="15" fill="rgb(233,195,10)"/><text x="93.8891%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (14 samples, 0.02%)</title><rect x="93.6661%" y="213" width="0.0199%" height="15" fill="rgb(254,105,3)"/><text x="93.9161%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (31 samples, 0.04%)</title><rect x="93.7059%" y="197" width="0.0440%" height="15" fill="rgb(221,225,9)"/><text x="93.9559%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (30 samples, 0.04%)</title><rect x="93.7499%" y="197" width="0.0426%" height="15" fill="rgb(224,227,45)"/><text x="93.9999%" y="207.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (37 samples, 0.05%)</title><rect x="93.8153%" y="181" width="0.0526%" height="15" fill="rgb(229,198,43)"/><text x="94.0653%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="93.8536%" y="165" width="0.0142%" height="15" fill="rgb(206,209,35)"/><text x="94.1036%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (130 samples, 0.18%)</title><rect x="93.6860%" y="213" width="0.1847%" height="15" fill="rgb(245,195,53)"/><text x="93.9360%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (55 samples, 0.08%)</title><rect x="93.7925%" y="197" width="0.0781%" height="15" fill="rgb(240,92,26)"/><text x="94.0425%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (38 samples, 0.05%)</title><rect x="93.9559%" y="197" width="0.0540%" height="15" fill="rgb(207,40,23)"/><text x="94.2059%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (94 samples, 0.13%)</title><rect x="93.8778%" y="213" width="0.1336%" height="15" fill="rgb(223,111,35)"/><text x="94.1278%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (17 samples, 0.02%)</title><rect x="94.0113%" y="213" width="0.0242%" height="15" fill="rgb(229,147,28)"/><text x="94.2613%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (8 samples, 0.01%)</title><rect x="94.0369%" y="213" width="0.0114%" height="15" fill="rgb(211,29,28)"/><text x="94.2869%" y="223.50"></text></g><g><title>libsystem_c.dylib`sysconf (30 samples, 0.04%)</title><rect x="94.0483%" y="213" width="0.0426%" height="15" fill="rgb(228,72,33)"/><text x="94.2983%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (107 samples, 0.15%)</title><rect x="94.0966%" y="213" width="0.1520%" height="15" fill="rgb(205,214,31)"/><text x="94.3466%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (57 samples, 0.08%)</title><rect x="94.1676%" y="197" width="0.0810%" height="15" fill="rgb(224,111,15)"/><text x="94.4176%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (56 samples, 0.08%)</title><rect x="94.1690%" y="181" width="0.0796%" height="15" fill="rgb(253,21,26)"/><text x="94.4190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (41 samples, 0.06%)</title><rect x="94.3807%" y="181" width="0.0583%" height="15" fill="rgb(245,139,43)"/><text x="94.6307%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (135 samples, 0.19%)</title><rect x="94.2486%" y="213" width="0.1918%" height="15" fill="rgb(252,170,7)"/><text x="94.4986%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (88 samples, 0.13%)</title><rect x="94.3154%" y="197" width="0.1250%" height="15" fill="rgb(231,118,14)"/><text x="94.5654%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="94.4404%" y="213" width="0.0256%" height="15" fill="rgb(238,83,0)"/><text x="94.6904%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (82 samples, 0.12%)</title><rect x="94.4660%" y="213" width="0.1165%" height="15" fill="rgb(221,39,39)"/><text x="94.7160%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45,628 samples, 64.83%)</title><rect x="29.7572%" y="229" width="64.8282%" height="15" fill="rgb(222,119,46)"/><text x="30.0072%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (28 samples, 0.04%)</title><rect x="94.5853%" y="229" width="0.0398%" height="15" fill="rgb(222,165,49)"/><text x="94.8353%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (235 samples, 0.33%)</title><rect x="94.8326%" y="197" width="0.3339%" height="15" fill="rgb(219,113,52)"/><text x="95.0826%" y="207.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (229 samples, 0.33%)</title><rect x="94.8411%" y="181" width="0.3254%" height="15" fill="rgb(214,7,15)"/><text x="95.0911%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (10 samples, 0.01%)</title><rect x="95.1522%" y="165" width="0.0142%" height="15" fill="rgb(235,32,4)"/><text x="95.4022%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (277 samples, 0.39%)</title><rect x="94.7814%" y="213" width="0.3936%" height="15" fill="rgb(238,90,54)"/><text x="95.0314%" y="223.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (9 samples, 0.01%)</title><rect x="95.2403%" y="197" width="0.0128%" height="15" fill="rgb(213,208,19)"/><text x="95.4903%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (11 samples, 0.02%)</title><rect x="95.3384%" y="181" width="0.0156%" height="15" fill="rgb(233,156,4)"/><text x="95.5884%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (65 samples, 0.09%)</title><rect x="95.3654%" y="181" width="0.0924%" height="15" fill="rgb(207,194,5)"/><text x="95.6154%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (93 samples, 0.13%)</title><rect x="95.5842%" y="165" width="0.1321%" height="15" fill="rgb(206,111,30)"/><text x="95.8342%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (177 samples, 0.25%)</title><rect x="95.4677%" y="181" width="0.2515%" height="15" fill="rgb(243,70,54)"/><text x="95.7177%" y="191.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (21 samples, 0.03%)</title><rect x="95.7191%" y="181" width="0.0298%" height="15" fill="rgb(242,28,8)"/><text x="95.9691%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="95.7376%" y="165" width="0.0114%" height="15" fill="rgb(219,106,18)"/><text x="95.9876%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (8 samples, 0.01%)</title><rect x="95.7376%" y="149" width="0.0114%" height="15" fill="rgb(244,222,10)"/><text x="95.9876%" y="159.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (352 samples, 0.50%)</title><rect x="95.2531%" y="197" width="0.5001%" height="15" fill="rgb(236,179,52)"/><text x="95.5031%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (13 samples, 0.02%)</title><rect x="95.7532%" y="197" width="0.0185%" height="15" fill="rgb(213,23,39)"/><text x="96.0032%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (437 samples, 0.62%)</title><rect x="95.1778%" y="213" width="0.6209%" height="15" fill="rgb(238,48,10)"/><text x="95.4278%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.02%)</title><rect x="95.7745%" y="197" width="0.0242%" height="15" fill="rgb(251,196,23)"/><text x="96.0245%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.01%)</title><rect x="95.7987%" y="213" width="0.0128%" height="15" fill="rgb(250,152,24)"/><text x="96.0487%" y="223.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (20 samples, 0.03%)</title><rect x="95.9507%" y="165" width="0.0284%" height="15" fill="rgb(209,150,17)"/><text x="96.2007%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (23 samples, 0.03%)</title><rect x="95.9806%" y="165" width="0.0327%" height="15" fill="rgb(234,202,34)"/><text x="96.2306%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.02%)</title><rect x="96.1099%" y="149" width="0.0213%" height="15" fill="rgb(253,148,53)"/><text x="96.3599%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (121 samples, 0.17%)</title><rect x="96.0132%" y="165" width="0.1719%" height="15" fill="rgb(218,129,16)"/><text x="96.2632%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (38 samples, 0.05%)</title><rect x="96.1312%" y="149" width="0.0540%" height="15" fill="rgb(216,85,19)"/><text x="96.3812%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (252 samples, 0.36%)</title><rect x="95.8385%" y="197" width="0.3580%" height="15" fill="rgb(235,228,7)"/><text x="96.0885%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (182 samples, 0.26%)</title><rect x="95.9379%" y="181" width="0.2586%" height="15" fill="rgb(245,175,0)"/><text x="96.1879%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (8 samples, 0.01%)</title><rect x="96.1852%" y="165" width="0.0114%" height="15" fill="rgb(208,168,36)"/><text x="96.4352%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (15 samples, 0.02%)</title><rect x="96.1965%" y="197" width="0.0213%" height="15" fill="rgb(246,171,24)"/><text x="96.4465%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (306 samples, 0.43%)</title><rect x="95.8115%" y="213" width="0.4348%" height="15" fill="rgb(215,142,24)"/><text x="96.0615%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.03%)</title><rect x="96.2178%" y="197" width="0.0284%" height="15" fill="rgb(250,187,7)"/><text x="96.4678%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (25 samples, 0.04%)</title><rect x="96.2690%" y="213" width="0.0355%" height="15" fill="rgb(228,66,33)"/><text x="96.5190%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,191 samples, 1.69%)</title><rect x="94.6265%" y="229" width="1.6922%" height="15" fill="rgb(234,215,21)"/><text x="94.8765%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="96.3045%" y="213" width="0.0142%" height="15" fill="rgb(222,191,20)"/><text x="96.5545%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (10 samples, 0.01%)</title><rect x="96.3187%" y="229" width="0.0142%" height="15" fill="rgb(245,79,54)"/><text x="96.5687%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="96.3329%" y="229" width="0.0114%" height="15" fill="rgb(240,10,37)"/><text x="96.5829%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (45 samples, 0.06%)</title><rect x="96.3443%" y="229" width="0.0639%" height="15" fill="rgb(214,192,32)"/><text x="96.5943%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="96.4082%" y="229" width="0.0128%" height="15" fill="rgb(209,36,54)"/><text x="96.6582%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="96.4210%" y="229" width="0.0185%" height="15" fill="rgb(220,10,11)"/><text x="96.6710%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (8 samples, 0.01%)</title><rect x="96.4452%" y="229" width="0.0114%" height="15" fill="rgb(221,106,17)"/><text x="96.6952%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (51 samples, 0.07%)</title><rect x="96.5290%" y="197" width="0.0725%" height="15" fill="rgb(251,142,44)"/><text x="96.7790%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="96.6455%" y="165" width="0.0142%" height="15" fill="rgb(238,13,15)"/><text x="96.8955%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (120 samples, 0.17%)</title><rect x="96.6597%" y="165" width="0.1705%" height="15" fill="rgb(208,107,27)"/><text x="96.9097%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (80 samples, 0.11%)</title><rect x="96.7165%" y="149" width="0.1137%" height="15" fill="rgb(205,136,37)"/><text x="96.9665%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (9 samples, 0.01%)</title><rect x="96.8302%" y="165" width="0.0128%" height="15" fill="rgb(250,205,27)"/><text x="97.0802%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (21 samples, 0.03%)</title><rect x="96.8501%" y="165" width="0.0298%" height="15" fill="rgb(210,80,43)"/><text x="97.1001%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (178 samples, 0.25%)</title><rect x="96.6412%" y="181" width="0.2529%" height="15" fill="rgb(247,160,36)"/><text x="96.8912%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="96.8799%" y="165" width="0.0142%" height="15" fill="rgb(234,13,49)"/><text x="97.1299%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (10 samples, 0.01%)</title><rect x="96.8956%" y="181" width="0.0142%" height="15" fill="rgb(234,122,0)"/><text x="97.1456%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (20 samples, 0.03%)</title><rect x="96.9098%" y="181" width="0.0284%" height="15" fill="rgb(207,146,38)"/><text x="97.1598%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (8 samples, 0.01%)</title><rect x="96.9268%" y="165" width="0.0114%" height="15" fill="rgb(207,177,25)"/><text x="97.1768%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (8 samples, 0.01%)</title><rect x="96.9382%" y="181" width="0.0114%" height="15" fill="rgb(211,178,42)"/><text x="97.1882%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (243 samples, 0.35%)</title><rect x="96.6157%" y="197" width="0.3453%" height="15" fill="rgb(230,69,54)"/><text x="96.8657%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="96.9495%" y="181" width="0.0114%" height="15" fill="rgb(214,135,41)"/><text x="97.1995%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (363 samples, 0.52%)</title><rect x="96.4608%" y="213" width="0.5157%" height="15" fill="rgb(237,67,25)"/><text x="96.7108%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (374 samples, 0.53%)</title><rect x="96.4565%" y="229" width="0.5314%" height="15" fill="rgb(222,189,50)"/><text x="96.7065%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (12 samples, 0.02%)</title><rect x="96.9936%" y="229" width="0.0170%" height="15" fill="rgb(245,148,34)"/><text x="97.2436%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (9 samples, 0.01%)</title><rect x="97.0106%" y="229" width="0.0128%" height="15" fill="rgb(222,29,6)"/><text x="97.2606%" y="239.50"></text></g><g><title>async-redis`DYLD-STUB$$free (12 samples, 0.02%)</title><rect x="97.0234%" y="229" width="0.0170%" height="15" fill="rgb(221,189,43)"/><text x="97.2734%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (18 samples, 0.03%)</title><rect x="97.0447%" y="229" width="0.0256%" height="15" fill="rgb(207,36,27)"/><text x="97.2947%" y="239.50"></text></g><g><title>async-redis`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.02%)</title><rect x="97.0874%" y="213" width="0.0213%" height="15" fill="rgb(217,90,24)"/><text x="97.3374%" y="223.50"></text></g><g><title>async-redis`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (27 samples, 0.04%)</title><rect x="97.0774%" y="229" width="0.0384%" height="15" fill="rgb(224,66,35)"/><text x="97.3274%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (16 samples, 0.02%)</title><rect x="97.1186%" y="229" width="0.0227%" height="15" fill="rgb(221,13,50)"/><text x="97.3686%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode (27 samples, 0.04%)</title><rect x="97.1414%" y="229" width="0.0384%" height="15" fill="rgb(236,68,49)"/><text x="97.3914%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (11 samples, 0.02%)</title><rect x="97.1797%" y="229" width="0.0156%" height="15" fill="rgb(229,146,28)"/><text x="97.4297%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (17 samples, 0.02%)</title><rect x="97.1953%" y="229" width="0.0242%" height="15" fill="rgb(225,31,38)"/><text x="97.4453%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (18 samples, 0.03%)</title><rect x="97.2195%" y="229" width="0.0256%" height="15" fill="rgb(250,208,3)"/><text x="97.4695%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (10 samples, 0.01%)</title><rect x="97.3388%" y="213" width="0.0142%" height="15" fill="rgb(246,54,23)"/><text x="97.5888%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (9 samples, 0.01%)</title><rect x="97.3531%" y="213" width="0.0128%" height="15" fill="rgb(243,76,11)"/><text x="97.6031%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (12 samples, 0.02%)</title><rect x="97.3715%" y="213" width="0.0170%" height="15" fill="rgb(245,21,50)"/><text x="97.6215%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="97.3758%" y="197" width="0.0128%" height="15" fill="rgb(228,9,43)"/><text x="97.6258%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (8 samples, 0.01%)</title><rect x="97.4980%" y="181" width="0.0114%" height="15" fill="rgb(208,100,47)"/><text x="97.7480%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (21 samples, 0.03%)</title><rect x="97.4809%" y="197" width="0.0298%" height="15" fill="rgb(232,26,8)"/><text x="97.7309%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (56 samples, 0.08%)</title><rect x="97.5221%" y="197" width="0.0796%" height="15" fill="rgb(216,166,38)"/><text x="97.7721%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (153 samples, 0.22%)</title><rect x="97.3886%" y="213" width="0.2174%" height="15" fill="rgb(251,202,51)"/><text x="97.6386%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (283 samples, 0.40%)</title><rect x="97.2451%" y="229" width="0.4021%" height="15" fill="rgb(254,216,34)"/><text x="97.4951%" y="239.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (25 samples, 0.04%)</title><rect x="97.6116%" y="213" width="0.0355%" height="15" fill="rgb(251,32,27)"/><text x="97.8616%" y="223.50"></text></g><g><title>async-redis`num_cpus::get_num_cpus (21 samples, 0.03%)</title><rect x="97.6557%" y="229" width="0.0298%" height="15" fill="rgb(208,127,28)"/><text x="97.9057%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (22 samples, 0.03%)</title><rect x="97.6898%" y="229" width="0.0313%" height="15" fill="rgb(224,137,22)"/><text x="97.9398%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (13 samples, 0.02%)</title><rect x="97.7566%" y="213" width="0.0185%" height="15" fill="rgb(254,70,32)"/><text x="98.0066%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (12 samples, 0.02%)</title><rect x="97.7750%" y="213" width="0.0170%" height="15" fill="rgb(229,75,37)"/><text x="98.0250%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (8 samples, 0.01%)</title><rect x="97.8148%" y="181" width="0.0114%" height="15" fill="rgb(252,64,23)"/><text x="98.0648%" y="191.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (18 samples, 0.03%)</title><rect x="97.8049%" y="197" width="0.0256%" height="15" fill="rgb(232,162,48)"/><text x="98.0549%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (65 samples, 0.09%)</title><rect x="97.7409%" y="229" width="0.0924%" height="15" fill="rgb(246,160,12)"/><text x="97.9909%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (29 samples, 0.04%)</title><rect x="97.7921%" y="213" width="0.0412%" height="15" fill="rgb(247,166,0)"/><text x="98.0421%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (37 samples, 0.05%)</title><rect x="97.9398%" y="197" width="0.0526%" height="15" fill="rgb(249,219,21)"/><text x="98.1898%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (101 samples, 0.14%)</title><rect x="97.8518%" y="229" width="0.1435%" height="15" fill="rgb(205,209,3)"/><text x="98.1018%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (51 samples, 0.07%)</title><rect x="97.9228%" y="213" width="0.0725%" height="15" fill="rgb(243,44,1)"/><text x="98.1728%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (21 samples, 0.03%)</title><rect x="97.9953%" y="229" width="0.0298%" height="15" fill="rgb(206,159,16)"/><text x="98.2453%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (13 samples, 0.02%)</title><rect x="98.0251%" y="229" width="0.0185%" height="15" fill="rgb(244,77,30)"/><text x="98.2751%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.05%)</title><rect x="98.1118%" y="213" width="0.0540%" height="15" fill="rgb(218,69,12)"/><text x="98.3618%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (12 samples, 0.02%)</title><rect x="98.1658%" y="213" width="0.0170%" height="15" fill="rgb(212,87,7)"/><text x="98.4158%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (111 samples, 0.16%)</title><rect x="98.0436%" y="229" width="0.1577%" height="15" fill="rgb(245,114,25)"/><text x="98.2936%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="98.1828%" y="213" width="0.0185%" height="15" fill="rgb(210,61,42)"/><text x="98.4328%" y="223.50"></text></g><g><title>async-redis`tokio::time::instant::Instant::now (11 samples, 0.02%)</title><rect x="98.2013%" y="229" width="0.0156%" height="15" fill="rgb(211,52,33)"/><text x="98.4513%" y="239.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (12 samples, 0.02%)</title><rect x="98.2254%" y="229" width="0.0170%" height="15" fill="rgb(234,58,33)"/><text x="98.4754%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (230 samples, 0.33%)</title><rect x="98.2780%" y="197" width="0.3268%" height="15" fill="rgb(220,115,36)"/><text x="98.5280%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (191 samples, 0.27%)</title><rect x="98.3334%" y="181" width="0.2714%" height="15" fill="rgb(243,153,54)"/><text x="98.5834%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (14 samples, 0.02%)</title><rect x="98.8335%" y="165" width="0.0199%" height="15" fill="rgb(251,47,18)"/><text x="99.0835%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (131 samples, 0.19%)</title><rect x="98.6815%" y="181" width="0.1861%" height="15" fill="rgb(242,102,42)"/><text x="98.9315%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="98.8534%" y="165" width="0.0142%" height="15" fill="rgb(234,31,38)"/><text x="99.1034%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (201 samples, 0.29%)</title><rect x="98.6048%" y="197" width="0.2856%" height="15" fill="rgb(221,117,51)"/><text x="98.8548%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (16 samples, 0.02%)</title><rect x="98.8676%" y="181" width="0.0227%" height="15" fill="rgb(212,20,18)"/><text x="99.1176%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (12 samples, 0.02%)</title><rect x="98.8904%" y="197" width="0.0170%" height="15" fill="rgb(245,133,36)"/><text x="99.1404%" y="207.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (10 samples, 0.01%)</title><rect x="98.9074%" y="197" width="0.0142%" height="15" fill="rgb(212,6,19)"/><text x="99.1574%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (464 samples, 0.66%)</title><rect x="98.2695%" y="213" width="0.6593%" height="15" fill="rgb(218,1,36)"/><text x="98.5195%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (17 samples, 0.02%)</title><rect x="98.9287%" y="213" width="0.0242%" height="15" fill="rgb(246,84,54)"/><text x="99.1787%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (21 samples, 0.03%)</title><rect x="98.9557%" y="213" width="0.0298%" height="15" fill="rgb(242,110,6)"/><text x="99.2057%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (526 samples, 0.75%)</title><rect x="98.2425%" y="229" width="0.7473%" height="15" fill="rgb(214,47,5)"/><text x="98.4925%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (50 samples, 0.07%)</title><rect x="98.9998%" y="229" width="0.0710%" height="15" fill="rgb(218,159,25)"/><text x="99.2498%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.05%)</title><rect x="99.0708%" y="229" width="0.0469%" height="15" fill="rgb(215,211,28)"/><text x="99.3208%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50,648 samples, 71.96%)</title><rect x="27.2012%" y="245" width="71.9606%" height="15" fill="rgb(238,59,32)"/><text x="27.4512%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (28 samples, 0.04%)</title><rect x="99.1219%" y="229" width="0.0398%" height="15" fill="rgb(226,82,3)"/><text x="99.3719%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (17 samples, 0.02%)</title><rect x="99.1703%" y="245" width="0.0242%" height="15" fill="rgb(240,164,32)"/><text x="99.4203%" y="255.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (13 samples, 0.02%)</title><rect x="99.2015%" y="245" width="0.0185%" height="15" fill="rgb(232,46,7)"/><text x="99.4515%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (9 samples, 0.01%)</title><rect x="99.2555%" y="245" width="0.0128%" height="15" fill="rgb(229,129,53)"/><text x="99.5055%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (13 samples, 0.02%)</title><rect x="99.2797%" y="245" width="0.0185%" height="15" fill="rgb(234,188,29)"/><text x="99.5297%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (50,814 samples, 72.20%)</title><rect x="27.1046%" y="261" width="72.1964%" height="15" fill="rgb(246,141,4)"/><text x="27.3546%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (53 samples, 0.08%)</title><rect x="99.3109%" y="261" width="0.0753%" height="15" fill="rgb(229,23,39)"/><text x="99.5609%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (54 samples, 0.08%)</title><rect x="99.3862%" y="261" width="0.0767%" height="15" fill="rgb(206,12,3)"/><text x="99.6362%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (51,082 samples, 72.58%)</title><rect x="26.8872%" y="277" width="72.5772%" height="15" fill="rgb(252,226,20)"/><text x="27.1372%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (13 samples, 0.02%)</title><rect x="99.4729%" y="277" width="0.0185%" height="15" fill="rgb(216,123,35)"/><text x="99.7229%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (31 samples, 0.04%)</title><rect x="99.4914%" y="277" width="0.0440%" height="15" fill="rgb(212,68,40)"/><text x="99.7414%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (51,324 samples, 72.92%)</title><rect x="26.6357%" y="293" width="72.9210%" height="15" fill="rgb(254,125,32)"/><text x="26.8857%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.02%)</title><rect x="99.5354%" y="277" width="0.0213%" height="15" fill="rgb(253,97,22)"/><text x="99.7854%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (14 samples, 0.02%)</title><rect x="99.5581%" y="293" width="0.0199%" height="15" fill="rgb(241,101,14)"/><text x="99.8081%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35 samples, 0.05%)</title><rect x="99.5780%" y="293" width="0.0497%" height="15" fill="rgb(238,103,29)"/><text x="99.8280%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (68 samples, 0.10%)</title><rect x="99.6278%" y="293" width="0.0966%" height="15" fill="rgb(233,195,47)"/><text x="99.8778%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (16 samples, 0.02%)</title><rect x="99.7372%" y="293" width="0.0227%" height="15" fill="rgb(246,218,30)"/><text x="99.9872%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (53,279 samples, 75.70%)</title><rect x="24.0783%" y="309" width="75.6987%" height="15" fill="rgb(219,145,47)"/><text x="24.3283%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.02%)</title><rect x="99.7599%" y="293" width="0.0170%" height="15" fill="rgb(243,12,26)"/><text x="100.0099%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (70,298 samples, 99.88%)</title><rect x="0.0781%" y="325" width="99.8792%" height="15" fill="rgb(214,87,16)"/><text x="0.3281%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (127 samples, 0.18%)</title><rect x="99.7769%" y="309" width="0.1804%" height="15" fill="rgb(208,99,42)"/><text x="100.0269%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (15 samples, 0.02%)</title><rect x="99.9574%" y="325" width="0.0213%" height="15" fill="rgb(253,99,2)"/><text x="100.2074%" y="335.50"></text></g><g><title>all (70,383 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(220,168,23)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (70,359 samples, 99.97%)</title><rect x="0.0341%" y="501" width="99.9659%" height="15" fill="rgb(242,38,24)"/><text x="0.2841%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (70,359 samples, 99.97%)</title><rect x="0.0341%" y="485" width="99.9659%" height="15" fill="rgb(225,182,9)"/><text x="0.2841%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (70,359 samples, 99.97%)</title><rect x="0.0341%" y="469" width="99.9659%" height="15" fill="rgb(243,178,37)"/><text x="0.2841%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (70,359 samples, 99.97%)</title><rect x="0.0341%" y="453" width="99.9659%" height="15" fill="rgb(232,139,19)"/><text x="0.2841%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (70,359 samples, 99.97%)</title><rect x="0.0341%" y="437" width="99.9659%" height="15" fill="rgb(225,201,24)"/><text x="0.2841%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (70,359 samples, 99.97%)</title><rect x="0.0341%" y="421" width="99.9659%" height="15" fill="rgb(221,47,46)"/><text x="0.2841%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (70,359 samples, 99.97%)</title><rect x="0.0341%" y="405" width="99.9659%" height="15" fill="rgb(249,23,13)"/><text x="0.2841%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70,359 samples, 99.97%)</title><rect x="0.0341%" y="389" width="99.9659%" height="15" fill="rgb(219,9,5)"/><text x="0.2841%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (70,359 samples, 99.97%)</title><rect x="0.0341%" y="373" width="99.9659%" height="15" fill="rgb(254,171,16)"/><text x="0.2841%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (70,359 samples, 99.97%)</title><rect x="0.0341%" y="357" width="99.9659%" height="15" fill="rgb(230,171,20)"/><text x="0.2841%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (70,359 samples, 99.97%)</title><rect x="0.0341%" y="341" width="99.9659%" height="15" fill="rgb(210,71,41)"/><text x="0.2841%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (15 samples, 0.02%)</title><rect x="99.9787%" y="325" width="0.0213%" height="15" fill="rgb(206,173,20)"/><text x="100.2287%" y="335.50"></text></g></svg></svg>