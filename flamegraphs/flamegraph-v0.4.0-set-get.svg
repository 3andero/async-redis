<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (30 samples, 0.03%)</title><rect x="0.0135%" y="245" width="0.0270%" height="15" fill="rgb(227,0,7)"/><text x="0.2635%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (25 samples, 0.02%)</title><rect x="0.0180%" y="229" width="0.0225%" height="15" fill="rgb(217,0,24)"/><text x="0.2680%" y="239.50"></text></g><g><title>async-redis`tokio::net::tcp::stream::TcpStream::new (13 samples, 0.01%)</title><rect x="0.0422%" y="245" width="0.0117%" height="15" fill="rgb(221,193,54)"/><text x="0.2922%" y="255.50"></text></g><g><title>async-redis`tokio::io::poll_evented::PollEvented&lt;E&gt;::new (13 samples, 0.01%)</title><rect x="0.0422%" y="229" width="0.0117%" height="15" fill="rgb(248,212,6)"/><text x="0.2922%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::new_with_interest_and_handle (13 samples, 0.01%)</title><rect x="0.0422%" y="213" width="0.0117%" height="15" fill="rgb(208,68,35)"/><text x="0.2922%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Inner::add_source (12 samples, 0.01%)</title><rect x="0.0431%" y="197" width="0.0108%" height="15" fill="rgb(232,128,0)"/><text x="0.2931%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (79 samples, 0.07%)</title><rect x="0.0000%" y="309" width="0.0710%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (79 samples, 0.07%)</title><rect x="0.0000%" y="293" width="0.0710%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (78 samples, 0.07%)</title><rect x="0.0009%" y="277" width="0.0701%" height="15" fill="rgb(218,30,26)"/><text x="0.2509%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (78 samples, 0.07%)</title><rect x="0.0009%" y="261" width="0.0701%" height="15" fill="rgb(220,122,19)"/><text x="0.2509%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (80 samples, 0.07%)</title><rect x="0.0000%" y="325" width="0.0719%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (85 samples, 0.08%)</title><rect x="0.0000%" y="373" width="0.0764%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (85 samples, 0.08%)</title><rect x="0.0000%" y="357" width="0.0764%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (85 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0764%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="351.50"></text></g><g><title>async-redis`0x1 (86 samples, 0.08%)</title><rect x="0.0000%" y="485" width="0.0773%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="495.50"></text></g><g><title>libdyld.dylib`start (86 samples, 0.08%)</title><rect x="0.0000%" y="469" width="0.0773%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`main (86 samples, 0.08%)</title><rect x="0.0000%" y="453" width="0.0773%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (86 samples, 0.08%)</title><rect x="0.0000%" y="437" width="0.0773%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (86 samples, 0.08%)</title><rect x="0.0000%" y="421" width="0.0773%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (86 samples, 0.08%)</title><rect x="0.0000%" y="405" width="0.0773%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`async_redis::main (86 samples, 0.08%)</title><rect x="0.0000%" y="389" width="0.0773%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (25 samples, 0.02%)</title><rect x="0.0782%" y="325" width="0.0225%" height="15" fill="rgb(235,183,28)"/><text x="0.3282%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (16 samples, 0.01%)</title><rect x="0.1078%" y="325" width="0.0144%" height="15" fill="rgb(221,5,38)"/><text x="0.3578%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (22 samples, 0.02%)</title><rect x="1.0305%" y="309" width="0.0198%" height="15" fill="rgb(247,18,42)"/><text x="1.2805%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (14 samples, 0.01%)</title><rect x="1.0844%" y="293" width="0.0126%" height="15" fill="rgb(241,131,45)"/><text x="1.3344%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (36 samples, 0.03%)</title><rect x="1.0665%" y="309" width="0.0323%" height="15" fill="rgb(249,31,29)"/><text x="1.3165%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (36 samples, 0.03%)</title><rect x="1.0988%" y="309" width="0.0323%" height="15" fill="rgb(225,111,53)"/><text x="1.3488%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (31 samples, 0.03%)</title><rect x="1.1312%" y="309" width="0.0279%" height="15" fill="rgb(238,160,17)"/><text x="1.3812%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (469 samples, 0.42%)</title><rect x="1.1590%" y="309" width="0.4214%" height="15" fill="rgb(214,148,48)"/><text x="1.4090%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (12 samples, 0.01%)</title><rect x="4.1194%" y="293" width="0.0108%" height="15" fill="rgb(232,36,49)"/><text x="4.3694%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (12 samples, 0.01%)</title><rect x="4.1194%" y="277" width="0.0108%" height="15" fill="rgb(209,103,24)"/><text x="4.3694%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (15 samples, 0.01%)</title><rect x="4.8678%" y="277" width="0.0135%" height="15" fill="rgb(229,88,8)"/><text x="5.1178%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (15 samples, 0.01%)</title><rect x="4.8894%" y="277" width="0.0135%" height="15" fill="rgb(213,181,19)"/><text x="5.1394%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (25 samples, 0.02%)</title><rect x="5.2012%" y="261" width="0.0225%" height="15" fill="rgb(254,191,54)"/><text x="5.4512%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (49 samples, 0.04%)</title><rect x="5.2236%" y="261" width="0.0440%" height="15" fill="rgb(241,83,37)"/><text x="5.4736%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4,559 samples, 4.10%)</title><rect x="5.2677%" y="261" width="4.0961%" height="15" fill="rgb(233,36,39)"/><text x="5.5177%" y="271.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (27 samples, 0.02%)</title><rect x="9.5865%" y="245" width="0.0243%" height="15" fill="rgb(226,3,54)"/><text x="9.8365%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (259 samples, 0.23%)</title><rect x="9.6135%" y="229" width="0.2327%" height="15" fill="rgb(245,192,40)"/><text x="9.8635%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (269 samples, 0.24%)</title><rect x="9.6108%" y="245" width="0.2417%" height="15" fill="rgb(238,167,29)"/><text x="9.8608%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (158 samples, 0.14%)</title><rect x="9.8525%" y="245" width="0.1420%" height="15" fill="rgb(232,182,51)"/><text x="10.1025%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (762 samples, 0.68%)</title><rect x="9.3691%" y="261" width="0.6846%" height="15" fill="rgb(231,60,39)"/><text x="9.6191%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (66 samples, 0.06%)</title><rect x="9.9944%" y="245" width="0.0593%" height="15" fill="rgb(208,69,12)"/><text x="10.2444%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (30 samples, 0.03%)</title><rect x="10.0573%" y="261" width="0.0270%" height="15" fill="rgb(235,93,37)"/><text x="10.3073%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (28 samples, 0.03%)</title><rect x="10.0843%" y="261" width="0.0252%" height="15" fill="rgb(213,116,39)"/><text x="10.3343%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (5,845 samples, 5.25%)</title><rect x="4.9029%" y="277" width="5.2515%" height="15" fill="rgb(222,207,29)"/><text x="5.1529%" y="287.50">async-..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (50 samples, 0.04%)</title><rect x="10.1094%" y="261" width="0.0449%" height="15" fill="rgb(206,96,30)"/><text x="10.3594%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::now (38 samples, 0.03%)</title><rect x="10.1669%" y="277" width="0.0341%" height="15" fill="rgb(218,138,4)"/><text x="10.4169%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (15 samples, 0.01%)</title><rect x="10.4598%" y="245" width="0.0135%" height="15" fill="rgb(250,191,14)"/><text x="10.7098%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (36 samples, 0.03%)</title><rect x="10.5012%" y="245" width="0.0323%" height="15" fill="rgb(239,60,40)"/><text x="10.7512%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (27 samples, 0.02%)</title><rect x="10.5335%" y="245" width="0.0243%" height="15" fill="rgb(206,27,48)"/><text x="10.7835%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (25 samples, 0.02%)</title><rect x="10.5578%" y="245" width="0.0225%" height="15" fill="rgb(225,35,8)"/><text x="10.8078%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (12 samples, 0.01%)</title><rect x="11.1121%" y="229" width="0.0108%" height="15" fill="rgb(250,213,24)"/><text x="11.3621%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (24 samples, 0.02%)</title><rect x="11.1256%" y="229" width="0.0216%" height="15" fill="rgb(247,123,22)"/><text x="11.3756%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (115 samples, 0.10%)</title><rect x="11.1480%" y="229" width="0.1033%" height="15" fill="rgb(231,138,38)"/><text x="11.3980%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (28 samples, 0.03%)</title><rect x="11.4077%" y="213" width="0.0252%" height="15" fill="rgb(231,145,46)"/><text x="11.6577%" y="223.50"></text></g><g><title> 32]&gt;::default (28 samples, 0.03%)</title><rect x="11.4077%" y="197" width="0.0252%" height="15" fill="rgb(251,118,11)"/><text x="11.6577%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (127 samples, 0.11%)</title><rect x="11.4329%" y="213" width="0.1141%" height="15" fill="rgb(217,147,25)"/><text x="11.6829%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (17 samples, 0.02%)</title><rect x="11.5524%" y="213" width="0.0153%" height="15" fill="rgb(247,81,37)"/><text x="11.8024%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (30 samples, 0.03%)</title><rect x="11.5784%" y="197" width="0.0270%" height="15" fill="rgb(209,12,38)"/><text x="11.8284%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (161 samples, 0.14%)</title><rect x="11.6054%" y="197" width="0.1447%" height="15" fill="rgb(227,1,9)"/><text x="11.8554%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (28 samples, 0.03%)</title><rect x="11.7886%" y="165" width="0.0252%" height="15" fill="rgb(248,47,43)"/><text x="12.0386%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (20 samples, 0.02%)</title><rect x="11.8138%" y="165" width="0.0180%" height="15" fill="rgb(221,10,30)"/><text x="12.0638%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (93 samples, 0.08%)</title><rect x="11.7617%" y="181" width="0.0836%" height="15" fill="rgb(210,229,1)"/><text x="12.0117%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.01%)</title><rect x="11.8318%" y="165" width="0.0135%" height="15" fill="rgb(222,148,37)"/><text x="12.0818%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (316 samples, 0.28%)</title><rect x="11.5676%" y="213" width="0.2839%" height="15" fill="rgb(234,67,33)"/><text x="11.8176%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (113 samples, 0.10%)</title><rect x="11.7500%" y="197" width="0.1015%" height="15" fill="rgb(247,98,35)"/><text x="12.0000%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (669 samples, 0.60%)</title><rect x="11.2514%" y="229" width="0.6011%" height="15" fill="rgb(247,138,52)"/><text x="11.5014%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (12 samples, 0.01%)</title><rect x="11.8524%" y="229" width="0.0108%" height="15" fill="rgb(213,79,30)"/><text x="12.1024%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (6,813 samples, 6.12%)</title><rect x="10.5802%" y="245" width="6.1212%" height="15" fill="rgb(246,177,23)"/><text x="10.8302%" y="255.50">async-re..</text></g><g><title>libsystem_kernel.dylib`kevent (5,381 samples, 4.83%)</title><rect x="11.8668%" y="229" width="4.8346%" height="15" fill="rgb(230,62,27)"/><text x="12.1168%" y="239.50">libsys..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (28 samples, 0.03%)</title><rect x="16.7014%" y="245" width="0.0252%" height="15" fill="rgb(216,154,8)"/><text x="16.9514%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (41 samples, 0.04%)</title><rect x="16.7751%" y="213" width="0.0368%" height="15" fill="rgb(244,35,45)"/><text x="17.0251%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (114 samples, 0.10%)</title><rect x="16.8119%" y="213" width="0.1024%" height="15" fill="rgb(251,115,12)"/><text x="17.0619%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (227 samples, 0.20%)</title><rect x="16.7571%" y="229" width="0.2039%" height="15" fill="rgb(240,54,50)"/><text x="17.0071%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (52 samples, 0.05%)</title><rect x="16.9143%" y="213" width="0.0467%" height="15" fill="rgb(233,84,52)"/><text x="17.1643%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (259 samples, 0.23%)</title><rect x="16.7302%" y="245" width="0.2327%" height="15" fill="rgb(207,117,47)"/><text x="16.9802%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (47 samples, 0.04%)</title><rect x="16.9629%" y="245" width="0.0422%" height="15" fill="rgb(249,43,39)"/><text x="17.2129%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (7,346 samples, 6.60%)</title><rect x="10.4059%" y="261" width="6.6001%" height="15" fill="rgb(209,38,44)"/><text x="10.6559%" y="271.50">async-red..</text></g><g><title>async-redis`core::ptr::drop_in_place (12 samples, 0.01%)</title><rect x="17.0060%" y="261" width="0.0108%" height="15" fill="rgb(236,212,23)"/><text x="17.2560%" y="271.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.01%)</title><rect x="17.0168%" y="261" width="0.0135%" height="15" fill="rgb(242,79,21)"/><text x="17.2668%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (180 samples, 0.16%)</title><rect x="17.0302%" y="261" width="0.1617%" height="15" fill="rgb(211,96,35)"/><text x="17.2802%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (16 samples, 0.01%)</title><rect x="17.1929%" y="261" width="0.0144%" height="15" fill="rgb(253,215,40)"/><text x="17.4429%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (25 samples, 0.02%)</title><rect x="17.2072%" y="261" width="0.0225%" height="15" fill="rgb(211,81,21)"/><text x="17.4572%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (26 samples, 0.02%)</title><rect x="17.2297%" y="261" width="0.0234%" height="15" fill="rgb(208,190,38)"/><text x="17.4797%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (143 samples, 0.13%)</title><rect x="17.3717%" y="245" width="0.1285%" height="15" fill="rgb(235,213,38)"/><text x="17.6217%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (99 samples, 0.09%)</title><rect x="17.5091%" y="245" width="0.0889%" height="15" fill="rgb(237,122,38)"/><text x="17.7591%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (76 samples, 0.07%)</title><rect x="17.5298%" y="229" width="0.0683%" height="15" fill="rgb(244,218,35)"/><text x="17.7798%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (122 samples, 0.11%)</title><rect x="17.5981%" y="245" width="0.1096%" height="15" fill="rgb(240,68,47)"/><text x="17.8481%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (84 samples, 0.08%)</title><rect x="17.6322%" y="229" width="0.0755%" height="15" fill="rgb(210,16,53)"/><text x="17.8822%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (518 samples, 0.47%)</title><rect x="17.2531%" y="261" width="0.4654%" height="15" fill="rgb(235,124,12)"/><text x="17.5031%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (12 samples, 0.01%)</title><rect x="17.7077%" y="245" width="0.0108%" height="15" fill="rgb(224,169,11)"/><text x="17.9577%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (142 samples, 0.13%)</title><rect x="17.7185%" y="261" width="0.1276%" height="15" fill="rgb(250,166,2)"/><text x="17.9685%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (122 samples, 0.11%)</title><rect x="17.7364%" y="245" width="0.1096%" height="15" fill="rgb(242,216,29)"/><text x="17.9864%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (8,670 samples, 7.79%)</title><rect x="10.2011%" y="277" width="7.7896%" height="15" fill="rgb(230,116,27)"/><text x="10.4511%" y="287.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (146 samples, 0.13%)</title><rect x="17.8595%" y="261" width="0.1312%" height="15" fill="rgb(228,99,48)"/><text x="18.1095%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (45 samples, 0.04%)</title><rect x="18.0033%" y="277" width="0.0404%" height="15" fill="rgb(253,11,6)"/><text x="18.2533%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (7,878 samples, 7.08%)</title><rect x="18.0437%" y="277" width="7.0780%" height="15" fill="rgb(247,143,39)"/><text x="18.2937%" y="287.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (41 samples, 0.04%)</title><rect x="25.1217%" y="277" width="0.0368%" height="15" fill="rgb(236,97,10)"/><text x="25.3717%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (19 samples, 0.02%)</title><rect x="25.1586%" y="277" width="0.0171%" height="15" fill="rgb(233,208,19)"/><text x="25.4086%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (236 samples, 0.21%)</title><rect x="25.1756%" y="277" width="0.2120%" height="15" fill="rgb(216,164,2)"/><text x="25.4256%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (23,745 samples, 21.33%)</title><rect x="4.1302%" y="293" width="21.3338%" height="15" fill="rgb(220,129,5)"/><text x="4.3802%" y="303.50">async-redis`&lt;tokio::runtime::park:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (66 samples, 0.06%)</title><rect x="25.4048%" y="277" width="0.0593%" height="15" fill="rgb(242,17,10)"/><text x="25.6548%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (17 samples, 0.02%)</title><rect x="25.5099%" y="229" width="0.0153%" height="15" fill="rgb(242,107,0)"/><text x="25.7599%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (230 samples, 0.21%)</title><rect x="25.4892%" y="245" width="0.2066%" height="15" fill="rgb(251,28,31)"/><text x="25.7392%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (190 samples, 0.17%)</title><rect x="25.5251%" y="229" width="0.1707%" height="15" fill="rgb(233,223,10)"/><text x="25.7751%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (245 samples, 0.22%)</title><rect x="25.4820%" y="261" width="0.2201%" height="15" fill="rgb(215,21,27)"/><text x="25.7320%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (22 samples, 0.02%)</title><rect x="25.7111%" y="261" width="0.0198%" height="15" fill="rgb(232,23,21)"/><text x="25.9611%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (298 samples, 0.27%)</title><rect x="25.4748%" y="277" width="0.2677%" height="15" fill="rgb(244,5,23)"/><text x="25.7248%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (311 samples, 0.28%)</title><rect x="25.4641%" y="293" width="0.2794%" height="15" fill="rgb(226,81,46)"/><text x="25.7141%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (21 samples, 0.02%)</title><rect x="25.7435%" y="293" width="0.0189%" height="15" fill="rgb(247,70,30)"/><text x="25.9935%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (236 samples, 0.21%)</title><rect x="25.7803%" y="277" width="0.2120%" height="15" fill="rgb(212,68,19)"/><text x="26.0303%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (13 samples, 0.01%)</title><rect x="26.0121%" y="277" width="0.0117%" height="15" fill="rgb(240,187,13)"/><text x="26.2621%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (290 samples, 0.26%)</title><rect x="25.7659%" y="293" width="0.2606%" height="15" fill="rgb(223,113,26)"/><text x="26.0159%" y="303.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (15 samples, 0.01%)</title><rect x="26.0265%" y="293" width="0.0135%" height="15" fill="rgb(206,192,2)"/><text x="26.2765%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (24 samples, 0.02%)</title><rect x="26.0409%" y="293" width="0.0216%" height="15" fill="rgb(241,108,4)"/><text x="26.2909%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (92 samples, 0.08%)</title><rect x="26.0687%" y="293" width="0.0827%" height="15" fill="rgb(247,173,49)"/><text x="26.3187%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (27,353 samples, 24.58%)</title><rect x="1.5804%" y="309" width="24.5755%" height="15" fill="rgb(224,114,35)"/><text x="1.8304%" y="319.50">async-redis`tokio::runtime::thread_pool..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (114 samples, 0.10%)</title><rect x="26.3347%" y="293" width="0.1024%" height="15" fill="rgb(245,159,27)"/><text x="26.5847%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (109 samples, 0.10%)</title><rect x="26.3391%" y="277" width="0.0979%" height="15" fill="rgb(245,172,44)"/><text x="26.5891%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (79 samples, 0.07%)</title><rect x="26.4371%" y="293" width="0.0710%" height="15" fill="rgb(236,23,11)"/><text x="26.6871%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (95 samples, 0.09%)</title><rect x="26.5638%" y="277" width="0.0854%" height="15" fill="rgb(205,117,38)"/><text x="26.8138%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2,171 samples, 1.95%)</title><rect x="26.6491%" y="277" width="1.9505%" height="15" fill="rgb(237,72,25)"/><text x="26.8991%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (30 samples, 0.03%)</title><rect x="28.5997%" y="277" width="0.0270%" height="15" fill="rgb(244,70,9)"/><text x="28.8497%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (13 samples, 0.01%)</title><rect x="28.6311%" y="277" width="0.0117%" height="15" fill="rgb(217,125,39)"/><text x="28.8811%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (87 samples, 0.08%)</title><rect x="28.6482%" y="277" width="0.0782%" height="15" fill="rgb(235,36,10)"/><text x="28.8982%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (86 samples, 0.08%)</title><rect x="28.6491%" y="261" width="0.0773%" height="15" fill="rgb(251,123,47)"/><text x="28.8991%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (73 samples, 0.07%)</title><rect x="28.7263%" y="277" width="0.0656%" height="15" fill="rgb(221,13,13)"/><text x="28.9763%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (21 samples, 0.02%)</title><rect x="28.7731%" y="261" width="0.0189%" height="15" fill="rgb(238,131,9)"/><text x="29.0231%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (68 samples, 0.06%)</title><rect x="28.7919%" y="277" width="0.0611%" height="15" fill="rgb(211,50,8)"/><text x="29.0419%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (2,623 samples, 2.36%)</title><rect x="26.5108%" y="293" width="2.3567%" height="15" fill="rgb(245,182,24)"/><text x="26.7608%" y="303.50">a..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (16 samples, 0.01%)</title><rect x="28.8530%" y="277" width="0.0144%" height="15" fill="rgb(242,14,37)"/><text x="29.1030%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (16 samples, 0.01%)</title><rect x="28.8692%" y="293" width="0.0144%" height="15" fill="rgb(246,228,12)"/><text x="29.1192%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (62 samples, 0.06%)</title><rect x="29.1414%" y="277" width="0.0557%" height="15" fill="rgb(213,55,15)"/><text x="29.3914%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (15 samples, 0.01%)</title><rect x="29.1971%" y="277" width="0.0135%" height="15" fill="rgb(209,9,3)"/><text x="29.4471%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.05%)</title><rect x="29.4038%" y="261" width="0.0530%" height="15" fill="rgb(230,59,30)"/><text x="29.6538%" y="271.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="30.5466%" y="229" width="0.0198%" height="15" fill="rgb(209,121,21)"/><text x="30.7966%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (19 samples, 0.02%)</title><rect x="30.5808%" y="213" width="0.0171%" height="15" fill="rgb(220,109,13)"/><text x="30.8308%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (48 samples, 0.04%)</title><rect x="30.7631%" y="197" width="0.0431%" height="15" fill="rgb(232,18,1)"/><text x="31.0131%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (32 samples, 0.03%)</title><rect x="30.7775%" y="181" width="0.0288%" height="15" fill="rgb(215,41,42)"/><text x="31.0275%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.02%)</title><rect x="30.8063%" y="197" width="0.0180%" height="15" fill="rgb(224,123,36)"/><text x="31.0563%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (309 samples, 0.28%)</title><rect x="31.0668%" y="165" width="0.2776%" height="15" fill="rgb(240,125,3)"/><text x="31.3168%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (264 samples, 0.24%)</title><rect x="31.1073%" y="149" width="0.2372%" height="15" fill="rgb(205,98,50)"/><text x="31.3573%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.02%)</title><rect x="31.3445%" y="165" width="0.0189%" height="15" fill="rgb(205,185,37)"/><text x="31.5945%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (592 samples, 0.53%)</title><rect x="30.8368%" y="181" width="0.5319%" height="15" fill="rgb(238,207,15)"/><text x="31.0868%" y="191.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (672 samples, 0.60%)</title><rect x="30.8251%" y="197" width="0.6038%" height="15" fill="rgb(213,199,42)"/><text x="31.0751%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (67 samples, 0.06%)</title><rect x="31.3687%" y="181" width="0.0602%" height="15" fill="rgb(235,201,11)"/><text x="31.6187%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (918 samples, 0.82%)</title><rect x="30.6068%" y="213" width="0.8248%" height="15" fill="rgb(207,46,11)"/><text x="30.8568%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (30 samples, 0.03%)</title><rect x="31.4316%" y="213" width="0.0270%" height="15" fill="rgb(241,35,35)"/><text x="31.6816%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (994 samples, 0.89%)</title><rect x="30.5664%" y="229" width="0.8931%" height="15" fill="rgb(243,32,47)"/><text x="30.8164%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (65 samples, 0.06%)</title><rect x="32.5080%" y="181" width="0.0584%" height="15" fill="rgb(247,202,23)"/><text x="32.7580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.04%)</title><rect x="32.5223%" y="165" width="0.0440%" height="15" fill="rgb(219,102,11)"/><text x="32.7723%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.04%)</title><rect x="32.5250%" y="149" width="0.0413%" height="15" fill="rgb(243,110,44)"/><text x="32.7750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.04%)</title><rect x="32.6364%" y="149" width="0.0359%" height="15" fill="rgb(222,74,54)"/><text x="32.8864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (119 samples, 0.11%)</title><rect x="32.5664%" y="181" width="0.1069%" height="15" fill="rgb(216,99,12)"/><text x="32.8164%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.07%)</title><rect x="32.6077%" y="165" width="0.0656%" height="15" fill="rgb(226,22,26)"/><text x="32.8577%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.02%)</title><rect x="32.6733%" y="181" width="0.0198%" height="15" fill="rgb(217,163,10)"/><text x="32.9233%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (249 samples, 0.22%)</title><rect x="32.4702%" y="197" width="0.2237%" height="15" fill="rgb(213,25,53)"/><text x="32.7202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.02%)</title><rect x="32.7029%" y="181" width="0.0162%" height="15" fill="rgb(252,105,26)"/><text x="32.9529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.02%)</title><rect x="32.7038%" y="165" width="0.0153%" height="15" fill="rgb(220,39,43)"/><text x="32.9538%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.02%)</title><rect x="32.6975%" y="197" width="0.0225%" height="15" fill="rgb(229,68,48)"/><text x="32.9475%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.03%)</title><rect x="32.7721%" y="165" width="0.0296%" height="15" fill="rgb(252,8,32)"/><text x="33.0221%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (112 samples, 0.10%)</title><rect x="32.7200%" y="197" width="0.1006%" height="15" fill="rgb(223,20,43)"/><text x="32.9700%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.08%)</title><rect x="32.7433%" y="181" width="0.0773%" height="15" fill="rgb(229,81,49)"/><text x="32.9933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.02%)</title><rect x="32.8017%" y="165" width="0.0189%" height="15" fill="rgb(236,28,36)"/><text x="33.0517%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (467 samples, 0.42%)</title><rect x="32.4046%" y="213" width="0.4196%" height="15" fill="rgb(249,185,26)"/><text x="32.6546%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;&amp;str&gt;&gt;::from (14 samples, 0.01%)</title><rect x="32.8242%" y="213" width="0.0126%" height="15" fill="rgb(249,174,33)"/><text x="33.0742%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="32.8368%" y="213" width="0.0314%" height="15" fill="rgb(233,201,37)"/><text x="33.0868%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="32.8682%" y="213" width="0.0162%" height="15" fill="rgb(221,78,26)"/><text x="33.1182%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="32.8844%" y="213" width="0.0144%" height="15" fill="rgb(250,127,30)"/><text x="33.1344%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (17 samples, 0.02%)</title><rect x="33.3669%" y="181" width="0.0153%" height="15" fill="rgb(230,49,44)"/><text x="33.6169%" y="191.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="33.7820%" y="165" width="0.0135%" height="15" fill="rgb(229,67,23)"/><text x="34.0320%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="33.7954%" y="165" width="0.0171%" height="15" fill="rgb(249,83,47)"/><text x="34.0454%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (47 samples, 0.04%)</title><rect x="33.9248%" y="149" width="0.0422%" height="15" fill="rgb(215,43,3)"/><text x="34.1748%" y="159.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (31 samples, 0.03%)</title><rect x="33.9670%" y="149" width="0.0279%" height="15" fill="rgb(238,154,13)"/><text x="34.2170%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`cerror (16 samples, 0.01%)</title><rect x="34.3714%" y="101" width="0.0144%" height="15" fill="rgb(219,56,2)"/><text x="34.6214%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (31 samples, 0.03%)</title><rect x="34.3857%" y="101" width="0.0279%" height="15" fill="rgb(233,0,4)"/><text x="34.6357%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (237 samples, 0.21%)</title><rect x="34.2599%" y="117" width="0.2129%" height="15" fill="rgb(235,30,7)"/><text x="34.5099%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (66 samples, 0.06%)</title><rect x="34.4136%" y="101" width="0.0593%" height="15" fill="rgb(250,79,13)"/><text x="34.6636%" y="111.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (29 samples, 0.03%)</title><rect x="34.4729%" y="117" width="0.0261%" height="15" fill="rgb(211,146,34)"/><text x="34.7229%" y="127.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (28 samples, 0.03%)</title><rect x="34.4998%" y="117" width="0.0252%" height="15" fill="rgb(228,22,38)"/><text x="34.7498%" y="127.50"></text></g><g><title>libsystem_c.dylib`recv (23 samples, 0.02%)</title><rect x="34.5250%" y="117" width="0.0207%" height="15" fill="rgb(235,168,5)"/><text x="34.7750%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__error (29 samples, 0.03%)</title><rect x="34.5457%" y="117" width="0.0261%" height="15" fill="rgb(221,155,16)"/><text x="34.7957%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (29,109 samples, 26.15%)</title><rect x="34.5717%" y="117" width="26.1532%" height="15" fill="rgb(215,215,53)"/><text x="34.8217%" y="127.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (29,582 samples, 26.58%)</title><rect x="34.1818%" y="133" width="26.5781%" height="15" fill="rgb(223,4,10)"/><text x="34.4318%" y="143.50">async-redis`&lt;&amp;mio::net::tcp::stream::TcpStr..</text></g><g><title>libsystem_kernel.dylib`cerror (39 samples, 0.04%)</title><rect x="60.7249%" y="117" width="0.0350%" height="15" fill="rgb(234,103,6)"/><text x="60.9749%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (22 samples, 0.02%)</title><rect x="60.7689%" y="133" width="0.0198%" height="15" fill="rgb(227,97,0)"/><text x="61.0189%" y="143.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (34 samples, 0.03%)</title><rect x="61.1409%" y="117" width="0.0305%" height="15" fill="rgb(234,150,53)"/><text x="61.3909%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (156 samples, 0.14%)</title><rect x="61.1714%" y="117" width="0.1402%" height="15" fill="rgb(228,201,54)"/><text x="61.4214%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (19 samples, 0.02%)</title><rect x="61.2945%" y="101" width="0.0171%" height="15" fill="rgb(222,22,37)"/><text x="61.5445%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (18 samples, 0.02%)</title><rect x="61.2954%" y="85" width="0.0162%" height="15" fill="rgb(237,53,32)"/><text x="61.5454%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (17 samples, 0.02%)</title><rect x="61.3116%" y="117" width="0.0153%" height="15" fill="rgb(233,25,53)"/><text x="61.5616%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (657 samples, 0.59%)</title><rect x="60.7941%" y="133" width="0.5903%" height="15" fill="rgb(210,40,34)"/><text x="61.0441%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (64 samples, 0.06%)</title><rect x="61.3268%" y="117" width="0.0575%" height="15" fill="rgb(241,220,44)"/><text x="61.5768%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (30,506 samples, 27.41%)</title><rect x="33.9949%" y="149" width="27.4083%" height="15" fill="rgb(235,28,35)"/><text x="34.2449%" y="159.50">async-redis`tokio::io::driver::registration:..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (21 samples, 0.02%)</title><rect x="61.3843%" y="133" width="0.0189%" height="15" fill="rgb(210,56,17)"/><text x="61.6343%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (30,731 samples, 27.61%)</title><rect x="33.8125%" y="165" width="27.6105%" height="15" fill="rgb(224,130,29)"/><text x="34.0625%" y="175.50">async-redis`&lt;tokio::net::tcp::stream::TcpStr..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (22 samples, 0.02%)</title><rect x="61.4032%" y="149" width="0.0198%" height="15" fill="rgb(235,212,8)"/><text x="61.6532%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (76 samples, 0.07%)</title><rect x="61.8776%" y="133" width="0.0683%" height="15" fill="rgb(223,33,50)"/><text x="62.1276%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (30 samples, 0.03%)</title><rect x="61.9189%" y="117" width="0.0270%" height="15" fill="rgb(219,149,13)"/><text x="62.1689%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (17 samples, 0.02%)</title><rect x="61.9567%" y="133" width="0.0153%" height="15" fill="rgb(250,156,29)"/><text x="62.2067%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (15 samples, 0.01%)</title><rect x="61.9585%" y="117" width="0.0135%" height="15" fill="rgb(216,193,19)"/><text x="62.2085%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (618 samples, 0.56%)</title><rect x="61.4472%" y="149" width="0.5552%" height="15" fill="rgb(216,135,14)"/><text x="61.6972%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (34 samples, 0.03%)</title><rect x="61.9719%" y="133" width="0.0305%" height="15" fill="rgb(241,47,5)"/><text x="62.2219%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (647 samples, 0.58%)</title><rect x="61.4230%" y="165" width="0.5813%" height="15" fill="rgb(233,42,35)"/><text x="61.6730%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.03%)</title><rect x="62.0142%" y="165" width="0.0252%" height="15" fill="rgb(231,13,6)"/><text x="62.2642%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="62.3331%" y="149" width="0.0305%" height="15" fill="rgb(207,181,40)"/><text x="62.5831%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (17 samples, 0.02%)</title><rect x="62.3484%" y="133" width="0.0153%" height="15" fill="rgb(254,173,49)"/><text x="62.5984%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (31 samples, 0.03%)</title><rect x="62.5254%" y="85" width="0.0279%" height="15" fill="rgb(221,1,38)"/><text x="62.7754%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (250 samples, 0.22%)</title><rect x="62.3987%" y="133" width="0.2246%" height="15" fill="rgb(206,124,46)"/><text x="62.6487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (234 samples, 0.21%)</title><rect x="62.4131%" y="117" width="0.2102%" height="15" fill="rgb(249,21,11)"/><text x="62.6631%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (227 samples, 0.20%)</title><rect x="62.4194%" y="101" width="0.2039%" height="15" fill="rgb(222,201,40)"/><text x="62.6694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (76 samples, 0.07%)</title><rect x="62.5550%" y="85" width="0.0683%" height="15" fill="rgb(235,61,29)"/><text x="62.8050%" y="95.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (287 samples, 0.26%)</title><rect x="62.3726%" y="149" width="0.2579%" height="15" fill="rgb(219,207,3)"/><text x="62.6226%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (198 samples, 0.18%)</title><rect x="64.1821%" y="117" width="0.1779%" height="15" fill="rgb(222,56,46)"/><text x="64.4321%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (135 samples, 0.12%)</title><rect x="64.2387%" y="101" width="0.1213%" height="15" fill="rgb(239,76,54)"/><text x="64.4887%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,753 samples, 1.57%)</title><rect x="62.7994%" y="133" width="1.5750%" height="15" fill="rgb(231,124,27)"/><text x="63.0494%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (16 samples, 0.01%)</title><rect x="64.3600%" y="117" width="0.0144%" height="15" fill="rgb(249,195,6)"/><text x="64.6100%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (110 samples, 0.10%)</title><rect x="64.3816%" y="133" width="0.0988%" height="15" fill="rgb(237,174,47)"/><text x="64.6316%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (81 samples, 0.07%)</title><rect x="64.4076%" y="117" width="0.0728%" height="15" fill="rgb(206,201,31)"/><text x="64.6576%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,222 samples, 2.00%)</title><rect x="62.6305%" y="149" width="1.9964%" height="15" fill="rgb(231,57,52)"/><text x="62.8805%" y="159.50">a..</text></g><g><title>async-redis`bytes::bytes::shared_drop (156 samples, 0.14%)</title><rect x="64.4867%" y="133" width="0.1402%" height="15" fill="rgb(248,177,22)"/><text x="64.7367%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (41 samples, 0.04%)</title><rect x="64.6844%" y="133" width="0.0368%" height="15" fill="rgb(215,211,37)"/><text x="64.9344%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (29 samples, 0.03%)</title><rect x="64.6952%" y="117" width="0.0261%" height="15" fill="rgb(241,128,51)"/><text x="64.9452%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (118 samples, 0.11%)</title><rect x="64.6269%" y="149" width="0.1060%" height="15" fill="rgb(227,165,31)"/><text x="64.8769%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (13 samples, 0.01%)</title><rect x="64.7212%" y="133" width="0.0117%" height="15" fill="rgb(228,167,24)"/><text x="64.9712%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (27 samples, 0.02%)</title><rect x="64.7329%" y="149" width="0.0243%" height="15" fill="rgb(228,143,12)"/><text x="64.9829%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.02%)</title><rect x="64.9827%" y="53" width="0.0153%" height="15" fill="rgb(249,149,8)"/><text x="65.2327%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (82 samples, 0.07%)</title><rect x="65.0015%" y="53" width="0.0737%" height="15" fill="rgb(243,35,44)"/><text x="65.2515%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.02%)</title><rect x="65.0527%" y="37" width="0.0225%" height="15" fill="rgb(246,89,9)"/><text x="65.3027%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (243 samples, 0.22%)</title><rect x="64.8587%" y="69" width="0.2183%" height="15" fill="rgb(233,213,13)"/><text x="65.1087%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (267 samples, 0.24%)</title><rect x="64.8398%" y="101" width="0.2399%" height="15" fill="rgb(233,141,41)"/><text x="65.0898%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (252 samples, 0.23%)</title><rect x="64.8533%" y="85" width="0.2264%" height="15" fill="rgb(239,167,4)"/><text x="65.1033%" y="95.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (335 samples, 0.30%)</title><rect x="64.7859%" y="117" width="0.3010%" height="15" fill="rgb(209,217,16)"/><text x="65.0359%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (359 samples, 0.32%)</title><rect x="64.7715%" y="133" width="0.3225%" height="15" fill="rgb(219,88,35)"/><text x="65.0215%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (428 samples, 0.38%)</title><rect x="64.7571%" y="149" width="0.3845%" height="15" fill="rgb(220,193,23)"/><text x="65.0071%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (53 samples, 0.05%)</title><rect x="65.0941%" y="133" width="0.0476%" height="15" fill="rgb(230,90,52)"/><text x="65.3441%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (19 samples, 0.02%)</title><rect x="65.1417%" y="149" width="0.0171%" height="15" fill="rgb(252,106,19)"/><text x="65.3917%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (75 samples, 0.07%)</title><rect x="65.1588%" y="149" width="0.0674%" height="15" fill="rgb(206,74,20)"/><text x="65.4088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (44 samples, 0.04%)</title><rect x="65.2468%" y="133" width="0.0395%" height="15" fill="rgb(230,138,44)"/><text x="65.4968%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (40 samples, 0.04%)</title><rect x="65.2504%" y="117" width="0.0359%" height="15" fill="rgb(235,182,43)"/><text x="65.5004%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.06%)</title><rect x="65.2306%" y="149" width="0.0602%" height="15" fill="rgb(242,16,51)"/><text x="65.4806%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.04%)</title><rect x="65.2908%" y="149" width="0.0386%" height="15" fill="rgb(248,9,4)"/><text x="65.5408%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode (3,672 samples, 3.30%)</title><rect x="62.0393%" y="165" width="3.2991%" height="15" fill="rgb(210,31,22)"/><text x="62.2893%" y="175.50">asy..</text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (12 samples, 0.01%)</title><rect x="65.3465%" y="165" width="0.0108%" height="15" fill="rgb(239,54,39)"/><text x="65.5965%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.03%)</title><rect x="65.4238%" y="133" width="0.0288%" height="15" fill="rgb(230,99,41)"/><text x="65.6738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.02%)</title><rect x="65.4283%" y="117" width="0.0243%" height="15" fill="rgb(253,106,12)"/><text x="65.6783%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (58 samples, 0.05%)</title><rect x="65.4013%" y="149" width="0.0521%" height="15" fill="rgb(213,46,41)"/><text x="65.6513%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (74 samples, 0.07%)</title><rect x="65.5505%" y="117" width="0.0665%" height="15" fill="rgb(215,133,35)"/><text x="65.8005%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (147 samples, 0.13%)</title><rect x="65.4966%" y="133" width="0.1321%" height="15" fill="rgb(213,28,5)"/><text x="65.7466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.01%)</title><rect x="65.6170%" y="117" width="0.0117%" height="15" fill="rgb(215,77,49)"/><text x="65.8670%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (197 samples, 0.18%)</title><rect x="65.4535%" y="149" width="0.1770%" height="15" fill="rgb(248,100,22)"/><text x="65.7035%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.01%)</title><rect x="65.6304%" y="149" width="0.0117%" height="15" fill="rgb(208,67,9)"/><text x="65.8804%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (319 samples, 0.29%)</title><rect x="65.3573%" y="165" width="0.2866%" height="15" fill="rgb(219,133,21)"/><text x="65.6073%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (77 samples, 0.07%)</title><rect x="65.6475%" y="165" width="0.0692%" height="15" fill="rgb(246,46,29)"/><text x="65.8975%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63 samples, 0.06%)</title><rect x="65.6601%" y="149" width="0.0566%" height="15" fill="rgb(246,185,52)"/><text x="65.9101%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (13 samples, 0.01%)</title><rect x="65.7167%" y="165" width="0.0117%" height="15" fill="rgb(252,136,11)"/><text x="65.9667%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (28 samples, 0.03%)</title><rect x="65.7284%" y="165" width="0.0252%" height="15" fill="rgb(219,138,53)"/><text x="65.9784%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (14 samples, 0.01%)</title><rect x="65.7535%" y="165" width="0.0126%" height="15" fill="rgb(211,51,23)"/><text x="66.0035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (105 samples, 0.09%)</title><rect x="65.9189%" y="133" width="0.0943%" height="15" fill="rgb(247,221,28)"/><text x="66.1689%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (46 samples, 0.04%)</title><rect x="65.9719%" y="117" width="0.0413%" height="15" fill="rgb(251,222,45)"/><text x="66.2219%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (47 samples, 0.04%)</title><rect x="66.1498%" y="117" width="0.0422%" height="15" fill="rgb(217,162,53)"/><text x="66.3998%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (138 samples, 0.12%)</title><rect x="66.1947%" y="117" width="0.1240%" height="15" fill="rgb(229,93,14)"/><text x="66.4447%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.03%)</title><rect x="66.2890%" y="101" width="0.0296%" height="15" fill="rgb(209,67,49)"/><text x="66.5390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (474 samples, 0.43%)</title><rect x="65.8937%" y="149" width="0.4259%" height="15" fill="rgb(213,87,29)"/><text x="66.1437%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (340 samples, 0.31%)</title><rect x="66.0141%" y="133" width="0.3055%" height="15" fill="rgb(205,151,52)"/><text x="66.2641%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (622 samples, 0.56%)</title><rect x="65.7661%" y="165" width="0.5588%" height="15" fill="rgb(253,215,39)"/><text x="66.0161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (39 samples, 0.04%)</title><rect x="66.3348%" y="165" width="0.0350%" height="15" fill="rgb(221,220,41)"/><text x="66.5848%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.02%)</title><rect x="66.4031%" y="149" width="0.0207%" height="15" fill="rgb(218,133,21)"/><text x="66.6531%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.02%)</title><rect x="66.4040%" y="133" width="0.0198%" height="15" fill="rgb(221,193,43)"/><text x="66.6540%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.06%)</title><rect x="66.3699%" y="165" width="0.0557%" height="15" fill="rgb(240,128,52)"/><text x="66.6199%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 0.03%)</title><rect x="66.5127%" y="133" width="0.0279%" height="15" fill="rgb(253,114,12)"/><text x="66.7627%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (136 samples, 0.12%)</title><rect x="66.4256%" y="165" width="0.1222%" height="15" fill="rgb(215,223,47)"/><text x="66.6756%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (79 samples, 0.07%)</title><rect x="66.4768%" y="149" width="0.0710%" height="15" fill="rgb(248,225,23)"/><text x="66.7268%" y="159.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38,661 samples, 34.74%)</title><rect x="33.3821%" y="181" width="34.7352%" height="15" fill="rgb(250,108,0)"/><text x="33.6321%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,737 samples, 1.56%)</title><rect x="66.5568%" y="165" width="1.5606%" height="15" fill="rgb(228,208,7)"/><text x="66.8068%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (22 samples, 0.02%)</title><rect x="68.1174%" y="181" width="0.0198%" height="15" fill="rgb(244,45,10)"/><text x="68.3674%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="68.1371%" y="181" width="0.0171%" height="15" fill="rgb(207,125,25)"/><text x="68.3871%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (29 samples, 0.03%)</title><rect x="68.2845%" y="149" width="0.0261%" height="15" fill="rgb(210,195,18)"/><text x="68.5345%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (50 samples, 0.04%)</title><rect x="68.3105%" y="149" width="0.0449%" height="15" fill="rgb(249,80,12)"/><text x="68.5605%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (135 samples, 0.12%)</title><rect x="68.3555%" y="149" width="0.1213%" height="15" fill="rgb(221,65,9)"/><text x="68.6055%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (38 samples, 0.03%)</title><rect x="68.4768%" y="149" width="0.0341%" height="15" fill="rgb(235,49,36)"/><text x="68.7268%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (19 samples, 0.02%)</title><rect x="68.5109%" y="149" width="0.0171%" height="15" fill="rgb(225,32,20)"/><text x="68.7609%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (19 samples, 0.02%)</title><rect x="68.5648%" y="133" width="0.0171%" height="15" fill="rgb(215,141,46)"/><text x="68.8148%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="68.6052%" y="117" width="0.0189%" height="15" fill="rgb(250,160,47)"/><text x="68.8552%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (266 samples, 0.24%)</title><rect x="68.6942%" y="101" width="0.2390%" height="15" fill="rgb(216,222,40)"/><text x="68.9442%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (345 samples, 0.31%)</title><rect x="68.6241%" y="117" width="0.3100%" height="15" fill="rgb(234,217,39)"/><text x="68.8741%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (22 samples, 0.02%)</title><rect x="68.9341%" y="117" width="0.0198%" height="15" fill="rgb(207,178,40)"/><text x="69.1841%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (28 samples, 0.03%)</title><rect x="68.9538%" y="117" width="0.0252%" height="15" fill="rgb(221,136,13)"/><text x="69.2038%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (55 samples, 0.05%)</title><rect x="68.9790%" y="117" width="0.0494%" height="15" fill="rgb(249,199,10)"/><text x="69.2290%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (526 samples, 0.47%)</title><rect x="68.5819%" y="133" width="0.4726%" height="15" fill="rgb(249,222,13)"/><text x="68.8319%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.03%)</title><rect x="69.0284%" y="117" width="0.0261%" height="15" fill="rgb(244,185,38)"/><text x="69.2784%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (18 samples, 0.02%)</title><rect x="69.0563%" y="133" width="0.0162%" height="15" fill="rgb(236,202,9)"/><text x="69.3063%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (22 samples, 0.02%)</title><rect x="69.0724%" y="133" width="0.0198%" height="15" fill="rgb(250,229,37)"/><text x="69.3224%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (56 samples, 0.05%)</title><rect x="69.0922%" y="133" width="0.0503%" height="15" fill="rgb(206,174,23)"/><text x="69.3422%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (18 samples, 0.02%)</title><rect x="69.1263%" y="117" width="0.0162%" height="15" fill="rgb(211,33,43)"/><text x="69.3763%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (24 samples, 0.02%)</title><rect x="69.1425%" y="133" width="0.0216%" height="15" fill="rgb(245,58,50)"/><text x="69.3925%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (717 samples, 0.64%)</title><rect x="68.5334%" y="149" width="0.6442%" height="15" fill="rgb(244,68,36)"/><text x="68.7834%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.01%)</title><rect x="69.1641%" y="133" width="0.0135%" height="15" fill="rgb(232,229,15)"/><text x="69.4141%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (87 samples, 0.08%)</title><rect x="69.1776%" y="149" width="0.0782%" height="15" fill="rgb(254,30,23)"/><text x="69.4276%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1,210 samples, 1.09%)</title><rect x="68.1758%" y="165" width="1.0871%" height="15" fill="rgb(235,160,14)"/><text x="68.4258%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (32 samples, 0.03%)</title><rect x="69.2710%" y="165" width="0.0288%" height="15" fill="rgb(212,155,44)"/><text x="69.5210%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (21 samples, 0.02%)</title><rect x="69.2997%" y="165" width="0.0189%" height="15" fill="rgb(226,2,50)"/><text x="69.5497%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1,289 samples, 1.16%)</title><rect x="68.1641%" y="181" width="1.1581%" height="15" fill="rgb(234,177,6)"/><text x="68.4141%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (16 samples, 0.01%)</title><rect x="69.3231%" y="181" width="0.0144%" height="15" fill="rgb(217,24,9)"/><text x="69.5731%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (31 samples, 0.03%)</title><rect x="69.3438%" y="181" width="0.0279%" height="15" fill="rgb(220,13,46)"/><text x="69.5938%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (45 samples, 0.04%)</title><rect x="69.3905%" y="165" width="0.0404%" height="15" fill="rgb(239,221,27)"/><text x="69.6405%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="69.4309%" y="165" width="0.0261%" height="15" fill="rgb(222,198,25)"/><text x="69.6809%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (79 samples, 0.07%)</title><rect x="69.4570%" y="165" width="0.0710%" height="15" fill="rgb(211,99,13)"/><text x="69.7070%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (38 samples, 0.03%)</title><rect x="69.4938%" y="149" width="0.0341%" height="15" fill="rgb(232,111,31)"/><text x="69.7438%" y="159.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (16 samples, 0.01%)</title><rect x="69.5324%" y="165" width="0.0144%" height="15" fill="rgb(245,82,37)"/><text x="69.7824%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (26 samples, 0.02%)</title><rect x="69.6043%" y="149" width="0.0234%" height="15" fill="rgb(227,149,46)"/><text x="69.8543%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (18 samples, 0.02%)</title><rect x="69.6349%" y="101" width="0.0162%" height="15" fill="rgb(218,36,50)"/><text x="69.8849%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (16 samples, 0.01%)</title><rect x="69.6367%" y="85" width="0.0144%" height="15" fill="rgb(226,80,48)"/><text x="69.8867%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (21 samples, 0.02%)</title><rect x="69.6340%" y="117" width="0.0189%" height="15" fill="rgb(238,224,15)"/><text x="69.8840%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.02%)</title><rect x="69.6897%" y="101" width="0.0225%" height="15" fill="rgb(241,136,10)"/><text x="69.9397%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.01%)</title><rect x="69.7005%" y="85" width="0.0117%" height="15" fill="rgb(208,32,45)"/><text x="69.9505%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (69 samples, 0.06%)</title><rect x="69.6546%" y="117" width="0.0620%" height="15" fill="rgb(207,135,9)"/><text x="69.9046%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (17 samples, 0.02%)</title><rect x="69.7166%" y="117" width="0.0153%" height="15" fill="rgb(206,86,44)"/><text x="69.9666%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (112 samples, 0.10%)</title><rect x="69.6331%" y="133" width="0.1006%" height="15" fill="rgb(245,177,15)"/><text x="69.8831%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (121 samples, 0.11%)</title><rect x="69.6277%" y="149" width="0.1087%" height="15" fill="rgb(206,64,50)"/><text x="69.8777%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (133 samples, 0.12%)</title><rect x="69.8379%" y="101" width="0.1195%" height="15" fill="rgb(234,36,40)"/><text x="70.0879%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (99 samples, 0.09%)</title><rect x="69.8685%" y="85" width="0.0889%" height="15" fill="rgb(213,64,8)"/><text x="70.1185%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (155 samples, 0.14%)</title><rect x="69.8271%" y="117" width="0.1393%" height="15" fill="rgb(210,75,36)"/><text x="70.0771%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (32 samples, 0.03%)</title><rect x="69.9727%" y="117" width="0.0288%" height="15" fill="rgb(229,88,21)"/><text x="70.2227%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (82 samples, 0.07%)</title><rect x="70.2036%" y="101" width="0.0737%" height="15" fill="rgb(252,204,47)"/><text x="70.4536%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (66 samples, 0.06%)</title><rect x="70.2871%" y="85" width="0.0593%" height="15" fill="rgb(208,77,27)"/><text x="70.5371%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (64 samples, 0.06%)</title><rect x="70.2889%" y="69" width="0.0575%" height="15" fill="rgb(221,76,26)"/><text x="70.5389%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (74 samples, 0.07%)</title><rect x="70.2809%" y="101" width="0.0665%" height="15" fill="rgb(225,139,18)"/><text x="70.5309%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (64 samples, 0.06%)</title><rect x="70.5046%" y="69" width="0.0575%" height="15" fill="rgb(230,137,11)"/><text x="70.7546%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (140 samples, 0.13%)</title><rect x="70.4453%" y="85" width="0.1258%" height="15" fill="rgb(212,28,1)"/><text x="70.6953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (250 samples, 0.22%)</title><rect x="70.3473%" y="101" width="0.2246%" height="15" fill="rgb(248,164,17)"/><text x="70.5973%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (665 samples, 0.60%)</title><rect x="70.0014%" y="117" width="0.5975%" height="15" fill="rgb(222,171,42)"/><text x="70.2514%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (23 samples, 0.02%)</title><rect x="70.5782%" y="101" width="0.0207%" height="15" fill="rgb(243,84,45)"/><text x="70.8282%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (19 samples, 0.02%)</title><rect x="70.6591%" y="101" width="0.0171%" height="15" fill="rgb(252,49,23)"/><text x="70.9091%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (92 samples, 0.08%)</title><rect x="70.6034%" y="117" width="0.0827%" height="15" fill="rgb(215,19,7)"/><text x="70.8534%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (1,007 samples, 0.90%)</title><rect x="69.8029%" y="133" width="0.9047%" height="15" fill="rgb(238,81,41)"/><text x="70.0529%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (14 samples, 0.01%)</title><rect x="70.6950%" y="117" width="0.0126%" height="15" fill="rgb(210,199,37)"/><text x="70.9450%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (1,113 samples, 1.00%)</title><rect x="69.7364%" y="149" width="1.0000%" height="15" fill="rgb(244,192,49)"/><text x="69.9864%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (31 samples, 0.03%)</title><rect x="70.7085%" y="133" width="0.0279%" height="15" fill="rgb(226,211,11)"/><text x="70.9585%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (1,344 samples, 1.21%)</title><rect x="69.5468%" y="165" width="1.2075%" height="15" fill="rgb(236,162,54)"/><text x="69.7968%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.01%)</title><rect x="70.7436%" y="149" width="0.0108%" height="15" fill="rgb(220,229,9)"/><text x="70.9936%" y="159.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (31 samples, 0.03%)</title><rect x="70.7579%" y="165" width="0.0279%" height="15" fill="rgb(250,87,22)"/><text x="71.0079%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (17 samples, 0.02%)</title><rect x="70.7948%" y="165" width="0.0153%" height="15" fill="rgb(239,43,17)"/><text x="71.0448%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (1,610 samples, 1.45%)</title><rect x="69.3716%" y="181" width="1.4465%" height="15" fill="rgb(231,177,25)"/><text x="69.6216%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (27 samples, 0.02%)</title><rect x="70.8208%" y="181" width="0.0243%" height="15" fill="rgb(219,179,1)"/><text x="71.0708%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (15 samples, 0.01%)</title><rect x="70.8559%" y="181" width="0.0135%" height="15" fill="rgb(238,219,53)"/><text x="71.1059%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="70.8720%" y="181" width="0.0171%" height="15" fill="rgb(232,167,36)"/><text x="71.1220%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode (18 samples, 0.02%)</title><rect x="70.8891%" y="181" width="0.0162%" height="15" fill="rgb(244,19,51)"/><text x="71.1391%" y="191.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (17 samples, 0.02%)</title><rect x="70.9053%" y="181" width="0.0153%" height="15" fill="rgb(224,6,22)"/><text x="71.1553%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (30 samples, 0.03%)</title><rect x="70.9206%" y="181" width="0.0270%" height="15" fill="rgb(224,145,5)"/><text x="71.1706%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (61 samples, 0.05%)</title><rect x="70.9475%" y="181" width="0.0548%" height="15" fill="rgb(234,130,49)"/><text x="71.1975%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (319 samples, 0.29%)</title><rect x="71.1119%" y="133" width="0.2866%" height="15" fill="rgb(254,6,2)"/><text x="71.3619%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (396 samples, 0.36%)</title><rect x="71.0454%" y="149" width="0.3558%" height="15" fill="rgb(208,96,46)"/><text x="71.2954%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (138 samples, 0.12%)</title><rect x="71.4560%" y="133" width="0.1240%" height="15" fill="rgb(239,3,39)"/><text x="71.7060%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (202 samples, 0.18%)</title><rect x="71.4012%" y="149" width="0.1815%" height="15" fill="rgb(233,210,1)"/><text x="71.6512%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (615 samples, 0.55%)</title><rect x="71.0392%" y="165" width="0.5526%" height="15" fill="rgb(244,137,37)"/><text x="71.2892%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (30 samples, 0.03%)</title><rect x="71.5917%" y="165" width="0.0270%" height="15" fill="rgb(240,136,2)"/><text x="71.8417%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (678 samples, 0.61%)</title><rect x="71.0194%" y="181" width="0.6092%" height="15" fill="rgb(239,18,37)"/><text x="71.2694%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (17 samples, 0.02%)</title><rect x="71.6348%" y="165" width="0.0153%" height="15" fill="rgb(218,185,22)"/><text x="71.8848%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (16 samples, 0.01%)</title><rect x="71.6501%" y="165" width="0.0144%" height="15" fill="rgb(225,218,4)"/><text x="71.9001%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (20 samples, 0.02%)</title><rect x="71.9592%" y="117" width="0.0180%" height="15" fill="rgb(230,182,32)"/><text x="72.2092%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (45 samples, 0.04%)</title><rect x="71.9771%" y="117" width="0.0404%" height="15" fill="rgb(242,56,43)"/><text x="72.2271%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (32 samples, 0.03%)</title><rect x="71.9888%" y="101" width="0.0288%" height="15" fill="rgb(233,99,24)"/><text x="72.2388%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (58 samples, 0.05%)</title><rect x="72.0715%" y="101" width="0.0521%" height="15" fill="rgb(234,209,42)"/><text x="72.3215%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (53 samples, 0.05%)</title><rect x="72.2781%" y="53" width="0.0476%" height="15" fill="rgb(227,7,12)"/><text x="72.5281%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (86 samples, 0.08%)</title><rect x="72.3266%" y="53" width="0.0773%" height="15" fill="rgb(245,203,43)"/><text x="72.5766%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.01%)</title><rect x="72.3895%" y="37" width="0.0144%" height="15" fill="rgb(238,205,33)"/><text x="72.6395%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (241 samples, 0.22%)</title><rect x="72.1883%" y="85" width="0.2165%" height="15" fill="rgb(231,56,7)"/><text x="72.4383%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (221 samples, 0.20%)</title><rect x="72.2062%" y="69" width="0.1986%" height="15" fill="rgb(244,186,29)"/><text x="72.4562%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (319 samples, 0.29%)</title><rect x="72.1236%" y="101" width="0.2866%" height="15" fill="rgb(234,111,31)"/><text x="72.3736%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (407 samples, 0.37%)</title><rect x="72.0472%" y="117" width="0.3657%" height="15" fill="rgb(241,149,10)"/><text x="72.2972%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.01%)</title><rect x="72.4129%" y="117" width="0.0144%" height="15" fill="rgb(249,206,44)"/><text x="72.6629%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (19 samples, 0.02%)</title><rect x="72.4273%" y="117" width="0.0171%" height="15" fill="rgb(251,153,30)"/><text x="72.6773%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (965 samples, 0.87%)</title><rect x="71.7867%" y="133" width="0.8670%" height="15" fill="rgb(239,152,38)"/><text x="72.0367%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (233 samples, 0.21%)</title><rect x="72.4443%" y="117" width="0.2093%" height="15" fill="rgb(249,139,47)"/><text x="72.6943%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_subscriber::field::VisitOutput&lt;core::result::Result&lt;(),core::fmt::Error&gt;&gt;&gt;::finish (14 samples, 0.01%)</title><rect x="72.6537%" y="133" width="0.0126%" height="15" fill="rgb(244,64,35)"/><text x="72.9037%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (24 samples, 0.02%)</title><rect x="72.6681%" y="133" width="0.0216%" height="15" fill="rgb(216,46,15)"/><text x="72.9181%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (17 samples, 0.02%)</title><rect x="72.8397%" y="101" width="0.0153%" height="15" fill="rgb(250,74,19)"/><text x="73.0897%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (50 samples, 0.04%)</title><rect x="72.8109%" y="117" width="0.0449%" height="15" fill="rgb(249,42,33)"/><text x="73.0609%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (134 samples, 0.12%)</title><rect x="72.9322%" y="101" width="0.1204%" height="15" fill="rgb(242,149,17)"/><text x="73.1822%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (96 samples, 0.09%)</title><rect x="73.0526%" y="101" width="0.0863%" height="15" fill="rgb(244,29,21)"/><text x="73.3026%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (20 samples, 0.02%)</title><rect x="73.1388%" y="101" width="0.0180%" height="15" fill="rgb(220,130,37)"/><text x="73.3888%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (359 samples, 0.32%)</title><rect x="72.8558%" y="117" width="0.3225%" height="15" fill="rgb(211,67,2)"/><text x="73.1058%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.02%)</title><rect x="73.1577%" y="101" width="0.0207%" height="15" fill="rgb(235,68,52)"/><text x="73.4077%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (229 samples, 0.21%)</title><rect x="73.1784%" y="117" width="0.2057%" height="15" fill="rgb(246,142,3)"/><text x="73.4284%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (19 samples, 0.02%)</title><rect x="73.3967%" y="117" width="0.0171%" height="15" fill="rgb(241,25,7)"/><text x="73.6467%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (819 samples, 0.74%)</title><rect x="72.6896%" y="133" width="0.7358%" height="15" fill="rgb(242,119,39)"/><text x="72.9396%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (12 samples, 0.01%)</title><rect x="73.4255%" y="133" width="0.0108%" height="15" fill="rgb(241,98,45)"/><text x="73.6755%" y="143.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::is_contextual (15 samples, 0.01%)</title><rect x="73.4461%" y="133" width="0.0135%" height="15" fill="rgb(254,28,30)"/><text x="73.6961%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (20 samples, 0.02%)</title><rect x="73.4830%" y="133" width="0.0180%" height="15" fill="rgb(241,142,54)"/><text x="73.7330%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (25 samples, 0.02%)</title><rect x="73.5009%" y="133" width="0.0225%" height="15" fill="rgb(222,85,15)"/><text x="73.7509%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (2,005 samples, 1.80%)</title><rect x="71.7732%" y="149" width="1.8014%" height="15" fill="rgb(210,85,47)"/><text x="72.0232%" y="159.50">a..</text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (57 samples, 0.05%)</title><rect x="73.5234%" y="133" width="0.0512%" height="15" fill="rgb(224,206,25)"/><text x="73.7734%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (24 samples, 0.02%)</title><rect x="73.5827%" y="149" width="0.0216%" height="15" fill="rgb(243,201,19)"/><text x="73.8327%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (25 samples, 0.02%)</title><rect x="73.6042%" y="149" width="0.0225%" height="15" fill="rgb(236,59,4)"/><text x="73.8542%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (45 samples, 0.04%)</title><rect x="73.6267%" y="149" width="0.0404%" height="15" fill="rgb(254,179,45)"/><text x="73.8767%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (2,248 samples, 2.02%)</title><rect x="71.6690%" y="165" width="2.0197%" height="15" fill="rgb(226,14,10)"/><text x="71.9190%" y="175.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (22 samples, 0.02%)</title><rect x="73.6689%" y="149" width="0.0198%" height="15" fill="rgb(244,27,41)"/><text x="73.9189%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (2,309 samples, 2.07%)</title><rect x="71.6285%" y="181" width="2.0745%" height="15" fill="rgb(235,35,32)"/><text x="71.8785%" y="191.50">a..</text></g><g><title>async-redis`tracing_core::span::Attributes::new (16 samples, 0.01%)</title><rect x="73.6887%" y="165" width="0.0144%" height="15" fill="rgb(218,68,31)"/><text x="73.9387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.03%)</title><rect x="73.7300%" y="181" width="0.0270%" height="15" fill="rgb(207,120,37)"/><text x="73.9800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (32 samples, 0.03%)</title><rect x="73.7597%" y="181" width="0.0288%" height="15" fill="rgb(227,98,0)"/><text x="74.0097%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45,369 samples, 40.76%)</title><rect x="33.0875%" y="197" width="40.7621%" height="15" fill="rgb(207,7,3)"/><text x="33.3375%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::fu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (67 samples, 0.06%)</title><rect x="73.7893%" y="181" width="0.0602%" height="15" fill="rgb(206,98,19)"/><text x="74.0393%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="73.8495%" y="197" width="0.0225%" height="15" fill="rgb(217,5,26)"/><text x="74.0995%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (21 samples, 0.02%)</title><rect x="73.8720%" y="197" width="0.0189%" height="15" fill="rgb(235,190,38)"/><text x="74.1220%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (55 samples, 0.05%)</title><rect x="73.9043%" y="197" width="0.0494%" height="15" fill="rgb(247,86,24)"/><text x="74.1543%" y="207.50"></text></g><g><title>async-redis`tracing::__macro_support::MacroCallsite::is_enabled (26 samples, 0.02%)</title><rect x="73.9537%" y="197" width="0.0234%" height="15" fill="rgb(205,101,16)"/><text x="74.2037%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (18 samples, 0.02%)</title><rect x="73.9825%" y="197" width="0.0162%" height="15" fill="rgb(246,168,33)"/><text x="74.2325%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (45,791 samples, 41.14%)</title><rect x="32.8988%" y="213" width="41.1412%" height="15" fill="rgb(231,114,1)"/><text x="33.1488%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::fut..</text></g><g><title>libdyld.dylib`tlv_get_addr (46 samples, 0.04%)</title><rect x="73.9987%" y="197" width="0.0413%" height="15" fill="rgb(207,184,53)"/><text x="74.2487%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (129 samples, 0.12%)</title><rect x="74.0400%" y="213" width="0.1159%" height="15" fill="rgb(224,95,51)"/><text x="74.2900%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (93 samples, 0.08%)</title><rect x="74.0723%" y="197" width="0.0836%" height="15" fill="rgb(212,188,45)"/><text x="74.3223%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (13 samples, 0.01%)</title><rect x="74.1586%" y="213" width="0.0117%" height="15" fill="rgb(223,154,38)"/><text x="74.4086%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`shutdown (13 samples, 0.01%)</title><rect x="74.1586%" y="197" width="0.0117%" height="15" fill="rgb(251,22,52)"/><text x="74.4086%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (22 samples, 0.02%)</title><rect x="74.1703%" y="213" width="0.0198%" height="15" fill="rgb(229,209,22)"/><text x="74.4203%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (135 samples, 0.12%)</title><rect x="74.1900%" y="213" width="0.1213%" height="15" fill="rgb(234,138,34)"/><text x="74.4400%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="74.2997%" y="197" width="0.0117%" height="15" fill="rgb(212,95,11)"/><text x="74.5497%" y="207.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="74.3365%" y="213" width="0.0126%" height="15" fill="rgb(240,179,47)"/><text x="74.5865%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (26 samples, 0.02%)</title><rect x="74.3491%" y="213" width="0.0234%" height="15" fill="rgb(240,163,11)"/><text x="74.5991%" y="223.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (300 samples, 0.27%)</title><rect x="74.4749%" y="181" width="0.2695%" height="15" fill="rgb(236,37,12)"/><text x="74.7249%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (121 samples, 0.11%)</title><rect x="74.7615%" y="165" width="0.1087%" height="15" fill="rgb(232,164,16)"/><text x="75.0115%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (118 samples, 0.11%)</title><rect x="74.7642%" y="149" width="0.1060%" height="15" fill="rgb(244,205,15)"/><text x="75.0142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (38 samples, 0.03%)</title><rect x="74.8360%" y="133" width="0.0341%" height="15" fill="rgb(223,117,47)"/><text x="75.0860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (141 samples, 0.13%)</title><rect x="74.7444%" y="181" width="0.1267%" height="15" fill="rgb(244,107,35)"/><text x="74.9944%" y="191.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (479 samples, 0.43%)</title><rect x="74.4416%" y="197" width="0.4304%" height="15" fill="rgb(205,140,8)"/><text x="74.6916%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (35 samples, 0.03%)</title><rect x="74.9016%" y="181" width="0.0314%" height="15" fill="rgb(228,84,46)"/><text x="75.1516%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (167 samples, 0.15%)</title><rect x="74.9555%" y="165" width="0.1500%" height="15" fill="rgb(254,188,9)"/><text x="75.2055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (158 samples, 0.14%)</title><rect x="74.9636%" y="149" width="0.1420%" height="15" fill="rgb(206,112,54)"/><text x="75.2136%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (74 samples, 0.07%)</title><rect x="75.0391%" y="133" width="0.0665%" height="15" fill="rgb(216,84,49)"/><text x="75.2891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (193 samples, 0.17%)</title><rect x="74.9331%" y="181" width="0.1734%" height="15" fill="rgb(214,194,35)"/><text x="75.1831%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (278 samples, 0.25%)</title><rect x="74.8747%" y="197" width="0.2498%" height="15" fill="rgb(249,28,3)"/><text x="75.1247%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.02%)</title><rect x="75.1083%" y="181" width="0.0162%" height="15" fill="rgb(222,56,52)"/><text x="75.3583%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::get::Get::new (22 samples, 0.02%)</title><rect x="75.1244%" y="197" width="0.0198%" height="15" fill="rgb(245,217,50)"/><text x="75.3744%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (26 samples, 0.02%)</title><rect x="75.1712%" y="181" width="0.0234%" height="15" fill="rgb(213,201,24)"/><text x="75.4212%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (16 samples, 0.01%)</title><rect x="75.1801%" y="165" width="0.0144%" height="15" fill="rgb(248,116,28)"/><text x="75.4301%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (77 samples, 0.07%)</title><rect x="75.1442%" y="197" width="0.0692%" height="15" fill="rgb(219,72,43)"/><text x="75.3942%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (19 samples, 0.02%)</title><rect x="75.1963%" y="181" width="0.0171%" height="15" fill="rgb(209,138,14)"/><text x="75.4463%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (12 samples, 0.01%)</title><rect x="75.2134%" y="197" width="0.0108%" height="15" fill="rgb(222,18,33)"/><text x="75.4634%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (23 samples, 0.02%)</title><rect x="75.2242%" y="197" width="0.0207%" height="15" fill="rgb(213,199,7)"/><text x="75.4742%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (17 samples, 0.02%)</title><rect x="75.2448%" y="197" width="0.0153%" height="15" fill="rgb(250,110,10)"/><text x="75.4948%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (46 samples, 0.04%)</title><rect x="75.2871%" y="181" width="0.0413%" height="15" fill="rgb(248,123,6)"/><text x="75.5371%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (41 samples, 0.04%)</title><rect x="75.2915%" y="165" width="0.0368%" height="15" fill="rgb(206,91,31)"/><text x="75.5415%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.07%)</title><rect x="75.2673%" y="197" width="0.0656%" height="15" fill="rgb(211,154,13)"/><text x="75.5173%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (186 samples, 0.17%)</title><rect x="75.3329%" y="197" width="0.1671%" height="15" fill="rgb(225,148,7)"/><text x="75.5829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (112 samples, 0.10%)</title><rect x="75.3994%" y="181" width="0.1006%" height="15" fill="rgb(220,160,43)"/><text x="75.6494%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (57 samples, 0.05%)</title><rect x="75.4488%" y="165" width="0.0512%" height="15" fill="rgb(213,52,39)"/><text x="75.6988%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (1,274 samples, 1.14%)</title><rect x="74.3724%" y="213" width="1.1446%" height="15" fill="rgb(243,137,7)"/><text x="74.6224%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (15 samples, 0.01%)</title><rect x="75.5171%" y="213" width="0.0135%" height="15" fill="rgb(230,79,13)"/><text x="75.7671%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (27 samples, 0.02%)</title><rect x="75.5791%" y="181" width="0.0243%" height="15" fill="rgb(247,105,23)"/><text x="75.8291%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.02%)</title><rect x="75.5800%" y="165" width="0.0234%" height="15" fill="rgb(223,179,41)"/><text x="75.8300%" y="175.50"></text></g><g><title>async-redis`async_redis::protocol::encode_iter (59 samples, 0.05%)</title><rect x="75.5728%" y="197" width="0.0530%" height="15" fill="rgb(218,9,34)"/><text x="75.8228%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.01%)</title><rect x="75.6276%" y="197" width="0.0108%" height="15" fill="rgb(222,106,8)"/><text x="75.8776%" y="207.50"></text></g><g><title>async-redis`async_redis::protocol::encode (113 samples, 0.10%)</title><rect x="75.5431%" y="213" width="0.1015%" height="15" fill="rgb(211,220,0)"/><text x="75.7931%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.04%)</title><rect x="75.6734%" y="197" width="0.0350%" height="15" fill="rgb(229,52,16)"/><text x="75.9234%" y="207.50"></text></g><g><title>async-redis`async_redis::server::Dispatcher::determine_database (100 samples, 0.09%)</title><rect x="75.6455%" y="213" width="0.0898%" height="15" fill="rgb(212,155,18)"/><text x="75.8955%" y="223.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (30 samples, 0.03%)</title><rect x="75.7084%" y="197" width="0.0270%" height="15" fill="rgb(242,21,14)"/><text x="75.9584%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (29 samples, 0.03%)</title><rect x="75.8612%" y="197" width="0.0261%" height="15" fill="rgb(222,19,48)"/><text x="76.1112%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (19 samples, 0.02%)</title><rect x="75.9007%" y="181" width="0.0171%" height="15" fill="rgb(232,45,27)"/><text x="76.1507%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (36 samples, 0.03%)</title><rect x="75.8872%" y="197" width="0.0323%" height="15" fill="rgb(249,103,42)"/><text x="76.1372%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (18 samples, 0.02%)</title><rect x="75.9214%" y="197" width="0.0162%" height="15" fill="rgb(246,81,33)"/><text x="76.1714%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (28 samples, 0.03%)</title><rect x="75.9375%" y="197" width="0.0252%" height="15" fill="rgb(252,33,42)"/><text x="76.1875%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (27 samples, 0.02%)</title><rect x="75.9384%" y="181" width="0.0243%" height="15" fill="rgb(209,212,41)"/><text x="76.1884%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (296 samples, 0.27%)</title><rect x="75.7435%" y="213" width="0.2659%" height="15" fill="rgb(207,154,6)"/><text x="75.9935%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (52 samples, 0.05%)</title><rect x="75.9627%" y="197" width="0.0467%" height="15" fill="rgb(223,64,47)"/><text x="76.2127%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (20 samples, 0.02%)</title><rect x="76.0103%" y="213" width="0.0180%" height="15" fill="rgb(211,161,38)"/><text x="76.2603%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (71 samples, 0.06%)</title><rect x="76.0283%" y="213" width="0.0638%" height="15" fill="rgb(219,138,40)"/><text x="76.2783%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.01%)</title><rect x="76.0786%" y="197" width="0.0135%" height="15" fill="rgb(241,228,46)"/><text x="76.3286%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (41 samples, 0.04%)</title><rect x="76.0930%" y="213" width="0.0368%" height="15" fill="rgb(223,209,38)"/><text x="76.3430%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (107 samples, 0.10%)</title><rect x="76.3526%" y="149" width="0.0961%" height="15" fill="rgb(236,164,45)"/><text x="76.6026%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (17,932 samples, 16.11%)</title><rect x="76.3086%" y="165" width="16.1111%" height="15" fill="rgb(231,15,5)"/><text x="76.5586%" y="175.50">async-redis`&lt;&amp;mio::net::t..</text></g><g><title>libsystem_kernel.dylib`__sendto (17,756 samples, 15.95%)</title><rect x="76.4667%" y="149" width="15.9530%" height="15" fill="rgb(252,35,15)"/><text x="76.7167%" y="159.50">libsystem_kernel.dylib`__..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (42 samples, 0.04%)</title><rect x="92.5680%" y="149" width="0.0377%" height="15" fill="rgb(248,181,18)"/><text x="92.8180%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (210 samples, 0.19%)</title><rect x="92.4251%" y="165" width="0.1887%" height="15" fill="rgb(233,39,42)"/><text x="92.6751%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (18,288 samples, 16.43%)</title><rect x="76.1954%" y="197" width="16.4310%" height="15" fill="rgb(238,110,33)"/><text x="76.4454%" y="207.50">async-redis`&lt;tokio::net::..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (18,245 samples, 16.39%)</title><rect x="76.2340%" y="181" width="16.3923%" height="15" fill="rgb(233,195,10)"/><text x="76.4840%" y="191.50">async-redis`tokio::io::dr..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (14 samples, 0.01%)</title><rect x="92.6138%" y="165" width="0.0126%" height="15" fill="rgb(254,105,3)"/><text x="92.8638%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (18,365 samples, 16.50%)</title><rect x="76.1361%" y="213" width="16.5002%" height="15" fill="rgb(221,225,9)"/><text x="76.3861%" y="223.50">async-redis`tokio::io::ut..</text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (26 samples, 0.02%)</title><rect x="92.6866%" y="197" width="0.0234%" height="15" fill="rgb(224,227,45)"/><text x="92.9366%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (63 samples, 0.06%)</title><rect x="92.7261%" y="197" width="0.0566%" height="15" fill="rgb(229,198,43)"/><text x="92.9761%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (118 samples, 0.11%)</title><rect x="93.0819%" y="181" width="0.1060%" height="15" fill="rgb(206,209,35)"/><text x="93.3319%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (449 samples, 0.40%)</title><rect x="92.7881%" y="197" width="0.4034%" height="15" fill="rgb(245,195,53)"/><text x="93.0381%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (680 samples, 0.61%)</title><rect x="92.6363%" y="213" width="0.6110%" height="15" fill="rgb(240,92,26)"/><text x="92.8863%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (62 samples, 0.06%)</title><rect x="93.1915%" y="197" width="0.0557%" height="15" fill="rgb(207,40,23)"/><text x="93.4415%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (22 samples, 0.02%)</title><rect x="93.2274%" y="181" width="0.0198%" height="15" fill="rgb(223,111,35)"/><text x="93.4774%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (20 samples, 0.02%)</title><rect x="93.2292%" y="165" width="0.0180%" height="15" fill="rgb(229,147,28)"/><text x="93.4792%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (53 samples, 0.05%)</title><rect x="93.2751%" y="197" width="0.0476%" height="15" fill="rgb(211,29,28)"/><text x="93.5251%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (54 samples, 0.05%)</title><rect x="93.3227%" y="197" width="0.0485%" height="15" fill="rgb(228,72,33)"/><text x="93.5727%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (15 samples, 0.01%)</title><rect x="93.4395%" y="165" width="0.0135%" height="15" fill="rgb(205,214,31)"/><text x="93.6895%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (216 samples, 0.19%)</title><rect x="93.2625%" y="213" width="0.1941%" height="15" fill="rgb(224,111,15)"/><text x="93.5125%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (95 samples, 0.09%)</title><rect x="93.3712%" y="197" width="0.0854%" height="15" fill="rgb(253,21,26)"/><text x="93.6212%" y="207.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (67 samples, 0.06%)</title><rect x="93.3963%" y="181" width="0.0602%" height="15" fill="rgb(245,139,43)"/><text x="93.6463%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (12 samples, 0.01%)</title><rect x="93.4583%" y="213" width="0.0108%" height="15" fill="rgb(252,170,7)"/><text x="93.7083%" y="223.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (129 samples, 0.12%)</title><rect x="93.4691%" y="213" width="0.1159%" height="15" fill="rgb(231,118,14)"/><text x="93.7191%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (58 samples, 0.05%)</title><rect x="93.5329%" y="197" width="0.0521%" height="15" fill="rgb(238,83,0)"/><text x="93.7829%" y="207.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (33 samples, 0.03%)</title><rect x="93.5868%" y="213" width="0.0296%" height="15" fill="rgb(221,39,39)"/><text x="93.8368%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (18 samples, 0.02%)</title><rect x="93.6174%" y="213" width="0.0162%" height="15" fill="rgb(222,119,46)"/><text x="93.8674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.05%)</title><rect x="93.6946%" y="197" width="0.0458%" height="15" fill="rgb(222,165,49)"/><text x="93.9446%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (48 samples, 0.04%)</title><rect x="93.6973%" y="181" width="0.0431%" height="15" fill="rgb(219,113,52)"/><text x="93.9473%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (102 samples, 0.09%)</title><rect x="93.6497%" y="213" width="0.0916%" height="15" fill="rgb(214,7,15)"/><text x="93.8997%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (66 samples, 0.06%)</title><rect x="93.8671%" y="181" width="0.0593%" height="15" fill="rgb(235,32,4)"/><text x="94.1171%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (204 samples, 0.18%)</title><rect x="93.7458%" y="213" width="0.1833%" height="15" fill="rgb(238,90,54)"/><text x="93.9958%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (138 samples, 0.12%)</title><rect x="93.8051%" y="197" width="0.1240%" height="15" fill="rgb(213,208,19)"/><text x="94.0551%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.02%)</title><rect x="93.9363%" y="213" width="0.0171%" height="15" fill="rgb(233,156,4)"/><text x="94.1863%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69,626 samples, 62.56%)</title><rect x="31.4604%" y="229" width="62.5559%" height="15" fill="rgb(207,194,5)"/><text x="31.7104%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (70 samples, 0.06%)</title><rect x="93.9534%" y="213" width="0.0629%" height="15" fill="rgb(206,111,30)"/><text x="94.2034%" y="223.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (83 samples, 0.07%)</title><rect x="94.0163%" y="229" width="0.0746%" height="15" fill="rgb(243,70,54)"/><text x="94.2663%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (31 samples, 0.03%)</title><rect x="94.6515%" y="165" width="0.0279%" height="15" fill="rgb(242,28,8)"/><text x="94.9015%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (15 samples, 0.01%)</title><rect x="94.6856%" y="165" width="0.0135%" height="15" fill="rgb(219,106,18)"/><text x="94.9356%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (14 samples, 0.01%)</title><rect x="94.6865%" y="149" width="0.0126%" height="15" fill="rgb(244,222,10)"/><text x="94.9365%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (448 samples, 0.40%)</title><rect x="94.3173%" y="181" width="0.4025%" height="15" fill="rgb(236,179,52)"/><text x="94.5673%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (23 samples, 0.02%)</title><rect x="94.6991%" y="165" width="0.0207%" height="15" fill="rgb(213,23,39)"/><text x="94.9491%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (469 samples, 0.42%)</title><rect x="94.3002%" y="197" width="0.4214%" height="15" fill="rgb(238,48,10)"/><text x="94.5502%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (539 samples, 0.48%)</title><rect x="94.2643%" y="213" width="0.4843%" height="15" fill="rgb(251,196,23)"/><text x="94.5143%" y="223.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (30 samples, 0.03%)</title><rect x="94.7216%" y="197" width="0.0270%" height="15" fill="rgb(250,152,24)"/><text x="94.9716%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (14 samples, 0.01%)</title><rect x="94.8465%" y="181" width="0.0126%" height="15" fill="rgb(209,150,17)"/><text x="95.0965%" y="191.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (45 samples, 0.04%)</title><rect x="94.8698%" y="165" width="0.0404%" height="15" fill="rgb(234,202,34)"/><text x="95.1198%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (43 samples, 0.04%)</title><rect x="94.9111%" y="165" width="0.0386%" height="15" fill="rgb(253,148,53)"/><text x="95.1611%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (25 samples, 0.02%)</title><rect x="95.0208%" y="149" width="0.0225%" height="15" fill="rgb(218,129,16)"/><text x="95.2708%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (58 samples, 0.05%)</title><rect x="95.0432%" y="149" width="0.0521%" height="15" fill="rgb(216,85,19)"/><text x="95.2932%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (164 samples, 0.15%)</title><rect x="94.9498%" y="165" width="0.1473%" height="15" fill="rgb(235,228,7)"/><text x="95.1998%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (347 samples, 0.31%)</title><rect x="94.7916%" y="197" width="0.3118%" height="15" fill="rgb(245,175,0)"/><text x="95.0416%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (265 samples, 0.24%)</title><rect x="94.8653%" y="181" width="0.2381%" height="15" fill="rgb(208,168,36)"/><text x="95.1153%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (412 samples, 0.37%)</title><rect x="94.7602%" y="213" width="0.3702%" height="15" fill="rgb(246,171,24)"/><text x="95.0102%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.02%)</title><rect x="95.1124%" y="197" width="0.0180%" height="15" fill="rgb(215,142,24)"/><text x="95.3624%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (25 samples, 0.02%)</title><rect x="95.1349%" y="213" width="0.0225%" height="15" fill="rgb(250,187,7)"/><text x="95.3849%" y="223.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (14 samples, 0.01%)</title><rect x="95.2436%" y="197" width="0.0126%" height="15" fill="rgb(228,66,33)"/><text x="95.4936%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (23 samples, 0.02%)</title><rect x="95.3451%" y="181" width="0.0207%" height="15" fill="rgb(234,215,21)"/><text x="95.5951%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (106 samples, 0.10%)</title><rect x="95.3783%" y="181" width="0.0952%" height="15" fill="rgb(222,191,20)"/><text x="95.6283%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (121 samples, 0.11%)</title><rect x="95.6434%" y="165" width="0.1087%" height="15" fill="rgb(245,79,54)"/><text x="95.8934%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (301 samples, 0.27%)</title><rect x="95.4844%" y="181" width="0.2704%" height="15" fill="rgb(240,10,37)"/><text x="95.7344%" y="191.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (66 samples, 0.06%)</title><rect x="95.7548%" y="181" width="0.0593%" height="15" fill="rgb(214,192,32)"/><text x="96.0048%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (23 samples, 0.02%)</title><rect x="95.7934%" y="165" width="0.0207%" height="15" fill="rgb(209,36,54)"/><text x="96.0434%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (20 samples, 0.02%)</title><rect x="95.7961%" y="149" width="0.0180%" height="15" fill="rgb(220,10,11)"/><text x="96.0461%" y="159.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (626 samples, 0.56%)</title><rect x="95.2561%" y="197" width="0.5624%" height="15" fill="rgb(221,106,17)"/><text x="95.5061%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (13 samples, 0.01%)</title><rect x="95.8204%" y="197" width="0.0117%" height="15" fill="rgb(251,142,44)"/><text x="96.0704%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (765 samples, 0.69%)</title><rect x="95.1573%" y="213" width="0.6873%" height="15" fill="rgb(238,13,15)"/><text x="95.4073%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.01%)</title><rect x="95.8321%" y="197" width="0.0126%" height="15" fill="rgb(208,107,27)"/><text x="96.0821%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (18 samples, 0.02%)</title><rect x="95.8446%" y="213" width="0.0162%" height="15" fill="rgb(205,136,37)"/><text x="96.0946%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (37 samples, 0.03%)</title><rect x="95.8608%" y="213" width="0.0332%" height="15" fill="rgb(250,205,27)"/><text x="96.1108%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,016 samples, 1.81%)</title><rect x="94.0918%" y="229" width="1.8113%" height="15" fill="rgb(210,80,43)"/><text x="94.3418%" y="239.50">a..</text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="95.9030%" y="229" width="0.0117%" height="15" fill="rgb(247,160,36)"/><text x="96.1530%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="95.9147%" y="229" width="0.0162%" height="15" fill="rgb(234,13,49)"/><text x="96.1647%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="95.9309%" y="229" width="0.0683%" height="15" fill="rgb(234,122,0)"/><text x="96.1809%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="96.0109%" y="229" width="0.0108%" height="15" fill="rgb(207,146,38)"/><text x="96.2609%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="96.0216%" y="229" width="0.0126%" height="15" fill="rgb(207,177,25)"/><text x="96.2716%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (37 samples, 0.03%)</title><rect x="96.0360%" y="229" width="0.0332%" height="15" fill="rgb(211,178,42)"/><text x="96.2860%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (115 samples, 0.10%)</title><rect x="96.1393%" y="197" width="0.1033%" height="15" fill="rgb(230,69,54)"/><text x="96.3893%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (15 samples, 0.01%)</title><rect x="96.2427%" y="197" width="0.0135%" height="15" fill="rgb(214,135,41)"/><text x="96.4927%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="96.3029%" y="165" width="0.0108%" height="15" fill="rgb(237,67,25)"/><text x="96.5529%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (136 samples, 0.12%)</title><rect x="96.3720%" y="149" width="0.1222%" height="15" fill="rgb(222,189,50)"/><text x="96.6220%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (202 samples, 0.18%)</title><rect x="96.3136%" y="165" width="0.1815%" height="15" fill="rgb(245,148,34)"/><text x="96.5636%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (23 samples, 0.02%)</title><rect x="96.5068%" y="165" width="0.0207%" height="15" fill="rgb(222,29,6)"/><text x="96.7568%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (286 samples, 0.26%)</title><rect x="96.2822%" y="181" width="0.2570%" height="15" fill="rgb(221,189,43)"/><text x="96.5322%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="96.5275%" y="165" width="0.0117%" height="15" fill="rgb(207,36,27)"/><text x="96.7775%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (24 samples, 0.02%)</title><rect x="96.5463%" y="181" width="0.0216%" height="15" fill="rgb(217,90,24)"/><text x="96.7963%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (355 samples, 0.32%)</title><rect x="96.2597%" y="197" width="0.3190%" height="15" fill="rgb(224,66,35)"/><text x="96.5097%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (573 samples, 0.51%)</title><rect x="96.0782%" y="213" width="0.5148%" height="15" fill="rgb(221,13,50)"/><text x="96.3282%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (594 samples, 0.53%)</title><rect x="96.0693%" y="229" width="0.5337%" height="15" fill="rgb(236,68,49)"/><text x="96.3193%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (18 samples, 0.02%)</title><rect x="96.6083%" y="229" width="0.0162%" height="15" fill="rgb(229,146,28)"/><text x="96.8583%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (33 samples, 0.03%)</title><rect x="96.6353%" y="229" width="0.0296%" height="15" fill="rgb(225,31,38)"/><text x="96.8853%" y="239.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (48 samples, 0.04%)</title><rect x="96.7647%" y="213" width="0.0431%" height="15" fill="rgb(250,208,3)"/><text x="97.0147%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (32 samples, 0.03%)</title><rect x="96.7790%" y="197" width="0.0288%" height="15" fill="rgb(246,54,23)"/><text x="97.0290%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (42 samples, 0.04%)</title><rect x="96.8168%" y="213" width="0.0377%" height="15" fill="rgb(243,76,11)"/><text x="97.0668%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.02%)</title><rect x="96.8392%" y="197" width="0.0153%" height="15" fill="rgb(245,21,50)"/><text x="97.0892%" y="207.50"></text></g><g><title>async-redis`async_redis::db::DB::get (212 samples, 0.19%)</title><rect x="96.6649%" y="229" width="0.1905%" height="15" fill="rgb(228,9,43)"/><text x="96.9149%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode (47 samples, 0.04%)</title><rect x="96.8554%" y="229" width="0.0422%" height="15" fill="rgb(208,100,47)"/><text x="97.1054%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (34 samples, 0.03%)</title><rect x="96.9066%" y="229" width="0.0305%" height="15" fill="rgb(232,26,8)"/><text x="97.1566%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (36 samples, 0.03%)</title><rect x="96.9372%" y="229" width="0.0323%" height="15" fill="rgb(216,166,38)"/><text x="97.1872%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (13 samples, 0.01%)</title><rect x="97.0746%" y="213" width="0.0117%" height="15" fill="rgb(251,202,51)"/><text x="97.3246%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (25 samples, 0.02%)</title><rect x="97.0872%" y="213" width="0.0225%" height="15" fill="rgb(254,216,34)"/><text x="97.3372%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (23 samples, 0.02%)</title><rect x="97.0890%" y="197" width="0.0207%" height="15" fill="rgb(251,32,27)"/><text x="97.3390%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (47 samples, 0.04%)</title><rect x="97.2552%" y="197" width="0.0422%" height="15" fill="rgb(208,127,28)"/><text x="97.5052%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (22 samples, 0.02%)</title><rect x="97.2777%" y="181" width="0.0198%" height="15" fill="rgb(224,137,22)"/><text x="97.5277%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (13 samples, 0.01%)</title><rect x="97.3010%" y="197" width="0.0117%" height="15" fill="rgb(254,70,32)"/><text x="97.5510%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (13 samples, 0.01%)</title><rect x="97.3010%" y="181" width="0.0117%" height="15" fill="rgb(229,75,37)"/><text x="97.5510%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (311 samples, 0.28%)</title><rect x="97.1097%" y="213" width="0.2794%" height="15" fill="rgb(252,64,23)"/><text x="97.3597%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (85 samples, 0.08%)</title><rect x="97.3127%" y="197" width="0.0764%" height="15" fill="rgb(232,162,48)"/><text x="97.5627%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (499 samples, 0.45%)</title><rect x="96.9695%" y="229" width="0.4483%" height="15" fill="rgb(246,160,12)"/><text x="97.2195%" y="239.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (32 samples, 0.03%)</title><rect x="97.3891%" y="213" width="0.0288%" height="15" fill="rgb(247,166,0)"/><text x="97.6391%" y="223.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (19 samples, 0.02%)</title><rect x="97.4241%" y="229" width="0.0171%" height="15" fill="rgb(249,219,21)"/><text x="97.6741%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.03%)</title><rect x="97.4412%" y="229" width="0.0288%" height="15" fill="rgb(205,209,3)"/><text x="97.6912%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (14 samples, 0.01%)</title><rect x="97.4699%" y="229" width="0.0126%" height="15" fill="rgb(243,44,1)"/><text x="97.7199%" y="239.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (27 samples, 0.02%)</title><rect x="97.4834%" y="229" width="0.0243%" height="15" fill="rgb(206,159,16)"/><text x="97.7334%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (52 samples, 0.05%)</title><rect x="97.5077%" y="229" width="0.0467%" height="15" fill="rgb(244,77,30)"/><text x="97.7577%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (27 samples, 0.02%)</title><rect x="97.5634%" y="213" width="0.0243%" height="15" fill="rgb(218,69,12)"/><text x="97.8134%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (16 samples, 0.01%)</title><rect x="97.5876%" y="213" width="0.0144%" height="15" fill="rgb(212,87,7)"/><text x="97.8376%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (25 samples, 0.02%)</title><rect x="97.6739%" y="149" width="0.0225%" height="15" fill="rgb(245,114,25)"/><text x="97.9239%" y="159.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (31 samples, 0.03%)</title><rect x="97.6721%" y="165" width="0.0279%" height="15" fill="rgb(210,61,42)"/><text x="97.9221%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (69 samples, 0.06%)</title><rect x="97.6389%" y="181" width="0.0620%" height="15" fill="rgb(211,52,33)"/><text x="97.8889%" y="191.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (90 samples, 0.08%)</title><rect x="97.6209%" y="197" width="0.0809%" height="15" fill="rgb(234,58,33)"/><text x="97.8709%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (158 samples, 0.14%)</title><rect x="97.5616%" y="229" width="0.1420%" height="15" fill="rgb(220,115,36)"/><text x="97.8116%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (113 samples, 0.10%)</title><rect x="97.6020%" y="213" width="0.1015%" height="15" fill="rgb(243,153,54)"/><text x="97.8520%" y="223.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (18 samples, 0.02%)</title><rect x="97.7125%" y="229" width="0.0162%" height="15" fill="rgb(251,47,18)"/><text x="97.9625%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (15 samples, 0.01%)</title><rect x="97.7287%" y="229" width="0.0135%" height="15" fill="rgb(242,102,42)"/><text x="97.9787%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (52 samples, 0.05%)</title><rect x="97.8401%" y="197" width="0.0467%" height="15" fill="rgb(234,31,38)"/><text x="98.0901%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (166 samples, 0.15%)</title><rect x="97.7422%" y="229" width="0.1491%" height="15" fill="rgb(221,117,51)"/><text x="97.9922%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (74 samples, 0.07%)</title><rect x="97.8248%" y="213" width="0.0665%" height="15" fill="rgb(212,20,18)"/><text x="98.0748%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (35 samples, 0.03%)</title><rect x="97.8913%" y="229" width="0.0314%" height="15" fill="rgb(245,133,36)"/><text x="98.1413%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (56 samples, 0.05%)</title><rect x="98.0171%" y="213" width="0.0503%" height="15" fill="rgb(212,6,19)"/><text x="98.2671%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (20 samples, 0.02%)</title><rect x="98.0674%" y="213" width="0.0180%" height="15" fill="rgb(218,1,36)"/><text x="98.3174%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (205 samples, 0.18%)</title><rect x="97.9327%" y="229" width="0.1842%" height="15" fill="rgb(246,84,54)"/><text x="98.1827%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.03%)</title><rect x="98.0854%" y="213" width="0.0314%" height="15" fill="rgb(242,110,6)"/><text x="98.3354%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (479 samples, 0.43%)</title><rect x="98.1878%" y="197" width="0.4304%" height="15" fill="rgb(214,47,5)"/><text x="98.4378%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (404 samples, 0.36%)</title><rect x="98.2552%" y="181" width="0.3630%" height="15" fill="rgb(218,159,25)"/><text x="98.5052%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (15 samples, 0.01%)</title><rect x="98.9120%" y="165" width="0.0135%" height="15" fill="rgb(215,211,28)"/><text x="99.1620%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (259 samples, 0.23%)</title><rect x="98.7179%" y="181" width="0.2327%" height="15" fill="rgb(238,59,32)"/><text x="98.9679%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.03%)</title><rect x="98.9254%" y="165" width="0.0252%" height="15" fill="rgb(226,82,3)"/><text x="99.1754%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (389 samples, 0.35%)</title><rect x="98.6182%" y="197" width="0.3495%" height="15" fill="rgb(240,164,32)"/><text x="98.8682%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (19 samples, 0.02%)</title><rect x="98.9506%" y="181" width="0.0171%" height="15" fill="rgb(232,46,7)"/><text x="99.2006%" y="191.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (20 samples, 0.02%)</title><rect x="98.9740%" y="197" width="0.0180%" height="15" fill="rgb(229,129,53)"/><text x="99.2240%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (916 samples, 0.82%)</title><rect x="98.1779%" y="213" width="0.8230%" height="15" fill="rgb(234,188,29)"/><text x="98.4279%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (23 samples, 0.02%)</title><rect x="99.0009%" y="213" width="0.0207%" height="15" fill="rgb(246,141,4)"/><text x="99.2509%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (27 samples, 0.02%)</title><rect x="99.0216%" y="213" width="0.0243%" height="15" fill="rgb(229,23,39)"/><text x="99.2716%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (1,028 samples, 0.92%)</title><rect x="98.1303%" y="229" width="0.9236%" height="15" fill="rgb(206,12,3)"/><text x="98.3803%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (55 samples, 0.05%)</title><rect x="99.0629%" y="229" width="0.0494%" height="15" fill="rgb(252,226,20)"/><text x="99.3129%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.01%)</title><rect x="99.1132%" y="229" width="0.0144%" height="15" fill="rgb(216,123,35)"/><text x="99.3632%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (77,444 samples, 69.58%)</title><rect x="29.5844%" y="245" width="69.5801%" height="15" fill="rgb(212,68,40)"/><text x="29.8344%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.03%)</title><rect x="99.1339%" y="229" width="0.0305%" height="15" fill="rgb(254,125,32)"/><text x="99.3839%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="99.1671%" y="245" width="0.0135%" height="15" fill="rgb(253,97,22)"/><text x="99.4171%" y="255.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (13 samples, 0.01%)</title><rect x="99.1833%" y="245" width="0.0117%" height="15" fill="rgb(241,101,14)"/><text x="99.4333%" y="255.50"></text></g><g><title>async-redis`async_redis::db::DB::get (20 samples, 0.02%)</title><rect x="99.1968%" y="245" width="0.0180%" height="15" fill="rgb(238,103,29)"/><text x="99.4468%" y="255.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (16 samples, 0.01%)</title><rect x="99.2147%" y="245" width="0.0144%" height="15" fill="rgb(233,195,47)"/><text x="99.4647%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (20 samples, 0.02%)</title><rect x="99.2291%" y="245" width="0.0180%" height="15" fill="rgb(246,218,30)"/><text x="99.4791%" y="255.50"></text></g><g><title>async-redis`std::time::Instant::now (16 samples, 0.01%)</title><rect x="99.2471%" y="245" width="0.0144%" height="15" fill="rgb(219,145,47)"/><text x="99.4971%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (19 samples, 0.02%)</title><rect x="99.2669%" y="245" width="0.0171%" height="15" fill="rgb(243,12,26)"/><text x="99.5169%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (17 samples, 0.02%)</title><rect x="99.2983%" y="245" width="0.0153%" height="15" fill="rgb(214,87,16)"/><text x="99.5483%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77,760 samples, 69.86%)</title><rect x="29.4568%" y="261" width="69.8640%" height="15" fill="rgb(208,99,42)"/><text x="29.7068%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (16 samples, 0.01%)</title><rect x="99.3208%" y="261" width="0.0144%" height="15" fill="rgb(253,99,2)"/><text x="99.5708%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (60 samples, 0.05%)</title><rect x="99.3360%" y="261" width="0.0539%" height="15" fill="rgb(220,168,23)"/><text x="99.5860%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (71 samples, 0.06%)</title><rect x="99.3899%" y="261" width="0.0638%" height="15" fill="rgb(242,38,24)"/><text x="99.6399%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (78,188 samples, 70.25%)</title><rect x="29.2106%" y="277" width="70.2485%" height="15" fill="rgb(225,182,9)"/><text x="29.4606%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (24 samples, 0.02%)</title><rect x="99.4591%" y="277" width="0.0216%" height="15" fill="rgb(243,178,37)"/><text x="99.7091%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (28 samples, 0.03%)</title><rect x="99.4852%" y="277" width="0.0252%" height="15" fill="rgb(232,139,19)"/><text x="99.7352%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (78,627 samples, 70.64%)</title><rect x="28.8836%" y="293" width="70.6429%" height="15" fill="rgb(225,201,24)"/><text x="29.1336%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.02%)</title><rect x="99.5103%" y="277" width="0.0162%" height="15" fill="rgb(221,47,46)"/><text x="99.7603%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (23 samples, 0.02%)</title><rect x="99.5292%" y="293" width="0.0207%" height="15" fill="rgb(249,23,13)"/><text x="99.7792%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (54 samples, 0.05%)</title><rect x="99.5499%" y="293" width="0.0485%" height="15" fill="rgb(219,9,5)"/><text x="99.7999%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (109 samples, 0.10%)</title><rect x="99.5984%" y="293" width="0.0979%" height="15" fill="rgb(254,171,16)"/><text x="99.8484%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (15 samples, 0.01%)</title><rect x="99.7170%" y="293" width="0.0135%" height="15" fill="rgb(230,171,20)"/><text x="99.9670%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (81,914 samples, 73.60%)</title><rect x="26.1559%" y="309" width="73.5962%" height="15" fill="rgb(210,71,41)"/><text x="26.4059%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (24 samples, 0.02%)</title><rect x="99.7305%" y="293" width="0.0216%" height="15" fill="rgb(206,173,20)"/><text x="99.9805%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (231 samples, 0.21%)</title><rect x="99.7520%" y="309" width="0.2075%" height="15" fill="rgb(233,88,34)"/><text x="100.0020%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (111,122 samples, 99.84%)</title><rect x="0.1222%" y="325" width="99.8383%" height="15" fill="rgb(223,209,46)"/><text x="0.3722%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (12 samples, 0.01%)</title><rect x="99.9605%" y="325" width="0.0108%" height="15" fill="rgb(250,43,18)"/><text x="100.2105%" y="335.50"></text></g><g><title>all (111,302 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(208,13,10)"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (111,216 samples, 99.92%)</title><rect x="0.0773%" y="485" width="99.9227%" height="15" fill="rgb(212,200,36)"/><text x="0.3273%" y="495.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (111,216 samples, 99.92%)</title><rect x="0.0773%" y="469" width="99.9227%" height="15" fill="rgb(225,90,30)"/><text x="0.3273%" y="479.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (111,216 samples, 99.92%)</title><rect x="0.0773%" y="453" width="99.9227%" height="15" fill="rgb(236,182,39)"/><text x="0.3273%" y="463.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (111,216 samples, 99.92%)</title><rect x="0.0773%" y="437" width="99.9227%" height="15" fill="rgb(212,144,35)"/><text x="0.3273%" y="447.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (111,216 samples, 99.92%)</title><rect x="0.0773%" y="421" width="99.9227%" height="15" fill="rgb(228,63,44)"/><text x="0.3273%" y="431.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (111,216 samples, 99.92%)</title><rect x="0.0773%" y="405" width="99.9227%" height="15" fill="rgb(228,109,6)"/><text x="0.3273%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (111,216 samples, 99.92%)</title><rect x="0.0773%" y="389" width="99.9227%" height="15" fill="rgb(238,117,24)"/><text x="0.3273%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (111,216 samples, 99.92%)</title><rect x="0.0773%" y="373" width="99.9227%" height="15" fill="rgb(242,26,26)"/><text x="0.3273%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (111,216 samples, 99.92%)</title><rect x="0.0773%" y="357" width="99.9227%" height="15" fill="rgb(221,92,48)"/><text x="0.3273%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (111,216 samples, 99.92%)</title><rect x="0.0773%" y="341" width="99.9227%" height="15" fill="rgb(209,209,32)"/><text x="0.3273%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (32 samples, 0.03%)</title><rect x="99.9712%" y="325" width="0.0288%" height="15" fill="rgb(221,70,22)"/><text x="100.2212%" y="335.50"></text></g></svg></svg>