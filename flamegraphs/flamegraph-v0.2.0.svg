<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (18 samples, 0.03%)</title><rect x="0.0125%" y="245" width="0.0322%" height="15" fill="rgb(227,0,7)"/><text x="0.2625%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (16 samples, 0.03%)</title><rect x="0.0161%" y="229" width="0.0287%" height="15" fill="rgb(217,0,24)"/><text x="0.2661%" y="239.50"></text></g><g><title>async-redis`&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (7 samples, 0.01%)</title><rect x="0.0466%" y="181" width="0.0125%" height="15" fill="rgb(221,193,54)"/><text x="0.2966%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`kevent (6 samples, 0.01%)</title><rect x="0.0484%" y="165" width="0.0107%" height="15" fill="rgb(248,212,6)"/><text x="0.2984%" y="175.50"></text></g><g><title>async-redis`tokio::net::tcp::stream::TcpStream::new (9 samples, 0.02%)</title><rect x="0.0448%" y="245" width="0.0161%" height="15" fill="rgb(208,68,35)"/><text x="0.2948%" y="255.50"></text></g><g><title>async-redis`tokio::io::poll_evented::PollEvented&lt;E&gt;::new (9 samples, 0.02%)</title><rect x="0.0448%" y="229" width="0.0161%" height="15" fill="rgb(232,128,0)"/><text x="0.2948%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::new_with_interest_and_handle (9 samples, 0.02%)</title><rect x="0.0448%" y="213" width="0.0161%" height="15" fill="rgb(207,160,47)"/><text x="0.2948%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Inner::add_source (9 samples, 0.02%)</title><rect x="0.0448%" y="197" width="0.0161%" height="15" fill="rgb(228,23,34)"/><text x="0.2948%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.06%)</title><rect x="0.0072%" y="261" width="0.0573%" height="15" fill="rgb(218,30,26)"/><text x="0.2572%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (37 samples, 0.07%)</title><rect x="0.0000%" y="389" width="0.0663%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (37 samples, 0.07%)</title><rect x="0.0000%" y="373" width="0.0663%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (37 samples, 0.07%)</title><rect x="0.0000%" y="357" width="0.0663%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (34 samples, 0.06%)</title><rect x="0.0054%" y="341" width="0.0609%" height="15" fill="rgb(216,20,37)"/><text x="0.2554%" y="351.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.06%)</title><rect x="0.0054%" y="325" width="0.0609%" height="15" fill="rgb(206,188,39)"/><text x="0.2554%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.06%)</title><rect x="0.0054%" y="309" width="0.0609%" height="15" fill="rgb(217,207,13)"/><text x="0.2554%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (33 samples, 0.06%)</title><rect x="0.0072%" y="293" width="0.0591%" height="15" fill="rgb(231,73,38)"/><text x="0.2572%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.06%)</title><rect x="0.0072%" y="277" width="0.0591%" height="15" fill="rgb(225,20,46)"/><text x="0.2572%" y="287.50"></text></g><g><title>async-redis`0x1 (38 samples, 0.07%)</title><rect x="0.0000%" y="501" width="0.0681%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (38 samples, 0.07%)</title><rect x="0.0000%" y="485" width="0.0681%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (38 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0681%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (38 samples, 0.07%)</title><rect x="0.0000%" y="453" width="0.0681%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (38 samples, 0.07%)</title><rect x="0.0000%" y="437" width="0.0681%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (38 samples, 0.07%)</title><rect x="0.0000%" y="421" width="0.0681%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (38 samples, 0.07%)</title><rect x="0.0000%" y="405" width="0.0681%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (8 samples, 0.01%)</title><rect x="0.0698%" y="325" width="0.0143%" height="15" fill="rgb(241,131,45)"/><text x="0.3198%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (9 samples, 0.02%)</title><rect x="1.0477%" y="309" width="0.0161%" height="15" fill="rgb(249,31,29)"/><text x="1.2977%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.02%)</title><rect x="1.0692%" y="309" width="0.0161%" height="15" fill="rgb(225,111,53)"/><text x="1.3192%" y="319.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.01%)</title><rect x="1.0853%" y="309" width="0.0143%" height="15" fill="rgb(238,160,17)"/><text x="1.3353%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (6 samples, 0.01%)</title><rect x="1.0889%" y="293" width="0.0107%" height="15" fill="rgb(214,148,48)"/><text x="1.3389%" y="303.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.03%)</title><rect x="1.0996%" y="309" width="0.0304%" height="15" fill="rgb(232,36,49)"/><text x="1.3496%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (16 samples, 0.03%)</title><rect x="1.1301%" y="309" width="0.0287%" height="15" fill="rgb(209,103,24)"/><text x="1.3801%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (270 samples, 0.48%)</title><rect x="1.1587%" y="309" width="0.4835%" height="15" fill="rgb(229,88,8)"/><text x="1.4087%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (7 samples, 0.01%)</title><rect x="4.1370%" y="293" width="0.0125%" height="15" fill="rgb(213,181,19)"/><text x="4.3870%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (7 samples, 0.01%)</title><rect x="4.1370%" y="277" width="0.0125%" height="15" fill="rgb(254,191,54)"/><text x="4.3870%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (26 samples, 0.05%)</title><rect x="4.9572%" y="277" width="0.0466%" height="15" fill="rgb(241,83,37)"/><text x="5.2072%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (10 samples, 0.02%)</title><rect x="5.3637%" y="261" width="0.0179%" height="15" fill="rgb(233,36,39)"/><text x="5.6137%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.03%)</title><rect x="5.3816%" y="261" width="0.0287%" height="15" fill="rgb(226,3,54)"/><text x="5.6316%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,346 samples, 4.20%)</title><rect x="5.4103%" y="261" width="4.2014%" height="15" fill="rgb(245,192,40)"/><text x="5.6603%" y="271.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvclrprepost (7 samples, 0.01%)</title><rect x="9.8446%" y="245" width="0.0125%" height="15" fill="rgb(238,167,29)"/><text x="10.0946%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (16 samples, 0.03%)</title><rect x="9.8571%" y="245" width="0.0287%" height="15" fill="rgb(232,182,51)"/><text x="10.1071%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (87 samples, 0.16%)</title><rect x="9.8875%" y="229" width="0.1558%" height="15" fill="rgb(231,60,39)"/><text x="10.1375%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (89 samples, 0.16%)</title><rect x="9.8857%" y="245" width="0.1594%" height="15" fill="rgb(208,69,12)"/><text x="10.1357%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (68 samples, 0.12%)</title><rect x="10.0451%" y="245" width="0.1218%" height="15" fill="rgb(235,93,37)"/><text x="10.2951%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (362 samples, 0.65%)</title><rect x="9.6135%" y="261" width="0.6483%" height="15" fill="rgb(213,116,39)"/><text x="9.8635%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (53 samples, 0.09%)</title><rect x="10.1669%" y="245" width="0.0949%" height="15" fill="rgb(222,207,29)"/><text x="10.4169%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (11 samples, 0.02%)</title><rect x="10.2654%" y="261" width="0.0197%" height="15" fill="rgb(206,96,30)"/><text x="10.5154%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (17 samples, 0.03%)</title><rect x="10.2851%" y="261" width="0.0304%" height="15" fill="rgb(218,138,4)"/><text x="10.5351%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (2,987 samples, 5.35%)</title><rect x="5.0038%" y="277" width="5.3494%" height="15" fill="rgb(250,191,14)"/><text x="5.2538%" y="287.50">async-r..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (21 samples, 0.04%)</title><rect x="10.3156%" y="261" width="0.0376%" height="15" fill="rgb(239,60,40)"/><text x="10.5656%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (6 samples, 0.01%)</title><rect x="10.3532%" y="277" width="0.0107%" height="15" fill="rgb(206,27,48)"/><text x="10.6032%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (19 samples, 0.03%)</title><rect x="10.3675%" y="277" width="0.0340%" height="15" fill="rgb(225,35,8)"/><text x="10.6175%" y="287.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="10.5806%" y="245" width="0.0215%" height="15" fill="rgb(250,213,24)"/><text x="10.8306%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (6 samples, 0.01%)</title><rect x="10.6021%" y="245" width="0.0107%" height="15" fill="rgb(247,123,22)"/><text x="10.8521%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (26 samples, 0.05%)</title><rect x="10.6397%" y="245" width="0.0466%" height="15" fill="rgb(231,138,38)"/><text x="10.8897%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (10 samples, 0.02%)</title><rect x="10.6863%" y="245" width="0.0179%" height="15" fill="rgb(231,145,46)"/><text x="10.9363%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="11.2504%" y="229" width="0.0125%" height="15" fill="rgb(251,118,11)"/><text x="11.5004%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (8 samples, 0.01%)</title><rect x="11.2719%" y="229" width="0.0143%" height="15" fill="rgb(217,147,25)"/><text x="11.5219%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (15 samples, 0.03%)</title><rect x="11.2970%" y="229" width="0.0269%" height="15" fill="rgb(247,81,37)"/><text x="11.5470%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (61 samples, 0.11%)</title><rect x="11.3256%" y="229" width="0.1092%" height="15" fill="rgb(209,12,38)"/><text x="11.5756%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (25 samples, 0.04%)</title><rect x="11.5799%" y="213" width="0.0448%" height="15" fill="rgb(227,1,9)"/><text x="11.8299%" y="223.50"></text></g><g><title> 32]&gt;::default (25 samples, 0.04%)</title><rect x="11.5799%" y="197" width="0.0448%" height="15" fill="rgb(248,47,43)"/><text x="11.8299%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (69 samples, 0.12%)</title><rect x="11.6247%" y="213" width="0.1236%" height="15" fill="rgb(221,10,30)"/><text x="11.8747%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (9 samples, 0.02%)</title><rect x="11.7554%" y="213" width="0.0161%" height="15" fill="rgb(210,229,1)"/><text x="12.0054%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (24 samples, 0.04%)</title><rect x="11.7823%" y="197" width="0.0430%" height="15" fill="rgb(222,148,37)"/><text x="12.0323%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (67 samples, 0.12%)</title><rect x="11.8253%" y="197" width="0.1200%" height="15" fill="rgb(234,67,33)"/><text x="12.0753%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (12 samples, 0.02%)</title><rect x="11.9918%" y="165" width="0.0215%" height="15" fill="rgb(247,98,35)"/><text x="12.2418%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (15 samples, 0.03%)</title><rect x="12.0133%" y="165" width="0.0269%" height="15" fill="rgb(247,138,52)"/><text x="12.2633%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (63 samples, 0.11%)</title><rect x="11.9614%" y="181" width="0.1128%" height="15" fill="rgb(213,79,30)"/><text x="12.2114%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.03%)</title><rect x="12.0402%" y="165" width="0.0340%" height="15" fill="rgb(246,177,23)"/><text x="12.2902%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (173 samples, 0.31%)</title><rect x="11.7716%" y="213" width="0.3098%" height="15" fill="rgb(230,62,27)"/><text x="12.0216%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (76 samples, 0.14%)</title><rect x="11.9453%" y="197" width="0.1361%" height="15" fill="rgb(216,154,8)"/><text x="12.1953%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (363 samples, 0.65%)</title><rect x="11.4349%" y="229" width="0.6501%" height="15" fill="rgb(244,35,45)"/><text x="11.6849%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (10 samples, 0.02%)</title><rect x="12.0850%" y="229" width="0.0179%" height="15" fill="rgb(251,115,12)"/><text x="12.3350%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,578 samples, 6.41%)</title><rect x="10.7131%" y="245" width="6.4078%" height="15" fill="rgb(240,54,50)"/><text x="10.9631%" y="255.50">async-re..</text></g><g><title>libsystem_kernel.dylib`kevent (2,800 samples, 5.01%)</title><rect x="12.1065%" y="229" width="5.0145%" height="15" fill="rgb(233,84,52)"/><text x="12.3565%" y="239.50">libsys..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (15 samples, 0.03%)</title><rect x="17.1210%" y="245" width="0.0269%" height="15" fill="rgb(207,117,47)"/><text x="17.3710%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (7 samples, 0.01%)</title><rect x="17.1836%" y="229" width="0.0125%" height="15" fill="rgb(249,43,39)"/><text x="17.4336%" y="239.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (26 samples, 0.05%)</title><rect x="17.2177%" y="213" width="0.0466%" height="15" fill="rgb(209,38,44)"/><text x="17.4677%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (73 samples, 0.13%)</title><rect x="17.2642%" y="213" width="0.1307%" height="15" fill="rgb(236,212,23)"/><text x="17.5142%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (128 samples, 0.23%)</title><rect x="17.1962%" y="229" width="0.2292%" height="15" fill="rgb(242,79,21)"/><text x="17.4462%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.03%)</title><rect x="17.3950%" y="213" width="0.0304%" height="15" fill="rgb(211,96,35)"/><text x="17.6450%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (153 samples, 0.27%)</title><rect x="17.1532%" y="245" width="0.2740%" height="15" fill="rgb(253,215,40)"/><text x="17.4032%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (3,862 samples, 6.92%)</title><rect x="10.5591%" y="261" width="6.9164%" height="15" fill="rgb(211,81,21)"/><text x="10.8091%" y="271.50">async-red..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (27 samples, 0.05%)</title><rect x="17.4272%" y="245" width="0.0484%" height="15" fill="rgb(208,190,38)"/><text x="17.6772%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (8 samples, 0.01%)</title><rect x="17.4756%" y="261" width="0.0143%" height="15" fill="rgb(235,213,38)"/><text x="17.7256%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (86 samples, 0.15%)</title><rect x="17.4899%" y="261" width="0.1540%" height="15" fill="rgb(237,122,38)"/><text x="17.7399%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (15 samples, 0.03%)</title><rect x="17.6439%" y="261" width="0.0269%" height="15" fill="rgb(244,218,35)"/><text x="17.8939%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (22 samples, 0.04%)</title><rect x="17.6708%" y="261" width="0.0394%" height="15" fill="rgb(240,68,47)"/><text x="17.9208%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (11 samples, 0.02%)</title><rect x="17.7102%" y="261" width="0.0197%" height="15" fill="rgb(210,16,53)"/><text x="17.9602%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (60 samples, 0.11%)</title><rect x="17.8069%" y="245" width="0.1075%" height="15" fill="rgb(235,124,12)"/><text x="18.0569%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (39 samples, 0.07%)</title><rect x="17.9143%" y="245" width="0.0698%" height="15" fill="rgb(224,169,11)"/><text x="18.1643%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (32 samples, 0.06%)</title><rect x="17.9269%" y="229" width="0.0573%" height="15" fill="rgb(250,166,2)"/><text x="18.1769%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (62 samples, 0.11%)</title><rect x="17.9842%" y="245" width="0.1110%" height="15" fill="rgb(242,216,29)"/><text x="18.2342%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (46 samples, 0.08%)</title><rect x="18.0128%" y="229" width="0.0824%" height="15" fill="rgb(230,116,27)"/><text x="18.2628%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (217 samples, 0.39%)</title><rect x="17.7299%" y="261" width="0.3886%" height="15" fill="rgb(228,99,48)"/><text x="17.9799%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (13 samples, 0.02%)</title><rect x="18.0952%" y="245" width="0.0233%" height="15" fill="rgb(253,11,6)"/><text x="18.3452%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (67 samples, 0.12%)</title><rect x="18.1185%" y="261" width="0.1200%" height="15" fill="rgb(247,143,39)"/><text x="18.3685%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (52 samples, 0.09%)</title><rect x="18.1453%" y="245" width="0.0931%" height="15" fill="rgb(236,97,10)"/><text x="18.3953%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (6 samples, 0.01%)</title><rect x="18.2474%" y="261" width="0.0107%" height="15" fill="rgb(233,208,19)"/><text x="18.4974%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,451 samples, 7.97%)</title><rect x="10.4015%" y="277" width="7.9713%" height="15" fill="rgb(216,164,2)"/><text x="10.6515%" y="287.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (64 samples, 0.11%)</title><rect x="18.2582%" y="261" width="0.1146%" height="15" fill="rgb(220,129,5)"/><text x="18.5082%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.03%)</title><rect x="18.3782%" y="277" width="0.0304%" height="15" fill="rgb(242,17,10)"/><text x="18.6282%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3,863 samples, 6.92%)</title><rect x="18.4086%" y="277" width="6.9182%" height="15" fill="rgb(242,107,0)"/><text x="18.6586%" y="287.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (27 samples, 0.05%)</title><rect x="25.3268%" y="277" width="0.0484%" height="15" fill="rgb(251,28,31)"/><text x="25.5768%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (107 samples, 0.19%)</title><rect x="25.3806%" y="277" width="0.1916%" height="15" fill="rgb(233,223,10)"/><text x="25.6306%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12,005 samples, 21.50%)</title><rect x="4.1495%" y="293" width="21.4997%" height="15" fill="rgb(215,21,27)"/><text x="4.3995%" y="303.50">async-redis`&lt;tokio::runtime::park:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (37 samples, 0.07%)</title><rect x="25.5829%" y="277" width="0.0663%" height="15" fill="rgb(232,23,21)"/><text x="25.8329%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="25.7101%" y="213" width="0.0125%" height="15" fill="rgb(244,5,23)"/><text x="25.9601%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (20 samples, 0.04%)</title><rect x="25.7029%" y="229" width="0.0358%" height="15" fill="rgb(226,81,46)"/><text x="25.9529%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (8 samples, 0.01%)</title><rect x="25.7244%" y="213" width="0.0143%" height="15" fill="rgb(247,70,30)"/><text x="25.9744%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (132 samples, 0.24%)</title><rect x="25.6653%" y="245" width="0.2364%" height="15" fill="rgb(212,68,19)"/><text x="25.9153%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (91 samples, 0.16%)</title><rect x="25.7387%" y="229" width="0.1630%" height="15" fill="rgb(240,187,13)"/><text x="25.9887%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (138 samples, 0.25%)</title><rect x="25.6617%" y="261" width="0.2471%" height="15" fill="rgb(223,113,26)"/><text x="25.9117%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (12 samples, 0.02%)</title><rect x="25.9143%" y="261" width="0.0215%" height="15" fill="rgb(206,192,2)"/><text x="26.1643%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (161 samples, 0.29%)</title><rect x="25.6582%" y="277" width="0.2883%" height="15" fill="rgb(241,108,4)"/><text x="25.9082%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (168 samples, 0.30%)</title><rect x="25.6492%" y="293" width="0.3009%" height="15" fill="rgb(247,173,49)"/><text x="25.8992%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (116 samples, 0.21%)</title><rect x="25.9716%" y="277" width="0.2077%" height="15" fill="rgb(224,114,35)"/><text x="26.2216%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (136 samples, 0.24%)</title><rect x="25.9608%" y="293" width="0.2436%" height="15" fill="rgb(245,159,27)"/><text x="26.2108%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (7 samples, 0.01%)</title><rect x="26.2151%" y="293" width="0.0125%" height="15" fill="rgb(245,172,44)"/><text x="26.4651%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (53 samples, 0.09%)</title><rect x="26.2330%" y="293" width="0.0949%" height="15" fill="rgb(236,23,11)"/><text x="26.4830%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (13,785 samples, 24.69%)</title><rect x="1.6423%" y="309" width="24.6875%" height="15" fill="rgb(205,117,38)"/><text x="1.8923%" y="319.50">async-redis`tokio::runtime::thread_pool..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (44 samples, 0.08%)</title><rect x="26.4820%" y="293" width="0.0788%" height="15" fill="rgb(237,72,25)"/><text x="26.7320%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (35 samples, 0.06%)</title><rect x="26.4981%" y="277" width="0.0627%" height="15" fill="rgb(244,70,9)"/><text x="26.7481%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (42 samples, 0.08%)</title><rect x="26.5608%" y="293" width="0.0752%" height="15" fill="rgb(217,125,39)"/><text x="26.8108%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (38 samples, 0.07%)</title><rect x="26.7130%" y="277" width="0.0681%" height="15" fill="rgb(235,36,10)"/><text x="26.9630%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,104 samples, 1.98%)</title><rect x="26.7810%" y="277" width="1.9771%" height="15" fill="rgb(251,123,47)"/><text x="27.0310%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="28.7582%" y="277" width="0.0125%" height="15" fill="rgb(221,13,13)"/><text x="29.0082%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (12 samples, 0.02%)</title><rect x="28.7797%" y="277" width="0.0215%" height="15" fill="rgb(238,131,9)"/><text x="29.0297%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (63 samples, 0.11%)</title><rect x="28.8065%" y="277" width="0.1128%" height="15" fill="rgb(211,50,8)"/><text x="29.0565%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (61 samples, 0.11%)</title><rect x="28.8101%" y="261" width="0.1092%" height="15" fill="rgb(245,182,24)"/><text x="29.0601%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (31 samples, 0.06%)</title><rect x="28.9194%" y="277" width="0.0555%" height="15" fill="rgb(242,14,37)"/><text x="29.1694%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (10 samples, 0.02%)</title><rect x="28.9570%" y="261" width="0.0179%" height="15" fill="rgb(246,228,12)"/><text x="29.2070%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (29 samples, 0.05%)</title><rect x="28.9749%" y="277" width="0.0519%" height="15" fill="rgb(213,55,15)"/><text x="29.2249%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,341 samples, 2.40%)</title><rect x="26.6396%" y="293" width="2.4016%" height="15" fill="rgb(209,9,3)"/><text x="26.8896%" y="303.50">as..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (8 samples, 0.01%)</title><rect x="29.0268%" y="277" width="0.0143%" height="15" fill="rgb(230,59,30)"/><text x="29.2768%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (9 samples, 0.02%)</title><rect x="29.0465%" y="293" width="0.0161%" height="15" fill="rgb(209,121,21)"/><text x="29.2965%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14 samples, 0.03%)</title><rect x="29.1826%" y="277" width="0.0251%" height="15" fill="rgb(220,109,13)"/><text x="29.4326%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (6 samples, 0.01%)</title><rect x="29.2077%" y="277" width="0.0107%" height="15" fill="rgb(232,18,1)"/><text x="29.4577%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.03%)</title><rect x="29.2847%" y="261" width="0.0304%" height="15" fill="rgb(215,41,42)"/><text x="29.5347%" y="271.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="29.5122%" y="229" width="0.0197%" height="15" fill="rgb(224,123,36)"/><text x="29.7622%" y="239.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.08%)</title><rect x="29.9115%" y="213" width="0.0824%" height="15" fill="rgb(240,125,3)"/><text x="30.1615%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (21 samples, 0.04%)</title><rect x="29.9563%" y="197" width="0.0376%" height="15" fill="rgb(205,98,50)"/><text x="30.2063%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.04%)</title><rect x="30.0029%" y="213" width="0.0358%" height="15" fill="rgb(205,185,37)"/><text x="30.2529%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="30.7479%" y="165" width="0.0125%" height="15" fill="rgb(238,207,15)"/><text x="30.9979%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (11 samples, 0.02%)</title><rect x="30.7604%" y="165" width="0.0197%" height="15" fill="rgb(213,199,42)"/><text x="31.0104%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (18 samples, 0.03%)</title><rect x="31.0577%" y="133" width="0.0322%" height="15" fill="rgb(235,201,11)"/><text x="31.3077%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (18 samples, 0.03%)</title><rect x="31.0899%" y="133" width="0.0322%" height="15" fill="rgb(207,46,11)"/><text x="31.3399%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (21 samples, 0.04%)</title><rect x="31.5162%" y="85" width="0.0376%" height="15" fill="rgb(241,35,35)"/><text x="31.7662%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (127 samples, 0.23%)</title><rect x="31.3962%" y="101" width="0.2274%" height="15" fill="rgb(243,32,47)"/><text x="31.6462%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (39 samples, 0.07%)</title><rect x="31.5538%" y="85" width="0.0698%" height="15" fill="rgb(247,202,23)"/><text x="31.8038%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (12 samples, 0.02%)</title><rect x="31.6236%" y="101" width="0.0215%" height="15" fill="rgb(219,102,11)"/><text x="31.8736%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (16 samples, 0.03%)</title><rect x="31.6451%" y="101" width="0.0287%" height="15" fill="rgb(243,110,44)"/><text x="31.8951%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (11 samples, 0.02%)</title><rect x="31.6738%" y="101" width="0.0197%" height="15" fill="rgb(222,74,54)"/><text x="31.9238%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (18 samples, 0.03%)</title><rect x="31.6935%" y="101" width="0.0322%" height="15" fill="rgb(216,99,12)"/><text x="31.9435%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (15,127 samples, 27.09%)</title><rect x="31.7257%" y="101" width="27.0909%" height="15" fill="rgb(226,22,26)"/><text x="31.9757%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (15,382 samples, 27.55%)</title><rect x="31.3031%" y="117" width="27.5475%" height="15" fill="rgb(217,163,10)"/><text x="31.5531%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::TcpStre..</text></g><g><title>libsystem_kernel.dylib`cerror (19 samples, 0.03%)</title><rect x="58.8166%" y="101" width="0.0340%" height="15" fill="rgb(213,25,53)"/><text x="59.0666%" y="111.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (8 samples, 0.01%)</title><rect x="58.8542%" y="117" width="0.0143%" height="15" fill="rgb(252,105,26)"/><text x="59.1042%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.02%)</title><rect x="58.8685%" y="117" width="0.0179%" height="15" fill="rgb(220,39,43)"/><text x="59.1185%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (29 samples, 0.05%)</title><rect x="59.2643%" y="101" width="0.0519%" height="15" fill="rgb(229,68,48)"/><text x="59.5143%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (6 samples, 0.01%)</title><rect x="59.4326%" y="85" width="0.0107%" height="15" fill="rgb(252,8,32)"/><text x="59.6826%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (80 samples, 0.14%)</title><rect x="59.3162%" y="101" width="0.1433%" height="15" fill="rgb(223,20,43)"/><text x="59.5662%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (9 samples, 0.02%)</title><rect x="59.4434%" y="85" width="0.0161%" height="15" fill="rgb(229,81,49)"/><text x="59.6934%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.02%)</title><rect x="59.4434%" y="69" width="0.0161%" height="15" fill="rgb(236,28,36)"/><text x="59.6934%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (7 samples, 0.01%)</title><rect x="59.4595%" y="101" width="0.0125%" height="15" fill="rgb(249,185,26)"/><text x="59.7095%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (368 samples, 0.66%)</title><rect x="58.8864%" y="117" width="0.6590%" height="15" fill="rgb(249,174,33)"/><text x="59.1364%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (41 samples, 0.07%)</title><rect x="59.4720%" y="101" width="0.0734%" height="15" fill="rgb(233,201,37)"/><text x="59.7220%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (15,882 samples, 28.44%)</title><rect x="31.1222%" y="133" width="28.4430%" height="15" fill="rgb(221,78,26)"/><text x="31.3722%" y="143.50">async-redis`tokio::io::driver::registration::R..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (11 samples, 0.02%)</title><rect x="59.5455%" y="117" width="0.0197%" height="15" fill="rgb(250,127,30)"/><text x="59.7955%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (15,991 samples, 28.64%)</title><rect x="30.9467%" y="149" width="28.6382%" height="15" fill="rgb(230,49,44)"/><text x="31.1967%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::TcpStrea..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (11 samples, 0.02%)</title><rect x="59.5652%" y="133" width="0.0197%" height="15" fill="rgb(229,67,23)"/><text x="59.8152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.01%)</title><rect x="59.6117%" y="101" width="0.0107%" height="15" fill="rgb(249,83,47)"/><text x="59.8617%" y="111.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.01%)</title><rect x="59.6117%" y="133" width="0.0125%" height="15" fill="rgb(215,43,3)"/><text x="59.8617%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="59.6117%" y="117" width="0.0125%" height="15" fill="rgb(238,154,13)"/><text x="59.8617%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (104 samples, 0.19%)</title><rect x="59.5867%" y="149" width="0.1863%" height="15" fill="rgb(219,56,2)"/><text x="59.8367%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (83 samples, 0.15%)</title><rect x="59.6243%" y="133" width="0.1486%" height="15" fill="rgb(233,0,4)"/><text x="59.8743%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (10 samples, 0.02%)</title><rect x="59.7729%" y="149" width="0.0179%" height="15" fill="rgb(235,30,7)"/><text x="60.0229%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (16,203 samples, 29.02%)</title><rect x="30.7801%" y="165" width="29.0179%" height="15" fill="rgb(250,79,13)"/><text x="31.0301%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::ReadBuf..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 0.02%)</title><rect x="59.7980%" y="165" width="0.0197%" height="15" fill="rgb(211,146,34)"/><text x="60.0480%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.02%)</title><rect x="60.2296%" y="133" width="0.0197%" height="15" fill="rgb(228,22,38)"/><text x="60.4796%" y="143.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (248 samples, 0.44%)</title><rect x="59.8481%" y="149" width="0.4441%" height="15" fill="rgb(235,168,5)"/><text x="60.0981%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (18 samples, 0.03%)</title><rect x="60.2600%" y="133" width="0.0322%" height="15" fill="rgb(221,155,16)"/><text x="60.5100%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (266 samples, 0.48%)</title><rect x="59.8177%" y="165" width="0.4764%" height="15" fill="rgb(215,215,53)"/><text x="60.0677%" y="175.50"></text></g><g><title>async-redis`__rdl_dealloc (9 samples, 0.02%)</title><rect x="60.2941%" y="165" width="0.0161%" height="15" fill="rgb(223,4,10)"/><text x="60.5441%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.02%)</title><rect x="60.3138%" y="165" width="0.0179%" height="15" fill="rgb(234,103,6)"/><text x="60.5638%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.05%)</title><rect x="60.5591%" y="149" width="0.0501%" height="15" fill="rgb(227,97,0)"/><text x="60.8091%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (18 samples, 0.03%)</title><rect x="60.5770%" y="133" width="0.0322%" height="15" fill="rgb(234,150,53)"/><text x="60.8270%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (8 samples, 0.01%)</title><rect x="60.6236%" y="149" width="0.0143%" height="15" fill="rgb(228,201,54)"/><text x="60.8736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (31 samples, 0.06%)</title><rect x="60.8224%" y="85" width="0.0555%" height="15" fill="rgb(222,22,37)"/><text x="61.0724%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (38 samples, 0.07%)</title><rect x="60.8779%" y="85" width="0.0681%" height="15" fill="rgb(237,53,32)"/><text x="61.1279%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (141 samples, 0.25%)</title><rect x="60.6952%" y="101" width="0.2525%" height="15" fill="rgb(233,25,53)"/><text x="60.9452%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.29%)</title><rect x="60.6612%" y="133" width="0.2883%" height="15" fill="rgb(210,40,34)"/><text x="60.9112%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (153 samples, 0.27%)</title><rect x="60.6755%" y="117" width="0.2740%" height="15" fill="rgb(241,220,44)"/><text x="60.9255%" y="127.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (177 samples, 0.32%)</title><rect x="60.6397%" y="149" width="0.3170%" height="15" fill="rgb(235,28,35)"/><text x="60.8897%" y="159.50"></text></g><g><title>async-redis`__rdl_dealloc (11 samples, 0.02%)</title><rect x="61.1358%" y="133" width="0.0197%" height="15" fill="rgb(210,56,17)"/><text x="61.3858%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (108 samples, 0.19%)</title><rect x="63.7129%" y="117" width="0.1934%" height="15" fill="rgb(224,130,29)"/><text x="63.9629%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (78 samples, 0.14%)</title><rect x="63.7666%" y="101" width="0.1397%" height="15" fill="rgb(235,212,8)"/><text x="64.0166%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,546 samples, 2.77%)</title><rect x="61.1644%" y="133" width="2.7687%" height="15" fill="rgb(223,33,50)"/><text x="61.4144%" y="143.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (15 samples, 0.03%)</title><rect x="63.9063%" y="117" width="0.0269%" height="15" fill="rgb(219,149,13)"/><text x="64.1563%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (23 samples, 0.04%)</title><rect x="64.0048%" y="117" width="0.0412%" height="15" fill="rgb(250,156,29)"/><text x="64.2548%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (25 samples, 0.04%)</title><rect x="64.0460%" y="117" width="0.0448%" height="15" fill="rgb(216,193,19)"/><text x="64.2960%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (244 samples, 0.44%)</title><rect x="64.0908%" y="117" width="0.4370%" height="15" fill="rgb(216,135,14)"/><text x="64.3408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (218 samples, 0.39%)</title><rect x="64.1373%" y="101" width="0.3904%" height="15" fill="rgb(241,47,5)"/><text x="64.3873%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (207 samples, 0.37%)</title><rect x="64.1570%" y="85" width="0.3707%" height="15" fill="rgb(233,42,35)"/><text x="64.4070%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.02%)</title><rect x="64.5277%" y="117" width="0.0179%" height="15" fill="rgb(231,13,6)"/><text x="64.7777%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (66 samples, 0.12%)</title><rect x="64.6119%" y="101" width="0.1182%" height="15" fill="rgb(207,181,40)"/><text x="64.8619%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (64 samples, 0.11%)</title><rect x="64.6155%" y="85" width="0.1146%" height="15" fill="rgb(254,173,49)"/><text x="64.8655%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (109 samples, 0.20%)</title><rect x="64.5456%" y="117" width="0.1952%" height="15" fill="rgb(221,1,38)"/><text x="64.7956%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="64.7301%" y="101" width="0.0107%" height="15" fill="rgb(206,124,46)"/><text x="64.9801%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (121 samples, 0.22%)</title><rect x="64.7409%" y="117" width="0.2167%" height="15" fill="rgb(249,21,11)"/><text x="64.9909%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="64.9611%" y="117" width="0.0197%" height="15" fill="rgb(222,201,40)"/><text x="65.2111%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="64.9808%" y="117" width="0.0197%" height="15" fill="rgb(235,61,29)"/><text x="65.2308%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (597 samples, 1.07%)</title><rect x="63.9332%" y="133" width="1.0692%" height="15" fill="rgb(219,207,3)"/><text x="64.1832%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (7 samples, 0.01%)</title><rect x="65.0023%" y="133" width="0.0125%" height="15" fill="rgb(222,56,46)"/><text x="65.2523%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (70 samples, 0.13%)</title><rect x="65.0149%" y="133" width="0.1254%" height="15" fill="rgb(239,76,54)"/><text x="65.2649%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (57 samples, 0.10%)</title><rect x="65.0381%" y="117" width="0.1021%" height="15" fill="rgb(231,124,27)"/><text x="65.2881%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (9 samples, 0.02%)</title><rect x="65.1402%" y="133" width="0.0161%" height="15" fill="rgb(249,195,6)"/><text x="65.3902%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (103 samples, 0.18%)</title><rect x="65.1563%" y="133" width="0.1845%" height="15" fill="rgb(237,174,47)"/><text x="65.4063%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,482 samples, 4.45%)</title><rect x="60.9567%" y="149" width="4.4450%" height="15" fill="rgb(206,201,31)"/><text x="61.2067%" y="159.50">async..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (29 samples, 0.05%)</title><rect x="65.4304%" y="133" width="0.0519%" height="15" fill="rgb(231,57,52)"/><text x="65.6804%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (23 samples, 0.04%)</title><rect x="65.4411%" y="117" width="0.0412%" height="15" fill="rgb(248,177,22)"/><text x="65.6911%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (49 samples, 0.09%)</title><rect x="65.4017%" y="149" width="0.0878%" height="15" fill="rgb(215,211,37)"/><text x="65.6517%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (31 samples, 0.06%)</title><rect x="65.5611%" y="133" width="0.0555%" height="15" fill="rgb(241,128,51)"/><text x="65.8111%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (30 samples, 0.05%)</title><rect x="65.6166%" y="133" width="0.0537%" height="15" fill="rgb(227,165,31)"/><text x="65.8666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (118 samples, 0.21%)</title><rect x="65.6865%" y="117" width="0.2113%" height="15" fill="rgb(228,167,24)"/><text x="65.9365%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (116 samples, 0.21%)</title><rect x="65.6900%" y="101" width="0.2077%" height="15" fill="rgb(228,143,12)"/><text x="65.9400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 0.10%)</title><rect x="65.7993%" y="85" width="0.0985%" height="15" fill="rgb(249,149,8)"/><text x="66.0493%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 0.23%)</title><rect x="65.6721%" y="133" width="0.2274%" height="15" fill="rgb(243,35,44)"/><text x="65.9221%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.08%)</title><rect x="65.9515%" y="117" width="0.0806%" height="15" fill="rgb(246,89,9)"/><text x="66.2015%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 0.08%)</title><rect x="65.9551%" y="101" width="0.0770%" height="15" fill="rgb(233,213,13)"/><text x="66.2051%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 0.14%)</title><rect x="65.9049%" y="133" width="0.1397%" height="15" fill="rgb(233,141,41)"/><text x="66.1549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="66.0321%" y="117" width="0.0125%" height="15" fill="rgb(239,167,4)"/><text x="66.2821%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.04%)</title><rect x="66.1557%" y="101" width="0.0394%" height="15" fill="rgb(209,217,16)"/><text x="66.4057%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (88 samples, 0.16%)</title><rect x="66.0446%" y="133" width="0.1576%" height="15" fill="rgb(219,88,35)"/><text x="66.2946%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 0.07%)</title><rect x="66.1288%" y="117" width="0.0734%" height="15" fill="rgb(220,193,23)"/><text x="66.3788%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (409 samples, 0.73%)</title><rect x="65.4895%" y="149" width="0.7325%" height="15" fill="rgb(230,90,52)"/><text x="65.7395%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (19 samples, 0.03%)</title><rect x="66.2219%" y="149" width="0.0340%" height="15" fill="rgb(252,106,19)"/><text x="66.4719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.02%)</title><rect x="66.5568%" y="53" width="0.0197%" height="15" fill="rgb(206,74,20)"/><text x="66.8068%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="66.5765%" y="53" width="0.0107%" height="15" fill="rgb(230,138,44)"/><text x="66.8265%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (156 samples, 0.28%)</title><rect x="66.3939%" y="85" width="0.2794%" height="15" fill="rgb(235,182,43)"/><text x="66.6439%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (149 samples, 0.27%)</title><rect x="66.4064%" y="69" width="0.2668%" height="15" fill="rgb(242,16,51)"/><text x="66.6564%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.09%)</title><rect x="66.5873%" y="53" width="0.0860%" height="15" fill="rgb(248,9,4)"/><text x="66.8373%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.04%)</title><rect x="66.6303%" y="37" width="0.0430%" height="15" fill="rgb(210,31,22)"/><text x="66.8803%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (176 samples, 0.32%)</title><rect x="66.3616%" y="101" width="0.3152%" height="15" fill="rgb(239,54,39)"/><text x="66.6116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.01%)</title><rect x="66.6768%" y="101" width="0.0107%" height="15" fill="rgb(230,99,41)"/><text x="66.9268%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (219 samples, 0.39%)</title><rect x="66.2971%" y="117" width="0.3922%" height="15" fill="rgb(253,106,12)"/><text x="66.5471%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="66.6894%" y="117" width="0.0161%" height="15" fill="rgb(213,46,41)"/><text x="66.9394%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (246 samples, 0.44%)</title><rect x="66.2757%" y="133" width="0.4406%" height="15" fill="rgb(215,133,35)"/><text x="66.5257%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.01%)</title><rect x="66.7055%" y="117" width="0.0107%" height="15" fill="rgb(213,28,5)"/><text x="66.9555%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (274 samples, 0.49%)</title><rect x="66.2560%" y="149" width="0.4907%" height="15" fill="rgb(215,77,49)"/><text x="66.5060%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (17 samples, 0.03%)</title><rect x="66.7162%" y="133" width="0.0304%" height="15" fill="rgb(248,100,22)"/><text x="66.9662%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (7 samples, 0.01%)</title><rect x="66.7467%" y="149" width="0.0125%" height="15" fill="rgb(208,67,9)"/><text x="66.9967%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (55 samples, 0.10%)</title><rect x="66.7592%" y="149" width="0.0985%" height="15" fill="rgb(219,133,21)"/><text x="67.0092%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (27 samples, 0.05%)</title><rect x="66.8577%" y="149" width="0.0484%" height="15" fill="rgb(246,46,29)"/><text x="67.1077%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (18 samples, 0.03%)</title><rect x="66.9060%" y="149" width="0.0322%" height="15" fill="rgb(246,185,52)"/><text x="67.1560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.03%)</title><rect x="66.9419%" y="149" width="0.0287%" height="15" fill="rgb(252,136,11)"/><text x="67.1919%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (40 samples, 0.07%)</title><rect x="66.9705%" y="149" width="0.0716%" height="15" fill="rgb(219,138,53)"/><text x="67.2205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="67.0028%" y="133" width="0.0394%" height="15" fill="rgb(211,51,23)"/><text x="67.2528%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.04%)</title><rect x="67.0028%" y="117" width="0.0394%" height="15" fill="rgb(247,221,28)"/><text x="67.2528%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (91 samples, 0.16%)</title><rect x="67.0422%" y="149" width="0.1630%" height="15" fill="rgb(251,222,45)"/><text x="67.2922%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (48 samples, 0.09%)</title><rect x="67.1192%" y="133" width="0.0860%" height="15" fill="rgb(217,162,53)"/><text x="67.3692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.05%)</title><rect x="67.1568%" y="117" width="0.0484%" height="15" fill="rgb(229,93,14)"/><text x="67.4068%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.01%)</title><rect x="67.2051%" y="149" width="0.0107%" height="15" fill="rgb(209,67,49)"/><text x="67.4551%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode (3,856 samples, 6.91%)</title><rect x="60.3317%" y="165" width="6.9057%" height="15" fill="rgb(213,87,29)"/><text x="60.5817%" y="175.50">async-red..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="67.2266%" y="149" width="0.0107%" height="15" fill="rgb(205,151,52)"/><text x="67.4766%" y="159.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (6 samples, 0.01%)</title><rect x="67.2427%" y="165" width="0.0107%" height="15" fill="rgb(253,215,39)"/><text x="67.4927%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (7 samples, 0.01%)</title><rect x="67.2535%" y="165" width="0.0125%" height="15" fill="rgb(221,220,41)"/><text x="67.5035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="67.3699%" y="133" width="0.0287%" height="15" fill="rgb(218,133,21)"/><text x="67.6199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.03%)</title><rect x="67.3699%" y="117" width="0.0287%" height="15" fill="rgb(221,193,43)"/><text x="67.6199%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.08%)</title><rect x="67.3251%" y="149" width="0.0752%" height="15" fill="rgb(240,128,52)"/><text x="67.5751%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.06%)</title><rect x="67.5311%" y="117" width="0.0573%" height="15" fill="rgb(253,114,12)"/><text x="67.7811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (111 samples, 0.20%)</title><rect x="67.4021%" y="149" width="0.1988%" height="15" fill="rgb(215,223,47)"/><text x="67.6521%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (63 samples, 0.11%)</title><rect x="67.4881%" y="133" width="0.1128%" height="15" fill="rgb(248,225,23)"/><text x="67.7381%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="67.5884%" y="117" width="0.0125%" height="15" fill="rgb(250,108,0)"/><text x="67.8384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="67.6009%" y="149" width="0.0233%" height="15" fill="rgb(228,208,7)"/><text x="67.8509%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (202 samples, 0.36%)</title><rect x="67.2660%" y="165" width="0.3618%" height="15" fill="rgb(244,45,10)"/><text x="67.5160%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (11 samples, 0.02%)</title><rect x="67.6278%" y="165" width="0.0197%" height="15" fill="rgb(207,125,25)"/><text x="67.8778%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (14 samples, 0.03%)</title><rect x="67.6582%" y="165" width="0.0251%" height="15" fill="rgb(210,195,18)"/><text x="67.9082%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (134 samples, 0.24%)</title><rect x="67.8696%" y="133" width="0.2400%" height="15" fill="rgb(249,80,12)"/><text x="68.1196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (55 samples, 0.10%)</title><rect x="68.0110%" y="117" width="0.0985%" height="15" fill="rgb(221,65,9)"/><text x="68.2610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (26 samples, 0.05%)</title><rect x="68.2689%" y="117" width="0.0466%" height="15" fill="rgb(235,49,36)"/><text x="68.5189%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="68.3155%" y="117" width="0.0125%" height="15" fill="rgb(225,32,20)"/><text x="68.5655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (346 samples, 0.62%)</title><rect x="67.8445%" y="149" width="0.6196%" height="15" fill="rgb(215,141,46)"/><text x="68.0945%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (198 samples, 0.35%)</title><rect x="68.1095%" y="133" width="0.3546%" height="15" fill="rgb(250,160,47)"/><text x="68.3595%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (76 samples, 0.14%)</title><rect x="68.3280%" y="117" width="0.1361%" height="15" fill="rgb(216,222,40)"/><text x="68.5780%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="68.4408%" y="101" width="0.0233%" height="15" fill="rgb(234,217,39)"/><text x="68.6908%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (443 samples, 0.79%)</title><rect x="67.6833%" y="165" width="0.7934%" height="15" fill="rgb(207,178,40)"/><text x="67.9333%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="68.4641%" y="149" width="0.0125%" height="15" fill="rgb(221,136,13)"/><text x="68.7141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="68.4802%" y="165" width="0.0448%" height="15" fill="rgb(249,199,10)"/><text x="68.7302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.06%)</title><rect x="68.5250%" y="165" width="0.0573%" height="15" fill="rgb(249,222,13)"/><text x="68.7750%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.04%)</title><rect x="68.5447%" y="149" width="0.0376%" height="15" fill="rgb(244,185,38)"/><text x="68.7947%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.03%)</title><rect x="68.5537%" y="133" width="0.0287%" height="15" fill="rgb(236,202,9)"/><text x="68.8037%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.03%)</title><rect x="68.6540%" y="133" width="0.0340%" height="15" fill="rgb(250,229,37)"/><text x="68.9040%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (65 samples, 0.12%)</title><rect x="68.5823%" y="165" width="0.1164%" height="15" fill="rgb(206,174,23)"/><text x="68.8323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.08%)</title><rect x="68.6181%" y="149" width="0.0806%" height="15" fill="rgb(211,33,43)"/><text x="68.8681%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="68.6880%" y="133" width="0.0107%" height="15" fill="rgb(245,58,50)"/><text x="68.9380%" y="143.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22,760 samples, 40.76%)</title><rect x="30.4613%" y="181" width="40.7608%" height="15" fill="rgb(244,68,36)"/><text x="30.7113%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::fu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,401 samples, 2.51%)</title><rect x="68.7131%" y="165" width="2.5090%" height="15" fill="rgb(232,229,15)"/><text x="68.9631%" y="175.50">li..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (11 samples, 0.02%)</title><rect x="71.2221%" y="181" width="0.0197%" height="15" fill="rgb(254,30,23)"/><text x="71.4721%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="71.2418%" y="181" width="0.0233%" height="15" fill="rgb(235,160,14)"/><text x="71.4918%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="71.2651%" y="181" width="0.0143%" height="15" fill="rgb(212,155,44)"/><text x="71.5151%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (8 samples, 0.01%)</title><rect x="71.4316%" y="149" width="0.0143%" height="15" fill="rgb(226,2,50)"/><text x="71.6816%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (7 samples, 0.01%)</title><rect x="71.4460%" y="149" width="0.0125%" height="15" fill="rgb(234,177,6)"/><text x="71.6960%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (90 samples, 0.16%)</title><rect x="71.4585%" y="149" width="0.1612%" height="15" fill="rgb(217,24,9)"/><text x="71.7085%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (15 samples, 0.03%)</title><rect x="71.6197%" y="149" width="0.0269%" height="15" fill="rgb(220,13,46)"/><text x="71.8697%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (8 samples, 0.01%)</title><rect x="71.6465%" y="149" width="0.0143%" height="15" fill="rgb(239,221,27)"/><text x="71.8965%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (16 samples, 0.03%)</title><rect x="71.6859%" y="133" width="0.0287%" height="15" fill="rgb(222,198,25)"/><text x="71.9359%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="71.7361%" y="117" width="0.0107%" height="15" fill="rgb(211,99,13)"/><text x="71.9861%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (144 samples, 0.26%)</title><rect x="71.7468%" y="117" width="0.2579%" height="15" fill="rgb(232,111,31)"/><text x="71.9968%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (114 samples, 0.20%)</title><rect x="71.8006%" y="101" width="0.2042%" height="15" fill="rgb(245,82,37)"/><text x="72.0506%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (18 samples, 0.03%)</title><rect x="72.0173%" y="117" width="0.0322%" height="15" fill="rgb(227,149,46)"/><text x="72.2673%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (213 samples, 0.38%)</title><rect x="71.7146%" y="133" width="0.3815%" height="15" fill="rgb(218,36,50)"/><text x="71.9646%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (26 samples, 0.05%)</title><rect x="72.0495%" y="117" width="0.0466%" height="15" fill="rgb(226,80,48)"/><text x="72.2995%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (12 samples, 0.02%)</title><rect x="72.0961%" y="133" width="0.0215%" height="15" fill="rgb(238,224,15)"/><text x="72.3461%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (10 samples, 0.02%)</title><rect x="72.1176%" y="133" width="0.0179%" height="15" fill="rgb(241,136,10)"/><text x="72.3676%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (47 samples, 0.08%)</title><rect x="72.1355%" y="133" width="0.0842%" height="15" fill="rgb(208,32,45)"/><text x="72.3855%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (8 samples, 0.01%)</title><rect x="72.2196%" y="133" width="0.0143%" height="15" fill="rgb(207,135,9)"/><text x="72.4696%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (326 samples, 0.58%)</title><rect x="71.6680%" y="149" width="0.5838%" height="15" fill="rgb(206,86,44)"/><text x="71.9180%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="72.2340%" y="133" width="0.0179%" height="15" fill="rgb(245,177,15)"/><text x="72.4840%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.05%)</title><rect x="72.2519%" y="149" width="0.0519%" height="15" fill="rgb(206,64,50)"/><text x="72.5019%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (568 samples, 1.02%)</title><rect x="71.2937%" y="165" width="1.0172%" height="15" fill="rgb(234,36,40)"/><text x="71.5437%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (6 samples, 0.01%)</title><rect x="72.3163%" y="165" width="0.0107%" height="15" fill="rgb(213,64,8)"/><text x="72.5663%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (10 samples, 0.02%)</title><rect x="72.3271%" y="165" width="0.0179%" height="15" fill="rgb(210,75,36)"/><text x="72.5771%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (597 samples, 1.07%)</title><rect x="71.2866%" y="181" width="1.0692%" height="15" fill="rgb(229,88,21)"/><text x="71.5366%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="72.3450%" y="165" width="0.0107%" height="15" fill="rgb(252,204,47)"/><text x="72.5950%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (11 samples, 0.02%)</title><rect x="72.3557%" y="181" width="0.0197%" height="15" fill="rgb(208,77,27)"/><text x="72.6057%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (23 samples, 0.04%)</title><rect x="72.3790%" y="181" width="0.0412%" height="15" fill="rgb(221,76,26)"/><text x="72.6290%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (22 samples, 0.04%)</title><rect x="72.4363%" y="165" width="0.0394%" height="15" fill="rgb(225,139,18)"/><text x="72.6863%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="72.4757%" y="165" width="0.0143%" height="15" fill="rgb(230,137,11)"/><text x="72.7257%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (20 samples, 0.04%)</title><rect x="72.5133%" y="149" width="0.0358%" height="15" fill="rgb(212,28,1)"/><text x="72.7633%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (34 samples, 0.06%)</title><rect x="72.4901%" y="165" width="0.0609%" height="15" fill="rgb(248,164,17)"/><text x="72.7401%" y="175.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (10 samples, 0.02%)</title><rect x="72.5527%" y="165" width="0.0179%" height="15" fill="rgb(222,171,42)"/><text x="72.8027%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (8 samples, 0.01%)</title><rect x="72.6208%" y="149" width="0.0143%" height="15" fill="rgb(243,84,45)"/><text x="72.8708%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (12 samples, 0.02%)</title><rect x="72.6387%" y="117" width="0.0215%" height="15" fill="rgb(252,49,23)"/><text x="72.8887%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (12 samples, 0.02%)</title><rect x="72.6387%" y="101" width="0.0215%" height="15" fill="rgb(215,19,7)"/><text x="72.8887%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (8 samples, 0.01%)</title><rect x="72.6459%" y="85" width="0.0143%" height="15" fill="rgb(238,81,41)"/><text x="72.8959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.01%)</title><rect x="72.7014%" y="85" width="0.0107%" height="15" fill="rgb(210,199,37)"/><text x="72.9514%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="72.6906%" y="101" width="0.0233%" height="15" fill="rgb(244,192,49)"/><text x="72.9406%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (30 samples, 0.05%)</title><rect x="72.6620%" y="117" width="0.0537%" height="15" fill="rgb(226,211,11)"/><text x="72.9120%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (49 samples, 0.09%)</title><rect x="72.6387%" y="133" width="0.0878%" height="15" fill="rgb(236,162,54)"/><text x="72.8887%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="72.7157%" y="117" width="0.0107%" height="15" fill="rgb(220,229,9)"/><text x="72.9657%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (52 samples, 0.09%)</title><rect x="72.6351%" y="149" width="0.0931%" height="15" fill="rgb(250,87,22)"/><text x="72.8851%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (56 samples, 0.10%)</title><rect x="72.8196%" y="101" width="0.1003%" height="15" fill="rgb(239,43,17)"/><text x="73.0696%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (42 samples, 0.08%)</title><rect x="72.8447%" y="85" width="0.0752%" height="15" fill="rgb(231,177,25)"/><text x="73.0947%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (6 samples, 0.01%)</title><rect x="72.9217%" y="101" width="0.0107%" height="15" fill="rgb(219,179,1)"/><text x="73.1717%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (77 samples, 0.14%)</title><rect x="72.8070%" y="117" width="0.1379%" height="15" fill="rgb(238,219,53)"/><text x="73.0570%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="72.9324%" y="101" width="0.0125%" height="15" fill="rgb(232,167,36)"/><text x="73.1824%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (39 samples, 0.07%)</title><rect x="72.9485%" y="117" width="0.0698%" height="15" fill="rgb(244,19,51)"/><text x="73.1985%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (59 samples, 0.11%)</title><rect x="73.2440%" y="101" width="0.1057%" height="15" fill="rgb(224,6,22)"/><text x="73.4940%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (39 samples, 0.07%)</title><rect x="73.3622%" y="85" width="0.0698%" height="15" fill="rgb(224,145,5)"/><text x="73.6122%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.07%)</title><rect x="73.3658%" y="69" width="0.0663%" height="15" fill="rgb(234,130,49)"/><text x="73.6158%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.08%)</title><rect x="73.3533%" y="101" width="0.0806%" height="15" fill="rgb(254,6,2)"/><text x="73.6033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 0.06%)</title><rect x="73.6130%" y="69" width="0.0555%" height="15" fill="rgb(208,96,46)"/><text x="73.8630%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (81 samples, 0.15%)</title><rect x="73.5342%" y="85" width="0.1451%" height="15" fill="rgb(239,3,39)"/><text x="73.7842%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="73.6685%" y="69" width="0.0107%" height="15" fill="rgb(233,210,1)"/><text x="73.9185%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (138 samples, 0.25%)</title><rect x="73.4339%" y="101" width="0.2471%" height="15" fill="rgb(244,137,37)"/><text x="73.6839%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="73.6864%" y="101" width="0.0107%" height="15" fill="rgb(240,136,2)"/><text x="73.9364%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (380 samples, 0.68%)</title><rect x="73.0184%" y="117" width="0.6805%" height="15" fill="rgb(239,18,37)"/><text x="73.2684%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (8 samples, 0.01%)</title><rect x="73.7688%" y="101" width="0.0143%" height="15" fill="rgb(218,185,22)"/><text x="74.0188%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (45 samples, 0.08%)</title><rect x="73.7079%" y="117" width="0.0806%" height="15" fill="rgb(225,218,4)"/><text x="73.9579%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (569 samples, 1.02%)</title><rect x="72.7748%" y="133" width="1.0190%" height="15" fill="rgb(230,182,32)"/><text x="73.0248%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (601 samples, 1.08%)</title><rect x="72.7282%" y="149" width="1.0763%" height="15" fill="rgb(242,56,43)"/><text x="72.9782%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (708 samples, 1.27%)</title><rect x="72.5707%" y="165" width="1.2680%" height="15" fill="rgb(233,99,24)"/><text x="72.8207%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.03%)</title><rect x="73.8135%" y="149" width="0.0251%" height="15" fill="rgb(234,209,42)"/><text x="74.0635%" y="159.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (14 samples, 0.03%)</title><rect x="73.8386%" y="165" width="0.0251%" height="15" fill="rgb(227,7,12)"/><text x="74.0886%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (8 samples, 0.01%)</title><rect x="73.8673%" y="165" width="0.0143%" height="15" fill="rgb(245,203,43)"/><text x="74.1173%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (825 samples, 1.48%)</title><rect x="72.4202%" y="181" width="1.4775%" height="15" fill="rgb(238,205,33)"/><text x="72.6702%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="73.8816%" y="165" width="0.0161%" height="15" fill="rgb(231,56,7)"/><text x="74.1316%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (6 samples, 0.01%)</title><rect x="73.9067%" y="181" width="0.0107%" height="15" fill="rgb(244,186,29)"/><text x="74.1567%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (19 samples, 0.03%)</title><rect x="73.9281%" y="181" width="0.0340%" height="15" fill="rgb(234,111,31)"/><text x="74.1781%" y="191.50"></text></g><g><title>async-redis`__rust_alloc (6 samples, 0.01%)</title><rect x="73.9622%" y="181" width="0.0107%" height="15" fill="rgb(241,149,10)"/><text x="74.2122%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.01%)</title><rect x="73.9729%" y="181" width="0.0107%" height="15" fill="rgb(249,206,44)"/><text x="74.2229%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode (24 samples, 0.04%)</title><rect x="73.9837%" y="181" width="0.0430%" height="15" fill="rgb(251,153,30)"/><text x="74.2337%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (24 samples, 0.04%)</title><rect x="74.0266%" y="181" width="0.0430%" height="15" fill="rgb(239,152,38)"/><text x="74.2766%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (27 samples, 0.05%)</title><rect x="74.0696%" y="181" width="0.0484%" height="15" fill="rgb(249,139,47)"/><text x="74.3196%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (152 samples, 0.27%)</title><rect x="74.2075%" y="133" width="0.2722%" height="15" fill="rgb(244,64,35)"/><text x="74.4575%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (187 samples, 0.33%)</title><rect x="74.1466%" y="149" width="0.3349%" height="15" fill="rgb(216,46,15)"/><text x="74.3966%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (7 samples, 0.01%)</title><rect x="74.6678%" y="117" width="0.0125%" height="15" fill="rgb(250,74,19)"/><text x="74.9178%" y="127.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (79 samples, 0.14%)</title><rect x="74.5442%" y="133" width="0.1415%" height="15" fill="rgb(249,42,33)"/><text x="74.7942%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (116 samples, 0.21%)</title><rect x="74.4815%" y="149" width="0.2077%" height="15" fill="rgb(242,149,17)"/><text x="74.7315%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (310 samples, 0.56%)</title><rect x="74.1431%" y="165" width="0.5552%" height="15" fill="rgb(244,29,21)"/><text x="74.3931%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (15 samples, 0.03%)</title><rect x="74.6982%" y="165" width="0.0269%" height="15" fill="rgb(220,130,37)"/><text x="74.9482%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (340 samples, 0.61%)</title><rect x="74.1269%" y="181" width="0.6089%" height="15" fill="rgb(211,67,2)"/><text x="74.3769%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (8 samples, 0.01%)</title><rect x="74.7394%" y="165" width="0.0143%" height="15" fill="rgb(235,68,52)"/><text x="74.9894%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (10 samples, 0.02%)</title><rect x="74.7538%" y="165" width="0.0179%" height="15" fill="rgb(246,142,3)"/><text x="75.0038%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (7 samples, 0.01%)</title><rect x="74.8540%" y="149" width="0.0125%" height="15" fill="rgb(241,25,7)"/><text x="75.1040%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (13 samples, 0.02%)</title><rect x="75.0707%" y="117" width="0.0233%" height="15" fill="rgb(242,119,39)"/><text x="75.3207%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (18 samples, 0.03%)</title><rect x="75.0940%" y="117" width="0.0322%" height="15" fill="rgb(241,98,45)"/><text x="75.3440%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (14 samples, 0.03%)</title><rect x="75.1012%" y="101" width="0.0251%" height="15" fill="rgb(254,28,30)"/><text x="75.3512%" y="111.50"></text></g><g><title>async-redis`__rdl_alloc (8 samples, 0.01%)</title><rect x="75.1316%" y="117" width="0.0143%" height="15" fill="rgb(241,142,54)"/><text x="75.3816%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.01%)</title><rect x="75.1477%" y="117" width="0.0107%" height="15" fill="rgb(222,85,15)"/><text x="75.3977%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (16 samples, 0.03%)</title><rect x="75.1907%" y="101" width="0.0287%" height="15" fill="rgb(210,85,47)"/><text x="75.4407%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (8 samples, 0.01%)</title><rect x="75.2051%" y="85" width="0.0143%" height="15" fill="rgb(224,206,25)"/><text x="75.4551%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (7 samples, 0.01%)</title><rect x="75.2194%" y="101" width="0.0125%" height="15" fill="rgb(243,201,19)"/><text x="75.4694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="75.3447%" y="53" width="0.0287%" height="15" fill="rgb(236,59,4)"/><text x="75.5947%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 0.09%)</title><rect x="75.3734%" y="53" width="0.0913%" height="15" fill="rgb(254,179,45)"/><text x="75.6234%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="75.4432%" y="37" width="0.0215%" height="15" fill="rgb(226,14,10)"/><text x="75.6932%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (103 samples, 0.18%)</title><rect x="75.2821%" y="85" width="0.1845%" height="15" fill="rgb(244,27,41)"/><text x="75.5321%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (102 samples, 0.18%)</title><rect x="75.2839%" y="69" width="0.1827%" height="15" fill="rgb(235,35,32)"/><text x="75.5339%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (136 samples, 0.24%)</title><rect x="75.2319%" y="101" width="0.2436%" height="15" fill="rgb(218,68,31)"/><text x="75.4819%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (170 samples, 0.30%)</title><rect x="75.1728%" y="117" width="0.3045%" height="15" fill="rgb(207,120,37)"/><text x="75.4228%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.01%)</title><rect x="75.4826%" y="117" width="0.0125%" height="15" fill="rgb(227,98,0)"/><text x="75.7326%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (463 samples, 0.83%)</title><rect x="74.8737%" y="133" width="0.8292%" height="15" fill="rgb(207,7,3)"/><text x="75.1237%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (116 samples, 0.21%)</title><rect x="75.4952%" y="117" width="0.2077%" height="15" fill="rgb(206,98,19)"/><text x="75.7452%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (16 samples, 0.03%)</title><rect x="75.7065%" y="133" width="0.0287%" height="15" fill="rgb(217,5,26)"/><text x="75.9565%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (27 samples, 0.05%)</title><rect x="75.8731%" y="117" width="0.0484%" height="15" fill="rgb(235,190,38)"/><text x="76.1231%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (11 samples, 0.02%)</title><rect x="75.9017%" y="101" width="0.0197%" height="15" fill="rgb(247,86,24)"/><text x="76.1517%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (63 samples, 0.11%)</title><rect x="76.0145%" y="101" width="0.1128%" height="15" fill="rgb(205,101,16)"/><text x="76.2645%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (59 samples, 0.11%)</title><rect x="76.1274%" y="101" width="0.1057%" height="15" fill="rgb(246,168,33)"/><text x="76.3774%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (184 samples, 0.33%)</title><rect x="75.9214%" y="117" width="0.3295%" height="15" fill="rgb(231,114,1)"/><text x="76.1714%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (111 samples, 0.20%)</title><rect x="76.2509%" y="117" width="0.1988%" height="15" fill="rgb(207,184,53)"/><text x="76.5009%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (10 samples, 0.02%)</title><rect x="76.4605%" y="117" width="0.0179%" height="15" fill="rgb(224,95,51)"/><text x="76.7105%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (423 samples, 0.76%)</title><rect x="75.7352%" y="133" width="0.7575%" height="15" fill="rgb(212,188,45)"/><text x="75.9852%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="76.4784%" y="117" width="0.0143%" height="15" fill="rgb(223,154,38)"/><text x="76.7284%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (8 samples, 0.01%)</title><rect x="76.4945%" y="133" width="0.0143%" height="15" fill="rgb(251,22,52)"/><text x="76.7445%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (16 samples, 0.03%)</title><rect x="76.5285%" y="133" width="0.0287%" height="15" fill="rgb(229,209,22)"/><text x="76.7785%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (970 samples, 1.74%)</title><rect x="74.8666%" y="149" width="1.7372%" height="15" fill="rgb(234,138,34)"/><text x="75.1166%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (25 samples, 0.04%)</title><rect x="76.5590%" y="133" width="0.0448%" height="15" fill="rgb(212,95,11)"/><text x="76.8090%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (17 samples, 0.03%)</title><rect x="76.6073%" y="149" width="0.0304%" height="15" fill="rgb(240,179,47)"/><text x="76.8573%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (9 samples, 0.02%)</title><rect x="76.6378%" y="149" width="0.0161%" height="15" fill="rgb(240,163,11)"/><text x="76.8878%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (18 samples, 0.03%)</title><rect x="76.6539%" y="149" width="0.0322%" height="15" fill="rgb(236,37,12)"/><text x="76.9039%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,080 samples, 1.93%)</title><rect x="74.7735%" y="165" width="1.9342%" height="15" fill="rgb(232,164,16)"/><text x="75.0235%" y="175.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="76.6879%" y="149" width="0.0197%" height="15" fill="rgb(244,205,15)"/><text x="76.9379%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,102 samples, 1.97%)</title><rect x="74.7358%" y="181" width="1.9736%" height="15" fill="rgb(223,117,47)"/><text x="74.9858%" y="191.50">a..</text></g><g><title>async-redis`tracing_core::dispatcher::get_default (12 samples, 0.02%)</title><rect x="76.7094%" y="181" width="0.0215%" height="15" fill="rgb(244,107,35)"/><text x="76.9594%" y="191.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (9 samples, 0.02%)</title><rect x="76.7309%" y="181" width="0.0161%" height="15" fill="rgb(205,140,8)"/><text x="76.9809%" y="191.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_close (6 samples, 0.01%)</title><rect x="76.7470%" y="181" width="0.0107%" height="15" fill="rgb(228,84,46)"/><text x="76.9970%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.06%)</title><rect x="76.7596%" y="181" width="0.0609%" height="15" fill="rgb(254,188,9)"/><text x="77.0096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (25 samples, 0.04%)</title><rect x="76.8222%" y="181" width="0.0448%" height="15" fill="rgb(206,112,54)"/><text x="77.0722%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26,088 samples, 46.72%)</title><rect x="30.2070%" y="197" width="46.7209%" height="15" fill="rgb(216,84,49)"/><text x="30.4570%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::futu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (33 samples, 0.06%)</title><rect x="76.8688%" y="181" width="0.0591%" height="15" fill="rgb(214,194,35)"/><text x="77.1188%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (22 samples, 0.04%)</title><rect x="76.9279%" y="197" width="0.0394%" height="15" fill="rgb(249,28,3)"/><text x="77.1779%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (36 samples, 0.06%)</title><rect x="76.9673%" y="197" width="0.0645%" height="15" fill="rgb(222,56,52)"/><text x="77.2173%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (14 samples, 0.03%)</title><rect x="77.0389%" y="197" width="0.0251%" height="15" fill="rgb(245,217,50)"/><text x="77.2889%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (27 samples, 0.05%)</title><rect x="77.0640%" y="197" width="0.0484%" height="15" fill="rgb(213,201,24)"/><text x="77.3140%" y="207.50"></text></g><g><title>async-redis`tracing::__macro_support::MacroCallsite::is_enabled (6 samples, 0.01%)</title><rect x="77.1124%" y="197" width="0.0107%" height="15" fill="rgb(248,116,28)"/><text x="77.3624%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (17 samples, 0.03%)</title><rect x="77.1267%" y="197" width="0.0304%" height="15" fill="rgb(219,72,43)"/><text x="77.3767%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26,337 samples, 47.17%)</title><rect x="30.0387%" y="213" width="47.1668%" height="15" fill="rgb(209,138,14)"/><text x="30.2887%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Futur..</text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.05%)</title><rect x="77.1571%" y="197" width="0.0484%" height="15" fill="rgb(222,18,33)"/><text x="77.4071%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (50 samples, 0.09%)</title><rect x="77.2055%" y="213" width="0.0895%" height="15" fill="rgb(213,199,7)"/><text x="77.4555%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (37 samples, 0.07%)</title><rect x="77.2288%" y="197" width="0.0663%" height="15" fill="rgb(250,110,10)"/><text x="77.4788%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (10 samples, 0.02%)</title><rect x="77.2950%" y="213" width="0.0179%" height="15" fill="rgb(248,123,6)"/><text x="77.5450%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (7 samples, 0.01%)</title><rect x="77.3129%" y="213" width="0.0125%" height="15" fill="rgb(206,91,31)"/><text x="77.5629%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (20 samples, 0.04%)</title><rect x="77.3362%" y="213" width="0.0358%" height="15" fill="rgb(211,154,13)"/><text x="77.5862%" y="223.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (153 samples, 0.27%)</title><rect x="77.4813%" y="181" width="0.2740%" height="15" fill="rgb(225,148,7)"/><text x="77.7313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.09%)</title><rect x="77.7625%" y="165" width="0.0895%" height="15" fill="rgb(220,160,43)"/><text x="78.0125%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.09%)</title><rect x="77.7625%" y="149" width="0.0895%" height="15" fill="rgb(213,52,39)"/><text x="78.0125%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.04%)</title><rect x="77.8162%" y="133" width="0.0358%" height="15" fill="rgb(243,137,7)"/><text x="78.0662%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.10%)</title><rect x="77.7553%" y="181" width="0.0985%" height="15" fill="rgb(230,79,13)"/><text x="78.0053%" y="191.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (227 samples, 0.41%)</title><rect x="77.4490%" y="197" width="0.4065%" height="15" fill="rgb(247,105,23)"/><text x="77.6990%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (6 samples, 0.01%)</title><rect x="77.8932%" y="181" width="0.0107%" height="15" fill="rgb(223,179,41)"/><text x="78.1432%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.09%)</title><rect x="77.9326%" y="165" width="0.0860%" height="15" fill="rgb(218,9,34)"/><text x="78.1826%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.08%)</title><rect x="77.9380%" y="149" width="0.0806%" height="15" fill="rgb(222,106,8)"/><text x="78.1880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (65 samples, 0.12%)</title><rect x="77.9039%" y="181" width="0.1164%" height="15" fill="rgb(211,220,0)"/><text x="78.1539%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="78.0203%" y="181" width="0.0143%" height="15" fill="rgb(229,52,16)"/><text x="78.2703%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (103 samples, 0.18%)</title><rect x="77.8663%" y="197" width="0.1845%" height="15" fill="rgb(212,155,18)"/><text x="78.1163%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="78.0365%" y="181" width="0.0143%" height="15" fill="rgb(242,21,14)"/><text x="78.2865%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (18 samples, 0.03%)</title><rect x="78.0956%" y="181" width="0.0322%" height="15" fill="rgb(222,19,48)"/><text x="78.3456%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (8 samples, 0.01%)</title><rect x="78.1135%" y="165" width="0.0143%" height="15" fill="rgb(232,45,27)"/><text x="78.3635%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (58 samples, 0.10%)</title><rect x="78.0508%" y="197" width="0.1039%" height="15" fill="rgb(249,103,42)"/><text x="78.3008%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (14 samples, 0.03%)</title><rect x="78.1296%" y="181" width="0.0251%" height="15" fill="rgb(246,81,33)"/><text x="78.3796%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (6 samples, 0.01%)</title><rect x="78.1547%" y="197" width="0.0107%" height="15" fill="rgb(252,33,42)"/><text x="78.4047%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (12 samples, 0.02%)</title><rect x="78.1672%" y="197" width="0.0215%" height="15" fill="rgb(209,212,41)"/><text x="78.4172%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.07%)</title><rect x="78.1976%" y="197" width="0.0663%" height="15" fill="rgb(207,154,6)"/><text x="78.4476%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.04%)</title><rect x="78.2209%" y="181" width="0.0430%" height="15" fill="rgb(223,64,47)"/><text x="78.4709%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.04%)</title><rect x="78.2263%" y="165" width="0.0376%" height="15" fill="rgb(211,161,38)"/><text x="78.4763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (94 samples, 0.17%)</title><rect x="78.2639%" y="197" width="0.1683%" height="15" fill="rgb(219,138,40)"/><text x="78.5139%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (59 samples, 0.11%)</title><rect x="78.3266%" y="181" width="0.1057%" height="15" fill="rgb(241,228,46)"/><text x="78.5766%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.05%)</title><rect x="78.3839%" y="165" width="0.0484%" height="15" fill="rgb(223,209,38)"/><text x="78.6339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.01%)</title><rect x="78.4323%" y="197" width="0.0125%" height="15" fill="rgb(236,164,45)"/><text x="78.6823%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (602 samples, 1.08%)</title><rect x="77.3720%" y="213" width="1.0781%" height="15" fill="rgb(231,15,5)"/><text x="77.6220%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (12 samples, 0.02%)</title><rect x="78.4502%" y="213" width="0.0215%" height="15" fill="rgb(252,35,15)"/><text x="78.7002%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (11 samples, 0.02%)</title><rect x="78.4717%" y="213" width="0.0197%" height="15" fill="rgb(248,181,18)"/><text x="78.7217%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (7 samples, 0.01%)</title><rect x="78.5773%" y="197" width="0.0125%" height="15" fill="rgb(233,39,42)"/><text x="78.8273%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (12 samples, 0.02%)</title><rect x="78.5898%" y="197" width="0.0215%" height="15" fill="rgb(238,110,33)"/><text x="78.8398%" y="207.50"></text></g><g><title>async-redis`dashmap::DashMap&lt;K,V,S&gt;::determine_map (31 samples, 0.06%)</title><rect x="78.6113%" y="197" width="0.0555%" height="15" fill="rgb(233,195,10)"/><text x="78.8613%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="78.6364%" y="181" width="0.0304%" height="15" fill="rgb(254,105,3)"/><text x="78.8864%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="79.5480%" y="181" width="0.0269%" height="15" fill="rgb(221,225,9)"/><text x="79.7980%" y="191.50"></text></g><g><title>async-redis`dashmap::lock::compare_exchange (514 samples, 0.92%)</title><rect x="79.5748%" y="181" width="0.9205%" height="15" fill="rgb(224,227,45)"/><text x="79.8248%" y="191.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (35 samples, 0.06%)</title><rect x="80.7300%" y="165" width="0.0627%" height="15" fill="rgb(229,198,43)"/><text x="80.9800%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.03%)</title><rect x="80.7604%" y="149" width="0.0322%" height="15" fill="rgb(206,209,35)"/><text x="81.0104%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (27 samples, 0.05%)</title><rect x="80.8016%" y="165" width="0.0484%" height="15" fill="rgb(245,195,53)"/><text x="81.0516%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="80.8285%" y="149" width="0.0215%" height="15" fill="rgb(240,92,26)"/><text x="81.0785%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (362 samples, 0.65%)</title><rect x="81.2511%" y="133" width="0.6483%" height="15" fill="rgb(207,40,23)"/><text x="81.5011%" y="143.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (289 samples, 0.52%)</title><rect x="81.3819%" y="117" width="0.5176%" height="15" fill="rgb(223,111,35)"/><text x="81.6319%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (8 samples, 0.01%)</title><rect x="81.8994%" y="133" width="0.0143%" height="15" fill="rgb(229,147,28)"/><text x="82.1494%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="81.9030%" y="117" width="0.0107%" height="15" fill="rgb(211,29,28)"/><text x="82.1530%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (624 samples, 1.12%)</title><rect x="80.8553%" y="149" width="1.1175%" height="15" fill="rgb(228,72,33)"/><text x="81.1053%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (26 samples, 0.05%)</title><rect x="81.9263%" y="133" width="0.0466%" height="15" fill="rgb(205,214,31)"/><text x="82.1763%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (26 samples, 0.05%)</title><rect x="81.9263%" y="117" width="0.0466%" height="15" fill="rgb(224,111,15)"/><text x="82.1763%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (26 samples, 0.05%)</title><rect x="81.9263%" y="101" width="0.0466%" height="15" fill="rgb(253,21,26)"/><text x="82.1763%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (706 samples, 1.26%)</title><rect x="80.8500%" y="165" width="1.2644%" height="15" fill="rgb(245,139,43)"/><text x="81.1000%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (79 samples, 0.14%)</title><rect x="81.9729%" y="149" width="0.1415%" height="15" fill="rgb(252,170,7)"/><text x="82.2229%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (906 samples, 1.62%)</title><rect x="80.4954%" y="181" width="1.6226%" height="15" fill="rgb(231,118,14)"/><text x="80.7454%" y="191.50"></text></g><g><title>async-redis`dashmap::DashMap&lt;K,V,S&gt;::insert (1,932 samples, 3.46%)</title><rect x="78.6669%" y="197" width="3.4600%" height="15" fill="rgb(238,83,0)"/><text x="78.9169%" y="207.50">asy..</text></g><g><title>async-redis`dashmap::lock::compare_exchange (13 samples, 0.02%)</title><rect x="82.1269%" y="197" width="0.0233%" height="15" fill="rgb(221,39,39)"/><text x="82.3769%" y="207.50"></text></g><g><title>async-redis`async_redis::db::DB::set (2,044 samples, 3.66%)</title><rect x="78.4913%" y="213" width="3.6606%" height="15" fill="rgb(222,119,46)"/><text x="78.7413%" y="223.50">asyn..</text></g><g><title>async-redis`async_redis::protocol::encode (18 samples, 0.03%)</title><rect x="82.1519%" y="213" width="0.0322%" height="15" fill="rgb(222,165,49)"/><text x="82.4019%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (28 samples, 0.05%)</title><rect x="82.1842%" y="213" width="0.0501%" height="15" fill="rgb(219,113,52)"/><text x="82.4342%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (19 samples, 0.03%)</title><rect x="82.2343%" y="213" width="0.0340%" height="15" fill="rgb(214,7,15)"/><text x="82.4843%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (13 samples, 0.02%)</title><rect x="82.3740%" y="197" width="0.0233%" height="15" fill="rgb(235,32,4)"/><text x="82.6240%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.01%)</title><rect x="82.3973%" y="197" width="0.0125%" height="15" fill="rgb(238,90,54)"/><text x="82.6473%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (16 samples, 0.03%)</title><rect x="82.4134%" y="197" width="0.0287%" height="15" fill="rgb(213,208,19)"/><text x="82.6634%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (15 samples, 0.03%)</title><rect x="82.4152%" y="181" width="0.0269%" height="15" fill="rgb(233,156,4)"/><text x="82.6652%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (113 samples, 0.20%)</title><rect x="82.2683%" y="213" width="0.2024%" height="15" fill="rgb(207,194,5)"/><text x="82.5183%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (16 samples, 0.03%)</title><rect x="82.4421%" y="197" width="0.0287%" height="15" fill="rgb(206,111,30)"/><text x="82.6921%" y="207.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (34 samples, 0.06%)</title><rect x="82.6820%" y="149" width="0.0609%" height="15" fill="rgb(243,70,54)"/><text x="82.9320%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (6 samples, 0.01%)</title><rect x="82.7429%" y="149" width="0.0107%" height="15" fill="rgb(242,28,8)"/><text x="82.9929%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (11 samples, 0.02%)</title><rect x="82.7537%" y="149" width="0.0197%" height="15" fill="rgb(219,106,18)"/><text x="83.0037%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (8,429 samples, 15.10%)</title><rect x="82.6570%" y="165" width="15.0955%" height="15" fill="rgb(244,222,10)"/><text x="82.9070%" y="175.50">async-redis`&lt;&amp;mio::net:..</text></g><g><title>libsystem_kernel.dylib`__sendto (8,364 samples, 14.98%)</title><rect x="82.7734%" y="149" width="14.9790%" height="15" fill="rgb(236,179,52)"/><text x="83.0234%" y="159.50">libsystem_kernel.dylib`..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.03%)</title><rect x="97.8885%" y="149" width="0.0322%" height="15" fill="rgb(213,23,39)"/><text x="98.1385%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (88 samples, 0.16%)</title><rect x="97.7685%" y="165" width="0.1576%" height="15" fill="rgb(238,48,10)"/><text x="98.0185%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (8,591 samples, 15.39%)</title><rect x="82.5441%" y="197" width="15.3856%" height="15" fill="rgb(251,196,23)"/><text x="82.7941%" y="207.50">async-redis`&lt;tokio::net:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (8,574 samples, 15.36%)</title><rect x="82.5746%" y="181" width="15.3551%" height="15" fill="rgb(250,152,24)"/><text x="82.8246%" y="191.50">async-redis`tokio::io::d..</text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (8,635 samples, 15.46%)</title><rect x="82.4761%" y="213" width="15.4644%" height="15" fill="rgb(209,150,17)"/><text x="82.7261%" y="223.50">async-redis`tokio::io::u..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (6 samples, 0.01%)</title><rect x="97.9297%" y="197" width="0.0107%" height="15" fill="rgb(234,202,34)"/><text x="98.1797%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (6 samples, 0.01%)</title><rect x="97.9405%" y="213" width="0.0107%" height="15" fill="rgb(253,148,53)"/><text x="98.1905%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (6 samples, 0.01%)</title><rect x="97.9530%" y="213" width="0.0107%" height="15" fill="rgb(218,129,16)"/><text x="98.2030%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.13%)</title><rect x="97.9709%" y="213" width="0.1289%" height="15" fill="rgb(216,85,19)"/><text x="98.2209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.08%)</title><rect x="98.0246%" y="197" width="0.0752%" height="15" fill="rgb(235,228,7)"/><text x="98.2746%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (42 samples, 0.08%)</title><rect x="98.0246%" y="181" width="0.0752%" height="15" fill="rgb(245,175,0)"/><text x="98.2746%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (101 samples, 0.18%)</title><rect x="98.0999%" y="213" width="0.1809%" height="15" fill="rgb(208,168,36)"/><text x="98.3499%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.11%)</title><rect x="98.1733%" y="197" width="0.1075%" height="15" fill="rgb(246,171,24)"/><text x="98.4233%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.05%)</title><rect x="98.2270%" y="181" width="0.0537%" height="15" fill="rgb(215,142,24)"/><text x="98.4770%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="98.2861%" y="213" width="0.0179%" height="15" fill="rgb(250,187,7)"/><text x="98.5361%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38,404 samples, 68.78%)</title><rect x="29.5319%" y="229" width="68.7775%" height="15" fill="rgb(228,66,33)"/><text x="29.7819%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (14 samples, 0.03%)</title><rect x="98.3094%" y="229" width="0.0251%" height="15" fill="rgb(234,215,21)"/><text x="98.5594%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (7 samples, 0.01%)</title><rect x="98.3345%" y="229" width="0.0125%" height="15" fill="rgb(222,191,20)"/><text x="98.5845%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (7 samples, 0.01%)</title><rect x="98.3470%" y="229" width="0.0125%" height="15" fill="rgb(245,79,54)"/><text x="98.5970%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (20 samples, 0.04%)</title><rect x="98.3828%" y="197" width="0.0358%" height="15" fill="rgb(240,10,37)"/><text x="98.6328%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (55 samples, 0.10%)</title><rect x="98.4330%" y="165" width="0.0985%" height="15" fill="rgb(214,192,32)"/><text x="98.6830%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (36 samples, 0.06%)</title><rect x="98.4670%" y="149" width="0.0645%" height="15" fill="rgb(209,36,54)"/><text x="98.7170%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (7 samples, 0.01%)</title><rect x="98.5315%" y="165" width="0.0125%" height="15" fill="rgb(220,10,11)"/><text x="98.7815%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (73 samples, 0.13%)</title><rect x="98.4204%" y="181" width="0.1307%" height="15" fill="rgb(221,106,17)"/><text x="98.6704%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (6 samples, 0.01%)</title><rect x="98.5619%" y="181" width="0.0107%" height="15" fill="rgb(251,142,44)"/><text x="98.8119%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (89 samples, 0.16%)</title><rect x="98.4186%" y="197" width="0.1594%" height="15" fill="rgb(238,13,15)"/><text x="98.6686%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (126 samples, 0.23%)</title><rect x="98.3595%" y="229" width="0.2257%" height="15" fill="rgb(208,107,27)"/><text x="98.6095%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (124 samples, 0.22%)</title><rect x="98.3631%" y="213" width="0.2221%" height="15" fill="rgb(205,136,37)"/><text x="98.6131%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (8 samples, 0.01%)</title><rect x="98.5852%" y="229" width="0.0143%" height="15" fill="rgb(250,205,27)"/><text x="98.8352%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (6 samples, 0.01%)</title><rect x="98.6031%" y="229" width="0.0107%" height="15" fill="rgb(210,80,43)"/><text x="98.8531%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (19 samples, 0.03%)</title><rect x="98.6210%" y="229" width="0.0340%" height="15" fill="rgb(247,160,36)"/><text x="98.8710%" y="239.50"></text></g><g><title>async-redis`async_redis::db::DB::set (14 samples, 0.03%)</title><rect x="98.6550%" y="229" width="0.0251%" height="15" fill="rgb(234,13,49)"/><text x="98.9050%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (15 samples, 0.03%)</title><rect x="98.6855%" y="229" width="0.0269%" height="15" fill="rgb(234,122,0)"/><text x="98.9355%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (14 samples, 0.03%)</title><rect x="98.7123%" y="229" width="0.0251%" height="15" fill="rgb(207,146,38)"/><text x="98.9623%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (11 samples, 0.02%)</title><rect x="98.7177%" y="213" width="0.0197%" height="15" fill="rgb(207,177,25)"/><text x="98.9677%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (6 samples, 0.01%)</title><rect x="98.7267%" y="197" width="0.0107%" height="15" fill="rgb(211,178,42)"/><text x="98.9767%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (159 samples, 0.28%)</title><rect x="98.8341%" y="181" width="0.2848%" height="15" fill="rgb(230,69,54)"/><text x="99.0841%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (186 samples, 0.33%)</title><rect x="98.7876%" y="197" width="0.3331%" height="15" fill="rgb(214,135,41)"/><text x="99.0376%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (7 samples, 0.01%)</title><rect x="99.3571%" y="165" width="0.0125%" height="15" fill="rgb(237,67,25)"/><text x="99.6071%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (99 samples, 0.18%)</title><rect x="99.2120%" y="181" width="0.1773%" height="15" fill="rgb(222,189,50)"/><text x="99.4620%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="99.3696%" y="165" width="0.0197%" height="15" fill="rgb(245,148,34)"/><text x="99.6196%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (155 samples, 0.28%)</title><rect x="99.1207%" y="197" width="0.2776%" height="15" fill="rgb(222,29,6)"/><text x="99.3707%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (357 samples, 0.64%)</title><rect x="98.7804%" y="213" width="0.6393%" height="15" fill="rgb(221,189,43)"/><text x="99.0304%" y="223.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (7 samples, 0.01%)</title><rect x="99.4072%" y="197" width="0.0125%" height="15" fill="rgb(207,36,27)"/><text x="99.6572%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (382 samples, 0.68%)</title><rect x="98.7446%" y="229" width="0.6841%" height="15" fill="rgb(217,90,24)"/><text x="98.9946%" y="239.50"></text></g><g><title>async-redis`tracing::span::Span::new (6 samples, 0.01%)</title><rect x="99.4287%" y="229" width="0.0107%" height="15" fill="rgb(224,66,35)"/><text x="99.6787%" y="239.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="99.4287%" y="213" width="0.0107%" height="15" fill="rgb(221,13,50)"/><text x="99.6787%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (6 samples, 0.01%)</title><rect x="99.4287%" y="197" width="0.0107%" height="15" fill="rgb(236,68,49)"/><text x="99.6787%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.02%)</title><rect x="99.4484%" y="229" width="0.0161%" height="15" fill="rgb(229,146,28)"/><text x="99.6984%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39,153 samples, 70.12%)</title><rect x="29.3492%" y="245" width="70.1189%" height="15" fill="rgb(225,31,38)"/><text x="29.5992%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (39,180 samples, 70.17%)</title><rect x="29.3152%" y="261" width="70.1673%" height="15" fill="rgb(250,208,3)"/><text x="29.5652%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (13 samples, 0.02%)</title><rect x="99.4932%" y="261" width="0.0233%" height="15" fill="rgb(246,54,23)"/><text x="99.7432%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (39,269 samples, 70.33%)</title><rect x="29.2185%" y="277" width="70.3267%" height="15" fill="rgb(243,76,11)"/><text x="29.4685%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (16 samples, 0.03%)</title><rect x="99.5165%" y="261" width="0.0287%" height="15" fill="rgb(245,21,50)"/><text x="99.7665%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (6 samples, 0.01%)</title><rect x="99.5451%" y="277" width="0.0107%" height="15" fill="rgb(228,9,43)"/><text x="99.7951%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (10 samples, 0.02%)</title><rect x="99.5612%" y="277" width="0.0179%" height="15" fill="rgb(208,100,47)"/><text x="99.8112%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (39,387 samples, 70.54%)</title><rect x="29.0626%" y="293" width="70.5380%" height="15" fill="rgb(232,26,8)"/><text x="29.3126%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="99.5791%" y="277" width="0.0215%" height="15" fill="rgb(216,166,38)"/><text x="99.8291%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.02%)</title><rect x="99.6042%" y="293" width="0.0197%" height="15" fill="rgb(251,202,51)"/><text x="99.8542%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 0.03%)</title><rect x="99.6239%" y="293" width="0.0251%" height="15" fill="rgb(254,216,34)"/><text x="99.8739%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (22 samples, 0.04%)</title><rect x="99.6490%" y="293" width="0.0394%" height="15" fill="rgb(251,32,27)"/><text x="99.8990%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (40,980 samples, 73.39%)</title><rect x="26.3297%" y="309" width="73.3909%" height="15" fill="rgb(208,127,28)"/><text x="26.5797%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.01%)</title><rect x="99.7081%" y="293" width="0.0125%" height="15" fill="rgb(224,137,22)"/><text x="99.9581%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (55,774 samples, 99.89%)</title><rect x="0.0949%" y="325" width="99.8854%" height="15" fill="rgb(254,70,32)"/><text x="0.3449%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (145 samples, 0.26%)</title><rect x="99.7206%" y="309" width="0.2597%" height="15" fill="rgb(229,75,37)"/><text x="99.9706%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (8 samples, 0.01%)</title><rect x="99.9803%" y="325" width="0.0143%" height="15" fill="rgb(252,64,23)"/><text x="100.2303%" y="335.50"></text></g><g><title>all (55,838 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(232,162,48)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (55,800 samples, 99.93%)</title><rect x="0.0681%" y="501" width="99.9319%" height="15" fill="rgb(246,160,12)"/><text x="0.3181%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (55,800 samples, 99.93%)</title><rect x="0.0681%" y="485" width="99.9319%" height="15" fill="rgb(247,166,0)"/><text x="0.3181%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (55,800 samples, 99.93%)</title><rect x="0.0681%" y="469" width="99.9319%" height="15" fill="rgb(249,219,21)"/><text x="0.3181%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (55,800 samples, 99.93%)</title><rect x="0.0681%" y="453" width="99.9319%" height="15" fill="rgb(205,209,3)"/><text x="0.3181%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (55,800 samples, 99.93%)</title><rect x="0.0681%" y="437" width="99.9319%" height="15" fill="rgb(243,44,1)"/><text x="0.3181%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (55,800 samples, 99.93%)</title><rect x="0.0681%" y="421" width="99.9319%" height="15" fill="rgb(206,159,16)"/><text x="0.3181%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (55,800 samples, 99.93%)</title><rect x="0.0681%" y="405" width="99.9319%" height="15" fill="rgb(244,77,30)"/><text x="0.3181%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (55,800 samples, 99.93%)</title><rect x="0.0681%" y="389" width="99.9319%" height="15" fill="rgb(218,69,12)"/><text x="0.3181%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (55,800 samples, 99.93%)</title><rect x="0.0681%" y="373" width="99.9319%" height="15" fill="rgb(212,87,7)"/><text x="0.3181%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (55,800 samples, 99.93%)</title><rect x="0.0681%" y="357" width="99.9319%" height="15" fill="rgb(245,114,25)"/><text x="0.3181%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (55,800 samples, 99.93%)</title><rect x="0.0681%" y="341" width="99.9319%" height="15" fill="rgb(210,61,42)"/><text x="0.3181%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g></svg></svg>