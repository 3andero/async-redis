<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (22 samples, 0.03%)</title><rect x="0.0105%" y="245" width="0.0331%" height="15" fill="rgb(227,0,7)"/><text x="0.2605%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (21 samples, 0.03%)</title><rect x="0.0120%" y="229" width="0.0316%" height="15" fill="rgb(217,0,24)"/><text x="0.2620%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (38 samples, 0.06%)</title><rect x="0.0060%" y="293" width="0.0572%" height="15" fill="rgb(221,193,54)"/><text x="0.2560%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.06%)</title><rect x="0.0075%" y="277" width="0.0557%" height="15" fill="rgb(248,212,6)"/><text x="0.2575%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.06%)</title><rect x="0.0075%" y="261" width="0.0557%" height="15" fill="rgb(208,68,35)"/><text x="0.2575%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (43 samples, 0.06%)</title><rect x="0.0000%" y="389" width="0.0648%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (43 samples, 0.06%)</title><rect x="0.0000%" y="373" width="0.0648%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (43 samples, 0.06%)</title><rect x="0.0000%" y="357" width="0.0648%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (39 samples, 0.06%)</title><rect x="0.0060%" y="341" width="0.0587%" height="15" fill="rgb(218,30,26)"/><text x="0.2560%" y="351.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.06%)</title><rect x="0.0060%" y="325" width="0.0587%" height="15" fill="rgb(220,122,19)"/><text x="0.2560%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.06%)</title><rect x="0.0060%" y="309" width="0.0587%" height="15" fill="rgb(250,228,42)"/><text x="0.2560%" y="319.50"></text></g><g><title>async-redis`0x1 (44 samples, 0.07%)</title><rect x="0.0000%" y="501" width="0.0663%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (44 samples, 0.07%)</title><rect x="0.0000%" y="485" width="0.0663%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (44 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0663%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (44 samples, 0.07%)</title><rect x="0.0000%" y="453" width="0.0663%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (44 samples, 0.07%)</title><rect x="0.0000%" y="437" width="0.0663%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 0.07%)</title><rect x="0.0000%" y="421" width="0.0663%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (44 samples, 0.07%)</title><rect x="0.0000%" y="405" width="0.0663%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (15 samples, 0.02%)</title><rect x="0.0693%" y="325" width="0.0226%" height="15" fill="rgb(221,200,47)"/><text x="0.3193%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (10 samples, 0.02%)</title><rect x="0.0994%" y="325" width="0.0151%" height="15" fill="rgb(226,26,5)"/><text x="0.3494%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (32 samples, 0.05%)</title><rect x="0.8615%" y="309" width="0.0482%" height="15" fill="rgb(249,33,26)"/><text x="1.1115%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (16 samples, 0.02%)</title><rect x="0.9187%" y="309" width="0.0241%" height="15" fill="rgb(235,183,28)"/><text x="1.1687%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.02%)</title><rect x="0.9518%" y="309" width="0.0226%" height="15" fill="rgb(221,5,38)"/><text x="1.2018%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (9 samples, 0.01%)</title><rect x="0.9744%" y="309" width="0.0136%" height="15" fill="rgb(247,18,42)"/><text x="1.2244%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (223 samples, 0.34%)</title><rect x="0.9880%" y="309" width="0.3358%" height="15" fill="rgb(241,131,45)"/><text x="1.2380%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (9 samples, 0.01%)</title><rect x="3.4338%" y="293" width="0.0136%" height="15" fill="rgb(249,31,29)"/><text x="3.6838%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (9 samples, 0.01%)</title><rect x="3.4338%" y="277" width="0.0136%" height="15" fill="rgb(225,111,53)"/><text x="3.6838%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (11 samples, 0.02%)</title><rect x="4.1115%" y="277" width="0.0166%" height="15" fill="rgb(238,160,17)"/><text x="4.3615%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (12 samples, 0.02%)</title><rect x="4.4082%" y="261" width="0.0181%" height="15" fill="rgb(214,148,48)"/><text x="4.6582%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (22 samples, 0.03%)</title><rect x="4.4263%" y="261" width="0.0331%" height="15" fill="rgb(232,36,49)"/><text x="4.6763%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,498 samples, 3.76%)</title><rect x="4.4594%" y="261" width="3.7621%" height="15" fill="rgb(209,103,24)"/><text x="4.7094%" y="271.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (23 samples, 0.03%)</title><rect x="8.4278%" y="245" width="0.0346%" height="15" fill="rgb(229,88,8)"/><text x="8.6778%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (94 samples, 0.14%)</title><rect x="8.4730%" y="229" width="0.1416%" height="15" fill="rgb(213,181,19)"/><text x="8.7230%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (102 samples, 0.15%)</title><rect x="8.4625%" y="245" width="0.1536%" height="15" fill="rgb(254,191,54)"/><text x="8.7125%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (87 samples, 0.13%)</title><rect x="8.6161%" y="245" width="0.1310%" height="15" fill="rgb(241,83,37)"/><text x="8.8661%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (405 samples, 0.61%)</title><rect x="8.2230%" y="261" width="0.6099%" height="15" fill="rgb(233,36,39)"/><text x="8.4730%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (57 samples, 0.09%)</title><rect x="8.7471%" y="245" width="0.0858%" height="15" fill="rgb(226,3,54)"/><text x="8.9971%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (16 samples, 0.02%)</title><rect x="8.8375%" y="261" width="0.0241%" height="15" fill="rgb(245,192,40)"/><text x="9.0875%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (15 samples, 0.02%)</title><rect x="8.8616%" y="261" width="0.0226%" height="15" fill="rgb(238,167,29)"/><text x="9.1116%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (3,183 samples, 4.79%)</title><rect x="4.1281%" y="277" width="4.7937%" height="15" fill="rgb(232,182,51)"/><text x="4.3781%" y="287.50">async-..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (25 samples, 0.04%)</title><rect x="8.8842%" y="261" width="0.0377%" height="15" fill="rgb(231,60,39)"/><text x="9.1342%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (9 samples, 0.01%)</title><rect x="8.9233%" y="277" width="0.0136%" height="15" fill="rgb(208,69,12)"/><text x="9.1733%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (18 samples, 0.03%)</title><rect x="8.9399%" y="277" width="0.0271%" height="15" fill="rgb(235,93,37)"/><text x="9.1899%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (15 samples, 0.02%)</title><rect x="9.1733%" y="245" width="0.0226%" height="15" fill="rgb(213,116,39)"/><text x="9.4233%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_read_closed (7 samples, 0.01%)</title><rect x="9.1959%" y="245" width="0.0105%" height="15" fill="rgb(222,207,29)"/><text x="9.4459%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (8 samples, 0.01%)</title><rect x="9.2065%" y="245" width="0.0120%" height="15" fill="rgb(206,96,30)"/><text x="9.4565%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_writable (8 samples, 0.01%)</title><rect x="9.2185%" y="245" width="0.0120%" height="15" fill="rgb(218,138,4)"/><text x="9.4685%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (28 samples, 0.04%)</title><rect x="9.2336%" y="245" width="0.0422%" height="15" fill="rgb(250,191,14)"/><text x="9.4836%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (8 samples, 0.01%)</title><rect x="9.2757%" y="245" width="0.0120%" height="15" fill="rgb(239,60,40)"/><text x="9.5257%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (16 samples, 0.02%)</title><rect x="9.2878%" y="245" width="0.0241%" height="15" fill="rgb(206,27,48)"/><text x="9.5378%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="9.7170%" y="229" width="0.0105%" height="15" fill="rgb(225,35,8)"/><text x="9.9670%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (18 samples, 0.03%)</title><rect x="9.7607%" y="229" width="0.0271%" height="15" fill="rgb(250,213,24)"/><text x="10.0107%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (54 samples, 0.08%)</title><rect x="9.7893%" y="229" width="0.0813%" height="15" fill="rgb(247,123,22)"/><text x="10.0393%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (20 samples, 0.03%)</title><rect x="10.0167%" y="213" width="0.0301%" height="15" fill="rgb(231,138,38)"/><text x="10.2667%" y="223.50"></text></g><g><title> 32]&gt;::default (20 samples, 0.03%)</title><rect x="10.0167%" y="197" width="0.0301%" height="15" fill="rgb(231,145,46)"/><text x="10.2667%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (88 samples, 0.13%)</title><rect x="10.0468%" y="213" width="0.1325%" height="15" fill="rgb(251,118,11)"/><text x="10.2968%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (8 samples, 0.01%)</title><rect x="10.1989%" y="213" width="0.0120%" height="15" fill="rgb(217,147,25)"/><text x="10.4489%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (20 samples, 0.03%)</title><rect x="10.2215%" y="197" width="0.0301%" height="15" fill="rgb(247,81,37)"/><text x="10.4715%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (65 samples, 0.10%)</title><rect x="10.2517%" y="197" width="0.0979%" height="15" fill="rgb(209,12,38)"/><text x="10.5017%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (13 samples, 0.02%)</title><rect x="10.4008%" y="165" width="0.0196%" height="15" fill="rgb(227,1,9)"/><text x="10.6508%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (61 samples, 0.09%)</title><rect x="10.3721%" y="181" width="0.0919%" height="15" fill="rgb(248,47,43)"/><text x="10.6221%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.03%)</title><rect x="10.4294%" y="165" width="0.0346%" height="15" fill="rgb(221,10,30)"/><text x="10.6794%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (171 samples, 0.26%)</title><rect x="10.2110%" y="213" width="0.2575%" height="15" fill="rgb(210,229,1)"/><text x="10.4610%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (79 samples, 0.12%)</title><rect x="10.3496%" y="197" width="0.1190%" height="15" fill="rgb(222,148,37)"/><text x="10.5996%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (401 samples, 0.60%)</title><rect x="9.8706%" y="229" width="0.6039%" height="15" fill="rgb(234,67,33)"/><text x="10.1206%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (11 samples, 0.02%)</title><rect x="10.4746%" y="229" width="0.0166%" height="15" fill="rgb(247,98,35)"/><text x="10.7246%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,686 samples, 5.55%)</title><rect x="9.3119%" y="245" width="5.5513%" height="15" fill="rgb(247,138,52)"/><text x="9.5619%" y="255.50">async-r..</text></g><g><title>libsystem_kernel.dylib`kevent (2,902 samples, 4.37%)</title><rect x="10.4926%" y="229" width="4.3705%" height="15" fill="rgb(213,79,30)"/><text x="10.7426%" y="239.50">libsy..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (8 samples, 0.01%)</title><rect x="14.8632%" y="245" width="0.0120%" height="15" fill="rgb(246,177,23)"/><text x="15.1132%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (20 samples, 0.03%)</title><rect x="14.9099%" y="213" width="0.0301%" height="15" fill="rgb(230,62,27)"/><text x="15.1599%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (93 samples, 0.14%)</title><rect x="14.9400%" y="213" width="0.1401%" height="15" fill="rgb(216,154,8)"/><text x="15.1900%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (146 samples, 0.22%)</title><rect x="14.8963%" y="229" width="0.2199%" height="15" fill="rgb(244,35,45)"/><text x="15.1463%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.04%)</title><rect x="15.0800%" y="213" width="0.0361%" height="15" fill="rgb(251,115,12)"/><text x="15.3300%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (162 samples, 0.24%)</title><rect x="14.8767%" y="245" width="0.2440%" height="15" fill="rgb(240,54,50)"/><text x="15.1267%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (33 samples, 0.05%)</title><rect x="15.1207%" y="245" width="0.0497%" height="15" fill="rgb(233,84,52)"/><text x="15.3707%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (4,009 samples, 6.04%)</title><rect x="9.1342%" y="261" width="6.0377%" height="15" fill="rgb(207,117,47)"/><text x="9.3842%" y="271.50">async-re..</text></g><g><title>async-redis`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="15.1719%" y="261" width="0.0105%" height="15" fill="rgb(249,43,39)"/><text x="15.4219%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (79 samples, 0.12%)</title><rect x="15.1870%" y="261" width="0.1190%" height="15" fill="rgb(209,38,44)"/><text x="15.4370%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (27 samples, 0.04%)</title><rect x="15.3060%" y="261" width="0.0407%" height="15" fill="rgb(236,212,23)"/><text x="15.5560%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (31 samples, 0.05%)</title><rect x="15.3466%" y="261" width="0.0467%" height="15" fill="rgb(242,79,21)"/><text x="15.5966%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (14 samples, 0.02%)</title><rect x="15.3933%" y="261" width="0.0211%" height="15" fill="rgb(211,96,35)"/><text x="15.6433%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (74 samples, 0.11%)</title><rect x="15.5108%" y="245" width="0.1114%" height="15" fill="rgb(253,215,40)"/><text x="15.7608%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (51 samples, 0.08%)</title><rect x="15.6313%" y="245" width="0.0768%" height="15" fill="rgb(211,81,21)"/><text x="15.8813%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (38 samples, 0.06%)</title><rect x="15.6508%" y="229" width="0.0572%" height="15" fill="rgb(208,190,38)"/><text x="15.9008%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (94 samples, 0.14%)</title><rect x="15.7081%" y="245" width="0.1416%" height="15" fill="rgb(235,213,38)"/><text x="15.9581%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (55 samples, 0.08%)</title><rect x="15.7668%" y="229" width="0.0828%" height="15" fill="rgb(237,122,38)"/><text x="16.0168%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (298 samples, 0.45%)</title><rect x="15.4144%" y="261" width="0.4488%" height="15" fill="rgb(244,218,35)"/><text x="15.6644%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (9 samples, 0.01%)</title><rect x="15.8496%" y="245" width="0.0136%" height="15" fill="rgb(240,68,47)"/><text x="16.0996%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (70 samples, 0.11%)</title><rect x="15.8632%" y="261" width="0.1054%" height="15" fill="rgb(210,16,53)"/><text x="16.1132%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (61 samples, 0.09%)</title><rect x="15.8767%" y="245" width="0.0919%" height="15" fill="rgb(235,124,12)"/><text x="16.1267%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,740 samples, 7.14%)</title><rect x="8.9670%" y="277" width="7.1387%" height="15" fill="rgb(224,169,11)"/><text x="9.2170%" y="287.50">async-redi..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (84 samples, 0.13%)</title><rect x="15.9792%" y="261" width="0.1265%" height="15" fill="rgb(250,166,2)"/><text x="16.2292%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (42 samples, 0.06%)</title><rect x="16.1147%" y="277" width="0.0633%" height="15" fill="rgb(242,216,29)"/><text x="16.3647%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,210 samples, 6.34%)</title><rect x="16.1780%" y="277" width="6.3405%" height="15" fill="rgb(230,116,27)"/><text x="16.4280%" y="287.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (20 samples, 0.03%)</title><rect x="22.5184%" y="277" width="0.0301%" height="15" fill="rgb(228,99,48)"/><text x="22.7684%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (7 samples, 0.01%)</title><rect x="22.5485%" y="277" width="0.0105%" height="15" fill="rgb(253,11,6)"/><text x="22.7985%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (131 samples, 0.20%)</title><rect x="22.5591%" y="277" width="0.1973%" height="15" fill="rgb(247,143,39)"/><text x="22.8091%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12,868 samples, 19.38%)</title><rect x="3.4473%" y="293" width="19.3798%" height="15" fill="rgb(236,97,10)"/><text x="3.6973%" y="303.50">async-redis`&lt;tokio::runtime::p..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (43 samples, 0.06%)</title><rect x="22.7624%" y="277" width="0.0648%" height="15" fill="rgb(233,208,19)"/><text x="23.0124%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (13 samples, 0.02%)</title><rect x="22.8648%" y="229" width="0.0196%" height="15" fill="rgb(216,164,2)"/><text x="23.1148%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (119 samples, 0.18%)</title><rect x="22.8452%" y="245" width="0.1792%" height="15" fill="rgb(220,129,5)"/><text x="23.0952%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (93 samples, 0.14%)</title><rect x="22.8844%" y="229" width="0.1401%" height="15" fill="rgb(242,17,10)"/><text x="23.1344%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (124 samples, 0.19%)</title><rect x="22.8437%" y="261" width="0.1867%" height="15" fill="rgb(242,107,0)"/><text x="23.0937%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (10 samples, 0.02%)</title><rect x="23.0350%" y="261" width="0.0151%" height="15" fill="rgb(251,28,31)"/><text x="23.2850%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (147 samples, 0.22%)</title><rect x="22.8362%" y="277" width="0.2214%" height="15" fill="rgb(233,223,10)"/><text x="23.0862%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (154 samples, 0.23%)</title><rect x="22.8272%" y="293" width="0.2319%" height="15" fill="rgb(215,21,27)"/><text x="23.0772%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (11 samples, 0.02%)</title><rect x="23.0591%" y="293" width="0.0166%" height="15" fill="rgb(232,23,21)"/><text x="23.3091%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (7 samples, 0.01%)</title><rect x="23.0937%" y="277" width="0.0105%" height="15" fill="rgb(244,5,23)"/><text x="23.3437%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (147 samples, 0.22%)</title><rect x="23.1043%" y="277" width="0.2214%" height="15" fill="rgb(226,81,46)"/><text x="23.3543%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (10 samples, 0.02%)</title><rect x="23.3362%" y="277" width="0.0151%" height="15" fill="rgb(247,70,30)"/><text x="23.5862%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (10 samples, 0.02%)</title><rect x="23.3362%" y="261" width="0.0151%" height="15" fill="rgb(212,68,19)"/><text x="23.5862%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (186 samples, 0.28%)</title><rect x="23.0832%" y="293" width="0.2801%" height="15" fill="rgb(240,187,13)"/><text x="23.3332%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (22 samples, 0.03%)</title><rect x="23.3723%" y="293" width="0.0331%" height="15" fill="rgb(223,113,26)"/><text x="23.6223%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (60 samples, 0.09%)</title><rect x="23.4115%" y="293" width="0.0904%" height="15" fill="rgb(206,192,2)"/><text x="23.6615%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (14,729 samples, 22.18%)</title><rect x="1.3238%" y="309" width="22.1826%" height="15" fill="rgb(241,108,4)"/><text x="1.5738%" y="319.50">async-redis`tokio::runtime::thread_..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (48 samples, 0.07%)</title><rect x="23.6329%" y="293" width="0.0723%" height="15" fill="rgb(247,173,49)"/><text x="23.8829%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (45 samples, 0.07%)</title><rect x="23.6374%" y="277" width="0.0678%" height="15" fill="rgb(224,114,35)"/><text x="23.8874%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (45 samples, 0.07%)</title><rect x="23.7067%" y="293" width="0.0678%" height="15" fill="rgb(245,159,27)"/><text x="23.9567%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.01%)</title><rect x="23.7639%" y="277" width="0.0105%" height="15" fill="rgb(245,172,44)"/><text x="24.0139%" y="287.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (8 samples, 0.01%)</title><rect x="23.8302%" y="277" width="0.0120%" height="15" fill="rgb(236,23,11)"/><text x="24.0802%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (42 samples, 0.06%)</title><rect x="23.8422%" y="277" width="0.0633%" height="15" fill="rgb(205,117,38)"/><text x="24.0922%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,206 samples, 1.82%)</title><rect x="23.9055%" y="277" width="1.8163%" height="15" fill="rgb(237,72,25)"/><text x="24.1555%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (18 samples, 0.03%)</title><rect x="25.7218%" y="277" width="0.0271%" height="15" fill="rgb(244,70,9)"/><text x="25.9718%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (12 samples, 0.02%)</title><rect x="25.7564%" y="277" width="0.0181%" height="15" fill="rgb(217,125,39)"/><text x="26.0064%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (53 samples, 0.08%)</title><rect x="25.7760%" y="261" width="0.0798%" height="15" fill="rgb(235,36,10)"/><text x="26.0260%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (55 samples, 0.08%)</title><rect x="25.7760%" y="277" width="0.0828%" height="15" fill="rgb(251,123,47)"/><text x="26.0260%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (41 samples, 0.06%)</title><rect x="25.8588%" y="277" width="0.0617%" height="15" fill="rgb(221,13,13)"/><text x="26.1088%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (13 samples, 0.02%)</title><rect x="25.9010%" y="261" width="0.0196%" height="15" fill="rgb(238,131,9)"/><text x="26.1510%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (25 samples, 0.04%)</title><rect x="25.9206%" y="277" width="0.0377%" height="15" fill="rgb(211,50,8)"/><text x="26.1706%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,449 samples, 2.18%)</title><rect x="23.7820%" y="293" width="2.1823%" height="15" fill="rgb(245,182,24)"/><text x="24.0320%" y="303.50">a..</text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (8 samples, 0.01%)</title><rect x="25.9688%" y="293" width="0.0120%" height="15" fill="rgb(242,14,37)"/><text x="26.2188%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.04%)</title><rect x="26.2218%" y="277" width="0.0361%" height="15" fill="rgb(246,228,12)"/><text x="26.4718%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (9 samples, 0.01%)</title><rect x="26.2579%" y="277" width="0.0136%" height="15" fill="rgb(213,55,15)"/><text x="26.5079%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.06%)</title><rect x="26.4387%" y="261" width="0.0617%" height="15" fill="rgb(209,9,3)"/><text x="26.6887%" y="271.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (11 samples, 0.02%)</title><rect x="27.0561%" y="229" width="0.0166%" height="15" fill="rgb(230,59,30)"/><text x="27.3061%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (14 samples, 0.02%)</title><rect x="27.1073%" y="213" width="0.0211%" height="15" fill="rgb(209,121,21)"/><text x="27.3573%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (8 samples, 0.01%)</title><rect x="27.1284%" y="213" width="0.0120%" height="15" fill="rgb(220,109,13)"/><text x="27.3784%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (36 samples, 0.05%)</title><rect x="27.4040%" y="197" width="0.0542%" height="15" fill="rgb(232,18,1)"/><text x="27.6540%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 0.03%)</title><rect x="27.4266%" y="181" width="0.0316%" height="15" fill="rgb(215,41,42)"/><text x="27.6766%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.03%)</title><rect x="27.4582%" y="197" width="0.0346%" height="15" fill="rgb(224,123,36)"/><text x="27.7082%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (322 samples, 0.48%)</title><rect x="27.8589%" y="165" width="0.4849%" height="15" fill="rgb(240,125,3)"/><text x="28.1089%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (281 samples, 0.42%)</title><rect x="27.9206%" y="149" width="0.4232%" height="15" fill="rgb(205,98,50)"/><text x="28.1706%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (22 samples, 0.03%)</title><rect x="28.3513%" y="165" width="0.0331%" height="15" fill="rgb(205,185,37)"/><text x="28.6013%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (22 samples, 0.03%)</title><rect x="28.3513%" y="149" width="0.0331%" height="15" fill="rgb(238,207,15)"/><text x="28.6013%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (22 samples, 0.03%)</title><rect x="28.3513%" y="133" width="0.0331%" height="15" fill="rgb(213,199,42)"/><text x="28.6013%" y="143.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (593 samples, 0.89%)</title><rect x="27.5110%" y="181" width="0.8931%" height="15" fill="rgb(235,201,11)"/><text x="27.7610%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="28.3845%" y="165" width="0.0196%" height="15" fill="rgb(207,46,11)"/><text x="28.6345%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (674 samples, 1.02%)</title><rect x="27.4944%" y="197" width="1.0151%" height="15" fill="rgb(241,35,35)"/><text x="27.7444%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (69 samples, 0.10%)</title><rect x="28.4055%" y="181" width="0.1039%" height="15" fill="rgb(243,32,47)"/><text x="28.6555%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (911 samples, 1.37%)</title><rect x="27.1405%" y="213" width="1.3720%" height="15" fill="rgb(247,202,23)"/><text x="27.3905%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (30 samples, 0.05%)</title><rect x="28.5125%" y="213" width="0.0452%" height="15" fill="rgb(219,102,11)"/><text x="28.7625%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (982 samples, 1.48%)</title><rect x="27.0802%" y="229" width="1.4789%" height="15" fill="rgb(243,110,44)"/><text x="27.3302%" y="239.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (61 samples, 0.09%)</title><rect x="29.5863%" y="213" width="0.0919%" height="15" fill="rgb(222,74,54)"/><text x="29.8363%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (48 samples, 0.07%)</title><rect x="29.6059%" y="197" width="0.0723%" height="15" fill="rgb(216,99,12)"/><text x="29.8559%" y="207.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.09%)</title><rect x="29.6782%" y="213" width="0.0874%" height="15" fill="rgb(226,22,26)"/><text x="29.9282%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (24 samples, 0.04%)</title><rect x="29.7294%" y="197" width="0.0361%" height="15" fill="rgb(217,163,10)"/><text x="29.9794%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.03%)</title><rect x="29.7745%" y="213" width="0.0301%" height="15" fill="rgb(213,25,53)"/><text x="30.0245%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.04%)</title><rect x="29.8047%" y="213" width="0.0361%" height="15" fill="rgb(252,105,26)"/><text x="30.0547%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="30.6285%" y="165" width="0.0120%" height="15" fill="rgb(220,39,43)"/><text x="30.8785%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (10 samples, 0.02%)</title><rect x="30.6405%" y="165" width="0.0151%" height="15" fill="rgb(229,68,48)"/><text x="30.8905%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (18 samples, 0.03%)</title><rect x="30.9432%" y="133" width="0.0271%" height="15" fill="rgb(252,8,32)"/><text x="31.1932%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (24 samples, 0.04%)</title><rect x="30.9703%" y="133" width="0.0361%" height="15" fill="rgb(223,20,43)"/><text x="31.2203%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (23 samples, 0.03%)</title><rect x="31.4026%" y="85" width="0.0346%" height="15" fill="rgb(229,81,49)"/><text x="31.6526%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (128 samples, 0.19%)</title><rect x="31.2987%" y="101" width="0.1928%" height="15" fill="rgb(236,28,36)"/><text x="31.5487%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (36 samples, 0.05%)</title><rect x="31.4372%" y="85" width="0.0542%" height="15" fill="rgb(249,185,26)"/><text x="31.6872%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (16 samples, 0.02%)</title><rect x="31.4914%" y="101" width="0.0241%" height="15" fill="rgb(249,174,33)"/><text x="31.7414%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (9 samples, 0.01%)</title><rect x="31.5185%" y="101" width="0.0136%" height="15" fill="rgb(233,201,37)"/><text x="31.7685%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (17 samples, 0.03%)</title><rect x="31.5321%" y="101" width="0.0256%" height="15" fill="rgb(221,78,26)"/><text x="31.7821%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (16 samples, 0.02%)</title><rect x="31.5577%" y="101" width="0.0241%" height="15" fill="rgb(250,127,30)"/><text x="31.8077%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (16,619 samples, 25.03%)</title><rect x="31.5818%" y="101" width="25.0290%" height="15" fill="rgb(230,49,44)"/><text x="31.8318%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (16,882 samples, 25.43%)</title><rect x="31.2128%" y="117" width="25.4251%" height="15" fill="rgb(229,67,23)"/><text x="31.4628%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::TcpS..</text></g><g><title>libsystem_kernel.dylib`cerror (18 samples, 0.03%)</title><rect x="56.6108%" y="101" width="0.0271%" height="15" fill="rgb(249,83,47)"/><text x="56.8608%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 0.01%)</title><rect x="56.6379%" y="117" width="0.0105%" height="15" fill="rgb(215,43,3)"/><text x="56.8879%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (15 samples, 0.02%)</title><rect x="56.6545%" y="117" width="0.0226%" height="15" fill="rgb(238,154,13)"/><text x="56.9045%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (7 samples, 0.01%)</title><rect x="56.6771%" y="117" width="0.0105%" height="15" fill="rgb(219,56,2)"/><text x="56.9271%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (33 samples, 0.05%)</title><rect x="57.0370%" y="101" width="0.0497%" height="15" fill="rgb(233,0,4)"/><text x="57.2870%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (79 samples, 0.12%)</title><rect x="57.0867%" y="101" width="0.1190%" height="15" fill="rgb(235,30,7)"/><text x="57.3367%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (11 samples, 0.02%)</title><rect x="57.1891%" y="85" width="0.0166%" height="15" fill="rgb(250,79,13)"/><text x="57.4391%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (10 samples, 0.02%)</title><rect x="57.1906%" y="69" width="0.0151%" height="15" fill="rgb(211,146,34)"/><text x="57.4406%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="57.2057%" y="101" width="0.0196%" height="15" fill="rgb(228,22,38)"/><text x="57.4557%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (420 samples, 0.63%)</title><rect x="56.6876%" y="117" width="0.6325%" height="15" fill="rgb(235,168,5)"/><text x="56.9376%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (63 samples, 0.09%)</title><rect x="57.2253%" y="101" width="0.0949%" height="15" fill="rgb(221,155,16)"/><text x="57.4753%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (17,490 samples, 26.34%)</title><rect x="31.0065%" y="133" width="26.3408%" height="15" fill="rgb(215,215,53)"/><text x="31.2565%" y="143.50">async-redis`tokio::io::driver::registratio..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.03%)</title><rect x="57.3201%" y="117" width="0.0271%" height="15" fill="rgb(223,4,10)"/><text x="57.5701%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (17,627 samples, 26.55%)</title><rect x="30.8378%" y="149" width="26.5471%" height="15" fill="rgb(234,103,6)"/><text x="31.0878%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::TcpS..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (25 samples, 0.04%)</title><rect x="57.3472%" y="133" width="0.0377%" height="15" fill="rgb(227,97,0)"/><text x="57.5972%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.01%)</title><rect x="57.4030%" y="133" width="0.0105%" height="15" fill="rgb(234,150,53)"/><text x="57.6530%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="57.4030%" y="117" width="0.0105%" height="15" fill="rgb(228,201,54)"/><text x="57.6530%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (103 samples, 0.16%)</title><rect x="57.3879%" y="149" width="0.1551%" height="15" fill="rgb(222,22,37)"/><text x="57.6379%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (86 samples, 0.13%)</title><rect x="57.4135%" y="133" width="0.1295%" height="15" fill="rgb(237,53,32)"/><text x="57.6635%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (22 samples, 0.03%)</title><rect x="57.5430%" y="149" width="0.0331%" height="15" fill="rgb(233,25,53)"/><text x="57.7930%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (17,876 samples, 26.92%)</title><rect x="30.6556%" y="165" width="26.9221%" height="15" fill="rgb(210,40,34)"/><text x="30.9056%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::Rea..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 0.02%)</title><rect x="57.5777%" y="165" width="0.0226%" height="15" fill="rgb(241,220,44)"/><text x="57.8277%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (9 samples, 0.01%)</title><rect x="58.0099%" y="117" width="0.0136%" height="15" fill="rgb(235,28,35)"/><text x="58.2599%" y="127.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (19 samples, 0.03%)</title><rect x="57.9979%" y="133" width="0.0286%" height="15" fill="rgb(210,56,17)"/><text x="58.2479%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="58.0310%" y="133" width="0.0196%" height="15" fill="rgb(224,130,29)"/><text x="58.2810%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (13 samples, 0.02%)</title><rect x="58.0310%" y="117" width="0.0196%" height="15" fill="rgb(235,212,8)"/><text x="58.2810%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (302 samples, 0.45%)</title><rect x="57.6198%" y="149" width="0.4548%" height="15" fill="rgb(223,33,50)"/><text x="57.8698%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (16 samples, 0.02%)</title><rect x="58.0506%" y="133" width="0.0241%" height="15" fill="rgb(219,149,13)"/><text x="58.3006%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (316 samples, 0.48%)</title><rect x="57.6003%" y="165" width="0.4759%" height="15" fill="rgb(250,156,29)"/><text x="57.8503%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.02%)</title><rect x="58.0837%" y="165" width="0.0226%" height="15" fill="rgb(216,193,19)"/><text x="58.3337%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="58.3322%" y="149" width="0.0331%" height="15" fill="rgb(216,135,14)"/><text x="58.5822%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (11 samples, 0.02%)</title><rect x="58.3488%" y="133" width="0.0166%" height="15" fill="rgb(241,47,5)"/><text x="58.5988%" y="143.50"></text></g><g><title>async-redis`__rdl_dealloc (18 samples, 0.03%)</title><rect x="58.3759%" y="149" width="0.0271%" height="15" fill="rgb(233,42,35)"/><text x="58.6259%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="58.5536%" y="85" width="0.0361%" height="15" fill="rgb(231,13,6)"/><text x="58.8036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (133 samples, 0.20%)</title><rect x="58.4572%" y="101" width="0.2003%" height="15" fill="rgb(207,181,40)"/><text x="58.7072%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (43 samples, 0.06%)</title><rect x="58.5927%" y="85" width="0.0648%" height="15" fill="rgb(254,173,49)"/><text x="58.8427%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="58.6455%" y="69" width="0.0120%" height="15" fill="rgb(221,1,38)"/><text x="58.8955%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (150 samples, 0.23%)</title><rect x="58.4331%" y="133" width="0.2259%" height="15" fill="rgb(206,124,46)"/><text x="58.6831%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (140 samples, 0.21%)</title><rect x="58.4482%" y="117" width="0.2108%" height="15" fill="rgb(249,21,11)"/><text x="58.6982%" y="127.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (171 samples, 0.26%)</title><rect x="58.4045%" y="149" width="0.2575%" height="15" fill="rgb(222,201,40)"/><text x="58.6545%" y="159.50"></text></g><g><title>async-redis`__rdl_dealloc (11 samples, 0.02%)</title><rect x="58.8292%" y="133" width="0.0166%" height="15" fill="rgb(235,61,29)"/><text x="59.0792%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (118 samples, 0.18%)</title><rect x="61.1621%" y="117" width="0.1777%" height="15" fill="rgb(219,207,3)"/><text x="61.4121%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (89 samples, 0.13%)</title><rect x="61.2057%" y="101" width="0.1340%" height="15" fill="rgb(222,56,46)"/><text x="61.4557%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,664 samples, 2.51%)</title><rect x="58.8518%" y="133" width="2.5061%" height="15" fill="rgb(239,76,54)"/><text x="59.1018%" y="143.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (12 samples, 0.02%)</title><rect x="61.3398%" y="117" width="0.0181%" height="15" fill="rgb(231,124,27)"/><text x="61.5898%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (39 samples, 0.06%)</title><rect x="61.4362%" y="117" width="0.0587%" height="15" fill="rgb(249,195,6)"/><text x="61.6862%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (25 samples, 0.04%)</title><rect x="61.4949%" y="117" width="0.0377%" height="15" fill="rgb(237,174,47)"/><text x="61.7449%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (205 samples, 0.31%)</title><rect x="61.5326%" y="117" width="0.3087%" height="15" fill="rgb(206,201,31)"/><text x="61.7826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (180 samples, 0.27%)</title><rect x="61.5702%" y="101" width="0.2711%" height="15" fill="rgb(231,57,52)"/><text x="61.8202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (165 samples, 0.25%)</title><rect x="61.5928%" y="85" width="0.2485%" height="15" fill="rgb(248,177,22)"/><text x="61.8428%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="61.8413%" y="117" width="0.0105%" height="15" fill="rgb(215,211,37)"/><text x="62.0913%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (58 samples, 0.09%)</title><rect x="61.9151%" y="101" width="0.0874%" height="15" fill="rgb(241,128,51)"/><text x="62.1651%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (51 samples, 0.08%)</title><rect x="61.9256%" y="85" width="0.0768%" height="15" fill="rgb(227,165,31)"/><text x="62.1756%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (102 samples, 0.15%)</title><rect x="61.8518%" y="117" width="0.1536%" height="15" fill="rgb(228,167,24)"/><text x="62.1018%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (109 samples, 0.16%)</title><rect x="62.0055%" y="117" width="0.1642%" height="15" fill="rgb(228,143,12)"/><text x="62.2555%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (571 samples, 0.86%)</title><rect x="61.3579%" y="133" width="0.8600%" height="15" fill="rgb(249,149,8)"/><text x="61.6079%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.03%)</title><rect x="62.1877%" y="117" width="0.0301%" height="15" fill="rgb(243,35,44)"/><text x="62.4377%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (79 samples, 0.12%)</title><rect x="62.2268%" y="133" width="0.1190%" height="15" fill="rgb(246,89,9)"/><text x="62.4768%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (55 samples, 0.08%)</title><rect x="62.2630%" y="117" width="0.0828%" height="15" fill="rgb(233,213,13)"/><text x="62.5130%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (101 samples, 0.15%)</title><rect x="62.3518%" y="133" width="0.1521%" height="15" fill="rgb(233,141,41)"/><text x="62.6018%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="62.5175%" y="133" width="0.0151%" height="15" fill="rgb(239,167,4)"/><text x="62.7675%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,587 samples, 3.90%)</title><rect x="58.6620%" y="149" width="3.8961%" height="15" fill="rgb(209,217,16)"/><text x="58.9120%" y="159.50">asyn..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (27 samples, 0.04%)</title><rect x="62.6034%" y="133" width="0.0407%" height="15" fill="rgb(219,88,35)"/><text x="62.8534%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (16 samples, 0.02%)</title><rect x="62.6199%" y="117" width="0.0241%" height="15" fill="rgb(220,193,23)"/><text x="62.8699%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (63 samples, 0.09%)</title><rect x="62.5582%" y="149" width="0.0949%" height="15" fill="rgb(230,90,52)"/><text x="62.8082%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (22 samples, 0.03%)</title><rect x="62.7043%" y="133" width="0.0331%" height="15" fill="rgb(252,106,19)"/><text x="62.9543%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (22 samples, 0.03%)</title><rect x="62.7374%" y="133" width="0.0331%" height="15" fill="rgb(206,74,20)"/><text x="62.9874%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (140 samples, 0.21%)</title><rect x="62.7796%" y="117" width="0.2108%" height="15" fill="rgb(230,138,44)"/><text x="63.0296%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (134 samples, 0.20%)</title><rect x="62.7886%" y="101" width="0.2018%" height="15" fill="rgb(235,182,43)"/><text x="63.0386%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (67 samples, 0.10%)</title><rect x="62.8895%" y="85" width="0.1009%" height="15" fill="rgb(242,16,51)"/><text x="63.1395%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (147 samples, 0.22%)</title><rect x="62.7705%" y="133" width="0.2214%" height="15" fill="rgb(248,9,4)"/><text x="63.0205%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.06%)</title><rect x="63.0356%" y="117" width="0.0633%" height="15" fill="rgb(210,31,22)"/><text x="63.2856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.06%)</title><rect x="63.0431%" y="101" width="0.0557%" height="15" fill="rgb(239,54,39)"/><text x="63.2931%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (70 samples, 0.11%)</title><rect x="62.9994%" y="133" width="0.1054%" height="15" fill="rgb(230,99,41)"/><text x="63.2494%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.03%)</title><rect x="63.2088%" y="101" width="0.0301%" height="15" fill="rgb(253,106,12)"/><text x="63.4588%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (92 samples, 0.14%)</title><rect x="63.1049%" y="133" width="0.1386%" height="15" fill="rgb(213,46,41)"/><text x="63.3549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.07%)</title><rect x="63.1757%" y="117" width="0.0678%" height="15" fill="rgb(215,133,35)"/><text x="63.4257%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="63.2479%" y="133" width="0.0105%" height="15" fill="rgb(213,28,5)"/><text x="63.4979%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (412 samples, 0.62%)</title><rect x="62.6531%" y="149" width="0.6205%" height="15" fill="rgb(215,77,49)"/><text x="62.9031%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="63.2630%" y="133" width="0.0105%" height="15" fill="rgb(248,100,22)"/><text x="63.5130%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (20 samples, 0.03%)</title><rect x="63.2735%" y="149" width="0.0301%" height="15" fill="rgb(208,67,9)"/><text x="63.5235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.03%)</title><rect x="63.5627%" y="53" width="0.0286%" height="15" fill="rgb(219,133,21)"/><text x="63.8127%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (181 samples, 0.27%)</title><rect x="63.4211%" y="85" width="0.2726%" height="15" fill="rgb(246,46,29)"/><text x="63.6711%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (171 samples, 0.26%)</title><rect x="63.4362%" y="69" width="0.2575%" height="15" fill="rgb(246,185,52)"/><text x="63.6862%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.09%)</title><rect x="63.5988%" y="53" width="0.0949%" height="15" fill="rgb(252,136,11)"/><text x="63.8488%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.04%)</title><rect x="63.6501%" y="37" width="0.0437%" height="15" fill="rgb(219,138,53)"/><text x="63.9001%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (203 samples, 0.31%)</title><rect x="63.3895%" y="101" width="0.3057%" height="15" fill="rgb(211,51,23)"/><text x="63.6395%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (240 samples, 0.36%)</title><rect x="63.3443%" y="117" width="0.3615%" height="15" fill="rgb(247,221,28)"/><text x="63.5943%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="63.6952%" y="101" width="0.0105%" height="15" fill="rgb(251,222,45)"/><text x="63.9452%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (258 samples, 0.39%)</title><rect x="63.3247%" y="133" width="0.3886%" height="15" fill="rgb(217,162,53)"/><text x="63.5747%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (296 samples, 0.45%)</title><rect x="63.3037%" y="149" width="0.4458%" height="15" fill="rgb(229,93,14)"/><text x="63.5537%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (24 samples, 0.04%)</title><rect x="63.7133%" y="133" width="0.0361%" height="15" fill="rgb(209,67,49)"/><text x="63.9633%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (16 samples, 0.02%)</title><rect x="63.7495%" y="149" width="0.0241%" height="15" fill="rgb(213,87,29)"/><text x="63.9995%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (74 samples, 0.11%)</title><rect x="63.7736%" y="149" width="0.1114%" height="15" fill="rgb(205,151,52)"/><text x="64.0236%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (18 samples, 0.03%)</title><rect x="63.8850%" y="149" width="0.0271%" height="15" fill="rgb(253,215,39)"/><text x="64.1350%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (25 samples, 0.04%)</title><rect x="63.9121%" y="149" width="0.0377%" height="15" fill="rgb(221,220,41)"/><text x="64.1621%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="63.9588%" y="149" width="0.0166%" height="15" fill="rgb(218,133,21)"/><text x="64.2088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.05%)</title><rect x="63.9754%" y="149" width="0.0497%" height="15" fill="rgb(221,193,43)"/><text x="64.2254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="64.0040%" y="133" width="0.0211%" height="15" fill="rgb(240,128,52)"/><text x="64.2540%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.02%)</title><rect x="64.0055%" y="117" width="0.0196%" height="15" fill="rgb(253,114,12)"/><text x="64.2555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (94 samples, 0.14%)</title><rect x="64.0251%" y="149" width="0.1416%" height="15" fill="rgb(215,223,47)"/><text x="64.2751%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (69 samples, 0.10%)</title><rect x="64.0627%" y="133" width="0.1039%" height="15" fill="rgb(248,225,23)"/><text x="64.3127%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.05%)</title><rect x="64.1214%" y="117" width="0.0452%" height="15" fill="rgb(250,108,0)"/><text x="64.3714%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (10 samples, 0.02%)</title><rect x="64.1666%" y="149" width="0.0151%" height="15" fill="rgb(228,208,7)"/><text x="64.4166%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode (4,041 samples, 6.09%)</title><rect x="58.1063%" y="165" width="6.0859%" height="15" fill="rgb(244,45,10)"/><text x="58.3563%" y="175.50">async-re..</text></g><g><title>async-redis`async_redis::protocol::get_line (7 samples, 0.01%)</title><rect x="64.1922%" y="165" width="0.0105%" height="15" fill="rgb(207,125,25)"/><text x="64.4422%" y="175.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (10 samples, 0.02%)</title><rect x="64.2103%" y="165" width="0.0151%" height="15" fill="rgb(210,195,18)"/><text x="64.4603%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (14 samples, 0.02%)</title><rect x="64.2254%" y="165" width="0.0211%" height="15" fill="rgb(249,80,12)"/><text x="64.4754%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.04%)</title><rect x="64.3398%" y="133" width="0.0377%" height="15" fill="rgb(221,65,9)"/><text x="64.5898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.04%)</title><rect x="64.3398%" y="117" width="0.0377%" height="15" fill="rgb(235,49,36)"/><text x="64.5898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (56 samples, 0.08%)</title><rect x="64.2961%" y="149" width="0.0843%" height="15" fill="rgb(225,32,20)"/><text x="64.5461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.06%)</title><rect x="64.4678%" y="117" width="0.0602%" height="15" fill="rgb(215,141,46)"/><text x="64.7178%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (111 samples, 0.17%)</title><rect x="64.3805%" y="149" width="0.1672%" height="15" fill="rgb(250,160,47)"/><text x="64.6305%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.11%)</title><rect x="64.4332%" y="133" width="0.1145%" height="15" fill="rgb(216,222,40)"/><text x="64.6832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="64.5281%" y="117" width="0.0196%" height="15" fill="rgb(234,217,39)"/><text x="64.7781%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="64.5477%" y="149" width="0.0286%" height="15" fill="rgb(207,178,40)"/><text x="64.7977%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (220 samples, 0.33%)</title><rect x="64.2464%" y="165" width="0.3313%" height="15" fill="rgb(221,136,13)"/><text x="64.4964%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (7 samples, 0.01%)</title><rect x="64.5868%" y="165" width="0.0105%" height="15" fill="rgb(249,199,10)"/><text x="64.8368%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (12 samples, 0.02%)</title><rect x="64.5974%" y="165" width="0.0181%" height="15" fill="rgb(249,222,13)"/><text x="64.8474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (158 samples, 0.24%)</title><rect x="64.7675%" y="133" width="0.2380%" height="15" fill="rgb(244,185,38)"/><text x="65.0175%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (71 samples, 0.11%)</title><rect x="64.8986%" y="117" width="0.1069%" height="15" fill="rgb(236,202,9)"/><text x="65.1486%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.05%)</title><rect x="65.1305%" y="117" width="0.0497%" height="15" fill="rgb(250,229,37)"/><text x="65.3805%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (377 samples, 0.57%)</title><rect x="64.7419%" y="149" width="0.5678%" height="15" fill="rgb(206,174,23)"/><text x="64.9919%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (200 samples, 0.30%)</title><rect x="65.0085%" y="133" width="0.3012%" height="15" fill="rgb(211,33,43)"/><text x="65.2585%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (84 samples, 0.13%)</title><rect x="65.1832%" y="117" width="0.1265%" height="15" fill="rgb(245,58,50)"/><text x="65.4332%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.03%)</title><rect x="65.2841%" y="101" width="0.0256%" height="15" fill="rgb(244,68,36)"/><text x="65.5341%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (465 samples, 0.70%)</title><rect x="64.6154%" y="165" width="0.7003%" height="15" fill="rgb(232,229,15)"/><text x="64.8654%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.04%)</title><rect x="65.3218%" y="165" width="0.0407%" height="15" fill="rgb(254,30,23)"/><text x="65.5718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.03%)</title><rect x="65.3835%" y="149" width="0.0256%" height="15" fill="rgb(235,160,14)"/><text x="65.6335%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="65.3865%" y="133" width="0.0226%" height="15" fill="rgb(212,155,44)"/><text x="65.6365%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="65.3624%" y="165" width="0.0482%" height="15" fill="rgb(226,2,50)"/><text x="65.6124%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="65.4784%" y="133" width="0.0316%" height="15" fill="rgb(234,177,6)"/><text x="65.7284%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (74 samples, 0.11%)</title><rect x="65.4106%" y="165" width="0.1114%" height="15" fill="rgb(217,24,9)"/><text x="65.6606%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (48 samples, 0.07%)</title><rect x="65.4498%" y="149" width="0.0723%" height="15" fill="rgb(220,13,46)"/><text x="65.6998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="65.5100%" y="133" width="0.0120%" height="15" fill="rgb(239,221,27)"/><text x="65.7600%" y="143.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24,973 samples, 37.61%)</title><rect x="30.3182%" y="181" width="37.6105%" height="15" fill="rgb(222,198,25)"/><text x="30.5682%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,590 samples, 2.39%)</title><rect x="65.5341%" y="165" width="2.3946%" height="15" fill="rgb(211,99,13)"/><text x="65.7841%" y="175.50">li..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="67.9287%" y="181" width="0.0196%" height="15" fill="rgb(232,111,31)"/><text x="68.1787%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.01%)</title><rect x="67.9483%" y="181" width="0.0120%" height="15" fill="rgb(245,82,37)"/><text x="68.1983%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (14 samples, 0.02%)</title><rect x="68.0507%" y="149" width="0.0211%" height="15" fill="rgb(227,149,46)"/><text x="68.3007%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (17 samples, 0.03%)</title><rect x="68.0718%" y="149" width="0.0256%" height="15" fill="rgb(218,36,50)"/><text x="68.3218%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (94 samples, 0.14%)</title><rect x="68.0974%" y="149" width="0.1416%" height="15" fill="rgb(226,80,48)"/><text x="68.3474%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (20 samples, 0.03%)</title><rect x="68.2390%" y="149" width="0.0301%" height="15" fill="rgb(238,224,15)"/><text x="68.4890%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (10 samples, 0.02%)</title><rect x="68.2691%" y="149" width="0.0151%" height="15" fill="rgb(241,136,10)"/><text x="68.5191%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (16 samples, 0.02%)</title><rect x="68.2842%" y="149" width="0.0241%" height="15" fill="rgb(208,32,45)"/><text x="68.5342%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="68.3549%" y="117" width="0.0151%" height="15" fill="rgb(207,135,9)"/><text x="68.6049%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (168 samples, 0.25%)</title><rect x="68.3700%" y="117" width="0.2530%" height="15" fill="rgb(206,86,44)"/><text x="68.6200%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (121 samples, 0.18%)</title><rect x="68.4408%" y="101" width="0.1822%" height="15" fill="rgb(245,177,15)"/><text x="68.6908%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (15 samples, 0.02%)</title><rect x="68.6230%" y="117" width="0.0226%" height="15" fill="rgb(206,64,50)"/><text x="68.8730%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (20 samples, 0.03%)</title><rect x="68.6456%" y="117" width="0.0301%" height="15" fill="rgb(234,36,40)"/><text x="68.8956%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (28 samples, 0.04%)</title><rect x="68.6757%" y="117" width="0.0422%" height="15" fill="rgb(213,64,8)"/><text x="68.9257%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (275 samples, 0.41%)</title><rect x="68.3339%" y="133" width="0.4142%" height="15" fill="rgb(210,75,36)"/><text x="68.5839%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.03%)</title><rect x="68.7179%" y="117" width="0.0301%" height="15" fill="rgb(229,88,21)"/><text x="68.9679%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (10 samples, 0.02%)</title><rect x="68.7510%" y="133" width="0.0151%" height="15" fill="rgb(252,204,47)"/><text x="69.0010%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (7 samples, 0.01%)</title><rect x="68.7661%" y="133" width="0.0105%" height="15" fill="rgb(208,77,27)"/><text x="69.0161%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (34 samples, 0.05%)</title><rect x="68.7766%" y="133" width="0.0512%" height="15" fill="rgb(221,76,26)"/><text x="69.0266%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (8 samples, 0.01%)</title><rect x="68.8158%" y="117" width="0.0120%" height="15" fill="rgb(225,139,18)"/><text x="69.0658%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (21 samples, 0.03%)</title><rect x="68.8278%" y="133" width="0.0316%" height="15" fill="rgb(230,137,11)"/><text x="69.0778%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (371 samples, 0.56%)</title><rect x="68.3083%" y="149" width="0.5587%" height="15" fill="rgb(212,28,1)"/><text x="68.5583%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (33 samples, 0.05%)</title><rect x="68.8670%" y="149" width="0.0497%" height="15" fill="rgb(248,164,17)"/><text x="69.1170%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (629 samples, 0.95%)</title><rect x="67.9754%" y="165" width="0.9473%" height="15" fill="rgb(222,171,42)"/><text x="68.2254%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (8 samples, 0.01%)</title><rect x="68.9242%" y="165" width="0.0120%" height="15" fill="rgb(243,84,45)"/><text x="69.1742%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (22 samples, 0.03%)</title><rect x="68.9363%" y="165" width="0.0331%" height="15" fill="rgb(252,49,23)"/><text x="69.1863%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (26 samples, 0.04%)</title><rect x="68.9694%" y="165" width="0.0392%" height="15" fill="rgb(215,19,7)"/><text x="69.2194%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (701 samples, 1.06%)</title><rect x="67.9634%" y="181" width="1.0557%" height="15" fill="rgb(238,81,41)"/><text x="68.2134%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="69.0086%" y="165" width="0.0105%" height="15" fill="rgb(210,199,37)"/><text x="69.2586%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (38 samples, 0.06%)</title><rect x="69.0281%" y="181" width="0.0572%" height="15" fill="rgb(244,192,49)"/><text x="69.2781%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (16 samples, 0.02%)</title><rect x="69.1019%" y="165" width="0.0241%" height="15" fill="rgb(226,211,11)"/><text x="69.3519%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="69.1260%" y="165" width="0.0196%" height="15" fill="rgb(236,162,54)"/><text x="69.3760%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (36 samples, 0.05%)</title><rect x="69.1456%" y="165" width="0.0542%" height="15" fill="rgb(220,229,9)"/><text x="69.3956%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (19 samples, 0.03%)</title><rect x="69.1712%" y="149" width="0.0286%" height="15" fill="rgb(250,87,22)"/><text x="69.4212%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (8 samples, 0.01%)</title><rect x="69.2646%" y="101" width="0.0120%" height="15" fill="rgb(239,43,17)"/><text x="69.5146%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.02%)</title><rect x="69.2616%" y="117" width="0.0166%" height="15" fill="rgb(231,177,25)"/><text x="69.5116%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (34 samples, 0.05%)</title><rect x="69.2812%" y="117" width="0.0512%" height="15" fill="rgb(219,179,1)"/><text x="69.5312%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="69.3083%" y="101" width="0.0241%" height="15" fill="rgb(238,219,53)"/><text x="69.5583%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="69.3188%" y="85" width="0.0136%" height="15" fill="rgb(232,167,36)"/><text x="69.5688%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (54 samples, 0.08%)</title><rect x="69.2571%" y="133" width="0.0813%" height="15" fill="rgb(244,19,51)"/><text x="69.5071%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (58 samples, 0.09%)</title><rect x="69.2541%" y="149" width="0.0874%" height="15" fill="rgb(224,6,22)"/><text x="69.5041%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (65 samples, 0.10%)</title><rect x="69.3971%" y="101" width="0.0979%" height="15" fill="rgb(224,145,5)"/><text x="69.6471%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (58 samples, 0.09%)</title><rect x="69.4077%" y="85" width="0.0874%" height="15" fill="rgb(234,130,49)"/><text x="69.6577%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (7 samples, 0.01%)</title><rect x="69.4965%" y="101" width="0.0105%" height="15" fill="rgb(254,6,2)"/><text x="69.7465%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (83 samples, 0.13%)</title><rect x="69.3866%" y="117" width="0.1250%" height="15" fill="rgb(208,96,46)"/><text x="69.6366%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (16 samples, 0.02%)</title><rect x="69.5131%" y="117" width="0.0241%" height="15" fill="rgb(239,3,39)"/><text x="69.7631%" y="127.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (46 samples, 0.07%)</title><rect x="69.7405%" y="101" width="0.0693%" height="15" fill="rgb(233,210,1)"/><text x="69.9905%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.06%)</title><rect x="69.8188%" y="85" width="0.0617%" height="15" fill="rgb(244,137,37)"/><text x="70.0688%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 0.06%)</title><rect x="69.8218%" y="69" width="0.0587%" height="15" fill="rgb(240,136,2)"/><text x="70.0718%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.07%)</title><rect x="69.8113%" y="101" width="0.0708%" height="15" fill="rgb(239,18,37)"/><text x="70.0613%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.04%)</title><rect x="70.0161%" y="69" width="0.0422%" height="15" fill="rgb(218,185,22)"/><text x="70.2661%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (127 samples, 0.19%)</title><rect x="69.8821%" y="101" width="0.1913%" height="15" fill="rgb(225,218,4)"/><text x="70.1321%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (75 samples, 0.11%)</title><rect x="69.9604%" y="85" width="0.1130%" height="15" fill="rgb(230,182,32)"/><text x="70.2104%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="70.0583%" y="69" width="0.0151%" height="15" fill="rgb(242,56,43)"/><text x="70.3083%" y="79.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (365 samples, 0.55%)</title><rect x="69.5372%" y="117" width="0.5497%" height="15" fill="rgb(233,99,24)"/><text x="69.7872%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (9 samples, 0.01%)</title><rect x="70.0733%" y="101" width="0.0136%" height="15" fill="rgb(234,209,42)"/><text x="70.3233%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (36 samples, 0.05%)</title><rect x="70.1035%" y="117" width="0.0542%" height="15" fill="rgb(227,7,12)"/><text x="70.3535%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (529 samples, 0.80%)</title><rect x="69.3760%" y="133" width="0.7967%" height="15" fill="rgb(245,203,43)"/><text x="69.6260%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="70.1607%" y="117" width="0.0120%" height="15" fill="rgb(238,205,33)"/><text x="70.4107%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (563 samples, 0.85%)</title><rect x="69.3414%" y="149" width="0.8479%" height="15" fill="rgb(231,56,7)"/><text x="69.5914%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (10 samples, 0.02%)</title><rect x="70.1742%" y="133" width="0.0151%" height="15" fill="rgb(244,186,29)"/><text x="70.4242%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (671 samples, 1.01%)</title><rect x="69.2028%" y="165" width="1.0106%" height="15" fill="rgb(234,111,31)"/><text x="69.4528%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="70.1938%" y="149" width="0.0196%" height="15" fill="rgb(241,149,10)"/><text x="70.4438%" y="159.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (15 samples, 0.02%)</title><rect x="70.2149%" y="165" width="0.0226%" height="15" fill="rgb(249,206,44)"/><text x="70.4649%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (10 samples, 0.02%)</title><rect x="70.2435%" y="165" width="0.0151%" height="15" fill="rgb(251,153,30)"/><text x="70.4935%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (786 samples, 1.18%)</title><rect x="69.0854%" y="181" width="1.1838%" height="15" fill="rgb(239,152,38)"/><text x="69.3354%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="70.2586%" y="165" width="0.0105%" height="15" fill="rgb(249,139,47)"/><text x="70.5086%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (20 samples, 0.03%)</title><rect x="70.2721%" y="181" width="0.0301%" height="15" fill="rgb(244,64,35)"/><text x="70.5221%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (11 samples, 0.02%)</title><rect x="70.3158%" y="181" width="0.0166%" height="15" fill="rgb(216,46,15)"/><text x="70.5658%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode (14 samples, 0.02%)</title><rect x="70.3459%" y="181" width="0.0211%" height="15" fill="rgb(250,74,19)"/><text x="70.5959%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (30 samples, 0.05%)</title><rect x="70.3670%" y="181" width="0.0452%" height="15" fill="rgb(249,42,33)"/><text x="70.6170%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (39 samples, 0.06%)</title><rect x="70.4122%" y="181" width="0.0587%" height="15" fill="rgb(242,149,17)"/><text x="70.6622%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (188 samples, 0.28%)</title><rect x="70.5718%" y="133" width="0.2831%" height="15" fill="rgb(244,29,21)"/><text x="70.8218%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (230 samples, 0.35%)</title><rect x="70.5101%" y="149" width="0.3464%" height="15" fill="rgb(220,130,37)"/><text x="70.7601%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (88 samples, 0.13%)</title><rect x="70.9047%" y="133" width="0.1325%" height="15" fill="rgb(211,67,2)"/><text x="71.1547%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (123 samples, 0.19%)</title><rect x="70.8565%" y="149" width="0.1852%" height="15" fill="rgb(235,68,52)"/><text x="71.1065%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (360 samples, 0.54%)</title><rect x="70.5056%" y="165" width="0.5422%" height="15" fill="rgb(246,142,3)"/><text x="70.7556%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (7 samples, 0.01%)</title><rect x="71.0478%" y="165" width="0.0105%" height="15" fill="rgb(241,25,7)"/><text x="71.2978%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (382 samples, 0.58%)</title><rect x="70.4935%" y="181" width="0.5753%" height="15" fill="rgb(242,119,39)"/><text x="70.7435%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (13 samples, 0.02%)</title><rect x="71.0734%" y="165" width="0.0196%" height="15" fill="rgb(241,98,45)"/><text x="71.3234%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (18 samples, 0.03%)</title><rect x="71.3053%" y="117" width="0.0271%" height="15" fill="rgb(254,28,30)"/><text x="71.5553%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (11 samples, 0.02%)</title><rect x="71.3324%" y="117" width="0.0166%" height="15" fill="rgb(241,142,54)"/><text x="71.5824%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (9 samples, 0.01%)</title><rect x="71.3354%" y="101" width="0.0136%" height="15" fill="rgb(222,85,15)"/><text x="71.5854%" y="111.50"></text></g><g><title>async-redis`__rdl_alloc (14 samples, 0.02%)</title><rect x="71.3610%" y="117" width="0.0211%" height="15" fill="rgb(210,85,47)"/><text x="71.6110%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (15 samples, 0.02%)</title><rect x="71.3821%" y="117" width="0.0226%" height="15" fill="rgb(224,206,25)"/><text x="71.6321%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 0.06%)</title><rect x="71.4363%" y="101" width="0.0587%" height="15" fill="rgb(243,201,19)"/><text x="71.6863%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (19 samples, 0.03%)</title><rect x="71.4664%" y="85" width="0.0286%" height="15" fill="rgb(236,59,4)"/><text x="71.7164%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (29 samples, 0.04%)</title><rect x="71.6487%" y="53" width="0.0437%" height="15" fill="rgb(254,179,45)"/><text x="71.8987%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (145 samples, 0.22%)</title><rect x="71.5704%" y="85" width="0.2184%" height="15" fill="rgb(226,14,10)"/><text x="71.8204%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (141 samples, 0.21%)</title><rect x="71.5764%" y="69" width="0.2124%" height="15" fill="rgb(244,27,41)"/><text x="71.8264%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.09%)</title><rect x="71.6939%" y="53" width="0.0949%" height="15" fill="rgb(235,35,32)"/><text x="71.9439%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="71.7737%" y="37" width="0.0151%" height="15" fill="rgb(218,68,31)"/><text x="72.0237%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (194 samples, 0.29%)</title><rect x="71.5011%" y="101" width="0.2922%" height="15" fill="rgb(207,120,37)"/><text x="71.7511%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (247 samples, 0.37%)</title><rect x="71.4243%" y="117" width="0.3720%" height="15" fill="rgb(227,98,0)"/><text x="71.6743%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.02%)</title><rect x="71.8038%" y="117" width="0.0181%" height="15" fill="rgb(207,7,3)"/><text x="72.0538%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (540 samples, 0.81%)</title><rect x="71.1697%" y="133" width="0.8133%" height="15" fill="rgb(206,98,19)"/><text x="71.4197%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (107 samples, 0.16%)</title><rect x="71.8219%" y="117" width="0.1611%" height="15" fill="rgb(217,5,26)"/><text x="72.0719%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (10 samples, 0.02%)</title><rect x="71.9890%" y="133" width="0.0151%" height="15" fill="rgb(235,190,38)"/><text x="72.2390%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (17 samples, 0.03%)</title><rect x="72.0086%" y="133" width="0.0256%" height="15" fill="rgb(247,86,24)"/><text x="72.2586%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (18 samples, 0.03%)</title><rect x="72.0568%" y="101" width="0.0271%" height="15" fill="rgb(205,101,16)"/><text x="72.3068%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (31 samples, 0.05%)</title><rect x="72.0402%" y="117" width="0.0467%" height="15" fill="rgb(246,168,33)"/><text x="72.2902%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (59 samples, 0.09%)</title><rect x="72.1532%" y="101" width="0.0889%" height="15" fill="rgb(231,114,1)"/><text x="72.4032%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (46 samples, 0.07%)</title><rect x="72.2421%" y="101" width="0.0693%" height="15" fill="rgb(207,184,53)"/><text x="72.4921%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (10 samples, 0.02%)</title><rect x="72.3113%" y="101" width="0.0151%" height="15" fill="rgb(224,95,51)"/><text x="72.5613%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (163 samples, 0.25%)</title><rect x="72.0869%" y="117" width="0.2455%" height="15" fill="rgb(212,188,45)"/><text x="72.3369%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (106 samples, 0.16%)</title><rect x="72.4619%" y="101" width="0.1596%" height="15" fill="rgb(223,154,38)"/><text x="72.7119%" y="111.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (9 samples, 0.01%)</title><rect x="72.6216%" y="101" width="0.0136%" height="15" fill="rgb(251,22,52)"/><text x="72.8716%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::create_with (205 samples, 0.31%)</title><rect x="72.3354%" y="117" width="0.3087%" height="15" fill="rgb(229,209,22)"/><text x="72.5854%" y="127.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (11 samples, 0.02%)</title><rect x="72.6472%" y="117" width="0.0166%" height="15" fill="rgb(234,138,34)"/><text x="72.8972%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (424 samples, 0.64%)</title><rect x="72.0342%" y="133" width="0.6386%" height="15" fill="rgb(212,95,11)"/><text x="72.2842%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::create_with (7 samples, 0.01%)</title><rect x="72.6818%" y="133" width="0.0105%" height="15" fill="rgb(240,179,47)"/><text x="72.9318%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (7 samples, 0.01%)</title><rect x="72.7150%" y="133" width="0.0105%" height="15" fill="rgb(240,163,11)"/><text x="72.9650%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (11 samples, 0.02%)</title><rect x="72.7255%" y="133" width="0.0166%" height="15" fill="rgb(236,37,12)"/><text x="72.9755%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1,083 samples, 1.63%)</title><rect x="71.1577%" y="149" width="1.6310%" height="15" fill="rgb(232,164,16)"/><text x="71.4077%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (31 samples, 0.05%)</title><rect x="72.7421%" y="133" width="0.0467%" height="15" fill="rgb(244,205,15)"/><text x="72.9921%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (9 samples, 0.01%)</title><rect x="72.7933%" y="149" width="0.0136%" height="15" fill="rgb(223,117,47)"/><text x="73.0433%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (12 samples, 0.02%)</title><rect x="72.8068%" y="149" width="0.0181%" height="15" fill="rgb(244,107,35)"/><text x="73.0568%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (20 samples, 0.03%)</title><rect x="72.8249%" y="149" width="0.0301%" height="15" fill="rgb(205,140,8)"/><text x="73.0749%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,175 samples, 1.77%)</title><rect x="71.1020%" y="165" width="1.7696%" height="15" fill="rgb(228,84,46)"/><text x="71.3520%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,200 samples, 1.81%)</title><rect x="71.0688%" y="181" width="1.8073%" height="15" fill="rgb(254,188,9)"/><text x="71.3188%" y="191.50">a..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.04%)</title><rect x="72.8987%" y="181" width="0.0422%" height="15" fill="rgb(206,112,54)"/><text x="73.1487%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.02%)</title><rect x="72.9469%" y="181" width="0.0196%" height="15" fill="rgb(216,84,49)"/><text x="73.1969%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28,526 samples, 42.96%)</title><rect x="30.0547%" y="197" width="42.9615%" height="15" fill="rgb(214,194,35)"/><text x="30.3047%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futur..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (31 samples, 0.05%)</title><rect x="72.9695%" y="181" width="0.0467%" height="15" fill="rgb(249,28,3)"/><text x="73.2195%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="73.0162%" y="197" width="0.0256%" height="15" fill="rgb(222,56,52)"/><text x="73.2662%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (18 samples, 0.03%)</title><rect x="73.0418%" y="197" width="0.0271%" height="15" fill="rgb(245,217,50)"/><text x="73.2918%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (24 samples, 0.04%)</title><rect x="73.0704%" y="197" width="0.0361%" height="15" fill="rgb(213,201,24)"/><text x="73.3204%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (43 samples, 0.06%)</title><rect x="73.1065%" y="197" width="0.0648%" height="15" fill="rgb(248,116,28)"/><text x="73.3565%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::new (7 samples, 0.01%)</title><rect x="73.1833%" y="197" width="0.0105%" height="15" fill="rgb(219,72,43)"/><text x="73.4333%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (28,830 samples, 43.42%)</title><rect x="29.8468%" y="213" width="43.4193%" height="15" fill="rgb(209,138,14)"/><text x="30.0968%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future:..</text></g><g><title>libdyld.dylib`tlv_get_addr (43 samples, 0.06%)</title><rect x="73.2014%" y="197" width="0.0648%" height="15" fill="rgb(222,18,33)"/><text x="73.4514%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (7 samples, 0.01%)</title><rect x="73.2662%" y="213" width="0.0105%" height="15" fill="rgb(213,199,7)"/><text x="73.5162%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.02%)</title><rect x="73.3836%" y="197" width="0.0151%" height="15" fill="rgb(250,110,10)"/><text x="73.6336%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (98 samples, 0.15%)</title><rect x="73.2767%" y="213" width="0.1476%" height="15" fill="rgb(248,123,6)"/><text x="73.5267%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.03%)</title><rect x="73.3987%" y="197" width="0.0256%" height="15" fill="rgb(206,91,31)"/><text x="73.6487%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (7 samples, 0.01%)</title><rect x="73.4243%" y="213" width="0.0105%" height="15" fill="rgb(211,154,13)"/><text x="73.6743%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (23 samples, 0.03%)</title><rect x="73.4559%" y="213" width="0.0346%" height="15" fill="rgb(225,148,7)"/><text x="73.7059%" y="223.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (23 samples, 0.03%)</title><rect x="73.4906%" y="213" width="0.0346%" height="15" fill="rgb(220,160,43)"/><text x="73.7406%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (12 samples, 0.02%)</title><rect x="73.5071%" y="197" width="0.0181%" height="15" fill="rgb(213,52,39)"/><text x="73.7571%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.02%)</title><rect x="73.5086%" y="181" width="0.0166%" height="15" fill="rgb(243,137,7)"/><text x="73.7586%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (181 samples, 0.27%)</title><rect x="73.6367%" y="181" width="0.2726%" height="15" fill="rgb(230,79,13)"/><text x="73.8867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.09%)</title><rect x="73.9092%" y="181" width="0.0889%" height="15" fill="rgb(247,105,23)"/><text x="74.1592%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.08%)</title><rect x="73.9183%" y="165" width="0.0798%" height="15" fill="rgb(223,179,41)"/><text x="74.1683%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (49 samples, 0.07%)</title><rect x="73.9243%" y="149" width="0.0738%" height="15" fill="rgb(218,9,34)"/><text x="74.1743%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.03%)</title><rect x="73.9695%" y="133" width="0.0286%" height="15" fill="rgb(222,106,8)"/><text x="74.2195%" y="143.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (260 samples, 0.39%)</title><rect x="73.6110%" y="197" width="0.3916%" height="15" fill="rgb(211,220,0)"/><text x="73.8610%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (9 samples, 0.01%)</title><rect x="74.0388%" y="181" width="0.0136%" height="15" fill="rgb(229,52,16)"/><text x="74.2888%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.07%)</title><rect x="74.0749%" y="165" width="0.0738%" height="15" fill="rgb(212,155,18)"/><text x="74.3249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (46 samples, 0.07%)</title><rect x="74.0794%" y="149" width="0.0693%" height="15" fill="rgb(242,21,14)"/><text x="74.3294%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (65 samples, 0.10%)</title><rect x="74.0523%" y="181" width="0.0979%" height="15" fill="rgb(222,19,48)"/><text x="74.3023%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (106 samples, 0.16%)</title><rect x="74.0041%" y="197" width="0.1596%" height="15" fill="rgb(232,45,27)"/><text x="74.2541%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (11 samples, 0.02%)</title><rect x="74.2481%" y="181" width="0.0166%" height="15" fill="rgb(249,103,42)"/><text x="74.4981%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (85 samples, 0.13%)</title><rect x="74.1638%" y="197" width="0.1280%" height="15" fill="rgb(246,81,33)"/><text x="74.4138%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (16 samples, 0.02%)</title><rect x="74.2677%" y="181" width="0.0241%" height="15" fill="rgb(252,33,42)"/><text x="74.5177%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (20 samples, 0.03%)</title><rect x="74.3053%" y="197" width="0.0301%" height="15" fill="rgb(209,212,41)"/><text x="74.5553%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.03%)</title><rect x="74.3656%" y="181" width="0.0301%" height="15" fill="rgb(207,154,6)"/><text x="74.6156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.03%)</title><rect x="74.3701%" y="165" width="0.0256%" height="15" fill="rgb(223,64,47)"/><text x="74.6201%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.06%)</title><rect x="74.3385%" y="197" width="0.0587%" height="15" fill="rgb(211,161,38)"/><text x="74.5885%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (88 samples, 0.13%)</title><rect x="74.3972%" y="197" width="0.1325%" height="15" fill="rgb(219,138,40)"/><text x="74.6472%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.07%)</title><rect x="74.4559%" y="181" width="0.0738%" height="15" fill="rgb(241,228,46)"/><text x="74.7059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.04%)</title><rect x="74.4891%" y="165" width="0.0407%" height="15" fill="rgb(223,209,38)"/><text x="74.7391%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (681 samples, 1.03%)</title><rect x="73.5252%" y="213" width="1.0256%" height="15" fill="rgb(236,164,45)"/><text x="73.7752%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (12 samples, 0.02%)</title><rect x="74.5508%" y="213" width="0.0181%" height="15" fill="rgb(231,15,5)"/><text x="74.8008%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode (26 samples, 0.04%)</title><rect x="74.5719%" y="213" width="0.0392%" height="15" fill="rgb(252,35,15)"/><text x="74.8219%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.05%)</title><rect x="74.6442%" y="197" width="0.0497%" height="15" fill="rgb(248,181,18)"/><text x="74.8942%" y="207.50"></text></g><g><title>async-redis`async_redis::server::calculate_hash (59 samples, 0.09%)</title><rect x="74.6111%" y="213" width="0.0889%" height="15" fill="rgb(233,39,42)"/><text x="74.8611%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (11 samples, 0.02%)</title><rect x="74.6999%" y="213" width="0.0166%" height="15" fill="rgb(238,110,33)"/><text x="74.9499%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (16 samples, 0.02%)</title><rect x="74.8189%" y="197" width="0.0241%" height="15" fill="rgb(233,195,10)"/><text x="75.0689%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.02%)</title><rect x="74.8430%" y="197" width="0.0211%" height="15" fill="rgb(254,105,3)"/><text x="75.0930%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.02%)</title><rect x="74.8656%" y="197" width="0.0166%" height="15" fill="rgb(221,225,9)"/><text x="75.1156%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (13 samples, 0.02%)</title><rect x="74.8822%" y="197" width="0.0196%" height="15" fill="rgb(224,227,45)"/><text x="75.1322%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="74.8837%" y="181" width="0.0181%" height="15" fill="rgb(229,198,43)"/><text x="75.1337%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (144 samples, 0.22%)</title><rect x="74.7165%" y="213" width="0.2169%" height="15" fill="rgb(206,209,35)"/><text x="74.9665%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (21 samples, 0.03%)</title><rect x="74.9017%" y="197" width="0.0316%" height="15" fill="rgb(245,195,53)"/><text x="75.1517%" y="207.50"></text></g><g><title>libsystem_c.dylib`sysctl (19 samples, 0.03%)</title><rect x="75.0433%" y="181" width="0.0286%" height="15" fill="rgb(240,92,26)"/><text x="75.2933%" y="191.50"></text></g><g><title>libsystem_c.dylib`sysconf (2,858 samples, 4.30%)</title><rect x="74.9484%" y="197" width="4.3043%" height="15" fill="rgb(207,40,23)"/><text x="75.1984%" y="207.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__sysctl (2,776 samples, 4.18%)</title><rect x="75.0719%" y="181" width="4.1808%" height="15" fill="rgb(223,111,35)"/><text x="75.3219%" y="191.50">libsy..</text></g><g><title>async-redis`num_cpus::get_num_cpus (2,876 samples, 4.33%)</title><rect x="74.9334%" y="213" width="4.3314%" height="15" fill="rgb(229,147,28)"/><text x="75.1834%" y="223.50">async..</text></g><g><title>libsystem_c.dylib`sysctl (8 samples, 0.01%)</title><rect x="79.2527%" y="197" width="0.0120%" height="15" fill="rgb(211,29,28)"/><text x="79.5027%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (12 samples, 0.02%)</title><rect x="79.2647%" y="213" width="0.0181%" height="15" fill="rgb(228,72,33)"/><text x="79.5147%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.02%)</title><rect x="79.2904%" y="213" width="0.0151%" height="15" fill="rgb(205,214,31)"/><text x="79.5404%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (11 samples, 0.02%)</title><rect x="79.3792%" y="181" width="0.0166%" height="15" fill="rgb(224,111,15)"/><text x="79.6292%" y="191.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (46 samples, 0.07%)</title><rect x="79.4711%" y="149" width="0.0693%" height="15" fill="rgb(253,21,26)"/><text x="79.7211%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (8 samples, 0.01%)</title><rect x="79.5494%" y="149" width="0.0120%" height="15" fill="rgb(245,139,43)"/><text x="79.7994%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,114 samples, 13.73%)</title><rect x="79.4470%" y="165" width="13.7261%" height="15" fill="rgb(252,170,7)"/><text x="79.6970%" y="175.50">async-redis`&lt;&amp;mio::ne..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,038 samples, 13.61%)</title><rect x="79.5614%" y="149" width="13.6117%" height="15" fill="rgb(231,118,14)"/><text x="79.8114%" y="159.50">libsystem_kernel.dyli..</text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (8 samples, 0.01%)</title><rect x="93.1731%" y="165" width="0.0120%" height="15" fill="rgb(238,83,0)"/><text x="93.4231%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.03%)</title><rect x="93.2770%" y="149" width="0.0271%" height="15" fill="rgb(221,39,39)"/><text x="93.5270%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (81 samples, 0.12%)</title><rect x="93.1866%" y="165" width="0.1220%" height="15" fill="rgb(222,119,46)"/><text x="93.4366%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,271 samples, 13.96%)</title><rect x="79.3566%" y="197" width="13.9626%" height="15" fill="rgb(222,165,49)"/><text x="79.6066%" y="207.50">async-redis`&lt;tokio::n..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,245 samples, 13.92%)</title><rect x="79.3958%" y="181" width="13.9234%" height="15" fill="rgb(219,113,52)"/><text x="79.6458%" y="191.50">async-redis`tokio::io..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (7 samples, 0.01%)</title><rect x="93.3086%" y="165" width="0.0105%" height="15" fill="rgb(214,7,15)"/><text x="93.5586%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,310 samples, 14.02%)</title><rect x="79.3084%" y="213" width="14.0213%" height="15" fill="rgb(235,32,4)"/><text x="79.5584%" y="223.50">async-redis`tokio::io..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (7 samples, 0.01%)</title><rect x="93.3192%" y="197" width="0.0105%" height="15" fill="rgb(238,90,54)"/><text x="93.5692%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (20 samples, 0.03%)</title><rect x="93.3418%" y="213" width="0.0301%" height="15" fill="rgb(213,208,19)"/><text x="93.5918%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (17 samples, 0.03%)</title><rect x="93.3463%" y="197" width="0.0256%" height="15" fill="rgb(233,156,4)"/><text x="93.5963%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (11 samples, 0.02%)</title><rect x="93.3719%" y="213" width="0.0166%" height="15" fill="rgb(207,194,5)"/><text x="93.6219%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (38 samples, 0.06%)</title><rect x="93.3990%" y="197" width="0.0572%" height="15" fill="rgb(206,111,30)"/><text x="93.6490%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (31 samples, 0.05%)</title><rect x="93.4562%" y="197" width="0.0467%" height="15" fill="rgb(243,70,54)"/><text x="93.7062%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (8 samples, 0.01%)</title><rect x="93.5692%" y="165" width="0.0120%" height="15" fill="rgb(242,28,8)"/><text x="93.8192%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (43 samples, 0.06%)</title><rect x="93.5315%" y="181" width="0.0648%" height="15" fill="rgb(219,106,18)"/><text x="93.7815%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (139 samples, 0.21%)</title><rect x="93.3885%" y="213" width="0.2093%" height="15" fill="rgb(244,222,10)"/><text x="93.6385%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (63 samples, 0.09%)</title><rect x="93.5029%" y="197" width="0.0949%" height="15" fill="rgb(236,179,52)"/><text x="93.7529%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (25 samples, 0.04%)</title><rect x="93.6942%" y="197" width="0.0377%" height="15" fill="rgb(213,23,39)"/><text x="93.9442%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (86 samples, 0.13%)</title><rect x="93.6053%" y="213" width="0.1295%" height="15" fill="rgb(238,48,10)"/><text x="93.8553%" y="223.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::load (19 samples, 0.03%)</title><rect x="93.7439%" y="213" width="0.0286%" height="15" fill="rgb(251,196,23)"/><text x="93.9939%" y="223.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::set_rx_task (7 samples, 0.01%)</title><rect x="93.7725%" y="213" width="0.0105%" height="15" fill="rgb(250,152,24)"/><text x="94.0225%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (14 samples, 0.02%)</title><rect x="93.7830%" y="213" width="0.0211%" height="15" fill="rgb(209,150,17)"/><text x="94.0330%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (11 samples, 0.02%)</title><rect x="93.8071%" y="213" width="0.0166%" height="15" fill="rgb(234,202,34)"/><text x="94.0571%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.03%)</title><rect x="93.8237%" y="213" width="0.0286%" height="15" fill="rgb(253,148,53)"/><text x="94.0737%" y="223.50"></text></g><g><title>libsystem_c.dylib`sysconf (38 samples, 0.06%)</title><rect x="93.8523%" y="213" width="0.0572%" height="15" fill="rgb(218,129,16)"/><text x="94.1023%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.04%)</title><rect x="94.0014%" y="165" width="0.0407%" height="15" fill="rgb(216,85,19)"/><text x="94.2514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (155 samples, 0.23%)</title><rect x="93.9095%" y="213" width="0.2334%" height="15" fill="rgb(235,228,7)"/><text x="94.1595%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (143 samples, 0.22%)</title><rect x="93.9276%" y="197" width="0.2154%" height="15" fill="rgb(245,175,0)"/><text x="94.1776%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (139 samples, 0.21%)</title><rect x="93.9336%" y="181" width="0.2093%" height="15" fill="rgb(208,168,36)"/><text x="94.1836%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (64 samples, 0.10%)</title><rect x="94.0466%" y="165" width="0.0964%" height="15" fill="rgb(246,171,24)"/><text x="94.2966%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="94.1219%" y="149" width="0.0211%" height="15" fill="rgb(215,142,24)"/><text x="94.3719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (67 samples, 0.10%)</title><rect x="94.2394%" y="197" width="0.1009%" height="15" fill="rgb(250,187,7)"/><text x="94.4894%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (64 samples, 0.10%)</title><rect x="94.2439%" y="181" width="0.0964%" height="15" fill="rgb(228,66,33)"/><text x="94.4939%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (129 samples, 0.19%)</title><rect x="94.1505%" y="213" width="0.1943%" height="15" fill="rgb(234,215,21)"/><text x="94.4005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="94.4337%" y="197" width="0.0136%" height="15" fill="rgb(222,191,20)"/><text x="94.6837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (72 samples, 0.11%)</title><rect x="94.5722%" y="181" width="0.1084%" height="15" fill="rgb(245,79,54)"/><text x="94.8222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (259 samples, 0.39%)</title><rect x="94.3448%" y="213" width="0.3901%" height="15" fill="rgb(240,10,37)"/><text x="94.5948%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (191 samples, 0.29%)</title><rect x="94.4472%" y="197" width="0.2877%" height="15" fill="rgb(214,192,32)"/><text x="94.6972%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (36 samples, 0.05%)</title><rect x="94.6806%" y="181" width="0.0542%" height="15" fill="rgb(209,36,54)"/><text x="94.9306%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.04%)</title><rect x="94.7394%" y="213" width="0.0392%" height="15" fill="rgb(220,10,11)"/><text x="94.9894%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (64 samples, 0.10%)</title><rect x="94.7785%" y="213" width="0.0964%" height="15" fill="rgb(221,106,17)"/><text x="95.0285%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44,036 samples, 66.32%)</title><rect x="28.5592%" y="229" width="66.3203%" height="15" fill="rgb(251,142,44)"/><text x="28.8092%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (37 samples, 0.06%)</title><rect x="94.8794%" y="229" width="0.0557%" height="15" fill="rgb(238,13,15)"/><text x="95.1294%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.01%)</title><rect x="95.4261%" y="165" width="0.0120%" height="15" fill="rgb(208,107,27)"/><text x="95.6761%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (11 samples, 0.02%)</title><rect x="95.4382%" y="165" width="0.0166%" height="15" fill="rgb(205,136,37)"/><text x="95.6882%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (11 samples, 0.02%)</title><rect x="95.4382%" y="149" width="0.0166%" height="15" fill="rgb(250,205,27)"/><text x="95.6882%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (215 samples, 0.32%)</title><rect x="95.1505%" y="181" width="0.3238%" height="15" fill="rgb(210,80,43)"/><text x="95.4005%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (13 samples, 0.02%)</title><rect x="95.4548%" y="165" width="0.0196%" height="15" fill="rgb(247,160,36)"/><text x="95.7048%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (227 samples, 0.34%)</title><rect x="95.1370%" y="197" width="0.3419%" height="15" fill="rgb(234,13,49)"/><text x="95.3870%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (264 samples, 0.40%)</title><rect x="95.1023%" y="213" width="0.3976%" height="15" fill="rgb(234,122,0)"/><text x="95.3523%" y="223.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (14 samples, 0.02%)</title><rect x="95.4788%" y="197" width="0.0211%" height="15" fill="rgb(207,146,38)"/><text x="95.7288%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.02%)</title><rect x="95.5060%" y="213" width="0.0181%" height="15" fill="rgb(207,177,25)"/><text x="95.7560%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="95.5918%" y="181" width="0.0120%" height="15" fill="rgb(211,178,42)"/><text x="95.8418%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (7 samples, 0.01%)</title><rect x="95.5933%" y="165" width="0.0105%" height="15" fill="rgb(230,69,54)"/><text x="95.8433%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (15 samples, 0.02%)</title><rect x="95.6264%" y="165" width="0.0226%" height="15" fill="rgb(214,135,41)"/><text x="95.8764%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (27 samples, 0.04%)</title><rect x="95.6490%" y="165" width="0.0407%" height="15" fill="rgb(237,67,25)"/><text x="95.8990%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (16 samples, 0.02%)</title><rect x="95.7484%" y="149" width="0.0241%" height="15" fill="rgb(222,189,50)"/><text x="95.9984%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (81 samples, 0.12%)</title><rect x="95.6897%" y="165" width="0.1220%" height="15" fill="rgb(245,148,34)"/><text x="95.9397%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (24 samples, 0.04%)</title><rect x="95.7755%" y="149" width="0.0361%" height="15" fill="rgb(222,29,6)"/><text x="96.0255%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (185 samples, 0.28%)</title><rect x="95.5451%" y="197" width="0.2786%" height="15" fill="rgb(221,189,43)"/><text x="95.7951%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (138 samples, 0.21%)</title><rect x="95.6159%" y="181" width="0.2078%" height="15" fill="rgb(207,36,27)"/><text x="95.8659%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (8 samples, 0.01%)</title><rect x="95.8117%" y="165" width="0.0120%" height="15" fill="rgb(217,90,24)"/><text x="96.0617%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (15 samples, 0.02%)</title><rect x="95.8237%" y="197" width="0.0226%" height="15" fill="rgb(224,66,35)"/><text x="96.0737%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (228 samples, 0.34%)</title><rect x="95.5240%" y="213" width="0.3434%" height="15" fill="rgb(221,13,50)"/><text x="95.7740%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="95.8463%" y="197" width="0.0211%" height="15" fill="rgb(236,68,49)"/><text x="96.0963%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 0.01%)</title><rect x="95.8704%" y="213" width="0.0105%" height="15" fill="rgb(229,146,28)"/><text x="96.1204%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="95.9126%" y="197" width="0.0151%" height="15" fill="rgb(225,31,38)"/><text x="96.1626%" y="207.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (11 samples, 0.02%)</title><rect x="95.9337%" y="197" width="0.0166%" height="15" fill="rgb(250,208,3)"/><text x="96.1837%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (9 samples, 0.01%)</title><rect x="96.0225%" y="181" width="0.0136%" height="15" fill="rgb(246,54,23)"/><text x="96.2725%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (52 samples, 0.08%)</title><rect x="96.0421%" y="181" width="0.0783%" height="15" fill="rgb(243,76,11)"/><text x="96.2921%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (79 samples, 0.12%)</title><rect x="96.2319%" y="165" width="0.1190%" height="15" fill="rgb(245,21,50)"/><text x="96.4819%" y="175.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (147 samples, 0.22%)</title><rect x="96.1355%" y="181" width="0.2214%" height="15" fill="rgb(228,9,43)"/><text x="96.3855%" y="191.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (304 samples, 0.46%)</title><rect x="95.9502%" y="197" width="0.4578%" height="15" fill="rgb(208,100,47)"/><text x="96.2002%" y="207.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (34 samples, 0.05%)</title><rect x="96.3569%" y="181" width="0.0512%" height="15" fill="rgb(232,26,8)"/><text x="96.6069%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (14 samples, 0.02%)</title><rect x="96.3870%" y="165" width="0.0211%" height="15" fill="rgb(216,166,38)"/><text x="96.6370%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (14 samples, 0.02%)</title><rect x="96.3870%" y="149" width="0.0211%" height="15" fill="rgb(251,202,51)"/><text x="96.6370%" y="159.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.01%)</title><rect x="96.4111%" y="197" width="0.0120%" height="15" fill="rgb(254,216,34)"/><text x="96.6611%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (385 samples, 0.58%)</title><rect x="95.8810%" y="213" width="0.5798%" height="15" fill="rgb(251,32,27)"/><text x="96.1310%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.03%)</title><rect x="96.4262%" y="197" width="0.0346%" height="15" fill="rgb(208,127,28)"/><text x="96.6762%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (10 samples, 0.02%)</title><rect x="96.4608%" y="213" width="0.0151%" height="15" fill="rgb(224,137,22)"/><text x="96.7108%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (12 samples, 0.02%)</title><rect x="96.4759%" y="213" width="0.0181%" height="15" fill="rgb(254,70,32)"/><text x="96.7259%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,042 samples, 1.57%)</title><rect x="94.9412%" y="229" width="1.5693%" height="15" fill="rgb(229,75,37)"/><text x="95.1912%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="96.4939%" y="213" width="0.0166%" height="15" fill="rgb(252,64,23)"/><text x="96.7439%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (19 samples, 0.03%)</title><rect x="96.5331%" y="229" width="0.0286%" height="15" fill="rgb(232,162,48)"/><text x="96.7831%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (66 samples, 0.10%)</title><rect x="96.6310%" y="197" width="0.0994%" height="15" fill="rgb(246,160,12)"/><text x="96.8810%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.02%)</title><rect x="96.7304%" y="197" width="0.0166%" height="15" fill="rgb(247,166,0)"/><text x="96.9804%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="96.7861%" y="165" width="0.0151%" height="15" fill="rgb(249,219,21)"/><text x="97.0361%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (71 samples, 0.11%)</title><rect x="96.8750%" y="149" width="0.1069%" height="15" fill="rgb(205,209,3)"/><text x="97.1250%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (121 samples, 0.18%)</title><rect x="96.8012%" y="165" width="0.1822%" height="15" fill="rgb(243,44,1)"/><text x="97.0512%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (17 samples, 0.03%)</title><rect x="96.9924%" y="165" width="0.0256%" height="15" fill="rgb(206,159,16)"/><text x="97.2424%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (172 samples, 0.26%)</title><rect x="96.7756%" y="181" width="0.2590%" height="15" fill="rgb(244,77,30)"/><text x="97.0256%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="97.0180%" y="165" width="0.0166%" height="15" fill="rgb(218,69,12)"/><text x="97.2680%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (7 samples, 0.01%)</title><rect x="97.0376%" y="181" width="0.0105%" height="15" fill="rgb(212,87,7)"/><text x="97.2876%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (22 samples, 0.03%)</title><rect x="97.0481%" y="181" width="0.0331%" height="15" fill="rgb(245,114,25)"/><text x="97.2981%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (225 samples, 0.34%)</title><rect x="96.7530%" y="197" width="0.3389%" height="15" fill="rgb(210,61,42)"/><text x="97.0030%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (354 samples, 0.53%)</title><rect x="96.5737%" y="213" width="0.5331%" height="15" fill="rgb(211,52,33)"/><text x="96.8237%" y="223.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (9 samples, 0.01%)</title><rect x="97.1069%" y="213" width="0.0136%" height="15" fill="rgb(234,58,33)"/><text x="97.3569%" y="223.50"></text></g><g><title>async-redis`thread_local::thread_id::get (12 samples, 0.02%)</title><rect x="97.1204%" y="213" width="0.0181%" height="15" fill="rgb(220,115,36)"/><text x="97.3704%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (391 samples, 0.59%)</title><rect x="96.5617%" y="229" width="0.5889%" height="15" fill="rgb(243,153,54)"/><text x="96.8117%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (10 samples, 0.02%)</title><rect x="97.1551%" y="229" width="0.0151%" height="15" fill="rgb(251,47,18)"/><text x="97.4051%" y="239.50"></text></g><g><title>async-redis`__rdl_dealloc (22 samples, 0.03%)</title><rect x="97.1852%" y="229" width="0.0331%" height="15" fill="rgb(242,102,42)"/><text x="97.4352%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (13 samples, 0.02%)</title><rect x="97.2379%" y="229" width="0.0196%" height="15" fill="rgb(234,31,38)"/><text x="97.4879%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode (8 samples, 0.01%)</title><rect x="97.2575%" y="229" width="0.0120%" height="15" fill="rgb(221,117,51)"/><text x="97.5075%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (10 samples, 0.02%)</title><rect x="97.2741%" y="229" width="0.0151%" height="15" fill="rgb(212,20,18)"/><text x="97.5241%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (16 samples, 0.02%)</title><rect x="97.2891%" y="229" width="0.0241%" height="15" fill="rgb(245,133,36)"/><text x="97.5391%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (14 samples, 0.02%)</title><rect x="97.3132%" y="229" width="0.0211%" height="15" fill="rgb(212,6,19)"/><text x="97.5632%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (17 samples, 0.03%)</title><rect x="97.4232%" y="213" width="0.0256%" height="15" fill="rgb(218,1,36)"/><text x="97.6732%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="97.4488%" y="213" width="0.0105%" height="15" fill="rgb(246,84,54)"/><text x="97.6988%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (10 samples, 0.02%)</title><rect x="97.4608%" y="213" width="0.0151%" height="15" fill="rgb(242,110,6)"/><text x="97.7108%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (7 samples, 0.01%)</title><rect x="97.4653%" y="197" width="0.0105%" height="15" fill="rgb(214,47,5)"/><text x="97.7153%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (27 samples, 0.04%)</title><rect x="97.5918%" y="197" width="0.0407%" height="15" fill="rgb(218,159,25)"/><text x="97.8418%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (12 samples, 0.02%)</title><rect x="97.6144%" y="181" width="0.0181%" height="15" fill="rgb(215,211,28)"/><text x="97.8644%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (8 samples, 0.01%)</title><rect x="97.6340%" y="197" width="0.0120%" height="15" fill="rgb(238,59,32)"/><text x="97.8840%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (8 samples, 0.01%)</title><rect x="97.6340%" y="181" width="0.0120%" height="15" fill="rgb(226,82,3)"/><text x="97.8840%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (174 samples, 0.26%)</title><rect x="97.4759%" y="213" width="0.2621%" height="15" fill="rgb(240,164,32)"/><text x="97.7259%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (61 samples, 0.09%)</title><rect x="97.6460%" y="197" width="0.0919%" height="15" fill="rgb(232,46,7)"/><text x="97.8960%" y="207.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (26 samples, 0.04%)</title><rect x="97.7454%" y="213" width="0.0392%" height="15" fill="rgb(229,129,53)"/><text x="97.9954%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (300 samples, 0.45%)</title><rect x="97.3343%" y="229" width="0.4518%" height="15" fill="rgb(234,188,29)"/><text x="97.5843%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.02%)</title><rect x="97.7982%" y="229" width="0.0151%" height="15" fill="rgb(246,141,4)"/><text x="98.0482%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (8 samples, 0.01%)</title><rect x="97.8132%" y="229" width="0.0120%" height="15" fill="rgb(229,23,39)"/><text x="98.0632%" y="239.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (7 samples, 0.01%)</title><rect x="97.8358%" y="229" width="0.0105%" height="15" fill="rgb(206,12,3)"/><text x="98.0858%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::atomic_usize::AtomicUsize::new (21 samples, 0.03%)</title><rect x="97.8464%" y="229" width="0.0316%" height="15" fill="rgb(252,226,20)"/><text x="98.0964%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 0.01%)</title><rect x="97.8780%" y="229" width="0.0105%" height="15" fill="rgb(216,123,35)"/><text x="98.1280%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="97.8885%" y="229" width="0.0120%" height="15" fill="rgb(212,68,40)"/><text x="98.1385%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (9 samples, 0.01%)</title><rect x="97.9051%" y="213" width="0.0136%" height="15" fill="rgb(254,125,32)"/><text x="98.1551%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (45 samples, 0.07%)</title><rect x="97.9006%" y="229" width="0.0678%" height="15" fill="rgb(253,97,22)"/><text x="98.1506%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (33 samples, 0.05%)</title><rect x="97.9186%" y="213" width="0.0497%" height="15" fill="rgb(241,101,14)"/><text x="98.1686%" y="223.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (20 samples, 0.03%)</title><rect x="97.9382%" y="197" width="0.0301%" height="15" fill="rgb(238,103,29)"/><text x="98.1882%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (8 samples, 0.01%)</title><rect x="97.9804%" y="229" width="0.0120%" height="15" fill="rgb(233,195,47)"/><text x="98.2304%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::is_closed (12 samples, 0.02%)</title><rect x="98.0045%" y="229" width="0.0181%" height="15" fill="rgb(246,218,30)"/><text x="98.2545%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::is_complete (11 samples, 0.02%)</title><rect x="98.0226%" y="229" width="0.0166%" height="15" fill="rgb(219,145,47)"/><text x="98.2726%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::is_rx_task_set (15 samples, 0.02%)</title><rect x="98.0391%" y="229" width="0.0226%" height="15" fill="rgb(243,12,26)"/><text x="98.2891%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::new (9 samples, 0.01%)</title><rect x="98.0692%" y="229" width="0.0136%" height="15" fill="rgb(214,87,16)"/><text x="98.3192%" y="239.50"></text></g><g><title>async-redis`tokio::sync::oneshot::State::set_complete (21 samples, 0.03%)</title><rect x="98.0828%" y="229" width="0.0316%" height="15" fill="rgb(208,99,42)"/><text x="98.3328%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (9 samples, 0.01%)</title><rect x="98.1159%" y="229" width="0.0136%" height="15" fill="rgb(253,99,2)"/><text x="98.3659%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.04%)</title><rect x="98.1717%" y="213" width="0.0377%" height="15" fill="rgb(220,168,23)"/><text x="98.4217%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (12 samples, 0.02%)</title><rect x="98.2093%" y="213" width="0.0181%" height="15" fill="rgb(242,38,24)"/><text x="98.4593%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (71 samples, 0.11%)</title><rect x="98.1295%" y="229" width="0.1069%" height="15" fill="rgb(225,182,9)"/><text x="98.3795%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (254 samples, 0.38%)</title><rect x="98.2771%" y="197" width="0.3825%" height="15" fill="rgb(243,178,37)"/><text x="98.5271%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (209 samples, 0.31%)</title><rect x="98.3449%" y="181" width="0.3148%" height="15" fill="rgb(232,139,19)"/><text x="98.5949%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (17 samples, 0.03%)</title><rect x="98.8885%" y="165" width="0.0256%" height="15" fill="rgb(225,201,24)"/><text x="99.1385%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (135 samples, 0.20%)</title><rect x="98.7409%" y="181" width="0.2033%" height="15" fill="rgb(221,47,46)"/><text x="98.9909%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.03%)</title><rect x="98.9141%" y="165" width="0.0301%" height="15" fill="rgb(249,23,13)"/><text x="99.1641%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (200 samples, 0.30%)</title><rect x="98.6596%" y="197" width="0.3012%" height="15" fill="rgb(219,9,5)"/><text x="98.9096%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.02%)</title><rect x="98.9443%" y="181" width="0.0166%" height="15" fill="rgb(254,171,16)"/><text x="99.1943%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (18 samples, 0.03%)</title><rect x="98.9608%" y="197" width="0.0271%" height="15" fill="rgb(230,171,20)"/><text x="99.2108%" y="207.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (28 samples, 0.04%)</title><rect x="98.9879%" y="197" width="0.0422%" height="15" fill="rgb(210,71,41)"/><text x="99.2379%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (515 samples, 0.78%)</title><rect x="98.2696%" y="213" width="0.7756%" height="15" fill="rgb(206,173,20)"/><text x="98.5196%" y="223.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (10 samples, 0.02%)</title><rect x="99.0301%" y="197" width="0.0151%" height="15" fill="rgb(233,88,34)"/><text x="99.2801%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (14 samples, 0.02%)</title><rect x="99.0452%" y="213" width="0.0211%" height="15" fill="rgb(223,209,46)"/><text x="99.2952%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (14 samples, 0.02%)</title><rect x="99.0753%" y="213" width="0.0211%" height="15" fill="rgb(250,43,18)"/><text x="99.3253%" y="223.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (15 samples, 0.02%)</title><rect x="99.0964%" y="213" width="0.0226%" height="15" fill="rgb(208,13,10)"/><text x="99.3464%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (579 samples, 0.87%)</title><rect x="98.2485%" y="229" width="0.8720%" height="15" fill="rgb(212,200,36)"/><text x="98.4985%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (29 samples, 0.04%)</title><rect x="99.1280%" y="229" width="0.0437%" height="15" fill="rgb(225,90,30)"/><text x="99.3780%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="99.1837%" y="229" width="0.0226%" height="15" fill="rgb(236,182,39)"/><text x="99.4337%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (48,219 samples, 72.62%)</title><rect x="26.6088%" y="245" width="72.6201%" height="15" fill="rgb(212,144,35)"/><text x="26.8588%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="99.2138%" y="229" width="0.0151%" height="15" fill="rgb(228,63,44)"/><text x="99.4638%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.01%)</title><rect x="99.2304%" y="245" width="0.0136%" height="15" fill="rgb(228,109,6)"/><text x="99.4804%" y="255.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (17 samples, 0.03%)</title><rect x="99.2440%" y="245" width="0.0256%" height="15" fill="rgb(238,117,24)"/><text x="99.4940%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (7 samples, 0.01%)</title><rect x="99.2997%" y="245" width="0.0105%" height="15" fill="rgb(242,26,26)"/><text x="99.5497%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (48,347 samples, 72.81%)</title><rect x="26.5004%" y="261" width="72.8128%" height="15" fill="rgb(221,92,48)"/><text x="26.7504%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (28 samples, 0.04%)</title><rect x="99.3223%" y="261" width="0.0422%" height="15" fill="rgb(209,209,32)"/><text x="99.5723%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (40 samples, 0.06%)</title><rect x="99.3644%" y="261" width="0.0602%" height="15" fill="rgb(221,70,22)"/><text x="99.6144%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (48,574 samples, 73.15%)</title><rect x="26.2715%" y="277" width="73.1547%" height="15" fill="rgb(248,145,5)"/><text x="26.5215%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (9 samples, 0.01%)</title><rect x="99.4262%" y="277" width="0.0136%" height="15" fill="rgb(226,116,26)"/><text x="99.6762%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (21 samples, 0.03%)</title><rect x="99.4398%" y="277" width="0.0316%" height="15" fill="rgb(244,5,17)"/><text x="99.6898%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (27 samples, 0.04%)</title><rect x="99.4714%" y="277" width="0.0407%" height="15" fill="rgb(252,159,33)"/><text x="99.7214%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (48,835 samples, 73.55%)</title><rect x="25.9808%" y="293" width="73.5478%" height="15" fill="rgb(206,71,0)"/><text x="26.2308%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="99.5120%" y="277" width="0.0166%" height="15" fill="rgb(233,118,54)"/><text x="99.7620%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (14 samples, 0.02%)</title><rect x="99.5286%" y="293" width="0.0211%" height="15" fill="rgb(234,83,48)"/><text x="99.7786%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (28 samples, 0.04%)</title><rect x="99.5497%" y="293" width="0.0422%" height="15" fill="rgb(228,3,54)"/><text x="99.7997%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (83 samples, 0.13%)</title><rect x="99.5919%" y="293" width="0.1250%" height="15" fill="rgb(226,155,13)"/><text x="99.8419%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.01%)</title><rect x="99.7304%" y="293" width="0.0120%" height="15" fill="rgb(241,28,37)"/><text x="99.9804%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (50,632 samples, 76.25%)</title><rect x="23.5064%" y="309" width="76.2542%" height="15" fill="rgb(233,93,10)"/><text x="23.7564%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.02%)</title><rect x="99.7425%" y="293" width="0.0181%" height="15" fill="rgb(225,113,19)"/><text x="99.9925%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (66,288 samples, 99.83%)</title><rect x="0.1145%" y="325" width="99.8328%" height="15" fill="rgb(241,2,18)"/><text x="0.3645%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (124 samples, 0.19%)</title><rect x="99.7605%" y="309" width="0.1867%" height="15" fill="rgb(228,207,21)"/><text x="100.0105%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (15 samples, 0.02%)</title><rect x="99.9473%" y="325" width="0.0226%" height="15" fill="rgb(213,211,35)"/><text x="100.1973%" y="335.50"></text></g><g><title>all (66,399 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(209,83,10)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (66,355 samples, 99.93%)</title><rect x="0.0663%" y="501" width="99.9337%" height="15" fill="rgb(209,164,1)"/><text x="0.3163%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (66,355 samples, 99.93%)</title><rect x="0.0663%" y="485" width="99.9337%" height="15" fill="rgb(213,184,43)"/><text x="0.3163%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (66,355 samples, 99.93%)</title><rect x="0.0663%" y="469" width="99.9337%" height="15" fill="rgb(231,61,34)"/><text x="0.3163%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (66,355 samples, 99.93%)</title><rect x="0.0663%" y="453" width="99.9337%" height="15" fill="rgb(235,75,3)"/><text x="0.3163%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (66,355 samples, 99.93%)</title><rect x="0.0663%" y="437" width="99.9337%" height="15" fill="rgb(220,106,47)"/><text x="0.3163%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (66,355 samples, 99.93%)</title><rect x="0.0663%" y="421" width="99.9337%" height="15" fill="rgb(210,196,33)"/><text x="0.3163%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (66,355 samples, 99.93%)</title><rect x="0.0663%" y="405" width="99.9337%" height="15" fill="rgb(229,154,42)"/><text x="0.3163%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (66,355 samples, 99.93%)</title><rect x="0.0663%" y="389" width="99.9337%" height="15" fill="rgb(228,114,26)"/><text x="0.3163%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (66,355 samples, 99.93%)</title><rect x="0.0663%" y="373" width="99.9337%" height="15" fill="rgb(208,144,1)"/><text x="0.3163%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (66,355 samples, 99.93%)</title><rect x="0.0663%" y="357" width="99.9337%" height="15" fill="rgb(239,112,37)"/><text x="0.3163%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (66,355 samples, 99.93%)</title><rect x="0.0663%" y="341" width="99.9337%" height="15" fill="rgb(210,96,50)"/><text x="0.3163%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (20 samples, 0.03%)</title><rect x="99.9699%" y="325" width="0.0301%" height="15" fill="rgb(222,178,2)"/><text x="100.2199%" y="335.50"></text></g></svg></svg>