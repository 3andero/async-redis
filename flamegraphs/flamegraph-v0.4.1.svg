<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (23 samples, 0.04%)</title><rect x="0.0000%" y="245" width="0.0398%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (18 samples, 0.03%)</title><rect x="0.0086%" y="229" width="0.0311%" height="15" fill="rgb(217,0,24)"/><text x="0.2586%" y="239.50"></text></g><g><title>async-redis`tokio::net::tcp::stream::TcpStream::new (7 samples, 0.01%)</title><rect x="0.0398%" y="245" width="0.0121%" height="15" fill="rgb(221,193,54)"/><text x="0.2898%" y="255.50"></text></g><g><title>async-redis`tokio::io::poll_evented::PollEvented&lt;E&gt;::new (7 samples, 0.01%)</title><rect x="0.0398%" y="229" width="0.0121%" height="15" fill="rgb(248,212,6)"/><text x="0.2898%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::new_with_interest_and_handle (6 samples, 0.01%)</title><rect x="0.0415%" y="213" width="0.0104%" height="15" fill="rgb(208,68,35)"/><text x="0.2915%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Inner::add_source (6 samples, 0.01%)</title><rect x="0.0415%" y="197" width="0.0104%" height="15" fill="rgb(232,128,0)"/><text x="0.2915%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::channel (6 samples, 0.01%)</title><rect x="0.0536%" y="245" width="0.0104%" height="15" fill="rgb(207,160,47)"/><text x="0.3036%" y="255.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.07%)</title><rect x="0.0000%" y="261" width="0.0674%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (40 samples, 0.07%)</title><rect x="0.0000%" y="293" width="0.0691%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.07%)</title><rect x="0.0000%" y="277" width="0.0691%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.07%)</title><rect x="0.0000%" y="325" width="0.0709%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.07%)</title><rect x="0.0000%" y="309" width="0.0709%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (45 samples, 0.08%)</title><rect x="0.0000%" y="373" width="0.0778%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (45 samples, 0.08%)</title><rect x="0.0000%" y="357" width="0.0778%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (45 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0778%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="351.50"></text></g><g><title>async-redis`0x1 (46 samples, 0.08%)</title><rect x="0.0000%" y="485" width="0.0795%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="495.50"></text></g><g><title>libdyld.dylib`start (46 samples, 0.08%)</title><rect x="0.0000%" y="469" width="0.0795%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`main (46 samples, 0.08%)</title><rect x="0.0000%" y="453" width="0.0795%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (46 samples, 0.08%)</title><rect x="0.0000%" y="437" width="0.0795%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (46 samples, 0.08%)</title><rect x="0.0000%" y="421" width="0.0795%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 0.08%)</title><rect x="0.0000%" y="405" width="0.0795%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`async_redis::main (46 samples, 0.08%)</title><rect x="0.0000%" y="389" width="0.0795%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (12 samples, 0.02%)</title><rect x="0.0795%" y="325" width="0.0207%" height="15" fill="rgb(221,5,38)"/><text x="0.3295%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (11 samples, 0.02%)</title><rect x="0.1020%" y="325" width="0.0190%" height="15" fill="rgb(247,18,42)"/><text x="0.3520%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12 samples, 0.02%)</title><rect x="0.9456%" y="309" width="0.0207%" height="15" fill="rgb(241,131,45)"/><text x="1.1956%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (8 samples, 0.01%)</title><rect x="0.9664%" y="309" width="0.0138%" height="15" fill="rgb(249,31,29)"/><text x="1.2164%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.01%)</title><rect x="0.9802%" y="309" width="0.0138%" height="15" fill="rgb(225,111,53)"/><text x="1.2302%" y="319.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.02%)</title><rect x="0.9940%" y="309" width="0.0156%" height="15" fill="rgb(238,160,17)"/><text x="1.2440%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.02%)</title><rect x="1.0096%" y="309" width="0.0173%" height="15" fill="rgb(214,148,48)"/><text x="1.2596%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (13 samples, 0.02%)</title><rect x="1.0269%" y="309" width="0.0225%" height="15" fill="rgb(232,36,49)"/><text x="1.2769%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (244 samples, 0.42%)</title><rect x="1.0493%" y="309" width="0.4218%" height="15" fill="rgb(209,103,24)"/><text x="1.2993%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (9 samples, 0.02%)</title><rect x="4.5120%" y="277" width="0.0156%" height="15" fill="rgb(229,88,8)"/><text x="4.7620%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (8 samples, 0.01%)</title><rect x="4.5345%" y="277" width="0.0138%" height="15" fill="rgb(213,181,19)"/><text x="4.7845%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (17 samples, 0.03%)</title><rect x="4.8439%" y="261" width="0.0294%" height="15" fill="rgb(254,191,54)"/><text x="5.0939%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.04%)</title><rect x="4.8733%" y="261" width="0.0398%" height="15" fill="rgb(241,83,37)"/><text x="5.1233%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,197 samples, 3.80%)</title><rect x="4.9130%" y="261" width="3.7980%" height="15" fill="rgb(233,36,39)"/><text x="5.1630%" y="271.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (13 samples, 0.02%)</title><rect x="8.9479%" y="245" width="0.0225%" height="15" fill="rgb(226,3,54)"/><text x="9.1979%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (103 samples, 0.18%)</title><rect x="8.9721%" y="229" width="0.1781%" height="15" fill="rgb(245,192,40)"/><text x="9.2221%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (108 samples, 0.19%)</title><rect x="8.9704%" y="245" width="0.1867%" height="15" fill="rgb(238,167,29)"/><text x="9.2204%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (63 samples, 0.11%)</title><rect x="9.1588%" y="245" width="0.1089%" height="15" fill="rgb(232,182,51)"/><text x="9.4088%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (373 samples, 0.64%)</title><rect x="8.7145%" y="261" width="0.6448%" height="15" fill="rgb(231,60,39)"/><text x="8.9645%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (53 samples, 0.09%)</title><rect x="9.2677%" y="245" width="0.0916%" height="15" fill="rgb(208,69,12)"/><text x="9.5177%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.02%)</title><rect x="9.3593%" y="261" width="0.0156%" height="15" fill="rgb(235,93,37)"/><text x="9.6093%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (17 samples, 0.03%)</title><rect x="9.3749%" y="261" width="0.0294%" height="15" fill="rgb(213,116,39)"/><text x="9.6249%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (2,836 samples, 4.90%)</title><rect x="4.5483%" y="277" width="4.9027%" height="15" fill="rgb(222,207,29)"/><text x="4.7983%" y="287.50">async-..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (27 samples, 0.05%)</title><rect x="9.4043%" y="261" width="0.0467%" height="15" fill="rgb(206,96,30)"/><text x="9.6543%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (8 samples, 0.01%)</title><rect x="9.4510%" y="277" width="0.0138%" height="15" fill="rgb(218,138,4)"/><text x="9.7010%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (15 samples, 0.03%)</title><rect x="9.4682%" y="277" width="0.0259%" height="15" fill="rgb(250,191,14)"/><text x="9.7182%" y="287.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="9.6722%" y="245" width="0.0104%" height="15" fill="rgb(239,60,40)"/><text x="9.9222%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (16 samples, 0.03%)</title><rect x="9.6826%" y="245" width="0.0277%" height="15" fill="rgb(206,27,48)"/><text x="9.9326%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_writable (7 samples, 0.01%)</title><rect x="9.7189%" y="245" width="0.0121%" height="15" fill="rgb(225,35,8)"/><text x="9.9689%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_write_closed (11 samples, 0.02%)</title><rect x="9.7310%" y="245" width="0.0190%" height="15" fill="rgb(250,213,24)"/><text x="9.9810%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (21 samples, 0.04%)</title><rect x="9.7500%" y="245" width="0.0363%" height="15" fill="rgb(247,123,22)"/><text x="10.0000%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (8 samples, 0.01%)</title><rect x="9.7932%" y="245" width="0.0138%" height="15" fill="rgb(231,138,38)"/><text x="10.0432%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="10.3862%" y="229" width="0.0104%" height="15" fill="rgb(231,145,46)"/><text x="10.6362%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (6 samples, 0.01%)</title><rect x="10.4000%" y="229" width="0.0104%" height="15" fill="rgb(251,118,11)"/><text x="10.6500%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (7 samples, 0.01%)</title><rect x="10.4121%" y="229" width="0.0121%" height="15" fill="rgb(217,147,25)"/><text x="10.6621%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (14 samples, 0.02%)</title><rect x="10.4277%" y="229" width="0.0242%" height="15" fill="rgb(247,81,37)"/><text x="10.6777%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (66 samples, 0.11%)</title><rect x="10.4536%" y="229" width="0.1141%" height="15" fill="rgb(209,12,38)"/><text x="10.7036%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (18 samples, 0.03%)</title><rect x="10.7285%" y="213" width="0.0311%" height="15" fill="rgb(227,1,9)"/><text x="10.9785%" y="223.50"></text></g><g><title> 32]&gt;::default (18 samples, 0.03%)</title><rect x="10.7285%" y="197" width="0.0311%" height="15" fill="rgb(248,47,43)"/><text x="10.9785%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (58 samples, 0.10%)</title><rect x="10.7596%" y="213" width="0.1003%" height="15" fill="rgb(221,10,30)"/><text x="11.0096%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (20 samples, 0.03%)</title><rect x="10.8823%" y="197" width="0.0346%" height="15" fill="rgb(210,229,1)"/><text x="11.1323%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (94 samples, 0.16%)</title><rect x="10.9169%" y="197" width="0.1625%" height="15" fill="rgb(222,148,37)"/><text x="11.1669%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (10 samples, 0.02%)</title><rect x="11.1071%" y="165" width="0.0173%" height="15" fill="rgb(234,67,33)"/><text x="11.3571%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (10 samples, 0.02%)</title><rect x="11.1244%" y="165" width="0.0173%" height="15" fill="rgb(247,98,35)"/><text x="11.3744%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (39 samples, 0.07%)</title><rect x="11.0932%" y="181" width="0.0674%" height="15" fill="rgb(247,138,52)"/><text x="11.3432%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.02%)</title><rect x="11.1417%" y="165" width="0.0190%" height="15" fill="rgb(213,79,30)"/><text x="11.3917%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (346 samples, 0.60%)</title><rect x="10.5677%" y="229" width="0.5981%" height="15" fill="rgb(246,177,23)"/><text x="10.8177%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (169 samples, 0.29%)</title><rect x="10.8737%" y="213" width="0.2922%" height="15" fill="rgb(230,62,27)"/><text x="11.1237%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (50 samples, 0.09%)</title><rect x="11.0794%" y="197" width="0.0864%" height="15" fill="rgb(216,154,8)"/><text x="11.3294%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,694 samples, 6.39%)</title><rect x="9.8071%" y="245" width="6.3859%" height="15" fill="rgb(244,35,45)"/><text x="10.0571%" y="255.50">async-re..</text></g><g><title>libsystem_kernel.dylib`kevent (2,904 samples, 5.02%)</title><rect x="11.1728%" y="229" width="5.0202%" height="15" fill="rgb(251,115,12)"/><text x="11.4228%" y="239.50">libsys..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (18 samples, 0.03%)</title><rect x="16.1930%" y="245" width="0.0311%" height="15" fill="rgb(240,54,50)"/><text x="16.4430%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (22 samples, 0.04%)</title><rect x="16.2552%" y="213" width="0.0380%" height="15" fill="rgb(233,84,52)"/><text x="16.5052%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (59 samples, 0.10%)</title><rect x="16.2933%" y="213" width="0.1020%" height="15" fill="rgb(207,117,47)"/><text x="16.5433%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (124 samples, 0.21%)</title><rect x="16.2276%" y="245" width="0.2144%" height="15" fill="rgb(249,43,39)"/><text x="16.4776%" y="255.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (112 samples, 0.19%)</title><rect x="16.2483%" y="229" width="0.1936%" height="15" fill="rgb(209,38,44)"/><text x="16.4983%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.05%)</title><rect x="16.3953%" y="213" width="0.0467%" height="15" fill="rgb(236,212,23)"/><text x="16.6453%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (3,973 samples, 6.87%)</title><rect x="9.6394%" y="261" width="6.8682%" height="15" fill="rgb(242,79,21)"/><text x="9.8894%" y="271.50">async-red..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (38 samples, 0.07%)</title><rect x="16.4419%" y="245" width="0.0657%" height="15" fill="rgb(211,96,35)"/><text x="16.6919%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (7 samples, 0.01%)</title><rect x="16.5076%" y="261" width="0.0121%" height="15" fill="rgb(253,215,40)"/><text x="16.7576%" y="271.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.02%)</title><rect x="16.5197%" y="261" width="0.0156%" height="15" fill="rgb(211,81,21)"/><text x="16.7697%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (112 samples, 0.19%)</title><rect x="16.5353%" y="261" width="0.1936%" height="15" fill="rgb(208,190,38)"/><text x="16.7853%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (13 samples, 0.02%)</title><rect x="16.7289%" y="261" width="0.0225%" height="15" fill="rgb(235,213,38)"/><text x="16.9789%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.02%)</title><rect x="16.7600%" y="261" width="0.0173%" height="15" fill="rgb(237,122,38)"/><text x="17.0100%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (75 samples, 0.13%)</title><rect x="16.8828%" y="245" width="0.1297%" height="15" fill="rgb(244,218,35)"/><text x="17.1328%" y="255.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.02%)</title><rect x="17.0124%" y="245" width="0.0156%" height="15" fill="rgb(240,68,47)"/><text x="17.2624%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (6 samples, 0.01%)</title><rect x="17.0176%" y="229" width="0.0104%" height="15" fill="rgb(210,16,53)"/><text x="17.2676%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (53 samples, 0.09%)</title><rect x="17.0280%" y="245" width="0.0916%" height="15" fill="rgb(235,124,12)"/><text x="17.2780%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (38 samples, 0.07%)</title><rect x="17.0539%" y="229" width="0.0657%" height="15" fill="rgb(224,169,11)"/><text x="17.3039%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (62 samples, 0.11%)</title><rect x="17.1196%" y="245" width="0.1072%" height="15" fill="rgb(250,166,2)"/><text x="17.3696%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (50 samples, 0.09%)</title><rect x="17.1403%" y="229" width="0.0864%" height="15" fill="rgb(242,216,29)"/><text x="17.3903%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (265 samples, 0.46%)</title><rect x="16.7773%" y="261" width="0.4581%" height="15" fill="rgb(230,116,27)"/><text x="17.0273%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (78 samples, 0.13%)</title><rect x="17.2354%" y="261" width="0.1348%" height="15" fill="rgb(228,99,48)"/><text x="17.4854%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (71 samples, 0.12%)</title><rect x="17.2475%" y="245" width="0.1227%" height="15" fill="rgb(253,11,6)"/><text x="17.4975%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (8 samples, 0.01%)</title><rect x="17.3789%" y="261" width="0.0138%" height="15" fill="rgb(247,143,39)"/><text x="17.6289%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,646 samples, 8.03%)</title><rect x="9.4942%" y="277" width="8.0317%" height="15" fill="rgb(236,97,10)"/><text x="9.7442%" y="287.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (77 samples, 0.13%)</title><rect x="17.3927%" y="261" width="0.1331%" height="15" fill="rgb(233,208,19)"/><text x="17.6427%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.03%)</title><rect x="17.5293%" y="277" width="0.0294%" height="15" fill="rgb(216,164,2)"/><text x="17.7793%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3,909 samples, 6.76%)</title><rect x="17.5587%" y="277" width="6.7576%" height="15" fill="rgb(220,129,5)"/><text x="17.8087%" y="287.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (28 samples, 0.05%)</title><rect x="24.3163%" y="277" width="0.0484%" height="15" fill="rgb(242,17,10)"/><text x="24.5663%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (8 samples, 0.01%)</title><rect x="24.3647%" y="277" width="0.0138%" height="15" fill="rgb(242,107,0)"/><text x="24.6147%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (109 samples, 0.19%)</title><rect x="24.3785%" y="277" width="0.1884%" height="15" fill="rgb(251,28,31)"/><text x="24.6285%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (12,059 samples, 20.85%)</title><rect x="3.7686%" y="293" width="20.8467%" height="15" fill="rgb(233,223,10)"/><text x="4.0186%" y="303.50">async-redis`&lt;tokio::runtime::park..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (25 samples, 0.04%)</title><rect x="24.5721%" y="277" width="0.0432%" height="15" fill="rgb(215,21,27)"/><text x="24.8221%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (9 samples, 0.02%)</title><rect x="24.6430%" y="229" width="0.0156%" height="15" fill="rgb(232,23,21)"/><text x="24.8930%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (111 samples, 0.19%)</title><rect x="24.6275%" y="245" width="0.1919%" height="15" fill="rgb(244,5,23)"/><text x="24.8775%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (92 samples, 0.16%)</title><rect x="24.6603%" y="229" width="0.1590%" height="15" fill="rgb(226,81,46)"/><text x="24.9103%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (120 samples, 0.21%)</title><rect x="24.6240%" y="261" width="0.2074%" height="15" fill="rgb(247,70,30)"/><text x="24.8740%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (7 samples, 0.01%)</title><rect x="24.8366%" y="261" width="0.0121%" height="15" fill="rgb(212,68,19)"/><text x="25.0866%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (140 samples, 0.24%)</title><rect x="24.6154%" y="293" width="0.2420%" height="15" fill="rgb(240,187,13)"/><text x="24.8654%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (136 samples, 0.24%)</title><rect x="24.6223%" y="277" width="0.2351%" height="15" fill="rgb(223,113,26)"/><text x="24.8723%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (11 samples, 0.02%)</title><rect x="24.8574%" y="293" width="0.0190%" height="15" fill="rgb(206,192,2)"/><text x="25.1074%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (7 samples, 0.01%)</title><rect x="24.8850%" y="277" width="0.0121%" height="15" fill="rgb(241,108,4)"/><text x="25.1350%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (149 samples, 0.26%)</title><rect x="24.8971%" y="277" width="0.2576%" height="15" fill="rgb(247,173,49)"/><text x="25.1471%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (173 samples, 0.30%)</title><rect x="24.8816%" y="293" width="0.2991%" height="15" fill="rgb(224,114,35)"/><text x="25.1316%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (9 samples, 0.02%)</title><rect x="25.1858%" y="293" width="0.0156%" height="15" fill="rgb(245,159,27)"/><text x="25.4358%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (48 samples, 0.08%)</title><rect x="25.2049%" y="293" width="0.0830%" height="15" fill="rgb(245,172,44)"/><text x="25.4549%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (13,780 samples, 23.82%)</title><rect x="1.4711%" y="309" width="23.8219%" height="15" fill="rgb(236,23,11)"/><text x="1.7211%" y="319.50">async-redis`tokio::runtime::thread_poo..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (60 samples, 0.10%)</title><rect x="25.4607%" y="293" width="0.1037%" height="15" fill="rgb(205,117,38)"/><text x="25.7107%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (58 samples, 0.10%)</title><rect x="25.4642%" y="277" width="0.1003%" height="15" fill="rgb(237,72,25)"/><text x="25.7142%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (46 samples, 0.08%)</title><rect x="25.5662%" y="293" width="0.0795%" height="15" fill="rgb(244,70,9)"/><text x="25.8162%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.01%)</title><rect x="25.6319%" y="277" width="0.0138%" height="15" fill="rgb(217,125,39)"/><text x="25.8819%" y="287.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (8 samples, 0.01%)</title><rect x="25.7079%" y="277" width="0.0138%" height="15" fill="rgb(235,36,10)"/><text x="25.9579%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (43 samples, 0.07%)</title><rect x="25.7217%" y="277" width="0.0743%" height="15" fill="rgb(251,123,47)"/><text x="25.9717%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,086 samples, 1.88%)</title><rect x="25.7961%" y="277" width="1.8774%" height="15" fill="rgb(221,13,13)"/><text x="26.0461%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.03%)</title><rect x="27.6735%" y="277" width="0.0294%" height="15" fill="rgb(238,131,9)"/><text x="27.9235%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (12 samples, 0.02%)</title><rect x="27.7115%" y="277" width="0.0207%" height="15" fill="rgb(211,50,8)"/><text x="27.9615%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (52 samples, 0.09%)</title><rect x="27.7374%" y="261" width="0.0899%" height="15" fill="rgb(245,182,24)"/><text x="27.9874%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (54 samples, 0.09%)</title><rect x="27.7357%" y="277" width="0.0934%" height="15" fill="rgb(242,14,37)"/><text x="27.9857%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (31 samples, 0.05%)</title><rect x="27.8291%" y="277" width="0.0536%" height="15" fill="rgb(246,228,12)"/><text x="28.0791%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (8 samples, 0.01%)</title><rect x="27.8688%" y="261" width="0.0138%" height="15" fill="rgb(213,55,15)"/><text x="28.1188%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (38 samples, 0.07%)</title><rect x="27.8827%" y="277" width="0.0657%" height="15" fill="rgb(209,9,3)"/><text x="28.1327%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,332 samples, 2.30%)</title><rect x="25.6509%" y="293" width="2.3027%" height="15" fill="rgb(230,59,30)"/><text x="25.9009%" y="303.50">a..</text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (8 samples, 0.01%)</title><rect x="27.9656%" y="293" width="0.0138%" height="15" fill="rgb(209,121,21)"/><text x="28.2156%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27 samples, 0.05%)</title><rect x="28.1800%" y="277" width="0.0467%" height="15" fill="rgb(220,109,13)"/><text x="28.4300%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 0.09%)</title><rect x="28.4376%" y="261" width="0.0864%" height="15" fill="rgb(232,18,1)"/><text x="28.6876%" y="271.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="29.3970%" y="229" width="0.0173%" height="15" fill="rgb(215,41,42)"/><text x="29.6470%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (19 samples, 0.03%)</title><rect x="29.4506%" y="213" width="0.0328%" height="15" fill="rgb(224,123,36)"/><text x="29.7006%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="29.5007%" y="181" width="0.0173%" height="15" fill="rgb(240,125,3)"/><text x="29.7507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="29.5007%" y="165" width="0.0173%" height="15" fill="rgb(205,98,50)"/><text x="29.7507%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="29.4973%" y="197" width="0.0225%" height="15" fill="rgb(205,185,37)"/><text x="29.7473%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="29.5198%" y="197" width="0.0225%" height="15" fill="rgb(238,207,15)"/><text x="29.7698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.02%)</title><rect x="29.5267%" y="181" width="0.0156%" height="15" fill="rgb(213,199,42)"/><text x="29.7767%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (35 samples, 0.06%)</title><rect x="29.4835%" y="213" width="0.0605%" height="15" fill="rgb(235,201,11)"/><text x="29.7335%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (48 samples, 0.08%)</title><rect x="29.8102%" y="197" width="0.0830%" height="15" fill="rgb(207,46,11)"/><text x="30.0602%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (29 samples, 0.05%)</title><rect x="29.8430%" y="181" width="0.0501%" height="15" fill="rgb(241,35,35)"/><text x="30.0930%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="29.8932%" y="197" width="0.0363%" height="15" fill="rgb(243,32,47)"/><text x="30.1432%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (275 samples, 0.48%)</title><rect x="30.3807%" y="165" width="0.4754%" height="15" fill="rgb(247,202,23)"/><text x="30.6307%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (229 samples, 0.40%)</title><rect x="30.4602%" y="149" width="0.3959%" height="15" fill="rgb(219,102,11)"/><text x="30.7102%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.03%)</title><rect x="30.8561%" y="165" width="0.0346%" height="15" fill="rgb(243,110,44)"/><text x="31.1061%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (553 samples, 0.96%)</title><rect x="29.9416%" y="181" width="0.9560%" height="15" fill="rgb(222,74,54)"/><text x="30.1916%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (848 samples, 1.47%)</title><rect x="29.5440%" y="213" width="1.4660%" height="15" fill="rgb(216,99,12)"/><text x="29.7940%" y="223.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (622 samples, 1.08%)</title><rect x="29.9347%" y="197" width="1.0753%" height="15" fill="rgb(226,22,26)"/><text x="30.1847%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 0.11%)</title><rect x="30.8976%" y="181" width="0.1124%" height="15" fill="rgb(217,163,10)"/><text x="31.1476%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (36 samples, 0.06%)</title><rect x="31.0099%" y="213" width="0.0622%" height="15" fill="rgb(213,25,53)"/><text x="31.2599%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="31.0722%" y="213" width="0.0121%" height="15" fill="rgb(252,105,26)"/><text x="31.3222%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="31.0739%" y="197" width="0.0104%" height="15" fill="rgb(220,39,43)"/><text x="31.3239%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="31.0739%" y="181" width="0.0104%" height="15" fill="rgb(229,68,48)"/><text x="31.3239%" y="191.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (971 samples, 1.68%)</title><rect x="29.4143%" y="229" width="1.6786%" height="15" fill="rgb(252,8,32)"/><text x="29.6643%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (39 samples, 0.07%)</title><rect x="32.1578%" y="197" width="0.0674%" height="15" fill="rgb(223,20,43)"/><text x="32.4078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.02%)</title><rect x="32.2097%" y="181" width="0.0156%" height="15" fill="rgb(229,81,49)"/><text x="32.4597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="32.2131%" y="165" width="0.0121%" height="15" fill="rgb(236,28,36)"/><text x="32.4631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (47 samples, 0.08%)</title><rect x="32.2926%" y="181" width="0.0813%" height="15" fill="rgb(249,185,26)"/><text x="32.5426%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 0.07%)</title><rect x="32.2996%" y="165" width="0.0743%" height="15" fill="rgb(249,174,33)"/><text x="32.5496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (85 samples, 0.15%)</title><rect x="32.2287%" y="197" width="0.1469%" height="15" fill="rgb(233,201,37)"/><text x="32.4787%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (60 samples, 0.10%)</title><rect x="32.5606%" y="165" width="0.1037%" height="15" fill="rgb(221,78,26)"/><text x="32.8106%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (196 samples, 0.34%)</title><rect x="32.3756%" y="197" width="0.3388%" height="15" fill="rgb(250,127,30)"/><text x="32.6256%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (154 samples, 0.27%)</title><rect x="32.4482%" y="181" width="0.2662%" height="15" fill="rgb(230,49,44)"/><text x="32.6982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (29 samples, 0.05%)</title><rect x="32.6643%" y="165" width="0.0501%" height="15" fill="rgb(229,67,23)"/><text x="32.9143%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (377 samples, 0.65%)</title><rect x="32.0921%" y="213" width="0.6517%" height="15" fill="rgb(249,83,47)"/><text x="32.3421%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.03%)</title><rect x="32.7144%" y="197" width="0.0294%" height="15" fill="rgb(215,43,3)"/><text x="32.9644%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;&amp;str&gt;&gt;::from (13 samples, 0.02%)</title><rect x="32.7438%" y="213" width="0.0225%" height="15" fill="rgb(238,154,13)"/><text x="32.9938%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.02%)</title><rect x="32.7663%" y="213" width="0.0242%" height="15" fill="rgb(219,56,2)"/><text x="33.0163%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="32.7905%" y="213" width="0.0328%" height="15" fill="rgb(233,0,4)"/><text x="33.0405%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.05%)</title><rect x="33.2849%" y="181" width="0.0467%" height="15" fill="rgb(235,30,7)"/><text x="33.5349%" y="191.50"></text></g><g><title>async-redis`std::io::error::Error::kind (16 samples, 0.03%)</title><rect x="33.8035%" y="149" width="0.0277%" height="15" fill="rgb(250,79,13)"/><text x="34.0535%" y="159.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (32 samples, 0.06%)</title><rect x="33.8312%" y="149" width="0.0553%" height="15" fill="rgb(211,146,34)"/><text x="34.0812%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (6 samples, 0.01%)</title><rect x="34.1856%" y="101" width="0.0104%" height="15" fill="rgb(228,22,38)"/><text x="34.4356%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (14 samples, 0.02%)</title><rect x="34.2012%" y="101" width="0.0242%" height="15" fill="rgb(235,168,5)"/><text x="34.4512%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (109 samples, 0.19%)</title><rect x="34.0871%" y="117" width="0.1884%" height="15" fill="rgb(221,155,16)"/><text x="34.3371%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (29 samples, 0.05%)</title><rect x="34.2254%" y="101" width="0.0501%" height="15" fill="rgb(215,215,53)"/><text x="34.4754%" y="111.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (18 samples, 0.03%)</title><rect x="34.2755%" y="117" width="0.0311%" height="15" fill="rgb(223,4,10)"/><text x="34.5255%" y="127.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (8 samples, 0.01%)</title><rect x="34.3066%" y="117" width="0.0138%" height="15" fill="rgb(234,103,6)"/><text x="34.5566%" y="127.50"></text></g><g><title>libsystem_c.dylib`recv (10 samples, 0.02%)</title><rect x="34.3204%" y="117" width="0.0173%" height="15" fill="rgb(227,97,0)"/><text x="34.5704%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__error (24 samples, 0.04%)</title><rect x="34.3377%" y="117" width="0.0415%" height="15" fill="rgb(234,150,53)"/><text x="34.5877%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (14,998 samples, 25.93%)</title><rect x="34.3792%" y="117" width="25.9275%" height="15" fill="rgb(228,201,54)"/><text x="34.6292%" y="127.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (15,220 samples, 26.31%)</title><rect x="34.0317%" y="133" width="26.3112%" height="15" fill="rgb(222,22,37)"/><text x="34.2817%" y="143.50">async-redis`&lt;&amp;mio::net::tcp::stream::TcpSt..</text></g><g><title>libsystem_kernel.dylib`cerror (21 samples, 0.04%)</title><rect x="60.3067%" y="117" width="0.0363%" height="15" fill="rgb(237,53,32)"/><text x="60.5567%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (9 samples, 0.02%)</title><rect x="60.3534%" y="133" width="0.0156%" height="15" fill="rgb(233,25,53)"/><text x="60.6034%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="60.6472%" y="117" width="0.0104%" height="15" fill="rgb(210,40,34)"/><text x="60.8972%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.02%)</title><rect x="60.6576%" y="117" width="0.0173%" height="15" fill="rgb(241,220,44)"/><text x="60.9076%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (87 samples, 0.15%)</title><rect x="60.6749%" y="117" width="0.1504%" height="15" fill="rgb(235,28,35)"/><text x="60.9249%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="60.8028%" y="101" width="0.0225%" height="15" fill="rgb(210,56,17)"/><text x="61.0528%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (13 samples, 0.02%)</title><rect x="60.8028%" y="85" width="0.0225%" height="15" fill="rgb(224,130,29)"/><text x="61.0528%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (16 samples, 0.03%)</title><rect x="60.8253%" y="117" width="0.0277%" height="15" fill="rgb(235,212,8)"/><text x="61.0753%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (318 samples, 0.55%)</title><rect x="60.3741%" y="133" width="0.5497%" height="15" fill="rgb(223,33,50)"/><text x="60.6241%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (41 samples, 0.07%)</title><rect x="60.8530%" y="117" width="0.0709%" height="15" fill="rgb(219,149,13)"/><text x="61.1030%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (15,649 samples, 27.05%)</title><rect x="33.8865%" y="149" width="27.0529%" height="15" fill="rgb(250,156,29)"/><text x="34.1365%" y="159.50">async-redis`tokio::io::driver::registration..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (9 samples, 0.02%)</title><rect x="60.9238%" y="133" width="0.0156%" height="15" fill="rgb(216,193,19)"/><text x="61.1738%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (15,776 samples, 27.27%)</title><rect x="33.6843%" y="165" width="27.2724%" height="15" fill="rgb(216,135,14)"/><text x="33.9343%" y="175.50">async-redis`&lt;tokio::net::tcp::stream::TcpStr..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (10 samples, 0.02%)</title><rect x="60.9394%" y="149" width="0.0173%" height="15" fill="rgb(241,47,5)"/><text x="61.1894%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (18 samples, 0.03%)</title><rect x="61.4546%" y="117" width="0.0311%" height="15" fill="rgb(233,42,35)"/><text x="61.7046%" y="127.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (41 samples, 0.07%)</title><rect x="61.4165%" y="133" width="0.0709%" height="15" fill="rgb(231,13,6)"/><text x="61.6665%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (9 samples, 0.02%)</title><rect x="61.4926%" y="133" width="0.0156%" height="15" fill="rgb(207,181,40)"/><text x="61.7426%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (7 samples, 0.01%)</title><rect x="61.4960%" y="117" width="0.0121%" height="15" fill="rgb(254,173,49)"/><text x="61.7460%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (314 samples, 0.54%)</title><rect x="60.9774%" y="149" width="0.5428%" height="15" fill="rgb(221,1,38)"/><text x="61.2274%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (7 samples, 0.01%)</title><rect x="61.5081%" y="133" width="0.0121%" height="15" fill="rgb(206,124,46)"/><text x="61.7581%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (327 samples, 0.57%)</title><rect x="60.9567%" y="165" width="0.5653%" height="15" fill="rgb(249,21,11)"/><text x="61.2067%" y="175.50"></text></g><g><title>async-redis`__rdl_dealloc (8 samples, 0.01%)</title><rect x="61.9213%" y="149" width="0.0138%" height="15" fill="rgb(222,201,40)"/><text x="62.1713%" y="159.50"></text></g><g><title>async-redis`__rdl_alloc (16 samples, 0.03%)</title><rect x="62.3725%" y="117" width="0.0277%" height="15" fill="rgb(235,61,29)"/><text x="62.6225%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (334 samples, 0.58%)</title><rect x="62.5765%" y="85" width="0.5774%" height="15" fill="rgb(219,207,3)"/><text x="62.8265%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (322 samples, 0.56%)</title><rect x="62.5972%" y="69" width="0.5567%" height="15" fill="rgb(222,56,46)"/><text x="62.8472%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (149 samples, 0.26%)</title><rect x="62.8963%" y="53" width="0.2576%" height="15" fill="rgb(239,76,54)"/><text x="63.1463%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.05%)</title><rect x="63.1038%" y="37" width="0.0501%" height="15" fill="rgb(231,124,27)"/><text x="63.3538%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (404 samples, 0.70%)</title><rect x="62.4624%" y="101" width="0.6984%" height="15" fill="rgb(249,195,6)"/><text x="62.7124%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.05%)</title><rect x="63.1608%" y="101" width="0.0501%" height="15" fill="rgb(237,174,47)"/><text x="63.4108%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::copy_from_slice (488 samples, 0.84%)</title><rect x="62.4105%" y="117" width="0.8436%" height="15" fill="rgb(206,201,31)"/><text x="62.6605%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.04%)</title><rect x="63.2179%" y="101" width="0.0363%" height="15" fill="rgb(231,57,52)"/><text x="63.4679%" y="111.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (12 samples, 0.02%)</title><rect x="63.2542%" y="117" width="0.0207%" height="15" fill="rgb(248,177,22)"/><text x="63.5042%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="63.2749%" y="117" width="0.0242%" height="15" fill="rgb(215,211,37)"/><text x="63.5249%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (21 samples, 0.04%)</title><rect x="63.2991%" y="117" width="0.0363%" height="15" fill="rgb(241,128,51)"/><text x="63.5491%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::read_line (648 samples, 1.12%)</title><rect x="62.2290%" y="133" width="1.1202%" height="15" fill="rgb(227,165,31)"/><text x="62.4790%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="63.3354%" y="117" width="0.0138%" height="15" fill="rgb(228,167,24)"/><text x="63.5854%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (6 samples, 0.01%)</title><rect x="63.6984%" y="69" width="0.0104%" height="15" fill="rgb(228,143,12)"/><text x="63.9484%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (6 samples, 0.01%)</title><rect x="63.6984%" y="53" width="0.0104%" height="15" fill="rgb(249,149,8)"/><text x="63.9484%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.04%)</title><rect x="63.7088%" y="69" width="0.0398%" height="15" fill="rgb(243,35,44)"/><text x="63.9588%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (251 samples, 0.43%)</title><rect x="63.4046%" y="117" width="0.4339%" height="15" fill="rgb(246,89,9)"/><text x="63.6546%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (224 samples, 0.39%)</title><rect x="63.4512%" y="101" width="0.3872%" height="15" fill="rgb(233,213,13)"/><text x="63.7012%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (210 samples, 0.36%)</title><rect x="63.4754%" y="85" width="0.3630%" height="15" fill="rgb(233,141,41)"/><text x="63.7254%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (52 samples, 0.09%)</title><rect x="63.7486%" y="69" width="0.0899%" height="15" fill="rgb(239,167,4)"/><text x="63.9986%" y="79.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::copy_from_slice (1,233 samples, 2.13%)</title><rect x="63.3492%" y="133" width="2.1315%" height="15" fill="rgb(209,217,16)"/><text x="63.5992%" y="143.50">a..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (944 samples, 1.63%)</title><rect x="63.8488%" y="117" width="1.6319%" height="15" fill="rgb(219,88,35)"/><text x="64.0988%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (7 samples, 0.01%)</title><rect x="65.4808%" y="133" width="0.0121%" height="15" fill="rgb(220,193,23)"/><text x="65.7308%" y="143.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (21 samples, 0.04%)</title><rect x="65.4929%" y="133" width="0.0363%" height="15" fill="rgb(230,90,52)"/><text x="65.7429%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="65.6208%" y="85" width="0.0104%" height="15" fill="rgb(252,106,19)"/><text x="65.8708%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (81 samples, 0.14%)</title><rect x="65.5309%" y="133" width="0.1400%" height="15" fill="rgb(206,74,20)"/><text x="65.7809%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.12%)</title><rect x="65.5534%" y="117" width="0.1176%" height="15" fill="rgb(230,138,44)"/><text x="65.8034%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (67 samples, 0.12%)</title><rect x="65.5551%" y="101" width="0.1158%" height="15" fill="rgb(235,182,43)"/><text x="65.8051%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.04%)</title><rect x="65.6312%" y="85" width="0.0398%" height="15" fill="rgb(242,16,51)"/><text x="65.8812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (67 samples, 0.12%)</title><rect x="65.7314%" y="117" width="0.1158%" height="15" fill="rgb(248,9,4)"/><text x="65.9814%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (60 samples, 0.10%)</title><rect x="65.7435%" y="101" width="0.1037%" height="15" fill="rgb(210,31,22)"/><text x="65.9935%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (104 samples, 0.18%)</title><rect x="65.6726%" y="133" width="0.1798%" height="15" fill="rgb(239,54,39)"/><text x="65.9226%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.03%)</title><rect x="66.0461%" y="101" width="0.0328%" height="15" fill="rgb(230,99,41)"/><text x="66.2961%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (132 samples, 0.23%)</title><rect x="65.8524%" y="133" width="0.2282%" height="15" fill="rgb(253,106,12)"/><text x="66.1024%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (59 samples, 0.10%)</title><rect x="65.9786%" y="117" width="0.1020%" height="15" fill="rgb(213,46,41)"/><text x="66.2286%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::consume_raw_bytes (2,412 samples, 4.17%)</title><rect x="61.9369%" y="149" width="4.1697%" height="15" fill="rgb(215,133,35)"/><text x="62.1869%" y="159.50">async..</text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::consume_token (58 samples, 0.10%)</title><rect x="66.1066%" y="149" width="0.1003%" height="15" fill="rgb(213,28,5)"/><text x="66.3566%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (21 samples, 0.04%)</title><rect x="66.2224%" y="149" width="0.0363%" height="15" fill="rgb(215,77,49)"/><text x="66.4724%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (8 samples, 0.01%)</title><rect x="66.2587%" y="149" width="0.0138%" height="15" fill="rgb(248,100,22)"/><text x="66.5087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="66.2725%" y="149" width="0.0190%" height="15" fill="rgb(208,67,9)"/><text x="66.5225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="66.2915%" y="149" width="0.0346%" height="15" fill="rgb(219,133,21)"/><text x="66.5415%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="66.3261%" y="149" width="0.0190%" height="15" fill="rgb(246,46,29)"/><text x="66.5761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.02%)</title><rect x="66.3469%" y="149" width="0.0156%" height="15" fill="rgb(246,185,52)"/><text x="66.5969%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode::IntermediateParser::parse (2,997 samples, 5.18%)</title><rect x="61.5254%" y="165" width="5.1810%" height="15" fill="rgb(252,136,11)"/><text x="61.7754%" y="175.50">async-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (199 samples, 0.34%)</title><rect x="66.3624%" y="149" width="0.3440%" height="15" fill="rgb(219,138,53)"/><text x="66.6124%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::consume_raw_bytes (7 samples, 0.01%)</title><rect x="66.7064%" y="165" width="0.0121%" height="15" fill="rgb(211,51,23)"/><text x="66.9564%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (29 samples, 0.05%)</title><rect x="66.7203%" y="165" width="0.0501%" height="15" fill="rgb(247,221,28)"/><text x="66.9703%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.04%)</title><rect x="66.7341%" y="149" width="0.0363%" height="15" fill="rgb(251,222,45)"/><text x="66.9841%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (17 samples, 0.03%)</title><rect x="66.7756%" y="165" width="0.0294%" height="15" fill="rgb(217,162,53)"/><text x="67.0256%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (12 samples, 0.02%)</title><rect x="66.8050%" y="165" width="0.0207%" height="15" fill="rgb(229,93,14)"/><text x="67.0550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.02%)</title><rect x="66.9173%" y="117" width="0.0173%" height="15" fill="rgb(209,67,49)"/><text x="67.1673%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (49 samples, 0.08%)</title><rect x="66.9346%" y="117" width="0.0847%" height="15" fill="rgb(213,87,29)"/><text x="67.1846%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (104 samples, 0.18%)</title><rect x="66.8413%" y="149" width="0.1798%" height="15" fill="rgb(205,151,52)"/><text x="67.0913%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (103 samples, 0.18%)</title><rect x="66.8430%" y="133" width="0.1781%" height="15" fill="rgb(253,215,39)"/><text x="67.0930%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (112 samples, 0.19%)</title><rect x="66.8292%" y="165" width="0.1936%" height="15" fill="rgb(221,220,41)"/><text x="67.0792%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (89 samples, 0.15%)</title><rect x="67.0245%" y="165" width="0.1539%" height="15" fill="rgb(218,133,21)"/><text x="67.2745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (79 samples, 0.14%)</title><rect x="67.0418%" y="149" width="0.1366%" height="15" fill="rgb(221,193,43)"/><text x="67.2918%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (79 samples, 0.14%)</title><rect x="67.0418%" y="133" width="0.1366%" height="15" fill="rgb(240,128,52)"/><text x="67.2918%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (9 samples, 0.02%)</title><rect x="67.2648%" y="149" width="0.0156%" height="15" fill="rgb(253,114,12)"/><text x="67.5148%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (83 samples, 0.14%)</title><rect x="67.3927%" y="133" width="0.1435%" height="15" fill="rgb(215,223,47)"/><text x="67.6427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (218 samples, 0.38%)</title><rect x="67.1784%" y="165" width="0.3769%" height="15" fill="rgb(248,225,23)"/><text x="67.4284%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (157 samples, 0.27%)</title><rect x="67.2838%" y="149" width="0.2714%" height="15" fill="rgb(250,108,0)"/><text x="67.5338%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.02%)</title><rect x="67.5362%" y="133" width="0.0190%" height="15" fill="rgb(228,208,7)"/><text x="67.7862%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (27 samples, 0.05%)</title><rect x="67.5621%" y="165" width="0.0467%" height="15" fill="rgb(244,45,10)"/><text x="67.8121%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,829 samples, 34.28%)</title><rect x="33.3316%" y="181" width="34.2789%" height="15" fill="rgb(207,125,25)"/><text x="33.5816%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18 samples, 0.03%)</title><rect x="67.6106%" y="181" width="0.0311%" height="15" fill="rgb(210,195,18)"/><text x="67.8606%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="67.6486%" y="181" width="0.0190%" height="15" fill="rgb(249,80,12)"/><text x="67.8986%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (15 samples, 0.03%)</title><rect x="67.7886%" y="149" width="0.0259%" height="15" fill="rgb(221,65,9)"/><text x="68.0386%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (22 samples, 0.04%)</title><rect x="67.8145%" y="149" width="0.0380%" height="15" fill="rgb(235,49,36)"/><text x="68.0645%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (91 samples, 0.16%)</title><rect x="67.8526%" y="149" width="0.1573%" height="15" fill="rgb(225,32,20)"/><text x="68.1026%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (20 samples, 0.03%)</title><rect x="68.0099%" y="149" width="0.0346%" height="15" fill="rgb(215,141,46)"/><text x="68.2599%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (18 samples, 0.03%)</title><rect x="68.0445%" y="149" width="0.0311%" height="15" fill="rgb(250,160,47)"/><text x="68.2945%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (7 samples, 0.01%)</title><rect x="68.0756%" y="149" width="0.0121%" height="15" fill="rgb(216,222,40)"/><text x="68.3256%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (29 samples, 0.05%)</title><rect x="68.1084%" y="133" width="0.0501%" height="15" fill="rgb(234,217,39)"/><text x="68.3584%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="68.1724%" y="117" width="0.0156%" height="15" fill="rgb(207,178,40)"/><text x="68.4224%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (151 samples, 0.26%)</title><rect x="68.1879%" y="117" width="0.2610%" height="15" fill="rgb(221,136,13)"/><text x="68.4379%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (107 samples, 0.18%)</title><rect x="68.2640%" y="101" width="0.1850%" height="15" fill="rgb(249,199,10)"/><text x="68.5140%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (14 samples, 0.02%)</title><rect x="68.4490%" y="117" width="0.0242%" height="15" fill="rgb(249,222,13)"/><text x="68.6990%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (33 samples, 0.06%)</title><rect x="68.4818%" y="117" width="0.0570%" height="15" fill="rgb(244,185,38)"/><text x="68.7318%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (244 samples, 0.42%)</title><rect x="68.1586%" y="133" width="0.4218%" height="15" fill="rgb(236,202,9)"/><text x="68.4086%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.04%)</title><rect x="68.5389%" y="117" width="0.0415%" height="15" fill="rgb(250,229,37)"/><text x="68.7889%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (13 samples, 0.02%)</title><rect x="68.5821%" y="133" width="0.0225%" height="15" fill="rgb(206,174,23)"/><text x="68.8321%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (9 samples, 0.02%)</title><rect x="68.6046%" y="133" width="0.0156%" height="15" fill="rgb(211,33,43)"/><text x="68.8546%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (29 samples, 0.05%)</title><rect x="68.6201%" y="133" width="0.0501%" height="15" fill="rgb(245,58,50)"/><text x="68.8701%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (10 samples, 0.02%)</title><rect x="68.6530%" y="117" width="0.0173%" height="15" fill="rgb(244,68,36)"/><text x="68.9030%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (6 samples, 0.01%)</title><rect x="68.6703%" y="133" width="0.0104%" height="15" fill="rgb(232,229,15)"/><text x="68.9203%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (361 samples, 0.62%)</title><rect x="68.0877%" y="149" width="0.6241%" height="15" fill="rgb(254,30,23)"/><text x="68.3377%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.03%)</title><rect x="68.6806%" y="133" width="0.0311%" height="15" fill="rgb(235,160,14)"/><text x="68.9306%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (37 samples, 0.06%)</title><rect x="68.7118%" y="149" width="0.0640%" height="15" fill="rgb(212,155,44)"/><text x="68.9618%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (635 samples, 1.10%)</title><rect x="67.6918%" y="165" width="1.0977%" height="15" fill="rgb(226,2,50)"/><text x="67.9418%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="68.7757%" y="149" width="0.0138%" height="15" fill="rgb(234,177,6)"/><text x="69.0257%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (9 samples, 0.02%)</title><rect x="68.7913%" y="165" width="0.0156%" height="15" fill="rgb(217,24,9)"/><text x="69.0413%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.02%)</title><rect x="68.8068%" y="165" width="0.0156%" height="15" fill="rgb(220,13,46)"/><text x="69.0568%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (673 samples, 1.16%)</title><rect x="67.6762%" y="181" width="1.1634%" height="15" fill="rgb(239,221,27)"/><text x="67.9262%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="68.8293%" y="165" width="0.0104%" height="15" fill="rgb(222,198,25)"/><text x="69.0793%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (16 samples, 0.03%)</title><rect x="68.8449%" y="181" width="0.0277%" height="15" fill="rgb(211,99,13)"/><text x="69.0949%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (14 samples, 0.02%)</title><rect x="68.8725%" y="181" width="0.0242%" height="15" fill="rgb(232,111,31)"/><text x="69.1225%" y="191.50"></text></g><g><title>async-redis`__rust_alloc (6 samples, 0.01%)</title><rect x="68.9123%" y="181" width="0.0104%" height="15" fill="rgb(245,82,37)"/><text x="69.1623%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode::IntermediateParser::parse (25 samples, 0.04%)</title><rect x="68.9261%" y="181" width="0.0432%" height="15" fill="rgb(227,149,46)"/><text x="69.1761%" y="191.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (9 samples, 0.02%)</title><rect x="68.9693%" y="181" width="0.0156%" height="15" fill="rgb(218,36,50)"/><text x="69.2193%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (9 samples, 0.02%)</title><rect x="69.0195%" y="165" width="0.0156%" height="15" fill="rgb(226,80,48)"/><text x="69.2695%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (8 samples, 0.01%)</title><rect x="69.0523%" y="149" width="0.0138%" height="15" fill="rgb(238,224,15)"/><text x="69.3023%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="69.0661%" y="149" width="0.0138%" height="15" fill="rgb(241,136,10)"/><text x="69.3161%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (37 samples, 0.06%)</title><rect x="69.0800%" y="149" width="0.0640%" height="15" fill="rgb(208,32,45)"/><text x="69.3300%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (16 samples, 0.03%)</title><rect x="69.1163%" y="133" width="0.0277%" height="15" fill="rgb(207,135,9)"/><text x="69.3663%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (16 samples, 0.03%)</title><rect x="69.1457%" y="149" width="0.0277%" height="15" fill="rgb(206,86,44)"/><text x="69.3957%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (8 samples, 0.01%)</title><rect x="69.2356%" y="133" width="0.0138%" height="15" fill="rgb(245,177,15)"/><text x="69.4856%" y="143.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (8 samples, 0.01%)</title><rect x="69.2874%" y="85" width="0.0138%" height="15" fill="rgb(206,64,50)"/><text x="69.5374%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="69.3047%" y="85" width="0.0138%" height="15" fill="rgb(234,36,40)"/><text x="69.5547%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (35 samples, 0.06%)</title><rect x="69.2649%" y="101" width="0.0605%" height="15" fill="rgb(213,64,8)"/><text x="69.5149%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (53 samples, 0.09%)</title><rect x="69.2494%" y="133" width="0.0916%" height="15" fill="rgb(210,75,36)"/><text x="69.4994%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (53 samples, 0.09%)</title><rect x="69.2494%" y="117" width="0.0916%" height="15" fill="rgb(229,88,21)"/><text x="69.4994%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (8 samples, 0.01%)</title><rect x="69.3272%" y="101" width="0.0138%" height="15" fill="rgb(252,204,47)"/><text x="69.5772%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (65 samples, 0.11%)</title><rect x="69.4188%" y="85" width="0.1124%" height="15" fill="rgb(208,77,27)"/><text x="69.6688%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (43 samples, 0.07%)</title><rect x="69.4568%" y="69" width="0.0743%" height="15" fill="rgb(221,76,26)"/><text x="69.7068%" y="79.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (76 samples, 0.13%)</title><rect x="69.4084%" y="101" width="0.1314%" height="15" fill="rgb(225,139,18)"/><text x="69.6584%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (17 samples, 0.03%)</title><rect x="69.5415%" y="101" width="0.0294%" height="15" fill="rgb(230,137,11)"/><text x="69.7915%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (47 samples, 0.08%)</title><rect x="69.7766%" y="85" width="0.0813%" height="15" fill="rgb(212,28,1)"/><text x="70.0266%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.05%)</title><rect x="69.8717%" y="69" width="0.0501%" height="15" fill="rgb(248,164,17)"/><text x="70.1217%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (29 samples, 0.05%)</title><rect x="69.8717%" y="53" width="0.0501%" height="15" fill="rgb(222,171,42)"/><text x="70.1217%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.06%)</title><rect x="69.8631%" y="85" width="0.0622%" height="15" fill="rgb(243,84,45)"/><text x="70.1131%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (123 samples, 0.21%)</title><rect x="69.9253%" y="85" width="0.2126%" height="15" fill="rgb(252,49,23)"/><text x="70.1753%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (82 samples, 0.14%)</title><rect x="69.9962%" y="69" width="0.1418%" height="15" fill="rgb(215,19,7)"/><text x="70.2462%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (50 samples, 0.09%)</title><rect x="70.0515%" y="53" width="0.0864%" height="15" fill="rgb(238,81,41)"/><text x="70.3015%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (14 samples, 0.02%)</title><rect x="70.1431%" y="85" width="0.0242%" height="15" fill="rgb(210,199,37)"/><text x="70.3931%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (346 samples, 0.60%)</title><rect x="69.5709%" y="101" width="0.5981%" height="15" fill="rgb(244,192,49)"/><text x="69.8209%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (10 samples, 0.02%)</title><rect x="70.2417%" y="85" width="0.0173%" height="15" fill="rgb(226,211,11)"/><text x="70.4917%" y="95.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (52 samples, 0.09%)</title><rect x="70.1760%" y="101" width="0.0899%" height="15" fill="rgb(236,162,54)"/><text x="70.4260%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (518 samples, 0.90%)</title><rect x="69.3877%" y="117" width="0.8955%" height="15" fill="rgb(220,229,9)"/><text x="69.6377%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="70.2728%" y="101" width="0.0104%" height="15" fill="rgb(250,87,22)"/><text x="70.5228%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (558 samples, 0.96%)</title><rect x="69.3410%" y="133" width="0.9646%" height="15" fill="rgb(239,43,17)"/><text x="69.5910%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (13 samples, 0.02%)</title><rect x="70.2832%" y="117" width="0.0225%" height="15" fill="rgb(231,177,25)"/><text x="70.5332%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (666 samples, 1.15%)</title><rect x="69.1733%" y="149" width="1.1513%" height="15" fill="rgb(219,179,1)"/><text x="69.4233%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="70.3108%" y="133" width="0.0138%" height="15" fill="rgb(238,219,53)"/><text x="70.5608%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (17 samples, 0.03%)</title><rect x="70.3247%" y="149" width="0.0294%" height="15" fill="rgb(232,167,36)"/><text x="70.5747%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (10 samples, 0.02%)</title><rect x="70.3679%" y="149" width="0.0173%" height="15" fill="rgb(244,19,51)"/><text x="70.6179%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (790 samples, 1.37%)</title><rect x="69.0350%" y="165" width="1.3657%" height="15" fill="rgb(224,6,22)"/><text x="69.2850%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="70.3852%" y="149" width="0.0156%" height="15" fill="rgb(224,145,5)"/><text x="70.6352%" y="159.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (826 samples, 1.43%)</title><rect x="68.9935%" y="181" width="1.4279%" height="15" fill="rgb(234,130,49)"/><text x="69.2435%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (225 samples, 0.39%)</title><rect x="70.4560%" y="149" width="0.3890%" height="15" fill="rgb(254,6,2)"/><text x="70.7060%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (178 samples, 0.31%)</title><rect x="70.5373%" y="133" width="0.3077%" height="15" fill="rgb(208,96,46)"/><text x="70.7873%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (83 samples, 0.14%)</title><rect x="70.8899%" y="133" width="0.1435%" height="15" fill="rgb(239,3,39)"/><text x="71.1399%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (112 samples, 0.19%)</title><rect x="70.8450%" y="149" width="0.1936%" height="15" fill="rgb(233,210,1)"/><text x="71.0950%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (347 samples, 0.60%)</title><rect x="70.4491%" y="165" width="0.5999%" height="15" fill="rgb(244,137,37)"/><text x="70.6991%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (373 samples, 0.64%)</title><rect x="70.4232%" y="181" width="0.6448%" height="15" fill="rgb(240,136,2)"/><text x="70.6732%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (6 samples, 0.01%)</title><rect x="71.0732%" y="165" width="0.0104%" height="15" fill="rgb(239,18,37)"/><text x="71.3232%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (7 samples, 0.01%)</title><rect x="71.0836%" y="165" width="0.0121%" height="15" fill="rgb(218,185,22)"/><text x="71.3336%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (11 samples, 0.02%)</title><rect x="71.1769%" y="149" width="0.0190%" height="15" fill="rgb(225,218,4)"/><text x="71.4269%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (12 samples, 0.02%)</title><rect x="71.3671%" y="101" width="0.0207%" height="15" fill="rgb(230,182,32)"/><text x="71.6171%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (13 samples, 0.02%)</title><rect x="71.3671%" y="117" width="0.0225%" height="15" fill="rgb(242,56,43)"/><text x="71.6171%" y="127.50"></text></g><g><title>async-redis`__rdl_alloc (6 samples, 0.01%)</title><rect x="71.3930%" y="117" width="0.0104%" height="15" fill="rgb(233,99,24)"/><text x="71.6430%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.02%)</title><rect x="71.4034%" y="117" width="0.0225%" height="15" fill="rgb(234,209,42)"/><text x="71.6534%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (29 samples, 0.05%)</title><rect x="71.4673%" y="101" width="0.0501%" height="15" fill="rgb(227,7,12)"/><text x="71.7173%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (16 samples, 0.03%)</title><rect x="71.4898%" y="85" width="0.0277%" height="15" fill="rgb(245,203,43)"/><text x="71.7398%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (26 samples, 0.04%)</title><rect x="71.7025%" y="53" width="0.0449%" height="15" fill="rgb(238,205,33)"/><text x="71.9525%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (119 samples, 0.21%)</title><rect x="71.6177%" y="69" width="0.2057%" height="15" fill="rgb(231,56,7)"/><text x="71.8677%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (44 samples, 0.08%)</title><rect x="71.7474%" y="53" width="0.0761%" height="15" fill="rgb(244,186,29)"/><text x="71.9974%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (176 samples, 0.30%)</title><rect x="71.5209%" y="101" width="0.3043%" height="15" fill="rgb(234,111,31)"/><text x="71.7709%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (135 samples, 0.23%)</title><rect x="71.5918%" y="85" width="0.2334%" height="15" fill="rgb(241,149,10)"/><text x="71.8418%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (226 samples, 0.39%)</title><rect x="71.4380%" y="117" width="0.3907%" height="15" fill="rgb(249,206,44)"/><text x="71.6880%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.01%)</title><rect x="71.8356%" y="117" width="0.0138%" height="15" fill="rgb(251,153,30)"/><text x="72.0856%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (485 samples, 0.84%)</title><rect x="71.2046%" y="133" width="0.8384%" height="15" fill="rgb(239,152,38)"/><text x="71.4546%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (112 samples, 0.19%)</title><rect x="71.8494%" y="117" width="0.1936%" height="15" fill="rgb(249,139,47)"/><text x="72.0994%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_subscriber::field::VisitOutput&lt;core::result::Result&lt;(),core::fmt::Error&gt;&gt;&gt;::finish (6 samples, 0.01%)</title><rect x="72.0430%" y="133" width="0.0104%" height="15" fill="rgb(244,64,35)"/><text x="72.2930%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (23 samples, 0.04%)</title><rect x="72.0638%" y="133" width="0.0398%" height="15" fill="rgb(216,46,15)"/><text x="72.3138%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (26 samples, 0.04%)</title><rect x="72.2107%" y="117" width="0.0449%" height="15" fill="rgb(250,74,19)"/><text x="72.4607%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (12 samples, 0.02%)</title><rect x="72.2349%" y="101" width="0.0207%" height="15" fill="rgb(249,42,33)"/><text x="72.4849%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (58 samples, 0.10%)</title><rect x="72.3369%" y="101" width="0.1003%" height="15" fill="rgb(242,149,17)"/><text x="72.5869%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (36 samples, 0.06%)</title><rect x="72.4372%" y="101" width="0.0622%" height="15" fill="rgb(244,29,21)"/><text x="72.6872%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (13 samples, 0.02%)</title><rect x="72.4994%" y="101" width="0.0225%" height="15" fill="rgb(220,130,37)"/><text x="72.7494%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (163 samples, 0.28%)</title><rect x="72.2556%" y="117" width="0.2818%" height="15" fill="rgb(211,67,2)"/><text x="72.5056%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="72.5219%" y="101" width="0.0156%" height="15" fill="rgb(235,68,52)"/><text x="72.7719%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (121 samples, 0.21%)</title><rect x="72.5374%" y="117" width="0.2092%" height="15" fill="rgb(246,142,3)"/><text x="72.7874%" y="127.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (6 samples, 0.01%)</title><rect x="72.7604%" y="117" width="0.0104%" height="15" fill="rgb(241,25,7)"/><text x="73.0104%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (12 samples, 0.02%)</title><rect x="72.7708%" y="117" width="0.0207%" height="15" fill="rgb(242,119,39)"/><text x="73.0208%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (408 samples, 0.71%)</title><rect x="72.1035%" y="133" width="0.7053%" height="15" fill="rgb(241,98,45)"/><text x="72.3535%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="72.7985%" y="117" width="0.0104%" height="15" fill="rgb(254,28,30)"/><text x="73.0485%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_close (6 samples, 0.01%)</title><rect x="72.8400%" y="133" width="0.0104%" height="15" fill="rgb(241,142,54)"/><text x="73.0900%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (13 samples, 0.02%)</title><rect x="72.8503%" y="133" width="0.0225%" height="15" fill="rgb(222,85,15)"/><text x="73.1003%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (990 samples, 1.71%)</title><rect x="71.1959%" y="149" width="1.7114%" height="15" fill="rgb(210,85,47)"/><text x="71.4459%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (18 samples, 0.03%)</title><rect x="72.8763%" y="133" width="0.0311%" height="15" fill="rgb(224,206,25)"/><text x="73.1263%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (12 samples, 0.02%)</title><rect x="72.9160%" y="149" width="0.0207%" height="15" fill="rgb(243,201,19)"/><text x="73.1660%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (7 samples, 0.01%)</title><rect x="72.9368%" y="149" width="0.0121%" height="15" fill="rgb(236,59,4)"/><text x="73.1868%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (10 samples, 0.02%)</title><rect x="72.9489%" y="149" width="0.0173%" height="15" fill="rgb(254,179,45)"/><text x="73.1989%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,098 samples, 1.90%)</title><rect x="71.1009%" y="165" width="1.8981%" height="15" fill="rgb(226,14,10)"/><text x="71.3509%" y="175.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.03%)</title><rect x="72.9662%" y="149" width="0.0328%" height="15" fill="rgb(244,27,41)"/><text x="73.2162%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,125 samples, 1.94%)</title><rect x="71.0680%" y="181" width="1.9448%" height="15" fill="rgb(235,35,32)"/><text x="71.3180%" y="191.50">a..</text></g><g><title>async-redis`tracing_core::span::Attributes::new (8 samples, 0.01%)</title><rect x="72.9990%" y="165" width="0.0138%" height="15" fill="rgb(218,68,31)"/><text x="73.2490%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (7 samples, 0.01%)</title><rect x="73.0128%" y="181" width="0.0121%" height="15" fill="rgb(207,120,37)"/><text x="73.2628%" y="191.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (8 samples, 0.01%)</title><rect x="73.0249%" y="181" width="0.0138%" height="15" fill="rgb(227,98,0)"/><text x="73.2749%" y="191.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_close (7 samples, 0.01%)</title><rect x="73.0388%" y="181" width="0.0121%" height="15" fill="rgb(207,7,3)"/><text x="73.2888%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="73.0543%" y="181" width="0.0121%" height="15" fill="rgb(206,98,19)"/><text x="73.3043%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23,149 samples, 40.02%)</title><rect x="33.0550%" y="197" width="40.0183%" height="15" fill="rgb(217,5,26)"/><text x="33.3050%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::..</text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (16 samples, 0.03%)</title><rect x="73.0733%" y="197" width="0.0277%" height="15" fill="rgb(235,190,38)"/><text x="73.3233%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (12 samples, 0.02%)</title><rect x="73.1044%" y="197" width="0.0207%" height="15" fill="rgb(247,86,24)"/><text x="73.3544%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (29 samples, 0.05%)</title><rect x="73.1252%" y="197" width="0.0501%" height="15" fill="rgb(205,101,16)"/><text x="73.3752%" y="207.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (6 samples, 0.01%)</title><rect x="73.1857%" y="197" width="0.0104%" height="15" fill="rgb(246,168,33)"/><text x="73.4357%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (23,375 samples, 40.41%)</title><rect x="32.8303%" y="213" width="40.4090%" height="15" fill="rgb(231,114,1)"/><text x="33.0803%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::fu..</text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.04%)</title><rect x="73.1961%" y="197" width="0.0432%" height="15" fill="rgb(207,184,53)"/><text x="73.4461%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (54 samples, 0.09%)</title><rect x="73.2393%" y="213" width="0.0934%" height="15" fill="rgb(224,95,51)"/><text x="73.4893%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.07%)</title><rect x="73.2635%" y="197" width="0.0691%" height="15" fill="rgb(212,188,45)"/><text x="73.5135%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (7 samples, 0.01%)</title><rect x="73.3326%" y="213" width="0.0121%" height="15" fill="rgb(223,154,38)"/><text x="73.5826%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (13 samples, 0.02%)</title><rect x="73.3465%" y="213" width="0.0225%" height="15" fill="rgb(251,22,52)"/><text x="73.5965%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (80 samples, 0.14%)</title><rect x="73.3689%" y="213" width="0.1383%" height="15" fill="rgb(229,209,22)"/><text x="73.6189%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="73.4848%" y="197" width="0.0225%" height="15" fill="rgb(234,138,34)"/><text x="73.7348%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (10 samples, 0.02%)</title><rect x="73.5124%" y="213" width="0.0173%" height="15" fill="rgb(212,95,11)"/><text x="73.7624%" y="223.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.02%)</title><rect x="73.5470%" y="213" width="0.0156%" height="15" fill="rgb(240,179,47)"/><text x="73.7970%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (15 samples, 0.03%)</title><rect x="73.5626%" y="213" width="0.0259%" height="15" fill="rgb(240,163,11)"/><text x="73.8126%" y="223.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.01%)</title><rect x="73.6801%" y="197" width="0.0104%" height="15" fill="rgb(236,37,12)"/><text x="73.9301%" y="207.50"></text></g><g><title>async-redis`alloc::string::String::push (8 samples, 0.01%)</title><rect x="73.7078%" y="181" width="0.0138%" height="15" fill="rgb(232,164,16)"/><text x="73.9578%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (170 samples, 0.29%)</title><rect x="73.7216%" y="181" width="0.2939%" height="15" fill="rgb(244,205,15)"/><text x="73.9716%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (105 samples, 0.18%)</title><rect x="74.0345%" y="165" width="0.1815%" height="15" fill="rgb(223,117,47)"/><text x="74.2845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (100 samples, 0.17%)</title><rect x="74.0431%" y="149" width="0.1729%" height="15" fill="rgb(244,107,35)"/><text x="74.2931%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.11%)</title><rect x="74.1071%" y="133" width="0.1089%" height="15" fill="rgb(205,140,8)"/><text x="74.3571%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="74.1953%" y="117" width="0.0207%" height="15" fill="rgb(228,84,46)"/><text x="74.4453%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (117 samples, 0.20%)</title><rect x="74.0155%" y="181" width="0.2023%" height="15" fill="rgb(254,188,9)"/><text x="74.2655%" y="191.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (308 samples, 0.53%)</title><rect x="73.6905%" y="197" width="0.5324%" height="15" fill="rgb(206,112,54)"/><text x="73.9405%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (20 samples, 0.03%)</title><rect x="74.2575%" y="181" width="0.0346%" height="15" fill="rgb(216,84,49)"/><text x="74.5075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.09%)</title><rect x="74.3232%" y="149" width="0.0864%" height="15" fill="rgb(214,194,35)"/><text x="74.5732%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="74.3924%" y="133" width="0.0173%" height="15" fill="rgb(249,28,3)"/><text x="74.6424%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (69 samples, 0.12%)</title><rect x="74.2921%" y="181" width="0.1193%" height="15" fill="rgb(222,56,52)"/><text x="74.5421%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.09%)</title><rect x="74.3197%" y="165" width="0.0916%" height="15" fill="rgb(245,217,50)"/><text x="74.5697%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (115 samples, 0.20%)</title><rect x="74.2316%" y="197" width="0.1988%" height="15" fill="rgb(213,201,24)"/><text x="74.4816%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="74.4114%" y="181" width="0.0190%" height="15" fill="rgb(248,116,28)"/><text x="74.6614%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (14 samples, 0.02%)</title><rect x="74.4995%" y="181" width="0.0242%" height="15" fill="rgb(219,72,43)"/><text x="74.7495%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.03%)</title><rect x="74.7104%" y="101" width="0.0311%" height="15" fill="rgb(209,138,14)"/><text x="74.9604%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (155 samples, 0.27%)</title><rect x="74.6067%" y="117" width="0.2680%" height="15" fill="rgb(222,18,33)"/><text x="74.8567%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (75 samples, 0.13%)</title><rect x="74.7450%" y="101" width="0.1297%" height="15" fill="rgb(213,199,7)"/><text x="74.9950%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.05%)</title><rect x="74.8280%" y="85" width="0.0467%" height="15" fill="rgb(250,110,10)"/><text x="75.0780%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (166 samples, 0.29%)</title><rect x="74.5912%" y="149" width="0.2870%" height="15" fill="rgb(248,123,6)"/><text x="74.8412%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (157 samples, 0.27%)</title><rect x="74.6067%" y="133" width="0.2714%" height="15" fill="rgb(206,91,31)"/><text x="74.8567%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (201 samples, 0.35%)</title><rect x="74.5376%" y="165" width="0.3475%" height="15" fill="rgb(211,154,13)"/><text x="74.7876%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (211 samples, 0.36%)</title><rect x="74.5237%" y="181" width="0.3648%" height="15" fill="rgb(225,148,7)"/><text x="74.7737%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (287 samples, 0.50%)</title><rect x="74.4304%" y="197" width="0.4961%" height="15" fill="rgb(220,160,43)"/><text x="74.6804%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (22 samples, 0.04%)</title><rect x="74.8885%" y="181" width="0.0380%" height="15" fill="rgb(213,52,39)"/><text x="75.1385%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (9 samples, 0.02%)</title><rect x="74.9265%" y="197" width="0.0156%" height="15" fill="rgb(243,137,7)"/><text x="75.1765%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (8 samples, 0.01%)</title><rect x="74.9421%" y="197" width="0.0138%" height="15" fill="rgb(230,79,13)"/><text x="75.1921%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (15 samples, 0.03%)</title><rect x="74.9559%" y="197" width="0.0259%" height="15" fill="rgb(247,105,23)"/><text x="75.2059%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.06%)</title><rect x="75.0320%" y="181" width="0.0640%" height="15" fill="rgb(223,179,41)"/><text x="75.2820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.06%)</title><rect x="75.0354%" y="165" width="0.0605%" height="15" fill="rgb(218,9,34)"/><text x="75.2854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.11%)</title><rect x="74.9905%" y="197" width="0.1089%" height="15" fill="rgb(222,106,8)"/><text x="75.2405%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (68 samples, 0.12%)</title><rect x="75.0994%" y="197" width="0.1176%" height="15" fill="rgb(211,220,0)"/><text x="75.3494%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.07%)</title><rect x="75.1443%" y="181" width="0.0726%" height="15" fill="rgb(229,52,16)"/><text x="75.3943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.05%)</title><rect x="75.1668%" y="165" width="0.0501%" height="15" fill="rgb(212,155,18)"/><text x="75.4168%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (949 samples, 1.64%)</title><rect x="73.5885%" y="213" width="1.6406%" height="15" fill="rgb(242,21,14)"/><text x="73.8385%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (8 samples, 0.01%)</title><rect x="75.2291%" y="213" width="0.0138%" height="15" fill="rgb(222,19,48)"/><text x="75.4791%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (11 samples, 0.02%)</title><rect x="75.2429%" y="213" width="0.0190%" height="15" fill="rgb(232,45,27)"/><text x="75.4929%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode::encode (9 samples, 0.02%)</title><rect x="75.2619%" y="213" width="0.0156%" height="15" fill="rgb(249,103,42)"/><text x="75.5119%" y="223.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (12 samples, 0.02%)</title><rect x="75.2896%" y="213" width="0.0207%" height="15" fill="rgb(246,81,33)"/><text x="75.5396%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (6 samples, 0.01%)</title><rect x="75.2999%" y="197" width="0.0104%" height="15" fill="rgb(252,33,42)"/><text x="75.5499%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (7 samples, 0.01%)</title><rect x="75.3120%" y="213" width="0.0121%" height="15" fill="rgb(209,212,41)"/><text x="75.5620%" y="223.50"></text></g><g><title>async-redis`tokio::coop::Budget::decrement (7 samples, 0.01%)</title><rect x="75.3553%" y="197" width="0.0121%" height="15" fill="rgb(207,154,6)"/><text x="75.6053%" y="207.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.05%)</title><rect x="75.3241%" y="213" width="0.0536%" height="15" fill="rgb(223,64,47)"/><text x="75.5741%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (22 samples, 0.04%)</title><rect x="75.3795%" y="213" width="0.0380%" height="15" fill="rgb(211,161,38)"/><text x="75.6295%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (41 samples, 0.07%)</title><rect x="75.6180%" y="149" width="0.0709%" height="15" fill="rgb(219,138,40)"/><text x="75.8680%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (7 samples, 0.01%)</title><rect x="75.6924%" y="149" width="0.0121%" height="15" fill="rgb(241,228,46)"/><text x="75.9424%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (10 samples, 0.02%)</title><rect x="75.7045%" y="149" width="0.0173%" height="15" fill="rgb(223,209,38)"/><text x="75.9545%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,400 samples, 16.25%)</title><rect x="75.5852%" y="165" width="16.2500%" height="15" fill="rgb(236,164,45)"/><text x="75.8352%" y="175.50">async-redis`&lt;&amp;mio::net::t..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,321 samples, 16.11%)</title><rect x="75.7217%" y="149" width="16.1135%" height="15" fill="rgb(231,15,5)"/><text x="75.9717%" y="159.50">libsystem_kernel.dylib`__..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (19 samples, 0.03%)</title><rect x="91.9631%" y="149" width="0.0328%" height="15" fill="rgb(252,35,15)"/><text x="92.2131%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (90 samples, 0.16%)</title><rect x="91.8456%" y="165" width="0.1556%" height="15" fill="rgb(248,181,18)"/><text x="92.0956%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,558 samples, 16.52%)</title><rect x="75.4884%" y="197" width="16.5232%" height="15" fill="rgb(233,39,42)"/><text x="75.7384%" y="207.50">async-redis`&lt;tokio::net::t..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,538 samples, 16.49%)</title><rect x="75.5229%" y="181" width="16.4886%" height="15" fill="rgb(238,110,33)"/><text x="75.7729%" y="191.50">async-redis`tokio::io::dr..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (6 samples, 0.01%)</title><rect x="92.0012%" y="165" width="0.0104%" height="15" fill="rgb(233,195,10)"/><text x="92.2512%" y="175.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,609 samples, 16.61%)</title><rect x="75.4209%" y="213" width="16.6113%" height="15" fill="rgb(254,105,3)"/><text x="75.6709%" y="223.50">async-redis`tokio::io::uti..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (12 samples, 0.02%)</title><rect x="92.0115%" y="197" width="0.0207%" height="15" fill="rgb(221,225,9)"/><text x="92.2615%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (7 samples, 0.01%)</title><rect x="92.0824%" y="197" width="0.0121%" height="15" fill="rgb(224,227,45)"/><text x="92.3324%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (29 samples, 0.05%)</title><rect x="92.1014%" y="197" width="0.0501%" height="15" fill="rgb(229,198,43)"/><text x="92.3514%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (77 samples, 0.13%)</title><rect x="92.4213%" y="181" width="0.1331%" height="15" fill="rgb(206,209,35)"/><text x="92.6713%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (235 samples, 0.41%)</title><rect x="92.1516%" y="197" width="0.4063%" height="15" fill="rgb(245,195,53)"/><text x="92.4016%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (345 samples, 0.60%)</title><rect x="92.0323%" y="213" width="0.5964%" height="15" fill="rgb(240,92,26)"/><text x="92.2823%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (41 samples, 0.07%)</title><rect x="92.5578%" y="197" width="0.0709%" height="15" fill="rgb(207,40,23)"/><text x="92.8078%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (12 samples, 0.02%)</title><rect x="92.6080%" y="181" width="0.0207%" height="15" fill="rgb(223,111,35)"/><text x="92.8580%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.02%)</title><rect x="92.6131%" y="165" width="0.0156%" height="15" fill="rgb(229,147,28)"/><text x="92.8631%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::RawTask::from_raw (7 samples, 0.01%)</title><rect x="92.6287%" y="213" width="0.0121%" height="15" fill="rgb(211,29,28)"/><text x="92.8787%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.02%)</title><rect x="92.6408%" y="213" width="0.0156%" height="15" fill="rgb(228,72,33)"/><text x="92.8908%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (12 samples, 0.02%)</title><rect x="92.6633%" y="213" width="0.0207%" height="15" fill="rgb(205,214,31)"/><text x="92.9133%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.02%)</title><rect x="92.6650%" y="197" width="0.0190%" height="15" fill="rgb(224,111,15)"/><text x="92.9150%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (22 samples, 0.04%)</title><rect x="92.6944%" y="197" width="0.0380%" height="15" fill="rgb(253,21,26)"/><text x="92.9444%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (27 samples, 0.05%)</title><rect x="92.7324%" y="197" width="0.0467%" height="15" fill="rgb(245,139,43)"/><text x="92.9824%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (11 samples, 0.02%)</title><rect x="92.8586%" y="165" width="0.0190%" height="15" fill="rgb(252,170,7)"/><text x="93.1086%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (40 samples, 0.07%)</title><rect x="92.8154%" y="181" width="0.0691%" height="15" fill="rgb(231,118,14)"/><text x="93.0654%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (117 samples, 0.20%)</title><rect x="92.6840%" y="213" width="0.2023%" height="15" fill="rgb(238,83,0)"/><text x="92.9340%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (62 samples, 0.11%)</title><rect x="92.7791%" y="197" width="0.1072%" height="15" fill="rgb(221,39,39)"/><text x="93.0291%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.02%)</title><rect x="92.8897%" y="213" width="0.0173%" height="15" fill="rgb(222,119,46)"/><text x="93.1397%" y="223.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (80 samples, 0.14%)</title><rect x="92.9969%" y="197" width="0.1383%" height="15" fill="rgb(222,165,49)"/><text x="93.2469%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (35 samples, 0.06%)</title><rect x="93.0747%" y="181" width="0.0605%" height="15" fill="rgb(219,113,52)"/><text x="93.3247%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (141 samples, 0.24%)</title><rect x="92.9139%" y="213" width="0.2438%" height="15" fill="rgb(214,7,15)"/><text x="93.1639%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="93.1352%" y="197" width="0.0225%" height="15" fill="rgb(235,32,4)"/><text x="93.3852%" y="207.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (18 samples, 0.03%)</title><rect x="93.1577%" y="213" width="0.0311%" height="15" fill="rgb(238,90,54)"/><text x="93.4077%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (16 samples, 0.03%)</title><rect x="93.1888%" y="213" width="0.0277%" height="15" fill="rgb(213,208,19)"/><text x="93.4388%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (8 samples, 0.01%)</title><rect x="93.2165%" y="213" width="0.0138%" height="15" fill="rgb(233,156,4)"/><text x="93.4665%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (6 samples, 0.01%)</title><rect x="93.2355%" y="213" width="0.0104%" height="15" fill="rgb(207,194,5)"/><text x="93.4855%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (60 samples, 0.10%)</title><rect x="93.2545%" y="213" width="0.1037%" height="15" fill="rgb(206,111,30)"/><text x="93.5045%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.05%)</title><rect x="93.3046%" y="197" width="0.0536%" height="15" fill="rgb(243,70,54)"/><text x="93.5546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.05%)</title><rect x="93.3064%" y="181" width="0.0519%" height="15" fill="rgb(242,28,8)"/><text x="93.5564%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (55 samples, 0.10%)</title><rect x="93.4550%" y="181" width="0.0951%" height="15" fill="rgb(219,106,18)"/><text x="93.7050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (112 samples, 0.19%)</title><rect x="93.3582%" y="213" width="0.1936%" height="15" fill="rgb(244,222,10)"/><text x="93.6082%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (84 samples, 0.15%)</title><rect x="93.4066%" y="197" width="0.1452%" height="15" fill="rgb(236,179,52)"/><text x="93.6566%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.01%)</title><rect x="93.5518%" y="213" width="0.0121%" height="15" fill="rgb(213,23,39)"/><text x="93.8018%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36,160 samples, 62.51%)</title><rect x="31.0929%" y="229" width="62.5108%" height="15" fill="rgb(238,48,10)"/><text x="31.3429%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.04%)</title><rect x="93.5657%" y="213" width="0.0380%" height="15" fill="rgb(251,196,23)"/><text x="93.8157%" y="223.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (32 samples, 0.06%)</title><rect x="93.6124%" y="229" width="0.0553%" height="15" fill="rgb(250,152,24)"/><text x="93.8624%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (22 samples, 0.04%)</title><rect x="94.2727%" y="165" width="0.0380%" height="15" fill="rgb(209,150,17)"/><text x="94.5227%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (9 samples, 0.02%)</title><rect x="94.2952%" y="149" width="0.0156%" height="15" fill="rgb(234,202,34)"/><text x="94.5452%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (7 samples, 0.01%)</title><rect x="94.3142%" y="165" width="0.0121%" height="15" fill="rgb(253,148,53)"/><text x="94.5642%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (7 samples, 0.01%)</title><rect x="94.3142%" y="149" width="0.0121%" height="15" fill="rgb(218,129,16)"/><text x="94.5642%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (11 samples, 0.02%)</title><rect x="94.3263%" y="165" width="0.0190%" height="15" fill="rgb(216,85,19)"/><text x="94.5763%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (266 samples, 0.46%)</title><rect x="93.8872%" y="197" width="0.4598%" height="15" fill="rgb(235,228,7)"/><text x="94.1372%" y="207.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (261 samples, 0.45%)</title><rect x="93.8959%" y="181" width="0.4512%" height="15" fill="rgb(245,175,0)"/><text x="94.1459%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (289 samples, 0.50%)</title><rect x="93.8509%" y="213" width="0.4996%" height="15" fill="rgb(208,168,36)"/><text x="94.1009%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="94.4404%" y="181" width="0.0138%" height="15" fill="rgb(246,171,24)"/><text x="94.6904%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (8 samples, 0.01%)</title><rect x="94.4404%" y="165" width="0.0138%" height="15" fill="rgb(215,142,24)"/><text x="94.6904%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (20 samples, 0.03%)</title><rect x="94.4681%" y="165" width="0.0346%" height="15" fill="rgb(250,187,7)"/><text x="94.7181%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (38 samples, 0.07%)</title><rect x="94.5078%" y="165" width="0.0657%" height="15" fill="rgb(228,66,33)"/><text x="94.7578%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.02%)</title><rect x="94.6600%" y="149" width="0.0242%" height="15" fill="rgb(234,215,21)"/><text x="94.9100%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (89 samples, 0.15%)</title><rect x="94.5735%" y="165" width="0.1539%" height="15" fill="rgb(222,191,20)"/><text x="94.8235%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (25 samples, 0.04%)</title><rect x="94.6842%" y="149" width="0.0432%" height="15" fill="rgb(245,79,54)"/><text x="94.9342%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (210 samples, 0.36%)</title><rect x="94.3799%" y="197" width="0.3630%" height="15" fill="rgb(240,10,37)"/><text x="94.6299%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (163 samples, 0.28%)</title><rect x="94.4612%" y="181" width="0.2818%" height="15" fill="rgb(214,192,32)"/><text x="94.7112%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (9 samples, 0.02%)</title><rect x="94.7274%" y="165" width="0.0156%" height="15" fill="rgb(209,36,54)"/><text x="94.9774%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (235 samples, 0.41%)</title><rect x="94.3592%" y="213" width="0.4063%" height="15" fill="rgb(220,10,11)"/><text x="94.6092%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="94.7499%" y="197" width="0.0156%" height="15" fill="rgb(221,106,17)"/><text x="94.9999%" y="207.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (9 samples, 0.02%)</title><rect x="94.7654%" y="213" width="0.0156%" height="15" fill="rgb(251,142,44)"/><text x="95.0154%" y="223.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.02%)</title><rect x="94.7810%" y="213" width="0.0173%" height="15" fill="rgb(238,13,15)"/><text x="95.0310%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="94.8432%" y="197" width="0.0104%" height="15" fill="rgb(208,107,27)"/><text x="95.0932%" y="207.50"></text></g><g><title>async-redis`tokio::coop::RestoreOnPending::made_progress (6 samples, 0.01%)</title><rect x="94.8639%" y="197" width="0.0104%" height="15" fill="rgb(205,136,37)"/><text x="95.1139%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (13 samples, 0.02%)</title><rect x="94.9625%" y="181" width="0.0225%" height="15" fill="rgb(250,205,27)"/><text x="95.2125%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (72 samples, 0.12%)</title><rect x="95.0040%" y="181" width="0.1245%" height="15" fill="rgb(210,80,43)"/><text x="95.2540%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (160 samples, 0.28%)</title><rect x="95.1388%" y="181" width="0.2766%" height="15" fill="rgb(247,160,36)"/><text x="95.3888%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (59 samples, 0.10%)</title><rect x="95.3134%" y="165" width="0.1020%" height="15" fill="rgb(234,13,49)"/><text x="95.5634%" y="175.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (26 samples, 0.04%)</title><rect x="95.4154%" y="181" width="0.0449%" height="15" fill="rgb(234,122,0)"/><text x="95.6654%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="95.4465%" y="165" width="0.0138%" height="15" fill="rgb(207,146,38)"/><text x="95.6965%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (8 samples, 0.01%)</title><rect x="95.4465%" y="149" width="0.0138%" height="15" fill="rgb(207,177,25)"/><text x="95.6965%" y="159.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (342 samples, 0.59%)</title><rect x="94.8743%" y="197" width="0.5912%" height="15" fill="rgb(211,178,42)"/><text x="95.1243%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (10 samples, 0.02%)</title><rect x="95.4690%" y="197" width="0.0173%" height="15" fill="rgb(230,69,54)"/><text x="95.7190%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (413 samples, 0.71%)</title><rect x="94.7983%" y="213" width="0.7140%" height="15" fill="rgb(214,135,41)"/><text x="95.0483%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.03%)</title><rect x="95.4863%" y="197" width="0.0259%" height="15" fill="rgb(237,67,25)"/><text x="95.7363%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (15 samples, 0.03%)</title><rect x="95.5122%" y="213" width="0.0259%" height="15" fill="rgb(222,189,50)"/><text x="95.7622%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (18 samples, 0.03%)</title><rect x="95.5382%" y="213" width="0.0311%" height="15" fill="rgb(245,148,34)"/><text x="95.7882%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,109 samples, 1.92%)</title><rect x="93.6729%" y="229" width="1.9172%" height="15" fill="rgb(222,29,6)"/><text x="93.9229%" y="239.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="95.5693%" y="213" width="0.0207%" height="15" fill="rgb(221,189,43)"/><text x="95.8193%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (18 samples, 0.03%)</title><rect x="95.5900%" y="229" width="0.0311%" height="15" fill="rgb(207,36,27)"/><text x="95.8400%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (37 samples, 0.06%)</title><rect x="95.6263%" y="229" width="0.0640%" height="15" fill="rgb(217,90,24)"/><text x="95.8763%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="95.6782%" y="213" width="0.0121%" height="15" fill="rgb(224,66,35)"/><text x="95.9282%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (8 samples, 0.01%)</title><rect x="95.6920%" y="229" width="0.0138%" height="15" fill="rgb(221,13,50)"/><text x="95.9420%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="95.7058%" y="229" width="0.0138%" height="15" fill="rgb(236,68,49)"/><text x="95.9558%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (25 samples, 0.04%)</title><rect x="95.7266%" y="229" width="0.0432%" height="15" fill="rgb(229,146,28)"/><text x="95.9766%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (58 samples, 0.10%)</title><rect x="95.8390%" y="197" width="0.1003%" height="15" fill="rgb(225,31,38)"/><text x="96.0890%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (116 samples, 0.20%)</title><rect x="95.9876%" y="165" width="0.2005%" height="15" fill="rgb(250,208,3)"/><text x="96.2376%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (80 samples, 0.14%)</title><rect x="96.0499%" y="149" width="0.1383%" height="15" fill="rgb(246,54,23)"/><text x="96.2999%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (12 samples, 0.02%)</title><rect x="96.2020%" y="165" width="0.0207%" height="15" fill="rgb(243,76,11)"/><text x="96.4520%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (153 samples, 0.26%)</title><rect x="95.9651%" y="181" width="0.2645%" height="15" fill="rgb(245,21,50)"/><text x="96.2151%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (12 samples, 0.02%)</title><rect x="96.2348%" y="181" width="0.0207%" height="15" fill="rgb(228,9,43)"/><text x="96.4848%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (183 samples, 0.32%)</title><rect x="95.9496%" y="197" width="0.3164%" height="15" fill="rgb(208,100,47)"/><text x="96.1996%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (293 samples, 0.51%)</title><rect x="95.7767%" y="213" width="0.5065%" height="15" fill="rgb(232,26,8)"/><text x="96.0267%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (301 samples, 0.52%)</title><rect x="95.7698%" y="229" width="0.5203%" height="15" fill="rgb(216,166,38)"/><text x="96.0198%" y="239.50"></text></g><g><title>async-redis`alloc::collections::btree::search::search_tree (265 samples, 0.46%)</title><rect x="96.3247%" y="229" width="0.4581%" height="15" fill="rgb(251,202,51)"/><text x="96.5747%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (20 samples, 0.03%)</title><rect x="96.7828%" y="229" width="0.0346%" height="15" fill="rgb(254,216,34)"/><text x="97.0328%" y="239.50"></text></g><g><title>async-redis`async_redis::protocol::encode::encode (13 samples, 0.02%)</title><rect x="96.8174%" y="229" width="0.0225%" height="15" fill="rgb(251,32,27)"/><text x="97.0674%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (7 samples, 0.01%)</title><rect x="96.8399%" y="229" width="0.0121%" height="15" fill="rgb(208,127,28)"/><text x="97.0899%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (26 samples, 0.04%)</title><rect x="96.8520%" y="229" width="0.0449%" height="15" fill="rgb(224,137,22)"/><text x="97.1020%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (20 samples, 0.03%)</title><rect x="96.8969%" y="229" width="0.0346%" height="15" fill="rgb(254,70,32)"/><text x="97.1469%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (10 samples, 0.02%)</title><rect x="97.0646%" y="213" width="0.0173%" height="15" fill="rgb(229,75,37)"/><text x="97.3146%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (14 samples, 0.02%)</title><rect x="97.0819%" y="213" width="0.0242%" height="15" fill="rgb(252,64,23)"/><text x="97.3319%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.02%)</title><rect x="97.0871%" y="197" width="0.0190%" height="15" fill="rgb(232,162,48)"/><text x="97.3371%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (15 samples, 0.03%)</title><rect x="97.2513%" y="181" width="0.0259%" height="15" fill="rgb(246,160,12)"/><text x="97.5013%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (35 samples, 0.06%)</title><rect x="97.2185%" y="197" width="0.0605%" height="15" fill="rgb(247,166,0)"/><text x="97.4685%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (8 samples, 0.01%)</title><rect x="97.2790%" y="197" width="0.0138%" height="15" fill="rgb(249,219,21)"/><text x="97.5290%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (8 samples, 0.01%)</title><rect x="97.2790%" y="181" width="0.0138%" height="15" fill="rgb(205,209,3)"/><text x="97.5290%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (56 samples, 0.10%)</title><rect x="97.2928%" y="197" width="0.0968%" height="15" fill="rgb(243,44,1)"/><text x="97.5428%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (165 samples, 0.29%)</title><rect x="97.1061%" y="213" width="0.2852%" height="15" fill="rgb(206,159,16)"/><text x="97.3561%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (283 samples, 0.49%)</title><rect x="96.9315%" y="229" width="0.4892%" height="15" fill="rgb(244,77,30)"/><text x="97.1815%" y="239.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (12 samples, 0.02%)</title><rect x="97.4000%" y="213" width="0.0207%" height="15" fill="rgb(218,69,12)"/><text x="97.6500%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.05%)</title><rect x="97.4311%" y="229" width="0.0536%" height="15" fill="rgb(212,87,7)"/><text x="97.6811%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (10 samples, 0.02%)</title><rect x="97.4847%" y="229" width="0.0173%" height="15" fill="rgb(245,114,25)"/><text x="97.7347%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 0.01%)</title><rect x="97.5106%" y="229" width="0.0138%" height="15" fill="rgb(210,61,42)"/><text x="97.7606%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (10 samples, 0.02%)</title><rect x="97.5331%" y="229" width="0.0173%" height="15" fill="rgb(211,52,33)"/><text x="97.7831%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.02%)</title><rect x="97.5538%" y="213" width="0.0156%" height="15" fill="rgb(234,58,33)"/><text x="97.8038%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (11 samples, 0.02%)</title><rect x="97.5694%" y="213" width="0.0190%" height="15" fill="rgb(220,115,36)"/><text x="97.8194%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (28 samples, 0.05%)</title><rect x="97.6679%" y="149" width="0.0484%" height="15" fill="rgb(243,153,54)"/><text x="97.9179%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (48 samples, 0.08%)</title><rect x="97.6351%" y="181" width="0.0830%" height="15" fill="rgb(251,47,18)"/><text x="97.8851%" y="191.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (31 samples, 0.05%)</title><rect x="97.6645%" y="165" width="0.0536%" height="15" fill="rgb(242,102,42)"/><text x="97.9145%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (64 samples, 0.11%)</title><rect x="97.6092%" y="197" width="0.1106%" height="15" fill="rgb(234,31,38)"/><text x="97.8592%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (100 samples, 0.17%)</title><rect x="97.5504%" y="229" width="0.1729%" height="15" fill="rgb(221,117,51)"/><text x="97.8004%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (78 samples, 0.13%)</title><rect x="97.5884%" y="213" width="0.1348%" height="15" fill="rgb(212,20,18)"/><text x="97.8384%" y="223.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (8 samples, 0.01%)</title><rect x="97.7336%" y="229" width="0.0138%" height="15" fill="rgb(245,133,36)"/><text x="97.9836%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (22 samples, 0.04%)</title><rect x="97.8339%" y="197" width="0.0380%" height="15" fill="rgb(212,6,19)"/><text x="98.0839%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (70 samples, 0.12%)</title><rect x="97.7527%" y="229" width="0.1210%" height="15" fill="rgb(218,1,36)"/><text x="98.0027%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (31 samples, 0.05%)</title><rect x="97.8201%" y="213" width="0.0536%" height="15" fill="rgb(246,84,54)"/><text x="98.0701%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (16 samples, 0.03%)</title><rect x="97.8737%" y="229" width="0.0277%" height="15" fill="rgb(242,110,6)"/><text x="98.1237%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.06%)</title><rect x="97.9774%" y="213" width="0.0570%" height="15" fill="rgb(214,47,5)"/><text x="98.2274%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="98.0206%" y="197" width="0.0138%" height="15" fill="rgb(218,159,25)"/><text x="98.2706%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (11 samples, 0.02%)</title><rect x="98.0344%" y="213" width="0.0190%" height="15" fill="rgb(215,211,28)"/><text x="98.2844%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (99 samples, 0.17%)</title><rect x="97.9048%" y="229" width="0.1711%" height="15" fill="rgb(238,59,32)"/><text x="98.1548%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="98.0535%" y="213" width="0.0225%" height="15" fill="rgb(226,82,3)"/><text x="98.3035%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (12 samples, 0.02%)</title><rect x="98.0828%" y="229" width="0.0207%" height="15" fill="rgb(240,164,32)"/><text x="98.3328%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (250 samples, 0.43%)</title><rect x="98.1503%" y="197" width="0.4322%" height="15" fill="rgb(232,46,7)"/><text x="98.4003%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (204 samples, 0.35%)</title><rect x="98.2298%" y="181" width="0.3527%" height="15" fill="rgb(229,129,53)"/><text x="98.4798%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (22 samples, 0.04%)</title><rect x="98.8314%" y="165" width="0.0380%" height="15" fill="rgb(234,188,29)"/><text x="99.0814%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (142 samples, 0.25%)</title><rect x="98.6568%" y="181" width="0.2455%" height="15" fill="rgb(246,141,4)"/><text x="98.9068%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.03%)</title><rect x="98.8694%" y="165" width="0.0328%" height="15" fill="rgb(229,23,39)"/><text x="99.1194%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (198 samples, 0.34%)</title><rect x="98.5824%" y="197" width="0.3423%" height="15" fill="rgb(206,12,3)"/><text x="98.8324%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (13 samples, 0.02%)</title><rect x="98.9023%" y="181" width="0.0225%" height="15" fill="rgb(252,226,20)"/><text x="99.1523%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (9 samples, 0.02%)</title><rect x="98.9247%" y="197" width="0.0156%" height="15" fill="rgb(216,123,35)"/><text x="99.1747%" y="207.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (10 samples, 0.02%)</title><rect x="98.9403%" y="197" width="0.0173%" height="15" fill="rgb(212,68,40)"/><text x="99.1903%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (473 samples, 0.82%)</title><rect x="98.1416%" y="213" width="0.8177%" height="15" fill="rgb(254,125,32)"/><text x="98.3916%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (18 samples, 0.03%)</title><rect x="98.9593%" y="213" width="0.0311%" height="15" fill="rgb(253,97,22)"/><text x="99.2093%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (535 samples, 0.92%)</title><rect x="98.1036%" y="229" width="0.9249%" height="15" fill="rgb(241,101,14)"/><text x="98.3536%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (18 samples, 0.03%)</title><rect x="98.9973%" y="213" width="0.0311%" height="15" fill="rgb(238,103,29)"/><text x="99.2473%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::new (9 samples, 0.02%)</title><rect x="99.0285%" y="229" width="0.0156%" height="15" fill="rgb(233,195,47)"/><text x="99.2785%" y="239.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (9 samples, 0.02%)</title><rect x="99.0285%" y="213" width="0.0156%" height="15" fill="rgb(246,218,30)"/><text x="99.2785%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (9 samples, 0.02%)</title><rect x="99.0285%" y="197" width="0.0156%" height="15" fill="rgb(219,145,47)"/><text x="99.2785%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (6 samples, 0.01%)</title><rect x="99.0336%" y="181" width="0.0104%" height="15" fill="rgb(243,12,26)"/><text x="99.2836%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.04%)</title><rect x="99.0475%" y="229" width="0.0363%" height="15" fill="rgb(214,87,16)"/><text x="99.2975%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.03%)</title><rect x="99.0890%" y="229" width="0.0346%" height="15" fill="rgb(208,99,42)"/><text x="99.3390%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (40,721 samples, 70.40%)</title><rect x="28.7297%" y="245" width="70.3955%" height="15" fill="rgb(253,99,2)"/><text x="28.9797%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (17 samples, 0.03%)</title><rect x="99.1339%" y="245" width="0.0294%" height="15" fill="rgb(220,168,23)"/><text x="99.3839%" y="255.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (6 samples, 0.01%)</title><rect x="99.1892%" y="245" width="0.0104%" height="15" fill="rgb(242,38,24)"/><text x="99.4392%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (21 samples, 0.04%)</title><rect x="99.1996%" y="245" width="0.0363%" height="15" fill="rgb(225,182,9)"/><text x="99.4496%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (7 samples, 0.01%)</title><rect x="99.2463%" y="245" width="0.0121%" height="15" fill="rgb(243,178,37)"/><text x="99.4963%" y="255.50"></text></g><g><title>async-redis`tokio::time::instant::Instant::now (8 samples, 0.01%)</title><rect x="99.2705%" y="245" width="0.0138%" height="15" fill="rgb(232,139,19)"/><text x="99.5205%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (13 samples, 0.02%)</title><rect x="99.2843%" y="245" width="0.0225%" height="15" fill="rgb(225,201,24)"/><text x="99.5343%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,947 samples, 70.79%)</title><rect x="28.5240%" y="261" width="70.7862%" height="15" fill="rgb(221,47,46)"/><text x="28.7740%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (10 samples, 0.02%)</title><rect x="99.3102%" y="261" width="0.0173%" height="15" fill="rgb(249,23,13)"/><text x="99.5602%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (25 samples, 0.04%)</title><rect x="99.3275%" y="261" width="0.0432%" height="15" fill="rgb(219,9,5)"/><text x="99.5775%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (33 samples, 0.06%)</title><rect x="99.3707%" y="261" width="0.0570%" height="15" fill="rgb(254,171,16)"/><text x="99.6207%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (41,186 samples, 71.20%)</title><rect x="28.2353%" y="277" width="71.1994%" height="15" fill="rgb(230,171,20)"/><text x="28.4853%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (13 samples, 0.02%)</title><rect x="99.4347%" y="277" width="0.0225%" height="15" fill="rgb(210,71,41)"/><text x="99.6847%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (6 samples, 0.01%)</title><rect x="99.4572%" y="277" width="0.0104%" height="15" fill="rgb(206,173,20)"/><text x="99.7072%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (17 samples, 0.03%)</title><rect x="99.4676%" y="277" width="0.0294%" height="15" fill="rgb(233,88,34)"/><text x="99.7176%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (41,383 samples, 71.54%)</title><rect x="27.9795%" y="293" width="71.5400%" height="15" fill="rgb(223,209,46)"/><text x="28.2295%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="99.4969%" y="277" width="0.0225%" height="15" fill="rgb(250,43,18)"/><text x="99.7469%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (16 samples, 0.03%)</title><rect x="99.5211%" y="293" width="0.0277%" height="15" fill="rgb(208,13,10)"/><text x="99.7711%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (32 samples, 0.06%)</title><rect x="99.5488%" y="293" width="0.0553%" height="15" fill="rgb(212,200,36)"/><text x="99.7988%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (55 samples, 0.10%)</title><rect x="99.6041%" y="293" width="0.0951%" height="15" fill="rgb(225,90,30)"/><text x="99.8541%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.01%)</title><rect x="99.7182%" y="293" width="0.0121%" height="15" fill="rgb(236,182,39)"/><text x="99.9682%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (43,071 samples, 74.46%)</title><rect x="25.2930%" y="309" width="74.4580%" height="15" fill="rgb(212,144,35)"/><text x="25.5430%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.02%)</title><rect x="99.7303%" y="293" width="0.0207%" height="15" fill="rgb(228,63,44)"/><text x="99.9803%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (57,751 samples, 99.84%)</title><rect x="0.1210%" y="325" width="99.8358%" height="15" fill="rgb(228,109,6)"/><text x="0.3710%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (119 samples, 0.21%)</title><rect x="99.7511%" y="309" width="0.2057%" height="15" fill="rgb(238,117,24)"/><text x="100.0011%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (8 samples, 0.01%)</title><rect x="99.9568%" y="325" width="0.0138%" height="15" fill="rgb(242,26,26)"/><text x="100.2068%" y="335.50"></text></g><g><title>all (57,846 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(221,92,48)"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (57,800 samples, 99.92%)</title><rect x="0.0795%" y="485" width="99.9205%" height="15" fill="rgb(209,209,32)"/><text x="0.3295%" y="495.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (57,800 samples, 99.92%)</title><rect x="0.0795%" y="469" width="99.9205%" height="15" fill="rgb(221,70,22)"/><text x="0.3295%" y="479.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (57,800 samples, 99.92%)</title><rect x="0.0795%" y="453" width="99.9205%" height="15" fill="rgb(248,145,5)"/><text x="0.3295%" y="463.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (57,800 samples, 99.92%)</title><rect x="0.0795%" y="437" width="99.9205%" height="15" fill="rgb(226,116,26)"/><text x="0.3295%" y="447.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (57,800 samples, 99.92%)</title><rect x="0.0795%" y="421" width="99.9205%" height="15" fill="rgb(244,5,17)"/><text x="0.3295%" y="431.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (57,800 samples, 99.92%)</title><rect x="0.0795%" y="405" width="99.9205%" height="15" fill="rgb(252,159,33)"/><text x="0.3295%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (57,800 samples, 99.92%)</title><rect x="0.0795%" y="389" width="99.9205%" height="15" fill="rgb(206,71,0)"/><text x="0.3295%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (57,800 samples, 99.92%)</title><rect x="0.0795%" y="373" width="99.9205%" height="15" fill="rgb(233,118,54)"/><text x="0.3295%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (57,800 samples, 99.92%)</title><rect x="0.0795%" y="357" width="99.9205%" height="15" fill="rgb(234,83,48)"/><text x="0.3295%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (57,800 samples, 99.92%)</title><rect x="0.0795%" y="341" width="99.9205%" height="15" fill="rgb(228,3,54)"/><text x="0.3295%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (17 samples, 0.03%)</title><rect x="99.9706%" y="325" width="0.0294%" height="15" fill="rgb(226,155,13)"/><text x="100.2206%" y="335.50"></text></g></svg></svg>