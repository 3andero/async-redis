<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (21 samples, 0.03%)</title><rect x="0.0130%" y="245" width="0.0273%" height="15" fill="rgb(227,0,7)"/><text x="0.2630%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (18 samples, 0.02%)</title><rect x="0.0169%" y="229" width="0.0234%" height="15" fill="rgb(217,0,24)"/><text x="0.2669%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.04%)</title><rect x="0.0091%" y="277" width="0.0415%" height="15" fill="rgb(221,193,54)"/><text x="0.2591%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.04%)</title><rect x="0.0091%" y="261" width="0.0415%" height="15" fill="rgb(248,212,6)"/><text x="0.2591%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.04%)</title><rect x="0.0078%" y="325" width="0.0441%" height="15" fill="rgb(208,68,35)"/><text x="0.2578%" y="335.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.04%)</title><rect x="0.0078%" y="309" width="0.0441%" height="15" fill="rgb(232,128,0)"/><text x="0.2578%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (34 samples, 0.04%)</title><rect x="0.0078%" y="293" width="0.0441%" height="15" fill="rgb(207,160,47)"/><text x="0.2578%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (41 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0532%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (41 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0532%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (41 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0532%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.05%)</title><rect x="0.0078%" y="341" width="0.0454%" height="15" fill="rgb(250,228,42)"/><text x="0.2578%" y="351.50"></text></g><g><title>async-redis`0x1 (42 samples, 0.05%)</title><rect x="0.0000%" y="501" width="0.0545%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="511.50"></text></g><g><title>libdyld.dylib`start (42 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0545%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="495.50"></text></g><g><title>async-redis`main (42 samples, 0.05%)</title><rect x="0.0000%" y="469" width="0.0545%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (42 samples, 0.05%)</title><rect x="0.0000%" y="453" width="0.0545%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (42 samples, 0.05%)</title><rect x="0.0000%" y="437" width="0.0545%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 0.05%)</title><rect x="0.0000%" y="421" width="0.0545%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`async_redis::main (42 samples, 0.05%)</title><rect x="0.0000%" y="405" width="0.0545%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (12 samples, 0.02%)</title><rect x="0.0584%" y="325" width="0.0156%" height="15" fill="rgb(221,200,47)"/><text x="0.3084%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (9 samples, 0.01%)</title><rect x="0.0792%" y="325" width="0.0117%" height="15" fill="rgb(226,26,5)"/><text x="0.3292%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (25 samples, 0.03%)</title><rect x="0.8098%" y="309" width="0.0324%" height="15" fill="rgb(249,33,26)"/><text x="1.0598%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.02%)</title><rect x="0.8630%" y="309" width="0.0221%" height="15" fill="rgb(235,183,28)"/><text x="1.1130%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (10 samples, 0.01%)</title><rect x="0.8850%" y="309" width="0.0130%" height="15" fill="rgb(221,5,38)"/><text x="1.1350%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (253 samples, 0.33%)</title><rect x="0.8980%" y="309" width="0.3283%" height="15" fill="rgb(247,18,42)"/><text x="1.1480%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (17 samples, 0.02%)</title><rect x="3.5907%" y="277" width="0.0221%" height="15" fill="rgb(241,131,45)"/><text x="3.8407%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (17 samples, 0.02%)</title><rect x="3.6244%" y="277" width="0.0221%" height="15" fill="rgb(249,31,29)"/><text x="3.8744%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (17 samples, 0.02%)</title><rect x="3.9022%" y="261" width="0.0221%" height="15" fill="rgb(225,111,53)"/><text x="4.1522%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.03%)</title><rect x="3.9242%" y="261" width="0.0324%" height="15" fill="rgb(238,160,17)"/><text x="4.1742%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,573 samples, 3.34%)</title><rect x="3.9567%" y="261" width="3.3390%" height="15" fill="rgb(214,148,48)"/><text x="4.2067%" y="271.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (17 samples, 0.02%)</title><rect x="7.4916%" y="245" width="0.0221%" height="15" fill="rgb(232,36,49)"/><text x="7.7416%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (108 samples, 0.14%)</title><rect x="7.5136%" y="229" width="0.1402%" height="15" fill="rgb(209,103,24)"/><text x="7.7636%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (114 samples, 0.15%)</title><rect x="7.5136%" y="245" width="0.1479%" height="15" fill="rgb(229,88,8)"/><text x="7.7636%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (111 samples, 0.14%)</title><rect x="7.6616%" y="245" width="0.1440%" height="15" fill="rgb(213,181,19)"/><text x="7.9116%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (437 samples, 0.57%)</title><rect x="7.2969%" y="261" width="0.5671%" height="15" fill="rgb(254,191,54)"/><text x="7.5469%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (45 samples, 0.06%)</title><rect x="7.8056%" y="245" width="0.0584%" height="15" fill="rgb(241,83,37)"/><text x="8.0556%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (14 samples, 0.02%)</title><rect x="7.8640%" y="261" width="0.0182%" height="15" fill="rgb(233,36,39)"/><text x="8.1140%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (13 samples, 0.02%)</title><rect x="7.8822%" y="261" width="0.0169%" height="15" fill="rgb(226,3,54)"/><text x="8.1322%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (3,310 samples, 4.30%)</title><rect x="3.6465%" y="277" width="4.2954%" height="15" fill="rgb(245,192,40)"/><text x="3.8965%" y="287.50">async..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (33 samples, 0.04%)</title><rect x="7.8990%" y="261" width="0.0428%" height="15" fill="rgb(238,167,29)"/><text x="8.1490%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (13 samples, 0.02%)</title><rect x="7.9419%" y="277" width="0.0169%" height="15" fill="rgb(232,182,51)"/><text x="8.1919%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (26 samples, 0.03%)</title><rect x="7.9626%" y="277" width="0.0337%" height="15" fill="rgb(231,60,39)"/><text x="8.2126%" y="287.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="8.1819%" y="245" width="0.0130%" height="15" fill="rgb(208,69,12)"/><text x="8.4319%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (22 samples, 0.03%)</title><rect x="8.2261%" y="245" width="0.0285%" height="15" fill="rgb(235,93,37)"/><text x="8.4761%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (12 samples, 0.02%)</title><rect x="8.2546%" y="245" width="0.0156%" height="15" fill="rgb(213,116,39)"/><text x="8.5046%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (13 samples, 0.02%)</title><rect x="8.2702%" y="245" width="0.0169%" height="15" fill="rgb(222,207,29)"/><text x="8.5202%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="8.7205%" y="229" width="0.0169%" height="15" fill="rgb(206,96,30)"/><text x="8.9705%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (8 samples, 0.01%)</title><rect x="8.7594%" y="229" width="0.0104%" height="15" fill="rgb(218,138,4)"/><text x="9.0094%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (17 samples, 0.02%)</title><rect x="8.7724%" y="229" width="0.0221%" height="15" fill="rgb(250,191,14)"/><text x="9.0224%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (74 samples, 0.10%)</title><rect x="8.7944%" y="229" width="0.0960%" height="15" fill="rgb(239,60,40)"/><text x="9.0444%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (21 samples, 0.03%)</title><rect x="9.0332%" y="213" width="0.0273%" height="15" fill="rgb(206,27,48)"/><text x="9.2832%" y="223.50"></text></g><g><title> 32]&gt;::default (21 samples, 0.03%)</title><rect x="9.0332%" y="197" width="0.0273%" height="15" fill="rgb(225,35,8)"/><text x="9.2832%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (102 samples, 0.13%)</title><rect x="9.0605%" y="213" width="0.1324%" height="15" fill="rgb(250,213,24)"/><text x="9.3105%" y="223.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (8 samples, 0.01%)</title><rect x="9.2266%" y="197" width="0.0104%" height="15" fill="rgb(247,123,22)"/><text x="9.4766%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (17 samples, 0.02%)</title><rect x="9.2370%" y="197" width="0.0221%" height="15" fill="rgb(231,138,38)"/><text x="9.4870%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (95 samples, 0.12%)</title><rect x="9.2590%" y="197" width="0.1233%" height="15" fill="rgb(231,145,46)"/><text x="9.5090%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (18 samples, 0.02%)</title><rect x="9.4290%" y="165" width="0.0234%" height="15" fill="rgb(251,118,11)"/><text x="9.6790%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (17 samples, 0.02%)</title><rect x="9.4524%" y="165" width="0.0221%" height="15" fill="rgb(217,147,25)"/><text x="9.7024%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (73 samples, 0.09%)</title><rect x="9.4044%" y="181" width="0.0947%" height="15" fill="rgb(247,81,37)"/><text x="9.6544%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.02%)</title><rect x="9.4744%" y="165" width="0.0247%" height="15" fill="rgb(209,12,38)"/><text x="9.7244%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (9 samples, 0.01%)</title><rect x="9.4991%" y="181" width="0.0117%" height="15" fill="rgb(227,1,9)"/><text x="9.7491%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (235 samples, 0.30%)</title><rect x="9.2097%" y="213" width="0.3050%" height="15" fill="rgb(248,47,43)"/><text x="9.4597%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (102 samples, 0.13%)</title><rect x="9.3823%" y="197" width="0.1324%" height="15" fill="rgb(221,10,30)"/><text x="9.6323%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (488 samples, 0.63%)</title><rect x="8.8905%" y="229" width="0.6333%" height="15" fill="rgb(210,229,1)"/><text x="9.1405%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (9 samples, 0.01%)</title><rect x="9.5237%" y="229" width="0.0117%" height="15" fill="rgb(222,148,37)"/><text x="9.7737%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (3,923 samples, 5.09%)</title><rect x="8.2870%" y="245" width="5.0908%" height="15" fill="rgb(234,67,33)"/><text x="8.5370%" y="255.50">async-..</text></g><g><title>libsystem_kernel.dylib`kevent (2,961 samples, 3.84%)</title><rect x="9.5354%" y="229" width="3.8425%" height="15" fill="rgb(247,98,35)"/><text x="9.7854%" y="239.50">libs..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (12 samples, 0.02%)</title><rect x="13.3779%" y="245" width="0.0156%" height="15" fill="rgb(247,138,52)"/><text x="13.6279%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (18 samples, 0.02%)</title><rect x="13.4402%" y="213" width="0.0234%" height="15" fill="rgb(213,79,30)"/><text x="13.6902%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (86 samples, 0.11%)</title><rect x="13.4635%" y="213" width="0.1116%" height="15" fill="rgb(246,177,23)"/><text x="13.7135%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (135 samples, 0.18%)</title><rect x="13.4259%" y="229" width="0.1752%" height="15" fill="rgb(230,62,27)"/><text x="13.6759%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.03%)</title><rect x="13.5751%" y="213" width="0.0260%" height="15" fill="rgb(216,154,8)"/><text x="13.8251%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (159 samples, 0.21%)</title><rect x="13.3974%" y="245" width="0.2063%" height="15" fill="rgb(244,35,45)"/><text x="13.6474%" y="255.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (4,243 samples, 5.51%)</title><rect x="8.1404%" y="261" width="5.5061%" height="15" fill="rgb(251,115,12)"/><text x="8.3904%" y="271.50">async-r..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (33 samples, 0.04%)</title><rect x="13.6037%" y="245" width="0.0428%" height="15" fill="rgb(240,54,50)"/><text x="13.8537%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (19 samples, 0.02%)</title><rect x="13.6465%" y="261" width="0.0247%" height="15" fill="rgb(233,84,52)"/><text x="13.8965%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (49 samples, 0.06%)</title><rect x="13.6712%" y="261" width="0.0636%" height="15" fill="rgb(207,117,47)"/><text x="13.9212%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (11 samples, 0.01%)</title><rect x="13.7348%" y="261" width="0.0143%" height="15" fill="rgb(249,43,39)"/><text x="13.9848%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (33 samples, 0.04%)</title><rect x="13.7490%" y="261" width="0.0428%" height="15" fill="rgb(209,38,44)"/><text x="13.9990%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (107 samples, 0.14%)</title><rect x="13.8671%" y="245" width="0.1389%" height="15" fill="rgb(236,212,23)"/><text x="14.1171%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (30 samples, 0.04%)</title><rect x="14.0060%" y="245" width="0.0389%" height="15" fill="rgb(242,79,21)"/><text x="14.2560%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (15 samples, 0.02%)</title><rect x="14.0254%" y="229" width="0.0195%" height="15" fill="rgb(211,96,35)"/><text x="14.2754%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (64 samples, 0.08%)</title><rect x="14.0449%" y="245" width="0.0831%" height="15" fill="rgb(253,215,40)"/><text x="14.2949%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (33 samples, 0.04%)</title><rect x="14.0851%" y="229" width="0.0428%" height="15" fill="rgb(211,81,21)"/><text x="14.3351%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (268 samples, 0.35%)</title><rect x="13.8009%" y="261" width="0.3478%" height="15" fill="rgb(208,190,38)"/><text x="14.0509%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (16 samples, 0.02%)</title><rect x="14.1280%" y="245" width="0.0208%" height="15" fill="rgb(235,213,38)"/><text x="14.3780%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (61 samples, 0.08%)</title><rect x="14.1487%" y="261" width="0.0792%" height="15" fill="rgb(237,122,38)"/><text x="14.3987%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (54 samples, 0.07%)</title><rect x="14.1578%" y="245" width="0.0701%" height="15" fill="rgb(244,218,35)"/><text x="14.4078%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (4,879 samples, 6.33%)</title><rect x="7.9964%" y="277" width="6.3314%" height="15" fill="rgb(240,68,47)"/><text x="8.2464%" y="287.50">async-re..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (67 samples, 0.09%)</title><rect x="14.2409%" y="261" width="0.0869%" height="15" fill="rgb(210,16,53)"/><text x="14.4909%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.02%)</title><rect x="14.3317%" y="277" width="0.0221%" height="15" fill="rgb(235,124,12)"/><text x="14.5817%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,180 samples, 5.42%)</title><rect x="14.3538%" y="277" width="5.4243%" height="15" fill="rgb(224,169,11)"/><text x="14.6038%" y="287.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (14 samples, 0.02%)</title><rect x="19.7781%" y="277" width="0.0182%" height="15" fill="rgb(250,166,2)"/><text x="20.0281%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (8 samples, 0.01%)</title><rect x="19.7963%" y="277" width="0.0104%" height="15" fill="rgb(242,216,29)"/><text x="20.0463%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (151 samples, 0.20%)</title><rect x="19.8066%" y="277" width="0.1960%" height="15" fill="rgb(230,116,27)"/><text x="20.0566%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (13,111 samples, 17.01%)</title><rect x="3.0483%" y="293" width="17.0140%" height="15" fill="rgb(228,99,48)"/><text x="3.2983%" y="303.50">async-redis`&lt;tokio::runtim..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (42 samples, 0.05%)</title><rect x="20.0078%" y="277" width="0.0545%" height="15" fill="rgb(253,11,6)"/><text x="20.2578%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (21 samples, 0.03%)</title><rect x="20.1064%" y="229" width="0.0273%" height="15" fill="rgb(247,143,39)"/><text x="20.3564%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (165 samples, 0.21%)</title><rect x="20.0818%" y="245" width="0.2141%" height="15" fill="rgb(236,97,10)"/><text x="20.3318%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (124 samples, 0.16%)</title><rect x="20.1350%" y="229" width="0.1609%" height="15" fill="rgb(233,208,19)"/><text x="20.3850%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (176 samples, 0.23%)</title><rect x="20.0753%" y="261" width="0.2284%" height="15" fill="rgb(216,164,2)"/><text x="20.3253%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (203 samples, 0.26%)</title><rect x="20.0623%" y="293" width="0.2634%" height="15" fill="rgb(220,129,5)"/><text x="20.3123%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (196 samples, 0.25%)</title><rect x="20.0714%" y="277" width="0.2543%" height="15" fill="rgb(242,17,10)"/><text x="20.3214%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (135 samples, 0.18%)</title><rect x="20.3426%" y="277" width="0.1752%" height="15" fill="rgb(242,107,0)"/><text x="20.5926%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (156 samples, 0.20%)</title><rect x="20.3335%" y="293" width="0.2024%" height="15" fill="rgb(251,28,31)"/><text x="20.5835%" y="303.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (13 samples, 0.02%)</title><rect x="20.5359%" y="293" width="0.0169%" height="15" fill="rgb(233,223,10)"/><text x="20.7859%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (14 samples, 0.02%)</title><rect x="20.5541%" y="293" width="0.0182%" height="15" fill="rgb(215,21,27)"/><text x="20.8041%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (9 samples, 0.01%)</title><rect x="20.5723%" y="293" width="0.0117%" height="15" fill="rgb(232,23,21)"/><text x="20.8223%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (58 samples, 0.08%)</title><rect x="20.5840%" y="293" width="0.0753%" height="15" fill="rgb(244,5,23)"/><text x="20.8340%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (14,979 samples, 19.44%)</title><rect x="1.2263%" y="309" width="19.4381%" height="15" fill="rgb(226,81,46)"/><text x="1.4763%" y="319.50">async-redis`tokio::runtime::th..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (46 samples, 0.06%)</title><rect x="20.7656%" y="293" width="0.0597%" height="15" fill="rgb(247,70,30)"/><text x="21.0156%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (45 samples, 0.06%)</title><rect x="20.7669%" y="277" width="0.0584%" height="15" fill="rgb(212,68,19)"/><text x="21.0169%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (55 samples, 0.07%)</title><rect x="20.8292%" y="293" width="0.0714%" height="15" fill="rgb(240,187,13)"/><text x="21.0792%" y="303.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (53 samples, 0.07%)</title><rect x="20.9629%" y="277" width="0.0688%" height="15" fill="rgb(223,113,26)"/><text x="21.2129%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,358 samples, 1.76%)</title><rect x="21.0317%" y="277" width="1.7623%" height="15" fill="rgb(206,192,2)"/><text x="21.2817%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (14 samples, 0.02%)</title><rect x="22.7939%" y="277" width="0.0182%" height="15" fill="rgb(241,108,4)"/><text x="23.0439%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (9 samples, 0.01%)</title><rect x="22.8173%" y="277" width="0.0117%" height="15" fill="rgb(247,173,49)"/><text x="23.0673%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (87 samples, 0.11%)</title><rect x="22.8316%" y="277" width="0.1129%" height="15" fill="rgb(224,114,35)"/><text x="23.0816%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (87 samples, 0.11%)</title><rect x="22.8316%" y="261" width="0.1129%" height="15" fill="rgb(245,159,27)"/><text x="23.0816%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (38 samples, 0.05%)</title><rect x="22.9445%" y="277" width="0.0493%" height="15" fill="rgb(245,172,44)"/><text x="23.1945%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (14 samples, 0.02%)</title><rect x="22.9756%" y="261" width="0.0182%" height="15" fill="rgb(236,23,11)"/><text x="23.2256%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (35 samples, 0.05%)</title><rect x="22.9938%" y="277" width="0.0454%" height="15" fill="rgb(205,117,38)"/><text x="23.2438%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (1,651 samples, 2.14%)</title><rect x="20.9045%" y="293" width="2.1425%" height="15" fill="rgb(237,72,25)"/><text x="21.1545%" y="303.50">a..</text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (8 samples, 0.01%)</title><rect x="23.0535%" y="293" width="0.0104%" height="15" fill="rgb(244,70,9)"/><text x="23.3035%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.02%)</title><rect x="23.1664%" y="277" width="0.0156%" height="15" fill="rgb(217,125,39)"/><text x="23.4164%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (8 samples, 0.01%)</title><rect x="23.1819%" y="277" width="0.0104%" height="15" fill="rgb(235,36,10)"/><text x="23.4319%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.02%)</title><rect x="23.2650%" y="261" width="0.0195%" height="15" fill="rgb(251,123,47)"/><text x="23.5150%" y="271.50"></text></g><g><title>async-redis`&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="23.4999%" y="229" width="0.0169%" height="15" fill="rgb(221,13,13)"/><text x="23.7499%" y="239.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="23.5167%" y="229" width="0.0117%" height="15" fill="rgb(238,131,9)"/><text x="23.7667%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.05%)</title><rect x="23.8074%" y="197" width="0.0519%" height="15" fill="rgb(211,50,8)"/><text x="24.0574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.05%)</title><rect x="23.8139%" y="181" width="0.0454%" height="15" fill="rgb(245,182,24)"/><text x="24.0639%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.04%)</title><rect x="23.8191%" y="165" width="0.0402%" height="15" fill="rgb(242,14,37)"/><text x="24.0691%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::string::String as core::clone::Clone&gt;::clone (49 samples, 0.06%)</title><rect x="23.8009%" y="213" width="0.0636%" height="15" fill="rgb(246,228,12)"/><text x="24.0509%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.09%)</title><rect x="23.8645%" y="213" width="0.0869%" height="15" fill="rgb(213,55,15)"/><text x="24.1145%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (23 samples, 0.03%)</title><rect x="23.9216%" y="197" width="0.0298%" height="15" fill="rgb(209,9,3)"/><text x="24.1716%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="23.9528%" y="213" width="0.0247%" height="15" fill="rgb(230,59,30)"/><text x="24.2028%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (11 samples, 0.01%)</title><rect x="24.3589%" y="181" width="0.0143%" height="15" fill="rgb(209,121,21)"/><text x="24.6089%" y="191.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="24.9935%" y="165" width="0.0156%" height="15" fill="rgb(220,109,13)"/><text x="25.2435%" y="175.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (31 samples, 0.04%)</title><rect x="25.0091%" y="165" width="0.0402%" height="15" fill="rgb(232,18,1)"/><text x="25.2591%" y="175.50"></text></g><g><title>async-redis`std::io::error::Error::kind (22 samples, 0.03%)</title><rect x="25.3504%" y="133" width="0.0285%" height="15" fill="rgb(215,41,42)"/><text x="25.6004%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (26 samples, 0.03%)</title><rect x="25.3789%" y="133" width="0.0337%" height="15" fill="rgb(224,123,36)"/><text x="25.6289%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (12 samples, 0.02%)</title><rect x="25.7981%" y="85" width="0.0156%" height="15" fill="rgb(240,125,3)"/><text x="26.0481%" y="95.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (175 samples, 0.23%)</title><rect x="25.6294%" y="101" width="0.2271%" height="15" fill="rgb(205,98,50)"/><text x="25.8794%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (33 samples, 0.04%)</title><rect x="25.8137%" y="85" width="0.0428%" height="15" fill="rgb(205,185,37)"/><text x="26.0637%" y="95.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (14 samples, 0.02%)</title><rect x="25.8565%" y="101" width="0.0182%" height="15" fill="rgb(238,207,15)"/><text x="26.1065%" y="111.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (19 samples, 0.02%)</title><rect x="25.8772%" y="101" width="0.0247%" height="15" fill="rgb(213,199,42)"/><text x="26.1272%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (20 samples, 0.03%)</title><rect x="25.9019%" y="101" width="0.0260%" height="15" fill="rgb(235,201,11)"/><text x="26.1519%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__error (15 samples, 0.02%)</title><rect x="25.9278%" y="101" width="0.0195%" height="15" fill="rgb(207,46,11)"/><text x="26.1778%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17,672 samples, 22.93%)</title><rect x="25.9473%" y="101" width="22.9328%" height="15" fill="rgb(241,35,35)"/><text x="26.1973%" y="111.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (18,006 samples, 23.37%)</title><rect x="25.5528%" y="117" width="23.3662%" height="15" fill="rgb(243,32,47)"/><text x="25.8028%" y="127.50">async-redis`&lt;&amp;mio::net::tcp::stream::..</text></g><g><title>libsystem_kernel.dylib`cerror (30 samples, 0.04%)</title><rect x="48.8801%" y="101" width="0.0389%" height="15" fill="rgb(247,202,23)"/><text x="49.1301%" y="111.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (8 samples, 0.01%)</title><rect x="48.9307%" y="117" width="0.0104%" height="15" fill="rgb(219,102,11)"/><text x="49.1807%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.01%)</title><rect x="48.9411%" y="117" width="0.0130%" height="15" fill="rgb(243,110,44)"/><text x="49.1911%" y="127.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (40 samples, 0.05%)</title><rect x="49.2551%" y="101" width="0.0519%" height="15" fill="rgb(222,74,54)"/><text x="49.5051%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (96 samples, 0.12%)</title><rect x="49.3070%" y="101" width="0.1246%" height="15" fill="rgb(216,99,12)"/><text x="49.5570%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="49.4147%" y="85" width="0.0169%" height="15" fill="rgb(226,22,26)"/><text x="49.6647%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (11 samples, 0.01%)</title><rect x="49.4173%" y="69" width="0.0143%" height="15" fill="rgb(217,163,10)"/><text x="49.6673%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (16 samples, 0.02%)</title><rect x="49.4316%" y="101" width="0.0208%" height="15" fill="rgb(213,25,53)"/><text x="49.6816%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (437 samples, 0.57%)</title><rect x="48.9541%" y="117" width="0.5671%" height="15" fill="rgb(252,105,26)"/><text x="49.2041%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (53 samples, 0.07%)</title><rect x="49.4524%" y="101" width="0.0688%" height="15" fill="rgb(220,39,43)"/><text x="49.7024%" y="111.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (18,591 samples, 24.13%)</title><rect x="25.4127%" y="133" width="24.1254%" height="15" fill="rgb(229,68,48)"/><text x="25.6627%" y="143.50">async-redis`tokio::io::driver::registr..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (13 samples, 0.02%)</title><rect x="49.5212%" y="117" width="0.0169%" height="15" fill="rgb(252,8,32)"/><text x="49.7712%" y="127.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18,741 samples, 24.32%)</title><rect x="25.2323%" y="149" width="24.3200%" height="15" fill="rgb(223,20,43)"/><text x="25.4823%" y="159.50">async-redis`&lt;tokio::net::tcp::stream::T..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (11 samples, 0.01%)</title><rect x="49.5380%" y="133" width="0.0143%" height="15" fill="rgb(229,81,49)"/><text x="49.7880%" y="143.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (562 samples, 0.73%)</title><rect x="49.5536%" y="149" width="0.7293%" height="15" fill="rgb(236,28,36)"/><text x="49.8036%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (537 samples, 0.70%)</title><rect x="49.5860%" y="133" width="0.6969%" height="15" fill="rgb(249,185,26)"/><text x="49.8360%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (27 samples, 0.04%)</title><rect x="50.2829%" y="149" width="0.0350%" height="15" fill="rgb(249,174,33)"/><text x="50.5329%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (19,480 samples, 25.28%)</title><rect x="25.0493%" y="165" width="25.2790%" height="15" fill="rgb(233,201,37)"/><text x="25.2993%" y="175.50">async-redis`&lt;tokio::io::util::read_buf::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="50.3179%" y="149" width="0.0104%" height="15" fill="rgb(221,78,26)"/><text x="50.5679%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (35 samples, 0.05%)</title><rect x="50.3283%" y="165" width="0.0454%" height="15" fill="rgb(250,127,30)"/><text x="50.5783%" y="175.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.02%)</title><rect x="50.3802%" y="165" width="0.0195%" height="15" fill="rgb(230,49,44)"/><text x="50.6302%" y="175.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.08%)</title><rect x="50.6644%" y="149" width="0.0779%" height="15" fill="rgb(229,67,23)"/><text x="50.9144%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (13 samples, 0.02%)</title><rect x="50.7254%" y="133" width="0.0169%" height="15" fill="rgb(249,83,47)"/><text x="50.9754%" y="143.50"></text></g><g><title>async-redis`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="50.7423%" y="149" width="0.0104%" height="15" fill="rgb(215,43,3)"/><text x="50.9923%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (45 samples, 0.06%)</title><rect x="50.9188%" y="85" width="0.0584%" height="15" fill="rgb(238,154,13)"/><text x="51.1688%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (160 samples, 0.21%)</title><rect x="50.8111%" y="117" width="0.2076%" height="15" fill="rgb(219,56,2)"/><text x="51.0611%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (152 samples, 0.20%)</title><rect x="50.8214%" y="101" width="0.1972%" height="15" fill="rgb(233,0,4)"/><text x="51.0714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.04%)</title><rect x="50.9772%" y="85" width="0.0415%" height="15" fill="rgb(235,30,7)"/><text x="51.2272%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (174 samples, 0.23%)</title><rect x="50.7942%" y="133" width="0.2258%" height="15" fill="rgb(250,79,13)"/><text x="51.0442%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (197 samples, 0.26%)</title><rect x="50.7695%" y="149" width="0.2556%" height="15" fill="rgb(211,146,34)"/><text x="51.0195%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (134 samples, 0.17%)</title><rect x="68.8230%" y="117" width="0.1739%" height="15" fill="rgb(228,22,38)"/><text x="69.0730%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (85 samples, 0.11%)</title><rect x="68.8866%" y="101" width="0.1103%" height="15" fill="rgb(235,168,5)"/><text x="69.1366%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (13,678 samples, 17.75%)</title><rect x="51.2704%" y="133" width="17.7498%" height="15" fill="rgb(221,155,16)"/><text x="51.5204%" y="143.50">async-redis`async_redis::pro..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (18 samples, 0.02%)</title><rect x="68.9969%" y="117" width="0.0234%" height="15" fill="rgb(215,215,53)"/><text x="69.2469%" y="127.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (35 samples, 0.05%)</title><rect x="69.0799%" y="117" width="0.0454%" height="15" fill="rgb(223,4,10)"/><text x="69.3299%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (34 samples, 0.04%)</title><rect x="69.1254%" y="117" width="0.0441%" height="15" fill="rgb(234,103,6)"/><text x="69.3754%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (211 samples, 0.27%)</title><rect x="69.1993%" y="101" width="0.2738%" height="15" fill="rgb(227,97,0)"/><text x="69.4493%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (199 samples, 0.26%)</title><rect x="69.2149%" y="85" width="0.2582%" height="15" fill="rgb(234,150,53)"/><text x="69.4649%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (237 samples, 0.31%)</title><rect x="69.1695%" y="117" width="0.3076%" height="15" fill="rgb(228,201,54)"/><text x="69.4195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (82 samples, 0.11%)</title><rect x="69.5289%" y="101" width="0.1064%" height="15" fill="rgb(222,22,37)"/><text x="69.7789%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (73 samples, 0.09%)</title><rect x="69.5406%" y="85" width="0.0947%" height="15" fill="rgb(237,53,32)"/><text x="69.7906%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (121 samples, 0.16%)</title><rect x="69.4848%" y="117" width="0.1570%" height="15" fill="rgb(233,25,53)"/><text x="69.7348%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (108 samples, 0.14%)</title><rect x="69.6418%" y="117" width="0.1402%" height="15" fill="rgb(210,40,34)"/><text x="69.8918%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (602 samples, 0.78%)</title><rect x="69.0202%" y="133" width="0.7812%" height="15" fill="rgb(241,220,44)"/><text x="69.2702%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.01%)</title><rect x="69.7898%" y="117" width="0.0117%" height="15" fill="rgb(235,28,35)"/><text x="70.0398%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (13 samples, 0.02%)</title><rect x="69.8015%" y="133" width="0.0169%" height="15" fill="rgb(210,56,17)"/><text x="70.0515%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (85 samples, 0.11%)</title><rect x="69.8183%" y="133" width="0.1103%" height="15" fill="rgb(224,130,29)"/><text x="70.0683%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (62 samples, 0.08%)</title><rect x="69.8482%" y="117" width="0.0805%" height="15" fill="rgb(235,212,8)"/><text x="70.0982%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (8 samples, 0.01%)</title><rect x="69.9286%" y="133" width="0.0104%" height="15" fill="rgb(223,33,50)"/><text x="70.1786%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (125 samples, 0.16%)</title><rect x="69.9390%" y="133" width="0.1622%" height="15" fill="rgb(219,149,13)"/><text x="70.1890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="70.1168%" y="133" width="0.0117%" height="15" fill="rgb(250,156,29)"/><text x="70.3668%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="70.1427%" y="133" width="0.0104%" height="15" fill="rgb(216,193,19)"/><text x="70.3927%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (14,741 samples, 19.13%)</title><rect x="51.0252%" y="149" width="19.1292%" height="15" fill="rgb(216,135,14)"/><text x="51.2752%" y="159.50">async-redis`async_redis::proto..</text></g><g><title>async-redis`bytes::bytes::Bytes::slice (31 samples, 0.04%)</title><rect x="70.2050%" y="133" width="0.0402%" height="15" fill="rgb(241,47,5)"/><text x="70.4550%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (18 samples, 0.02%)</title><rect x="70.2219%" y="117" width="0.0234%" height="15" fill="rgb(233,42,35)"/><text x="70.4719%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (77 samples, 0.10%)</title><rect x="70.1544%" y="149" width="0.0999%" height="15" fill="rgb(231,13,6)"/><text x="70.4044%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (27 samples, 0.04%)</title><rect x="70.3101%" y="133" width="0.0350%" height="15" fill="rgb(207,181,40)"/><text x="70.5601%" y="143.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (33 samples, 0.04%)</title><rect x="70.3452%" y="133" width="0.0428%" height="15" fill="rgb(254,173,49)"/><text x="70.5952%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (81 samples, 0.11%)</title><rect x="70.5126%" y="85" width="0.1051%" height="15" fill="rgb(221,1,38)"/><text x="70.7626%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (178 samples, 0.23%)</title><rect x="70.3880%" y="133" width="0.2310%" height="15" fill="rgb(206,124,46)"/><text x="70.6380%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (160 samples, 0.21%)</title><rect x="70.4114%" y="117" width="0.2076%" height="15" fill="rgb(249,21,11)"/><text x="70.6614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (154 samples, 0.20%)</title><rect x="70.4192%" y="101" width="0.1998%" height="15" fill="rgb(222,201,40)"/><text x="70.6692%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (56 samples, 0.07%)</title><rect x="70.6527%" y="117" width="0.0727%" height="15" fill="rgb(235,61,29)"/><text x="70.9027%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (53 samples, 0.07%)</title><rect x="70.6566%" y="101" width="0.0688%" height="15" fill="rgb(219,207,3)"/><text x="70.9066%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.11%)</title><rect x="70.6255%" y="133" width="0.1064%" height="15" fill="rgb(222,56,46)"/><text x="70.8755%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (120 samples, 0.16%)</title><rect x="70.7319%" y="133" width="0.1557%" height="15" fill="rgb(239,76,54)"/><text x="70.9819%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (68 samples, 0.09%)</title><rect x="70.7994%" y="117" width="0.0882%" height="15" fill="rgb(231,124,27)"/><text x="71.0494%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.04%)</title><rect x="70.8513%" y="101" width="0.0363%" height="15" fill="rgb(249,195,6)"/><text x="71.1013%" y="111.50"></text></g><g><title>async-redis`async_redis::protocol::get_number (507 samples, 0.66%)</title><rect x="70.2543%" y="149" width="0.6579%" height="15" fill="rgb(237,174,47)"/><text x="70.5043%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.02%)</title><rect x="70.8889%" y="133" width="0.0234%" height="15" fill="rgb(206,201,31)"/><text x="71.1389%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::slice (16 samples, 0.02%)</title><rect x="70.9123%" y="149" width="0.0208%" height="15" fill="rgb(231,57,52)"/><text x="71.1623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.05%)</title><rect x="71.2263%" y="53" width="0.0467%" height="15" fill="rgb(248,177,22)"/><text x="71.4763%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (319 samples, 0.41%)</title><rect x="71.0459%" y="85" width="0.4140%" height="15" fill="rgb(215,211,37)"/><text x="71.2959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (308 samples, 0.40%)</title><rect x="71.0602%" y="69" width="0.3997%" height="15" fill="rgb(241,128,51)"/><text x="71.3102%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (141 samples, 0.18%)</title><rect x="71.2769%" y="53" width="0.1830%" height="15" fill="rgb(227,165,31)"/><text x="71.5269%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (68 samples, 0.09%)</title><rect x="71.3717%" y="37" width="0.0882%" height="15" fill="rgb(228,167,24)"/><text x="71.6217%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (351 samples, 0.46%)</title><rect x="71.0109%" y="101" width="0.4555%" height="15" fill="rgb(228,143,12)"/><text x="71.2609%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="71.4664%" y="101" width="0.0104%" height="15" fill="rgb(249,149,8)"/><text x="71.7164%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (394 samples, 0.51%)</title><rect x="70.9694%" y="117" width="0.5113%" height="15" fill="rgb(243,35,44)"/><text x="71.2194%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (430 samples, 0.56%)</title><rect x="70.9473%" y="133" width="0.5580%" height="15" fill="rgb(246,89,9)"/><text x="71.1973%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.02%)</title><rect x="71.4897%" y="117" width="0.0156%" height="15" fill="rgb(233,213,13)"/><text x="71.7397%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (475 samples, 0.62%)</title><rect x="70.9330%" y="149" width="0.6164%" height="15" fill="rgb(233,141,41)"/><text x="71.1830%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (34 samples, 0.04%)</title><rect x="71.5053%" y="133" width="0.0441%" height="15" fill="rgb(239,167,4)"/><text x="71.7553%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (77 samples, 0.10%)</title><rect x="71.5572%" y="149" width="0.0999%" height="15" fill="rgb(209,217,16)"/><text x="71.8072%" y="159.50"></text></g><g><title>async-redis`core::num::_&lt;impl core::str::traits::FromStr for i64&gt;::from_str (25 samples, 0.03%)</title><rect x="71.6572%" y="149" width="0.0324%" height="15" fill="rgb(219,88,35)"/><text x="71.9072%" y="159.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (26 samples, 0.03%)</title><rect x="71.6896%" y="149" width="0.0337%" height="15" fill="rgb(220,193,23)"/><text x="71.9396%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.08%)</title><rect x="71.7337%" y="149" width="0.0818%" height="15" fill="rgb(230,90,52)"/><text x="71.9837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.03%)</title><rect x="71.7843%" y="133" width="0.0311%" height="15" fill="rgb(252,106,19)"/><text x="72.0343%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.03%)</title><rect x="71.7856%" y="117" width="0.0298%" height="15" fill="rgb(206,74,20)"/><text x="72.0356%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (42 samples, 0.05%)</title><rect x="71.9141%" y="117" width="0.0545%" height="15" fill="rgb(230,138,44)"/><text x="72.1641%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (126 samples, 0.16%)</title><rect x="71.8155%" y="149" width="0.1635%" height="15" fill="rgb(235,182,43)"/><text x="72.0655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.10%)</title><rect x="71.8804%" y="133" width="0.0986%" height="15" fill="rgb(242,16,51)"/><text x="72.1304%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="71.9686%" y="117" width="0.0104%" height="15" fill="rgb(248,9,4)"/><text x="72.2186%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (16,651 samples, 21.61%)</title><rect x="50.3997%" y="165" width="21.6078%" height="15" fill="rgb(210,31,22)"/><text x="50.6497%" y="175.50">async-redis`async_redis::protocol:..</text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (25 samples, 0.03%)</title><rect x="72.0166%" y="165" width="0.0324%" height="15" fill="rgb(239,54,39)"/><text x="72.2666%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (61 samples, 0.08%)</title><rect x="72.1386%" y="133" width="0.0792%" height="15" fill="rgb(230,99,41)"/><text x="72.3886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.04%)</title><rect x="72.2178%" y="133" width="0.0402%" height="15" fill="rgb(253,106,12)"/><text x="72.4678%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.04%)</title><rect x="72.2191%" y="117" width="0.0389%" height="15" fill="rgb(213,46,41)"/><text x="72.4691%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (115 samples, 0.15%)</title><rect x="72.1100%" y="149" width="0.1492%" height="15" fill="rgb(215,133,35)"/><text x="72.3600%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (29 samples, 0.04%)</title><rect x="72.3229%" y="133" width="0.0376%" height="15" fill="rgb(213,28,5)"/><text x="72.5729%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (79 samples, 0.10%)</title><rect x="72.2593%" y="149" width="0.1025%" height="15" fill="rgb(215,77,49)"/><text x="72.5093%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (253 samples, 0.33%)</title><rect x="72.0568%" y="165" width="0.3283%" height="15" fill="rgb(248,100,22)"/><text x="72.3068%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.02%)</title><rect x="72.3631%" y="149" width="0.0221%" height="15" fill="rgb(208,67,9)"/><text x="72.6131%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (10 samples, 0.01%)</title><rect x="72.3852%" y="165" width="0.0130%" height="15" fill="rgb(219,133,21)"/><text x="72.6352%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (11 samples, 0.01%)</title><rect x="72.4007%" y="165" width="0.0143%" height="15" fill="rgb(246,46,29)"/><text x="72.6507%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (295 samples, 0.38%)</title><rect x="72.5655%" y="133" width="0.3828%" height="15" fill="rgb(246,185,52)"/><text x="72.8155%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (151 samples, 0.20%)</title><rect x="72.7524%" y="117" width="0.1960%" height="15" fill="rgb(252,136,11)"/><text x="73.0024%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (413 samples, 0.54%)</title><rect x="72.4150%" y="165" width="0.5359%" height="15" fill="rgb(219,138,53)"/><text x="72.6650%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (320 samples, 0.42%)</title><rect x="72.5357%" y="149" width="0.4153%" height="15" fill="rgb(211,51,23)"/><text x="72.7857%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.02%)</title><rect x="72.9522%" y="165" width="0.0182%" height="15" fill="rgb(247,221,28)"/><text x="73.2022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.04%)</title><rect x="73.0003%" y="149" width="0.0415%" height="15" fill="rgb(251,222,45)"/><text x="73.2503%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.04%)</title><rect x="73.0016%" y="133" width="0.0402%" height="15" fill="rgb(217,162,53)"/><text x="73.2516%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (56 samples, 0.07%)</title><rect x="72.9704%" y="165" width="0.0727%" height="15" fill="rgb(229,93,14)"/><text x="73.2204%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.03%)</title><rect x="73.1222%" y="133" width="0.0324%" height="15" fill="rgb(209,67,49)"/><text x="73.3722%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (87 samples, 0.11%)</title><rect x="73.0431%" y="165" width="0.1129%" height="15" fill="rgb(213,87,29)"/><text x="73.2931%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.08%)</title><rect x="73.0781%" y="149" width="0.0779%" height="15" fill="rgb(205,151,52)"/><text x="73.3281%" y="159.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44,294 samples, 57.48%)</title><rect x="24.3732%" y="181" width="57.4799%" height="15" fill="rgb(253,215,39)"/><text x="24.6232%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6,692 samples, 8.68%)</title><rect x="73.1690%" y="165" width="8.6841%" height="15" fill="rgb(221,220,41)"/><text x="73.4190%" y="175.50">libsystem_pl..</text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (16 samples, 0.02%)</title><rect x="81.8531%" y="181" width="0.0208%" height="15" fill="rgb(218,133,21)"/><text x="82.1031%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (20 samples, 0.03%)</title><rect x="82.2139%" y="149" width="0.0260%" height="15" fill="rgb(221,193,43)"/><text x="82.4639%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (11 samples, 0.01%)</title><rect x="82.2255%" y="133" width="0.0143%" height="15" fill="rgb(240,128,52)"/><text x="82.4755%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (15 samples, 0.02%)</title><rect x="82.2463%" y="149" width="0.0195%" height="15" fill="rgb(253,114,12)"/><text x="82.4963%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (14 samples, 0.02%)</title><rect x="82.2476%" y="133" width="0.0182%" height="15" fill="rgb(215,223,47)"/><text x="82.4976%" y="143.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (316 samples, 0.41%)</title><rect x="81.8842%" y="165" width="0.4101%" height="15" fill="rgb(248,225,23)"/><text x="82.1342%" y="175.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (22 samples, 0.03%)</title><rect x="82.2658%" y="149" width="0.0285%" height="15" fill="rgb(250,108,0)"/><text x="82.5158%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (328 samples, 0.43%)</title><rect x="81.8739%" y="181" width="0.4256%" height="15" fill="rgb(228,208,7)"/><text x="82.1239%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (20 samples, 0.03%)</title><rect x="82.3112%" y="181" width="0.0260%" height="15" fill="rgb(244,45,10)"/><text x="82.5612%" y="191.50"></text></g><g><title>async-redis`__rust_alloc (13 samples, 0.02%)</title><rect x="82.3397%" y="181" width="0.0169%" height="15" fill="rgb(207,125,25)"/><text x="82.5897%" y="191.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.01%)</title><rect x="82.3566%" y="181" width="0.0130%" height="15" fill="rgb(210,195,18)"/><text x="82.6066%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::Decode (20 samples, 0.03%)</title><rect x="82.3696%" y="181" width="0.0260%" height="15" fill="rgb(249,80,12)"/><text x="82.6196%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (17 samples, 0.02%)</title><rect x="82.3955%" y="181" width="0.0221%" height="15" fill="rgb(221,65,9)"/><text x="82.6455%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (20 samples, 0.03%)</title><rect x="82.4176%" y="181" width="0.0260%" height="15" fill="rgb(235,49,36)"/><text x="82.6676%" y="191.50"></text></g><g><title>async-redis`tracing::span::Span::enter (10 samples, 0.01%)</title><rect x="82.4513%" y="181" width="0.0130%" height="15" fill="rgb(225,32,20)"/><text x="82.7013%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.04%)</title><rect x="82.4643%" y="181" width="0.0363%" height="15" fill="rgb(215,141,46)"/><text x="82.7143%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 0.05%)</title><rect x="82.5032%" y="181" width="0.0493%" height="15" fill="rgb(250,160,47)"/><text x="82.7532%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45,064 samples, 58.48%)</title><rect x="24.1344%" y="197" width="58.4791%" height="15" fill="rgb(216,222,40)"/><text x="24.3844%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (45 samples, 0.06%)</title><rect x="82.5552%" y="181" width="0.0584%" height="15" fill="rgb(234,217,39)"/><text x="82.8052%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.01%)</title><rect x="82.6135%" y="197" width="0.0104%" height="15" fill="rgb(207,178,40)"/><text x="82.8635%" y="207.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="82.6239%" y="197" width="0.0221%" height="15" fill="rgb(221,136,13)"/><text x="82.8739%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (51 samples, 0.07%)</title><rect x="82.6460%" y="197" width="0.0662%" height="15" fill="rgb(249,199,10)"/><text x="82.8960%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (27 samples, 0.04%)</title><rect x="82.7122%" y="197" width="0.0350%" height="15" fill="rgb(249,222,13)"/><text x="82.9622%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (45,311 samples, 58.80%)</title><rect x="23.9774%" y="213" width="58.7996%" height="15" fill="rgb(244,185,38)"/><text x="24.2274%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.03%)</title><rect x="82.7472%" y="197" width="0.0298%" height="15" fill="rgb(236,202,9)"/><text x="82.9972%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (68 samples, 0.09%)</title><rect x="82.7771%" y="213" width="0.0882%" height="15" fill="rgb(250,229,37)"/><text x="83.0271%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (58 samples, 0.08%)</title><rect x="82.7900%" y="197" width="0.0753%" height="15" fill="rgb(206,174,23)"/><text x="83.0400%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9 samples, 0.01%)</title><rect x="82.8653%" y="213" width="0.0117%" height="15" fill="rgb(211,33,43)"/><text x="83.1153%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (32 samples, 0.04%)</title><rect x="82.8926%" y="213" width="0.0415%" height="15" fill="rgb(245,58,50)"/><text x="83.1426%" y="223.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (151 samples, 0.20%)</title><rect x="83.0132%" y="181" width="0.1960%" height="15" fill="rgb(244,68,36)"/><text x="83.2632%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.07%)</title><rect x="83.2196%" y="165" width="0.0701%" height="15" fill="rgb(232,229,15)"/><text x="83.4696%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.07%)</title><rect x="83.2222%" y="149" width="0.0675%" height="15" fill="rgb(254,30,23)"/><text x="83.4722%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.03%)</title><rect x="83.2637%" y="133" width="0.0260%" height="15" fill="rgb(235,160,14)"/><text x="83.5137%" y="143.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (234 samples, 0.30%)</title><rect x="82.9873%" y="197" width="0.3037%" height="15" fill="rgb(212,155,44)"/><text x="83.2373%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 0.08%)</title><rect x="83.2092%" y="181" width="0.0818%" height="15" fill="rgb(226,2,50)"/><text x="83.4592%" y="191.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (13 samples, 0.02%)</title><rect x="83.3480%" y="181" width="0.0169%" height="15" fill="rgb(234,177,6)"/><text x="83.5980%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.01%)</title><rect x="83.5258%" y="133" width="0.0143%" height="15" fill="rgb(217,24,9)"/><text x="83.7758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (182 samples, 0.24%)</title><rect x="83.4181%" y="165" width="0.2362%" height="15" fill="rgb(220,13,46)"/><text x="83.6681%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (172 samples, 0.22%)</title><rect x="83.4311%" y="149" width="0.2232%" height="15" fill="rgb(239,221,27)"/><text x="83.6811%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (86 samples, 0.11%)</title><rect x="83.5427%" y="133" width="0.1116%" height="15" fill="rgb(222,198,25)"/><text x="83.7927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="83.6387%" y="117" width="0.0156%" height="15" fill="rgb(211,99,13)"/><text x="83.8887%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (226 samples, 0.29%)</title><rect x="83.3649%" y="181" width="0.2933%" height="15" fill="rgb(232,111,31)"/><text x="83.6149%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="83.6582%" y="181" width="0.0104%" height="15" fill="rgb(245,82,37)"/><text x="83.9082%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.04%)</title><rect x="83.6686%" y="181" width="0.0402%" height="15" fill="rgb(227,149,46)"/><text x="83.9186%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.03%)</title><rect x="83.6802%" y="165" width="0.0285%" height="15" fill="rgb(218,36,50)"/><text x="83.9302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.03%)</title><rect x="83.6802%" y="149" width="0.0285%" height="15" fill="rgb(226,80,48)"/><text x="83.9302%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (62 samples, 0.08%)</title><rect x="83.7088%" y="181" width="0.0805%" height="15" fill="rgb(238,224,15)"/><text x="83.9588%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (46 samples, 0.06%)</title><rect x="83.7296%" y="165" width="0.0597%" height="15" fill="rgb(241,136,10)"/><text x="83.9796%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.03%)</title><rect x="83.7594%" y="149" width="0.0298%" height="15" fill="rgb(208,32,45)"/><text x="84.0094%" y="159.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (395 samples, 0.51%)</title><rect x="83.2935%" y="197" width="0.5126%" height="15" fill="rgb(207,135,9)"/><text x="83.5435%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="83.7957%" y="181" width="0.0104%" height="15" fill="rgb(206,86,44)"/><text x="84.0457%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_bytes (21 samples, 0.03%)</title><rect x="83.8295%" y="181" width="0.0273%" height="15" fill="rgb(245,177,15)"/><text x="84.0795%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (13 samples, 0.02%)</title><rect x="83.8399%" y="165" width="0.0169%" height="15" fill="rgb(206,64,50)"/><text x="84.0899%" y="175.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (13 samples, 0.02%)</title><rect x="83.8697%" y="165" width="0.0169%" height="15" fill="rgb(234,36,40)"/><text x="84.1197%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (92 samples, 0.12%)</title><rect x="83.9022%" y="149" width="0.1194%" height="15" fill="rgb(213,64,8)"/><text x="84.1522%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (89 samples, 0.12%)</title><rect x="83.9060%" y="133" width="0.1155%" height="15" fill="rgb(210,75,36)"/><text x="84.1560%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 0.03%)</title><rect x="83.9904%" y="117" width="0.0311%" height="15" fill="rgb(229,88,21)"/><text x="84.2404%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (106 samples, 0.14%)</title><rect x="83.8866%" y="165" width="0.1376%" height="15" fill="rgb(252,204,47)"/><text x="84.1366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="84.0319%" y="149" width="0.0182%" height="15" fill="rgb(208,77,27)"/><text x="84.2819%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.02%)</title><rect x="84.0332%" y="133" width="0.0169%" height="15" fill="rgb(221,76,26)"/><text x="84.2832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.03%)</title><rect x="84.0254%" y="165" width="0.0273%" height="15" fill="rgb(225,139,18)"/><text x="84.2754%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.02%)</title><rect x="84.0527%" y="165" width="0.0247%" height="15" fill="rgb(230,137,11)"/><text x="84.3027%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (185 samples, 0.24%)</title><rect x="83.8567%" y="181" width="0.2401%" height="15" fill="rgb(212,28,1)"/><text x="84.1067%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.02%)</title><rect x="84.0773%" y="165" width="0.0195%" height="15" fill="rgb(248,164,17)"/><text x="84.3273%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (10 samples, 0.01%)</title><rect x="84.0968%" y="181" width="0.0130%" height="15" fill="rgb(222,171,42)"/><text x="84.3468%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (243 samples, 0.32%)</title><rect x="83.8061%" y="197" width="0.3153%" height="15" fill="rgb(243,84,45)"/><text x="84.0561%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (11 samples, 0.01%)</title><rect x="84.1228%" y="197" width="0.0143%" height="15" fill="rgb(252,49,23)"/><text x="84.3728%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="84.1461%" y="197" width="0.0117%" height="15" fill="rgb(215,19,7)"/><text x="84.3961%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.04%)</title><rect x="84.1773%" y="181" width="0.0363%" height="15" fill="rgb(238,81,41)"/><text x="84.4273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.03%)</title><rect x="84.1812%" y="165" width="0.0324%" height="15" fill="rgb(210,199,37)"/><text x="84.4312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.06%)</title><rect x="84.1578%" y="197" width="0.0571%" height="15" fill="rgb(244,192,49)"/><text x="84.4078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 0.04%)</title><rect x="84.3382%" y="165" width="0.0402%" height="15" fill="rgb(226,211,11)"/><text x="84.5882%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (135 samples, 0.18%)</title><rect x="84.2149%" y="197" width="0.1752%" height="15" fill="rgb(236,162,54)"/><text x="84.4649%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (96 samples, 0.12%)</title><rect x="84.2655%" y="181" width="0.1246%" height="15" fill="rgb(220,229,9)"/><text x="84.5155%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="84.3784%" y="165" width="0.0117%" height="15" fill="rgb(250,87,22)"/><text x="84.6284%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (19 samples, 0.02%)</title><rect x="84.3901%" y="197" width="0.0247%" height="15" fill="rgb(239,43,17)"/><text x="84.6401%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (1,148 samples, 1.49%)</title><rect x="82.9341%" y="213" width="1.4897%" height="15" fill="rgb(231,177,25)"/><text x="83.1841%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (12 samples, 0.02%)</title><rect x="84.4238%" y="213" width="0.0156%" height="15" fill="rgb(219,179,1)"/><text x="84.6738%" y="223.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (13 samples, 0.02%)</title><rect x="84.4394%" y="213" width="0.0169%" height="15" fill="rgb(238,219,53)"/><text x="84.6894%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (18 samples, 0.02%)</title><rect x="84.5315%" y="165" width="0.0234%" height="15" fill="rgb(232,167,36)"/><text x="84.7815%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="84.5315%" y="181" width="0.0260%" height="15" fill="rgb(244,19,51)"/><text x="84.7815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.02%)</title><rect x="84.5575%" y="181" width="0.0208%" height="15" fill="rgb(224,6,22)"/><text x="84.8075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.01%)</title><rect x="84.5640%" y="165" width="0.0143%" height="15" fill="rgb(224,145,5)"/><text x="84.8140%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (45 samples, 0.06%)</title><rect x="84.5212%" y="197" width="0.0584%" height="15" fill="rgb(234,130,49)"/><text x="84.7712%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.02%)</title><rect x="84.7768%" y="181" width="0.0208%" height="15" fill="rgb(254,6,2)"/><text x="85.0268%" y="191.50"></text></g><g><title>async-redis`dashmap::lock::compare_exchange (85 samples, 0.11%)</title><rect x="84.7976%" y="181" width="0.1103%" height="15" fill="rgb(208,96,46)"/><text x="85.0476%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (47 samples, 0.06%)</title><rect x="85.2050%" y="165" width="0.0610%" height="15" fill="rgb(239,3,39)"/><text x="85.4550%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="85.2401%" y="149" width="0.0260%" height="15" fill="rgb(233,210,1)"/><text x="85.4901%" y="159.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (129 samples, 0.17%)</title><rect x="85.5087%" y="133" width="0.1674%" height="15" fill="rgb(244,137,37)"/><text x="85.7587%" y="143.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (108 samples, 0.14%)</title><rect x="85.5359%" y="117" width="0.1402%" height="15" fill="rgb(240,136,2)"/><text x="85.7859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (10 samples, 0.01%)</title><rect x="85.6761%" y="85" width="0.0130%" height="15" fill="rgb(239,18,37)"/><text x="85.9261%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (10 samples, 0.01%)</title><rect x="85.6761%" y="69" width="0.0130%" height="15" fill="rgb(218,185,22)"/><text x="85.9261%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (10 samples, 0.01%)</title><rect x="85.6761%" y="53" width="0.0130%" height="15" fill="rgb(225,218,4)"/><text x="85.9261%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.01%)</title><rect x="85.6761%" y="117" width="0.0143%" height="15" fill="rgb(230,182,32)"/><text x="85.9261%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.01%)</title><rect x="85.6761%" y="101" width="0.0143%" height="15" fill="rgb(242,56,43)"/><text x="85.9261%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (29 samples, 0.04%)</title><rect x="85.6761%" y="133" width="0.0376%" height="15" fill="rgb(233,99,24)"/><text x="85.9261%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (18 samples, 0.02%)</title><rect x="85.6904%" y="117" width="0.0234%" height="15" fill="rgb(234,209,42)"/><text x="85.9404%" y="127.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (361 samples, 0.47%)</title><rect x="85.2868%" y="149" width="0.4685%" height="15" fill="rgb(227,7,12)"/><text x="85.5368%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (28 samples, 0.04%)</title><rect x="85.7189%" y="133" width="0.0363%" height="15" fill="rgb(245,203,43)"/><text x="85.9689%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (28 samples, 0.04%)</title><rect x="85.7189%" y="117" width="0.0363%" height="15" fill="rgb(238,205,33)"/><text x="85.9689%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (28 samples, 0.04%)</title><rect x="85.7189%" y="101" width="0.0363%" height="15" fill="rgb(231,56,7)"/><text x="85.9689%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (501 samples, 0.65%)</title><rect x="85.2660%" y="165" width="0.6501%" height="15" fill="rgb(244,186,29)"/><text x="85.5160%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (124 samples, 0.16%)</title><rect x="85.7553%" y="149" width="0.1609%" height="15" fill="rgb(234,111,31)"/><text x="86.0053%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (35 samples, 0.05%)</title><rect x="85.9227%" y="165" width="0.0454%" height="15" fill="rgb(241,149,10)"/><text x="86.1727%" y="175.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (819 samples, 1.06%)</title><rect x="84.9079%" y="181" width="1.0628%" height="15" fill="rgb(249,206,44)"/><text x="85.1579%" y="191.50"></text></g><g><title>async-redis`dashmap::DashMap&lt;K,V,S&gt;::insert (1,082 samples, 1.40%)</title><rect x="84.5795%" y="197" width="1.4041%" height="15" fill="rgb(251,153,30)"/><text x="84.8295%" y="207.50"></text></g><g><title>async-redis`dashmap::lock::compare_exchange (14 samples, 0.02%)</title><rect x="85.9836%" y="197" width="0.0182%" height="15" fill="rgb(239,152,38)"/><text x="86.2336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.01%)</title><rect x="86.0109%" y="197" width="0.0130%" height="15" fill="rgb(249,139,47)"/><text x="86.2609%" y="207.50"></text></g><g><title>async-redis`async_redis::db::DB::set (1,209 samples, 1.57%)</title><rect x="84.4563%" y="213" width="1.5689%" height="15" fill="rgb(244,64,35)"/><text x="84.7063%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::Encode (13 samples, 0.02%)</title><rect x="86.0252%" y="213" width="0.0169%" height="15" fill="rgb(216,46,15)"/><text x="86.2752%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (18 samples, 0.02%)</title><rect x="86.0511%" y="213" width="0.0234%" height="15" fill="rgb(250,74,19)"/><text x="86.3011%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (18 samples, 0.02%)</title><rect x="86.1757%" y="197" width="0.0234%" height="15" fill="rgb(249,42,33)"/><text x="86.4257%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.02%)</title><rect x="86.1991%" y="197" width="0.0195%" height="15" fill="rgb(242,149,17)"/><text x="86.4491%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (14 samples, 0.02%)</title><rect x="86.2198%" y="197" width="0.0182%" height="15" fill="rgb(244,29,21)"/><text x="86.4698%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (13 samples, 0.02%)</title><rect x="86.2211%" y="181" width="0.0169%" height="15" fill="rgb(220,130,37)"/><text x="86.4711%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (31 samples, 0.04%)</title><rect x="86.2380%" y="197" width="0.0402%" height="15" fill="rgb(211,67,2)"/><text x="86.4880%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (158 samples, 0.21%)</title><rect x="86.0745%" y="213" width="0.2050%" height="15" fill="rgb(235,68,52)"/><text x="86.3245%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (49 samples, 0.06%)</title><rect x="86.4197%" y="149" width="0.0636%" height="15" fill="rgb(246,142,3)"/><text x="86.6697%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (9,465 samples, 12.28%)</title><rect x="86.4041%" y="165" width="12.2826%" height="15" fill="rgb(241,25,7)"/><text x="86.6541%" y="175.50">async-redis`&lt;&amp;mio:..</text></g><g><title>libsystem_kernel.dylib`__sendto (9,399 samples, 12.20%)</title><rect x="86.4897%" y="149" width="12.1970%" height="15" fill="rgb(242,119,39)"/><text x="86.7397%" y="159.50">libsystem_kernel.d..</text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (13 samples, 0.02%)</title><rect x="98.6906%" y="165" width="0.0169%" height="15" fill="rgb(241,98,45)"/><text x="98.9406%" y="175.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (20 samples, 0.03%)</title><rect x="98.8035%" y="149" width="0.0260%" height="15" fill="rgb(254,28,30)"/><text x="99.0535%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.01%)</title><rect x="98.8295%" y="149" width="0.0130%" height="15" fill="rgb(241,142,54)"/><text x="99.0795%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (138 samples, 0.18%)</title><rect x="98.7075%" y="165" width="0.1791%" height="15" fill="rgb(222,85,15)"/><text x="98.9575%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.04%)</title><rect x="98.8425%" y="149" width="0.0441%" height="15" fill="rgb(210,85,47)"/><text x="99.0925%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9,672 samples, 12.55%)</title><rect x="86.3379%" y="197" width="12.5513%" height="15" fill="rgb(224,206,25)"/><text x="86.5879%" y="207.50">async-redis`&lt;tokio:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (9,653 samples, 12.53%)</title><rect x="86.3626%" y="181" width="12.5266%" height="15" fill="rgb(243,201,19)"/><text x="86.6126%" y="191.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (9,722 samples, 12.62%)</title><rect x="86.2873%" y="213" width="12.6161%" height="15" fill="rgb(236,59,4)"/><text x="86.5373%" y="223.50">async-redis`tokio::..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (11 samples, 0.01%)</title><rect x="98.8892%" y="197" width="0.0143%" height="15" fill="rgb(254,179,45)"/><text x="99.1392%" y="207.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (8 samples, 0.01%)</title><rect x="98.9125%" y="213" width="0.0104%" height="15" fill="rgb(226,14,10)"/><text x="99.1625%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (18 samples, 0.02%)</title><rect x="98.9229%" y="213" width="0.0234%" height="15" fill="rgb(244,27,41)"/><text x="99.1729%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.06%)</title><rect x="98.9904%" y="197" width="0.0636%" height="15" fill="rgb(235,35,32)"/><text x="99.2404%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (47 samples, 0.06%)</title><rect x="98.9930%" y="181" width="0.0610%" height="15" fill="rgb(218,68,31)"/><text x="99.2430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (83 samples, 0.11%)</title><rect x="98.9476%" y="213" width="0.1077%" height="15" fill="rgb(207,120,37)"/><text x="99.1976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="99.1344%" y="197" width="0.0117%" height="15" fill="rgb(227,98,0)"/><text x="99.3844%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.05%)</title><rect x="99.2214%" y="181" width="0.0506%" height="15" fill="rgb(207,7,3)"/><text x="99.4714%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (198 samples, 0.26%)</title><rect x="99.0553%" y="213" width="0.2569%" height="15" fill="rgb(206,98,19)"/><text x="99.3053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (128 samples, 0.17%)</title><rect x="99.1461%" y="197" width="0.1661%" height="15" fill="rgb(217,5,26)"/><text x="99.3961%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (31 samples, 0.04%)</title><rect x="99.2720%" y="181" width="0.0402%" height="15" fill="rgb(235,190,38)"/><text x="99.5220%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.03%)</title><rect x="99.3252%" y="213" width="0.0298%" height="15" fill="rgb(247,86,24)"/><text x="99.5752%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (58,436 samples, 75.83%)</title><rect x="23.5284%" y="229" width="75.8318%" height="15" fill="rgb(205,101,16)"/><text x="23.7784%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="99.3602%" y="229" width="0.0234%" height="15" fill="rgb(246,168,33)"/><text x="99.6102%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (20 samples, 0.03%)</title><rect x="99.4134%" y="229" width="0.0260%" height="15" fill="rgb(231,114,1)"/><text x="99.6634%" y="239.50"></text></g><g><title>async-redis`async_redis::db::DB::set (13 samples, 0.02%)</title><rect x="99.4394%" y="229" width="0.0169%" height="15" fill="rgb(207,184,53)"/><text x="99.6894%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (16 samples, 0.02%)</title><rect x="99.4692%" y="229" width="0.0208%" height="15" fill="rgb(224,95,51)"/><text x="99.7192%" y="239.50"></text></g><g><title>async-redis`tracing::span::Span::enter (14 samples, 0.02%)</title><rect x="99.4965%" y="229" width="0.0182%" height="15" fill="rgb(212,188,45)"/><text x="99.7465%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="99.5173%" y="229" width="0.0208%" height="15" fill="rgb(223,154,38)"/><text x="99.7673%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (58,733 samples, 76.22%)</title><rect x="23.3286%" y="245" width="76.2172%" height="15" fill="rgb(251,22,52)"/><text x="23.5786%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (58,775 samples, 76.27%)</title><rect x="23.2845%" y="261" width="76.2717%" height="15" fill="rgb(229,209,22)"/><text x="23.5345%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tracing::span::Span::enter (8 samples, 0.01%)</title><rect x="99.5458%" y="245" width="0.0104%" height="15" fill="rgb(234,138,34)"/><text x="99.7958%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (17 samples, 0.02%)</title><rect x="99.5627%" y="261" width="0.0221%" height="15" fill="rgb(212,95,11)"/><text x="99.8127%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (58,893 samples, 76.42%)</title><rect x="23.1923%" y="277" width="76.4249%" height="15" fill="rgb(240,179,47)"/><text x="23.4423%" y="287.50">async-redis`tokio::runtime::task::raw::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (25 samples, 0.03%)</title><rect x="99.5847%" y="261" width="0.0324%" height="15" fill="rgb(240,163,11)"/><text x="99.8347%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (8 samples, 0.01%)</title><rect x="99.6224%" y="277" width="0.0104%" height="15" fill="rgb(236,37,12)"/><text x="99.8724%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (18 samples, 0.02%)</title><rect x="99.6328%" y="277" width="0.0234%" height="15" fill="rgb(232,164,16)"/><text x="99.8828%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (59,036 samples, 76.61%)</title><rect x="23.0638%" y="293" width="76.6104%" height="15" fill="rgb(244,205,15)"/><text x="23.3138%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.02%)</title><rect x="99.6561%" y="277" width="0.0182%" height="15" fill="rgb(223,117,47)"/><text x="99.9061%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.01%)</title><rect x="99.6743%" y="293" width="0.0143%" height="15" fill="rgb(244,107,35)"/><text x="99.9243%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (29 samples, 0.04%)</title><rect x="99.6886%" y="293" width="0.0376%" height="15" fill="rgb(205,140,8)"/><text x="99.9386%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (10 samples, 0.01%)</title><rect x="99.7366%" y="293" width="0.0130%" height="15" fill="rgb(228,84,46)"/><text x="99.9866%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (60,955 samples, 79.10%)</title><rect x="20.6644%" y="309" width="79.1007%" height="15" fill="rgb(254,188,9)"/><text x="20.9144%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.02%)</title><rect x="99.7495%" y="293" width="0.0156%" height="15" fill="rgb(206,112,54)"/><text x="99.9995%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (152 samples, 0.20%)</title><rect x="99.7651%" y="309" width="0.1972%" height="15" fill="rgb(216,84,49)"/><text x="100.0151%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (76,962 samples, 99.87%)</title><rect x="0.0908%" y="325" width="99.8728%" height="15" fill="rgb(214,194,35)"/><text x="0.3408%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (77,015 samples, 99.94%)</title><rect x="0.0558%" y="437" width="99.9416%" height="15" fill="rgb(249,28,3)"/><text x="0.3058%" y="447.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::blocking::pool::Inner::run (77,015 samples, 99.94%)</title><rect x="0.0558%" y="421" width="99.9416%" height="15" fill="rgb(222,56,52)"/><text x="0.3058%" y="431.50">async-redis`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77,015 samples, 99.94%)</title><rect x="0.0558%" y="405" width="99.9416%" height="15" fill="rgb(245,217,50)"/><text x="0.3058%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77,015 samples, 99.94%)</title><rect x="0.0558%" y="389" width="99.9416%" height="15" fill="rgb(213,201,24)"/><text x="0.3058%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (77,015 samples, 99.94%)</title><rect x="0.0558%" y="373" width="99.9416%" height="15" fill="rgb(248,116,28)"/><text x="0.3058%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (77,015 samples, 99.94%)</title><rect x="0.0558%" y="357" width="99.9416%" height="15" fill="rgb(219,72,43)"/><text x="0.3058%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (77,015 samples, 99.94%)</title><rect x="0.0558%" y="341" width="99.9416%" height="15" fill="rgb(209,138,14)"/><text x="0.3058%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (19 samples, 0.02%)</title><rect x="99.9727%" y="325" width="0.0247%" height="15" fill="rgb(222,18,33)"/><text x="100.2227%" y="335.50"></text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (77,016 samples, 99.94%)</title><rect x="0.0558%" y="453" width="99.9429%" height="15" fill="rgb(213,199,7)"/><text x="0.3058%" y="463.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>all (77,060 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(250,110,10)"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (77,018 samples, 99.95%)</title><rect x="0.0545%" y="501" width="99.9455%" height="15" fill="rgb(248,123,6)"/><text x="0.3045%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (77,017 samples, 99.94%)</title><rect x="0.0558%" y="485" width="99.9442%" height="15" fill="rgb(206,91,31)"/><text x="0.3058%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (77,017 samples, 99.94%)</title><rect x="0.0558%" y="469" width="99.9442%" height="15" fill="rgb(211,154,13)"/><text x="0.3058%" y="479.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g></svg></svg>