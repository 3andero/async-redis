<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.04%)</title><rect x="0.0312%" y="229" width="0.0428%" height="15" fill="rgb(227,0,7)"/><text x="0.2812%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::deregister (11 samples, 0.04%)</title><rect x="0.0312%" y="213" width="0.0428%" height="15" fill="rgb(217,0,24)"/><text x="0.2812%" y="223.50"></text></g><g><title>async-redis`&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::deregister (11 samples, 0.04%)</title><rect x="0.0312%" y="197" width="0.0428%" height="15" fill="rgb(221,193,54)"/><text x="0.2812%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`kevent (11 samples, 0.04%)</title><rect x="0.0312%" y="181" width="0.0428%" height="15" fill="rgb(248,212,6)"/><text x="0.2812%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (20 samples, 0.08%)</title><rect x="0.0312%" y="245" width="0.0779%" height="15" fill="rgb(208,68,35)"/><text x="0.2812%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (9 samples, 0.04%)</title><rect x="0.0740%" y="229" width="0.0350%" height="15" fill="rgb(232,128,0)"/><text x="0.3240%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (8 samples, 0.03%)</title><rect x="0.1090%" y="213" width="0.0312%" height="15" fill="rgb(207,160,47)"/><text x="0.3590%" y="223.50"></text></g><g><title>async-redis`mio::sys::unix::tcp::accept (9 samples, 0.04%)</title><rect x="0.1090%" y="229" width="0.0350%" height="15" fill="rgb(228,23,34)"/><text x="0.3590%" y="239.50"></text></g><g><title>async-redis`mio::net::tcp::listener::TcpListener::accept (84 samples, 0.33%)</title><rect x="0.1090%" y="245" width="0.3271%" height="15" fill="rgb(218,30,26)"/><text x="0.3590%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__accept (75 samples, 0.29%)</title><rect x="0.1441%" y="229" width="0.2921%" height="15" fill="rgb(220,122,19)"/><text x="0.3941%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.02%)</title><rect x="0.4362%" y="245" width="0.0156%" height="15" fill="rgb(250,228,42)"/><text x="0.6862%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.02%)</title><rect x="0.4362%" y="229" width="0.0156%" height="15" fill="rgb(240,193,28)"/><text x="0.6862%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="0.4400%" y="213" width="0.0117%" height="15" fill="rgb(216,20,37)"/><text x="0.6900%" y="223.50"></text></g><g><title>async-redis`&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (18 samples, 0.07%)</title><rect x="0.4517%" y="181" width="0.0701%" height="15" fill="rgb(206,188,39)"/><text x="0.7017%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`kevent (18 samples, 0.07%)</title><rect x="0.4517%" y="165" width="0.0701%" height="15" fill="rgb(217,207,13)"/><text x="0.7017%" y="175.50"></text></g><g><title>async-redis`tokio::net::tcp::stream::TcpStream::new (20 samples, 0.08%)</title><rect x="0.4517%" y="245" width="0.0779%" height="15" fill="rgb(231,73,38)"/><text x="0.7017%" y="255.50"></text></g><g><title>async-redis`tokio::io::poll_evented::PollEvented&lt;E&gt;::new (20 samples, 0.08%)</title><rect x="0.4517%" y="229" width="0.0779%" height="15" fill="rgb(225,20,46)"/><text x="0.7017%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::new_with_interest_and_handle (20 samples, 0.08%)</title><rect x="0.4517%" y="213" width="0.0779%" height="15" fill="rgb(210,31,41)"/><text x="0.7017%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Inner::add_source (20 samples, 0.08%)</title><rect x="0.4517%" y="197" width="0.0779%" height="15" fill="rgb(221,200,47)"/><text x="0.7017%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::channel (6 samples, 0.02%)</title><rect x="0.5296%" y="245" width="0.0234%" height="15" fill="rgb(226,26,5)"/><text x="0.7796%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::core::Cell&lt;T,S&gt;::new (3 samples, 0.01%)</title><rect x="0.5530%" y="213" width="0.0117%" height="15" fill="rgb(249,33,26)"/><text x="0.8030%" y="223.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.02%)</title><rect x="0.5763%" y="197" width="0.0195%" height="15" fill="rgb(235,183,28)"/><text x="0.8263%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (5 samples, 0.02%)</title><rect x="0.5763%" y="181" width="0.0195%" height="15" fill="rgb(221,5,38)"/><text x="0.8263%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule (9 samples, 0.04%)</title><rect x="0.5686%" y="213" width="0.0350%" height="15" fill="rgb(247,18,42)"/><text x="0.8186%" y="223.50"></text></g><g><title>async-redis`tokio::task::spawn::spawn (14 samples, 0.05%)</title><rect x="0.5530%" y="245" width="0.0545%" height="15" fill="rgb(241,131,45)"/><text x="0.8030%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::spawner::Spawner::spawn (14 samples, 0.05%)</title><rect x="0.5530%" y="229" width="0.0545%" height="15" fill="rgb(249,31,29)"/><text x="0.8030%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.6075%" y="245" width="0.0117%" height="15" fill="rgb(225,111,53)"/><text x="0.8575%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.6075%" y="229" width="0.0117%" height="15" fill="rgb(238,160,17)"/><text x="0.8575%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.63%)</title><rect x="0.0000%" y="261" width="0.6348%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (166 samples, 0.65%)</title><rect x="0.0000%" y="293" width="0.6464%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="303.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (166 samples, 0.65%)</title><rect x="0.0000%" y="277" width="0.6464%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (167 samples, 0.65%)</title><rect x="0.0000%" y="309" width="0.6503%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="319.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (169 samples, 0.66%)</title><rect x="0.0000%" y="325" width="0.6581%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (11 samples, 0.04%)</title><rect x="0.6620%" y="277" width="0.0428%" height="15" fill="rgb(254,191,54)"/><text x="0.9120%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (13 samples, 0.05%)</title><rect x="0.6581%" y="325" width="0.0506%" height="15" fill="rgb(241,83,37)"/><text x="0.9081%" y="335.50"></text></g><g><title>async-redis`tokio::park::thread::Inner::park (13 samples, 0.05%)</title><rect x="0.6581%" y="309" width="0.0506%" height="15" fill="rgb(233,36,39)"/><text x="0.9081%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (12 samples, 0.05%)</title><rect x="0.6620%" y="293" width="0.0467%" height="15" fill="rgb(226,3,54)"/><text x="0.9120%" y="303.50"></text></g><g><title>async-redis`0x1 (185 samples, 0.72%)</title><rect x="0.0000%" y="485" width="0.7204%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="495.50"></text></g><g><title>libdyld.dylib`start (185 samples, 0.72%)</title><rect x="0.0000%" y="469" width="0.7204%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="479.50"></text></g><g><title>async-redis`main (185 samples, 0.72%)</title><rect x="0.0000%" y="453" width="0.7204%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (185 samples, 0.72%)</title><rect x="0.0000%" y="437" width="0.7204%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (185 samples, 0.72%)</title><rect x="0.0000%" y="421" width="0.7204%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (185 samples, 0.72%)</title><rect x="0.0000%" y="405" width="0.7204%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="415.50"></text></g><g><title>async-redis`async_redis::main (185 samples, 0.72%)</title><rect x="0.0000%" y="389" width="0.7204%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="399.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (185 samples, 0.72%)</title><rect x="0.0000%" y="373" width="0.7204%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (185 samples, 0.72%)</title><rect x="0.0000%" y="357" width="0.7204%" height="15" fill="rgb(206,96,30)"/><text x="0.2500%" y="367.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (185 samples, 0.72%)</title><rect x="0.0000%" y="341" width="0.7204%" height="15" fill="rgb(218,138,4)"/><text x="0.2500%" y="351.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.01%)</title><rect x="0.7243%" y="405" width="0.0117%" height="15" fill="rgb(250,191,14)"/><text x="0.9743%" y="415.50"></text></g><g><title>async-redis`std::thread::local::fast::Key&lt;T&gt;::try_initialize (3 samples, 0.01%)</title><rect x="0.7243%" y="389" width="0.0117%" height="15" fill="rgb(239,60,40)"/><text x="0.9743%" y="399.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::ThreadData::new (3 samples, 0.01%)</title><rect x="0.7243%" y="373" width="0.0117%" height="15" fill="rgb(206,27,48)"/><text x="0.9743%" y="383.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::create_hashtable (3 samples, 0.01%)</title><rect x="0.7243%" y="357" width="0.0117%" height="15" fill="rgb(225,35,8)"/><text x="0.9743%" y="367.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::HashTable::new (3 samples, 0.01%)</title><rect x="0.7243%" y="341" width="0.0117%" height="15" fill="rgb(250,213,24)"/><text x="0.9743%" y="351.50"></text></g><g><title>async-redis`_dyld_private (3 samples, 0.01%)</title><rect x="0.7243%" y="325" width="0.0117%" height="15" fill="rgb(247,123,22)"/><text x="0.9743%" y="335.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (3 samples, 0.01%)</title><rect x="0.7243%" y="309" width="0.0117%" height="15" fill="rgb(231,138,38)"/><text x="0.9743%" y="319.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (3 samples, 0.01%)</title><rect x="0.7243%" y="293" width="0.0117%" height="15" fill="rgb(231,145,46)"/><text x="0.9743%" y="303.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (3 samples, 0.01%)</title><rect x="0.7243%" y="277" width="0.0117%" height="15" fill="rgb(251,118,11)"/><text x="0.9743%" y="287.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (3 samples, 0.01%)</title><rect x="0.7243%" y="261" width="0.0117%" height="15" fill="rgb(217,147,25)"/><text x="0.9743%" y="271.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (3 samples, 0.01%)</title><rect x="0.7243%" y="245" width="0.0117%" height="15" fill="rgb(247,81,37)"/><text x="0.9743%" y="255.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (3 samples, 0.01%)</title><rect x="0.7243%" y="229" width="0.0117%" height="15" fill="rgb(209,12,38)"/><text x="0.9743%" y="239.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (3 samples, 0.01%)</title><rect x="0.7243%" y="213" width="0.0117%" height="15" fill="rgb(227,1,9)"/><text x="0.9743%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (6 samples, 0.02%)</title><rect x="0.7360%" y="325" width="0.0234%" height="15" fill="rgb(248,47,43)"/><text x="0.9860%" y="335.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (4 samples, 0.02%)</title><rect x="0.7672%" y="325" width="0.0156%" height="15" fill="rgb(221,10,30)"/><text x="1.0172%" y="335.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (7 samples, 0.03%)</title><rect x="1.7057%" y="309" width="0.0273%" height="15" fill="rgb(210,229,1)"/><text x="1.9557%" y="319.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.02%)</title><rect x="1.7446%" y="309" width="0.0234%" height="15" fill="rgb(222,148,37)"/><text x="1.9946%" y="319.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.02%)</title><rect x="1.7680%" y="309" width="0.0156%" height="15" fill="rgb(234,67,33)"/><text x="2.0180%" y="319.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.03%)</title><rect x="1.7836%" y="309" width="0.0312%" height="15" fill="rgb(247,98,35)"/><text x="2.0336%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (5 samples, 0.02%)</title><rect x="1.8147%" y="309" width="0.0195%" height="15" fill="rgb(247,138,52)"/><text x="2.0647%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (104 samples, 0.41%)</title><rect x="1.8342%" y="309" width="0.4050%" height="15" fill="rgb(213,79,30)"/><text x="2.0842%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (7 samples, 0.03%)</title><rect x="4.6809%" y="293" width="0.0273%" height="15" fill="rgb(246,177,23)"/><text x="4.9309%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (6 samples, 0.02%)</title><rect x="4.6848%" y="277" width="0.0234%" height="15" fill="rgb(230,62,27)"/><text x="4.9348%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (7 samples, 0.03%)</title><rect x="5.3585%" y="277" width="0.0273%" height="15" fill="rgb(216,154,8)"/><text x="5.6085%" y="287.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="5.3935%" y="277" width="0.0117%" height="15" fill="rgb(244,35,45)"/><text x="5.6435%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (3 samples, 0.01%)</title><rect x="5.6973%" y="261" width="0.0117%" height="15" fill="rgb(251,115,12)"/><text x="5.9473%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.05%)</title><rect x="5.7089%" y="261" width="0.0467%" height="15" fill="rgb(240,54,50)"/><text x="5.9589%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (997 samples, 3.88%)</title><rect x="5.7557%" y="261" width="3.8825%" height="15" fill="rgb(233,84,52)"/><text x="6.0057%" y="271.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (10 samples, 0.04%)</title><rect x="9.8719%" y="245" width="0.0389%" height="15" fill="rgb(207,117,47)"/><text x="10.1219%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (37 samples, 0.14%)</title><rect x="9.9108%" y="229" width="0.1441%" height="15" fill="rgb(249,43,39)"/><text x="10.1608%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (40 samples, 0.16%)</title><rect x="9.9108%" y="245" width="0.1558%" height="15" fill="rgb(209,38,44)"/><text x="10.1608%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (3 samples, 0.01%)</title><rect x="10.0549%" y="229" width="0.0117%" height="15" fill="rgb(236,212,23)"/><text x="10.3049%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (34 samples, 0.13%)</title><rect x="10.0666%" y="245" width="0.1324%" height="15" fill="rgb(242,79,21)"/><text x="10.3166%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (158 samples, 0.62%)</title><rect x="9.6421%" y="261" width="0.6153%" height="15" fill="rgb(211,96,35)"/><text x="9.8921%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (15 samples, 0.06%)</title><rect x="10.1990%" y="245" width="0.0584%" height="15" fill="rgb(253,215,40)"/><text x="10.4490%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (10 samples, 0.04%)</title><rect x="10.2652%" y="261" width="0.0389%" height="15" fill="rgb(211,81,21)"/><text x="10.5152%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (1,271 samples, 4.95%)</title><rect x="5.4052%" y="277" width="4.9496%" height="15" fill="rgb(208,190,38)"/><text x="5.6552%" y="287.50">async-..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (12 samples, 0.05%)</title><rect x="10.3080%" y="261" width="0.0467%" height="15" fill="rgb(235,213,38)"/><text x="10.5580%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (8 samples, 0.03%)</title><rect x="10.3548%" y="277" width="0.0312%" height="15" fill="rgb(237,122,38)"/><text x="10.6048%" y="287.50"></text></g><g><title>async-redis`std::time::Instant::now (9 samples, 0.04%)</title><rect x="10.3898%" y="277" width="0.0350%" height="15" fill="rgb(244,218,35)"/><text x="10.6398%" y="287.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="10.5962%" y="245" width="0.0156%" height="15" fill="rgb(240,68,47)"/><text x="10.8462%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (9 samples, 0.04%)</title><rect x="10.6118%" y="245" width="0.0350%" height="15" fill="rgb(210,16,53)"/><text x="10.8618%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_writable (3 samples, 0.01%)</title><rect x="10.6585%" y="245" width="0.0117%" height="15" fill="rgb(235,124,12)"/><text x="10.9085%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::is_write_closed (4 samples, 0.02%)</title><rect x="10.6702%" y="245" width="0.0156%" height="15" fill="rgb(224,169,11)"/><text x="10.9202%" y="255.50"></text></g><g><title>async-redis`mio::event::event::Event::token (7 samples, 0.03%)</title><rect x="10.6858%" y="245" width="0.0273%" height="15" fill="rgb(250,166,2)"/><text x="10.9358%" y="255.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (5 samples, 0.02%)</title><rect x="10.7130%" y="245" width="0.0195%" height="15" fill="rgb(242,216,29)"/><text x="10.9630%" y="255.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (6 samples, 0.02%)</title><rect x="10.7325%" y="245" width="0.0234%" height="15" fill="rgb(230,116,27)"/><text x="10.9825%" y="255.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="11.3244%" y="229" width="0.0156%" height="15" fill="rgb(228,99,48)"/><text x="11.5744%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (4 samples, 0.02%)</title><rect x="11.3478%" y="229" width="0.0156%" height="15" fill="rgb(253,11,6)"/><text x="11.5978%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (8 samples, 0.03%)</title><rect x="11.3751%" y="229" width="0.0312%" height="15" fill="rgb(247,143,39)"/><text x="11.6251%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (32 samples, 0.12%)</title><rect x="11.4101%" y="229" width="0.1246%" height="15" fill="rgb(236,97,10)"/><text x="11.6601%" y="239.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (6 samples, 0.02%)</title><rect x="11.6788%" y="213" width="0.0234%" height="15" fill="rgb(233,208,19)"/><text x="11.9288%" y="223.50"></text></g><g><title> 32]&gt;::default (6 samples, 0.02%)</title><rect x="11.6788%" y="197" width="0.0234%" height="15" fill="rgb(216,164,2)"/><text x="11.9288%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (29 samples, 0.11%)</title><rect x="11.7022%" y="213" width="0.1129%" height="15" fill="rgb(220,129,5)"/><text x="11.9522%" y="223.50"></text></g><g><title>async-redis`tokio::park::thread::wake (5 samples, 0.02%)</title><rect x="11.8151%" y="213" width="0.0195%" height="15" fill="rgb(242,17,10)"/><text x="12.0651%" y="223.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.02%)</title><rect x="11.8151%" y="197" width="0.0195%" height="15" fill="rgb(242,107,0)"/><text x="12.0651%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.02%)</title><rect x="11.8190%" y="181" width="0.0156%" height="15" fill="rgb(251,28,31)"/><text x="12.0690%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (4 samples, 0.02%)</title><rect x="11.8424%" y="213" width="0.0156%" height="15" fill="rgb(233,223,10)"/><text x="12.0924%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.05%)</title><rect x="11.8813%" y="197" width="0.0467%" height="15" fill="rgb(215,21,27)"/><text x="12.1313%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (38 samples, 0.15%)</title><rect x="11.9280%" y="197" width="0.1480%" height="15" fill="rgb(232,23,21)"/><text x="12.1780%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (4 samples, 0.02%)</title><rect x="12.1383%" y="165" width="0.0156%" height="15" fill="rgb(244,5,23)"/><text x="12.3883%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (3 samples, 0.01%)</title><rect x="12.1539%" y="165" width="0.0117%" height="15" fill="rgb(226,81,46)"/><text x="12.4039%" y="175.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (26 samples, 0.10%)</title><rect x="12.0916%" y="181" width="0.1013%" height="15" fill="rgb(247,70,30)"/><text x="12.3416%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.03%)</title><rect x="12.1656%" y="165" width="0.0273%" height="15" fill="rgb(212,68,19)"/><text x="12.4156%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (88 samples, 0.34%)</title><rect x="11.8579%" y="213" width="0.3427%" height="15" fill="rgb(240,187,13)"/><text x="12.1079%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (32 samples, 0.12%)</title><rect x="12.0760%" y="197" width="0.1246%" height="15" fill="rgb(223,113,26)"/><text x="12.3260%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (173 samples, 0.67%)</title><rect x="11.5347%" y="229" width="0.6737%" height="15" fill="rgb(206,192,2)"/><text x="11.7847%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (1,703 samples, 6.63%)</title><rect x="10.7559%" y="245" width="6.6319%" height="15" fill="rgb(241,108,4)"/><text x="11.0059%" y="255.50">async-red..</text></g><g><title>libsystem_kernel.dylib`kevent (1,330 samples, 5.18%)</title><rect x="12.2084%" y="229" width="5.1793%" height="15" fill="rgb(247,173,49)"/><text x="12.4584%" y="239.50">libsys..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (8 samples, 0.03%)</title><rect x="17.3877%" y="245" width="0.0312%" height="15" fill="rgb(224,114,35)"/><text x="17.6377%" y="255.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (5 samples, 0.02%)</title><rect x="17.4462%" y="229" width="0.0195%" height="15" fill="rgb(245,159,27)"/><text x="17.6962%" y="239.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (9 samples, 0.04%)</title><rect x="17.4851%" y="213" width="0.0350%" height="15" fill="rgb(245,172,44)"/><text x="17.7351%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (18 samples, 0.07%)</title><rect x="17.5202%" y="213" width="0.0701%" height="15" fill="rgb(236,23,11)"/><text x="17.7702%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (50 samples, 0.19%)</title><rect x="17.4267%" y="245" width="0.1947%" height="15" fill="rgb(205,117,38)"/><text x="17.6767%" y="255.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (40 samples, 0.16%)</title><rect x="17.4656%" y="229" width="0.1558%" height="15" fill="rgb(237,72,25)"/><text x="17.7156%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="17.5902%" y="213" width="0.0312%" height="15" fill="rgb(244,70,9)"/><text x="17.8402%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (1,826 samples, 7.11%)</title><rect x="10.5612%" y="261" width="7.1109%" height="15" fill="rgb(217,125,39)"/><text x="10.8112%" y="271.50">async-redi..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (13 samples, 0.05%)</title><rect x="17.6214%" y="245" width="0.0506%" height="15" fill="rgb(235,36,10)"/><text x="17.8714%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (5 samples, 0.02%)</title><rect x="17.6720%" y="261" width="0.0195%" height="15" fill="rgb(251,123,47)"/><text x="17.9220%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (39 samples, 0.15%)</title><rect x="17.6993%" y="261" width="0.1519%" height="15" fill="rgb(221,13,13)"/><text x="17.9493%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (5 samples, 0.02%)</title><rect x="17.8551%" y="261" width="0.0195%" height="15" fill="rgb(238,131,9)"/><text x="18.1051%" y="271.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (10 samples, 0.04%)</title><rect x="17.8745%" y="261" width="0.0389%" height="15" fill="rgb(211,50,8)"/><text x="18.1245%" y="271.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.01%)</title><rect x="17.9135%" y="261" width="0.0117%" height="15" fill="rgb(245,182,24)"/><text x="18.1635%" y="271.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (44 samples, 0.17%)</title><rect x="18.0186%" y="245" width="0.1713%" height="15" fill="rgb(242,14,37)"/><text x="18.2686%" y="255.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.02%)</title><rect x="18.1900%" y="245" width="0.0156%" height="15" fill="rgb(246,228,12)"/><text x="18.4400%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (31 samples, 0.12%)</title><rect x="18.2055%" y="245" width="0.1207%" height="15" fill="rgb(213,55,15)"/><text x="18.4555%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (26 samples, 0.10%)</title><rect x="18.2250%" y="229" width="0.1013%" height="15" fill="rgb(209,9,3)"/><text x="18.4750%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (21 samples, 0.08%)</title><rect x="18.3263%" y="245" width="0.0818%" height="15" fill="rgb(230,59,30)"/><text x="18.5763%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (17 samples, 0.07%)</title><rect x="18.3418%" y="229" width="0.0662%" height="15" fill="rgb(209,121,21)"/><text x="18.5918%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (125 samples, 0.49%)</title><rect x="17.9252%" y="261" width="0.4868%" height="15" fill="rgb(220,109,13)"/><text x="18.1752%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (33 samples, 0.13%)</title><rect x="18.4119%" y="261" width="0.1285%" height="15" fill="rgb(232,18,1)"/><text x="18.6619%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (31 samples, 0.12%)</title><rect x="18.4197%" y="245" width="0.1207%" height="15" fill="rgb(215,41,42)"/><text x="18.6697%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (2,121 samples, 8.26%)</title><rect x="10.4249%" y="277" width="8.2597%" height="15" fill="rgb(224,123,36)"/><text x="10.6749%" y="287.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (35 samples, 0.14%)</title><rect x="18.5482%" y="261" width="0.1363%" height="15" fill="rgb(240,125,3)"/><text x="18.7982%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.03%)</title><rect x="18.6923%" y="277" width="0.0273%" height="15" fill="rgb(205,98,50)"/><text x="18.9423%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1,888 samples, 7.35%)</title><rect x="18.7196%" y="277" width="7.3523%" height="15" fill="rgb(205,185,37)"/><text x="18.9696%" y="287.50">libsystem_..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (19 samples, 0.07%)</title><rect x="26.0719%" y="277" width="0.0740%" height="15" fill="rgb(238,207,15)"/><text x="26.3219%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.02%)</title><rect x="26.1459%" y="277" width="0.0156%" height="15" fill="rgb(213,199,42)"/><text x="26.3959%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (60 samples, 0.23%)</title><rect x="26.1615%" y="277" width="0.2337%" height="15" fill="rgb(235,201,11)"/><text x="26.4115%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (5,581 samples, 21.73%)</title><rect x="4.7081%" y="293" width="21.7337%" height="15" fill="rgb(207,46,11)"/><text x="4.9581%" y="303.50">async-redis`&lt;tokio::runtime::park:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (11 samples, 0.04%)</title><rect x="26.3990%" y="277" width="0.0428%" height="15" fill="rgb(241,35,35)"/><text x="26.6490%" y="287.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (6 samples, 0.02%)</title><rect x="26.4964%" y="229" width="0.0234%" height="15" fill="rgb(243,32,47)"/><text x="26.7464%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (4 samples, 0.02%)</title><rect x="26.5041%" y="213" width="0.0156%" height="15" fill="rgb(247,202,23)"/><text x="26.7541%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (54 samples, 0.21%)</title><rect x="26.4808%" y="245" width="0.2103%" height="15" fill="rgb(219,102,11)"/><text x="26.7308%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`kevent (44 samples, 0.17%)</title><rect x="26.5197%" y="229" width="0.1713%" height="15" fill="rgb(243,110,44)"/><text x="26.7697%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (57 samples, 0.22%)</title><rect x="26.4730%" y="261" width="0.2220%" height="15" fill="rgb(222,74,54)"/><text x="26.7230%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (4 samples, 0.02%)</title><rect x="26.7028%" y="261" width="0.0156%" height="15" fill="rgb(216,99,12)"/><text x="26.9528%" y="271.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (72 samples, 0.28%)</title><rect x="26.4535%" y="277" width="0.2804%" height="15" fill="rgb(226,22,26)"/><text x="26.7035%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.01%)</title><rect x="26.7222%" y="261" width="0.0117%" height="15" fill="rgb(217,163,10)"/><text x="26.9722%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (76 samples, 0.30%)</title><rect x="26.4418%" y="293" width="0.2960%" height="15" fill="rgb(213,25,53)"/><text x="26.6918%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (6 samples, 0.02%)</title><rect x="26.7378%" y="293" width="0.0234%" height="15" fill="rgb(252,105,26)"/><text x="26.9878%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (31 samples, 0.12%)</title><rect x="26.7806%" y="277" width="0.1207%" height="15" fill="rgb(220,39,43)"/><text x="27.0306%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (3 samples, 0.01%)</title><rect x="26.9169%" y="277" width="0.0117%" height="15" fill="rgb(229,68,48)"/><text x="27.1669%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (44 samples, 0.17%)</title><rect x="26.7651%" y="293" width="0.1713%" height="15" fill="rgb(252,8,32)"/><text x="27.0151%" y="303.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.02%)</title><rect x="26.9364%" y="293" width="0.0156%" height="15" fill="rgb(223,20,43)"/><text x="27.1864%" y="303.50"></text></g><g><title>async-redis`std::thread::yield_now (5 samples, 0.02%)</title><rect x="26.9520%" y="293" width="0.0195%" height="15" fill="rgb(229,81,49)"/><text x="27.2020%" y="303.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (6 samples, 0.02%)</title><rect x="26.9715%" y="293" width="0.0234%" height="15" fill="rgb(236,28,36)"/><text x="27.2215%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (6,382 samples, 24.85%)</title><rect x="2.2392%" y="309" width="24.8530%" height="15" fill="rgb(249,185,26)"/><text x="2.4892%" y="319.50">async-redis`tokio::runtime::thread_pool:..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (25 samples, 0.10%)</title><rect x="26.9948%" y="293" width="0.0974%" height="15" fill="rgb(249,174,33)"/><text x="27.2448%" y="303.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (32 samples, 0.12%)</title><rect x="27.2869%" y="293" width="0.1246%" height="15" fill="rgb(233,201,37)"/><text x="27.5369%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (31 samples, 0.12%)</title><rect x="27.2908%" y="277" width="0.1207%" height="15" fill="rgb(221,78,26)"/><text x="27.5408%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (16 samples, 0.06%)</title><rect x="27.4115%" y="293" width="0.0623%" height="15" fill="rgb(250,127,30)"/><text x="27.6615%" y="303.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (4 samples, 0.02%)</title><rect x="27.5205%" y="277" width="0.0156%" height="15" fill="rgb(230,49,44)"/><text x="27.7705%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (26 samples, 0.10%)</title><rect x="27.5361%" y="277" width="0.1013%" height="15" fill="rgb(229,67,23)"/><text x="27.7861%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (465 samples, 1.81%)</title><rect x="27.6374%" y="277" width="1.8108%" height="15" fill="rgb(249,83,47)"/><text x="27.8874%" y="287.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (3 samples, 0.01%)</title><rect x="29.4638%" y="277" width="0.0117%" height="15" fill="rgb(215,43,3)"/><text x="29.7138%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (18 samples, 0.07%)</title><rect x="29.4793%" y="277" width="0.0701%" height="15" fill="rgb(238,154,13)"/><text x="29.7293%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (17 samples, 0.07%)</title><rect x="29.4832%" y="261" width="0.0662%" height="15" fill="rgb(219,56,2)"/><text x="29.7332%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (21 samples, 0.08%)</title><rect x="29.5494%" y="277" width="0.0818%" height="15" fill="rgb(233,0,4)"/><text x="29.7994%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (5 samples, 0.02%)</title><rect x="29.6117%" y="261" width="0.0195%" height="15" fill="rgb(235,30,7)"/><text x="29.8617%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (12 samples, 0.05%)</title><rect x="29.6312%" y="277" width="0.0467%" height="15" fill="rgb(250,79,13)"/><text x="29.8812%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (571 samples, 2.22%)</title><rect x="27.4738%" y="293" width="2.2236%" height="15" fill="rgb(211,146,34)"/><text x="27.7238%" y="303.50">a..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.02%)</title><rect x="29.6779%" y="277" width="0.0195%" height="15" fill="rgb(228,22,38)"/><text x="29.9279%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (5 samples, 0.02%)</title><rect x="29.6974%" y="293" width="0.0195%" height="15" fill="rgb(235,168,5)"/><text x="29.9474%" y="303.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16 samples, 0.06%)</title><rect x="29.9544%" y="277" width="0.0623%" height="15" fill="rgb(221,155,16)"/><text x="30.2044%" y="287.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.09%)</title><rect x="30.2543%" y="261" width="0.0857%" height="15" fill="rgb(215,215,53)"/><text x="30.5043%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_size (21 samples, 0.08%)</title><rect x="31.1344%" y="181" width="0.0818%" height="15" fill="rgb(223,4,10)"/><text x="31.3844%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.10%)</title><rect x="31.1305%" y="197" width="0.0974%" height="15" fill="rgb(234,103,6)"/><text x="31.3805%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="31.2162%" y="181" width="0.0117%" height="15" fill="rgb(227,97,0)"/><text x="31.4662%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="31.2162%" y="165" width="0.0117%" height="15" fill="rgb(234,150,53)"/><text x="31.4662%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (15 samples, 0.06%)</title><rect x="31.2629%" y="181" width="0.0584%" height="15" fill="rgb(228,201,54)"/><text x="31.5129%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (4 samples, 0.02%)</title><rect x="31.3291%" y="181" width="0.0156%" height="15" fill="rgb(222,22,37)"/><text x="31.5791%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="31.3291%" y="165" width="0.0156%" height="15" fill="rgb(237,53,32)"/><text x="31.5791%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (75 samples, 0.29%)</title><rect x="31.0604%" y="213" width="0.2921%" height="15" fill="rgb(233,25,53)"/><text x="31.3104%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.12%)</title><rect x="31.2279%" y="197" width="0.1246%" height="15" fill="rgb(210,40,34)"/><text x="31.4779%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (34 samples, 0.13%)</title><rect x="31.4576%" y="197" width="0.1324%" height="15" fill="rgb(241,220,44)"/><text x="31.7076%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.06%)</title><rect x="31.5277%" y="181" width="0.0623%" height="15" fill="rgb(235,28,35)"/><text x="31.7777%" y="191.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="31.5900%" y="197" width="0.0195%" height="15" fill="rgb(210,56,17)"/><text x="31.8400%" y="207.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="31.6406%" y="165" width="0.0234%" height="15" fill="rgb(224,130,29)"/><text x="31.8906%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="31.6406%" y="149" width="0.0234%" height="15" fill="rgb(235,212,8)"/><text x="31.8906%" y="159.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (13 samples, 0.05%)</title><rect x="31.6173%" y="181" width="0.0506%" height="15" fill="rgb(223,33,50)"/><text x="31.8673%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (82 samples, 0.32%)</title><rect x="31.3525%" y="213" width="0.3193%" height="15" fill="rgb(219,149,13)"/><text x="31.6025%" y="223.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (15 samples, 0.06%)</title><rect x="31.6134%" y="197" width="0.0584%" height="15" fill="rgb(250,156,29)"/><text x="31.8634%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.02%)</title><rect x="31.6757%" y="213" width="0.0156%" height="15" fill="rgb(216,193,19)"/><text x="31.9257%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.06%)</title><rect x="31.6952%" y="197" width="0.0584%" height="15" fill="rgb(216,135,14)"/><text x="31.9452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.05%)</title><rect x="31.6991%" y="181" width="0.0545%" height="15" fill="rgb(241,47,5)"/><text x="31.9491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.07%)</title><rect x="31.6913%" y="213" width="0.0662%" height="15" fill="rgb(233,42,35)"/><text x="31.9413%" y="223.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (207 samples, 0.81%)</title><rect x="31.0448%" y="229" width="0.8061%" height="15" fill="rgb(231,13,6)"/><text x="31.2948%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.09%)</title><rect x="31.7614%" y="213" width="0.0896%" height="15" fill="rgb(207,181,40)"/><text x="32.0114%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.06%)</title><rect x="31.7886%" y="197" width="0.0623%" height="15" fill="rgb(254,173,49)"/><text x="32.0386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.04%)</title><rect x="31.8159%" y="181" width="0.0350%" height="15" fill="rgb(221,1,38)"/><text x="32.0659%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="32.9880%" y="181" width="0.0195%" height="15" fill="rgb(206,124,46)"/><text x="33.2380%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (29 samples, 0.11%)</title><rect x="32.9608%" y="197" width="0.1129%" height="15" fill="rgb(249,21,11)"/><text x="33.2108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.07%)</title><rect x="33.0075%" y="181" width="0.0662%" height="15" fill="rgb(222,201,40)"/><text x="33.2575%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.03%)</title><rect x="33.0426%" y="165" width="0.0312%" height="15" fill="rgb(235,61,29)"/><text x="33.2926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="33.0581%" y="149" width="0.0156%" height="15" fill="rgb(219,207,3)"/><text x="33.3081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.15%)</title><rect x="33.0737%" y="197" width="0.1480%" height="15" fill="rgb(222,56,46)"/><text x="33.3237%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.10%)</title><rect x="33.1204%" y="181" width="0.1013%" height="15" fill="rgb(239,76,54)"/><text x="33.3704%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.10%)</title><rect x="33.1204%" y="165" width="0.1013%" height="15" fill="rgb(231,124,27)"/><text x="33.3704%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (3 samples, 0.01%)</title><rect x="33.2723%" y="181" width="0.0117%" height="15" fill="rgb(249,195,6)"/><text x="33.5223%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.07%)</title><rect x="33.4242%" y="165" width="0.0701%" height="15" fill="rgb(237,174,47)"/><text x="33.6742%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (94 samples, 0.37%)</title><rect x="33.2217%" y="197" width="0.3661%" height="15" fill="rgb(206,201,31)"/><text x="33.4717%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.30%)</title><rect x="33.2918%" y="181" width="0.2960%" height="15" fill="rgb(231,57,52)"/><text x="33.5418%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (24 samples, 0.09%)</title><rect x="33.4943%" y="165" width="0.0935%" height="15" fill="rgb(248,177,22)"/><text x="33.7443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="33.5878%" y="197" width="0.0156%" height="15" fill="rgb(215,211,37)"/><text x="33.8378%" y="207.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 0.72%)</title><rect x="32.8868%" y="213" width="0.7204%" height="15" fill="rgb(241,128,51)"/><text x="33.1368%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.02%)</title><rect x="33.6111%" y="213" width="0.0234%" height="15" fill="rgb(227,165,31)"/><text x="33.8611%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="33.6345%" y="213" width="0.0312%" height="15" fill="rgb(228,167,24)"/><text x="33.8845%" y="223.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="34.1446%" y="181" width="0.0234%" height="15" fill="rgb(228,143,12)"/><text x="34.3946%" y="191.50"></text></g><g><title>async-redis`std::io::error::Error::kind (10 samples, 0.04%)</title><rect x="34.6314%" y="149" width="0.0389%" height="15" fill="rgb(249,149,8)"/><text x="34.8814%" y="159.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (10 samples, 0.04%)</title><rect x="34.6704%" y="149" width="0.0389%" height="15" fill="rgb(243,35,44)"/><text x="34.9204%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (3 samples, 0.01%)</title><rect x="35.0442%" y="101" width="0.0117%" height="15" fill="rgb(246,89,9)"/><text x="35.2942%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (16 samples, 0.06%)</title><rect x="35.0598%" y="101" width="0.0623%" height="15" fill="rgb(233,213,13)"/><text x="35.3098%" y="111.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (70 samples, 0.27%)</title><rect x="34.9157%" y="117" width="0.2726%" height="15" fill="rgb(233,141,41)"/><text x="35.1657%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (17 samples, 0.07%)</title><rect x="35.1221%" y="101" width="0.0662%" height="15" fill="rgb(239,167,4)"/><text x="35.3721%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (4 samples, 0.02%)</title><rect x="35.2000%" y="117" width="0.0156%" height="15" fill="rgb(209,217,16)"/><text x="35.4500%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__error (5 samples, 0.02%)</title><rect x="35.2155%" y="117" width="0.0195%" height="15" fill="rgb(219,88,35)"/><text x="35.4655%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (6,196 samples, 24.13%)</title><rect x="35.2350%" y="117" width="24.1287%" height="15" fill="rgb(220,193,23)"/><text x="35.4850%" y="127.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (6,297 samples, 24.52%)</title><rect x="34.8767%" y="133" width="24.5220%" height="15" fill="rgb(230,90,52)"/><text x="35.1267%" y="143.50">async-redis`&lt;&amp;mio::net::tcp::stream::Tc..</text></g><g><title>libsystem_kernel.dylib`cerror (9 samples, 0.04%)</title><rect x="59.3637%" y="117" width="0.0350%" height="15" fill="rgb(252,106,19)"/><text x="59.6137%" y="127.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="59.3987%" y="133" width="0.0156%" height="15" fill="rgb(206,74,20)"/><text x="59.6487%" y="143.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (4 samples, 0.02%)</title><rect x="59.4260%" y="133" width="0.0156%" height="15" fill="rgb(230,138,44)"/><text x="59.6760%" y="143.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (3 samples, 0.01%)</title><rect x="59.4416%" y="133" width="0.0117%" height="15" fill="rgb(235,182,43)"/><text x="59.6916%" y="143.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (11 samples, 0.04%)</title><rect x="59.7297%" y="117" width="0.0428%" height="15" fill="rgb(242,16,51)"/><text x="59.9797%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (35 samples, 0.14%)</title><rect x="59.7726%" y="117" width="0.1363%" height="15" fill="rgb(248,9,4)"/><text x="60.0226%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (5 samples, 0.02%)</title><rect x="59.8894%" y="101" width="0.0195%" height="15" fill="rgb(210,31,22)"/><text x="60.1394%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (4 samples, 0.02%)</title><rect x="59.8933%" y="85" width="0.0156%" height="15" fill="rgb(239,54,39)"/><text x="60.1433%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (9 samples, 0.04%)</title><rect x="59.9089%" y="117" width="0.0350%" height="15" fill="rgb(230,99,41)"/><text x="60.1589%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (133 samples, 0.52%)</title><rect x="59.4532%" y="133" width="0.5179%" height="15" fill="rgb(253,106,12)"/><text x="59.7032%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.03%)</title><rect x="59.9439%" y="117" width="0.0273%" height="15" fill="rgb(213,46,41)"/><text x="60.1939%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (6,488 samples, 25.27%)</title><rect x="34.7093%" y="149" width="25.2658%" height="15" fill="rgb(215,133,35)"/><text x="34.9593%" y="159.50">async-redis`tokio::io::driver::registrat..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6,537 samples, 25.46%)</title><rect x="34.5341%" y="165" width="25.4566%" height="15" fill="rgb(213,28,5)"/><text x="34.7841%" y="175.50">async-redis`&lt;tokio::net::tcp::stream::Tcp..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (4 samples, 0.02%)</title><rect x="59.9751%" y="149" width="0.0156%" height="15" fill="rgb(215,77,49)"/><text x="60.2251%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.03%)</title><rect x="60.4930%" y="133" width="0.0273%" height="15" fill="rgb(248,100,22)"/><text x="60.7430%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5 samples, 0.02%)</title><rect x="60.5008%" y="117" width="0.0195%" height="15" fill="rgb(208,67,9)"/><text x="60.7508%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (5 samples, 0.02%)</title><rect x="60.5242%" y="133" width="0.0195%" height="15" fill="rgb(219,133,21)"/><text x="60.7742%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (5 samples, 0.02%)</title><rect x="60.5242%" y="117" width="0.0195%" height="15" fill="rgb(246,46,29)"/><text x="60.7742%" y="127.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (143 samples, 0.56%)</title><rect x="60.0062%" y="149" width="0.5569%" height="15" fill="rgb(246,185,52)"/><text x="60.2562%" y="159.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (5 samples, 0.02%)</title><rect x="60.5436%" y="133" width="0.0195%" height="15" fill="rgb(252,136,11)"/><text x="60.7936%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (148 samples, 0.58%)</title><rect x="59.9907%" y="165" width="0.5763%" height="15" fill="rgb(219,138,53)"/><text x="60.2407%" y="175.50"></text></g><g><title>async-redis`DYLD-STUB$$memmove (3 samples, 0.01%)</title><rect x="60.5670%" y="165" width="0.0117%" height="15" fill="rgb(211,51,23)"/><text x="60.8170%" y="175.50"></text></g><g><title>async-redis`__rdl_dealloc (4 samples, 0.02%)</title><rect x="60.8630%" y="149" width="0.0156%" height="15" fill="rgb(247,221,28)"/><text x="61.1130%" y="159.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="61.1784%" y="133" width="0.0117%" height="15" fill="rgb(251,222,45)"/><text x="61.4284%" y="143.50"></text></g><g><title>async-redis`__rdl_alloc (5 samples, 0.02%)</title><rect x="61.2991%" y="117" width="0.0195%" height="15" fill="rgb(217,162,53)"/><text x="61.5491%" y="127.50"></text></g><g><title>async-redis`__rust_alloc (3 samples, 0.01%)</title><rect x="61.3186%" y="117" width="0.0117%" height="15" fill="rgb(229,93,14)"/><text x="61.5686%" y="127.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="61.3653%" y="101" width="0.0156%" height="15" fill="rgb(209,67,49)"/><text x="61.6153%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (102 samples, 0.40%)</title><rect x="61.5250%" y="85" width="0.3972%" height="15" fill="rgb(213,87,29)"/><text x="61.7750%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (99 samples, 0.39%)</title><rect x="61.5367%" y="69" width="0.3855%" height="15" fill="rgb(205,151,52)"/><text x="61.7867%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.16%)</title><rect x="61.7664%" y="53" width="0.1558%" height="15" fill="rgb(253,215,39)"/><text x="62.0164%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.04%)</title><rect x="61.8794%" y="37" width="0.0428%" height="15" fill="rgb(221,220,41)"/><text x="62.1294%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (140 samples, 0.55%)</title><rect x="61.3809%" y="101" width="0.5452%" height="15" fill="rgb(218,133,21)"/><text x="61.6309%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.06%)</title><rect x="61.9261%" y="101" width="0.0623%" height="15" fill="rgb(221,193,43)"/><text x="62.1761%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::copy_from_slice (177 samples, 0.69%)</title><rect x="61.3303%" y="117" width="0.6893%" height="15" fill="rgb(240,128,52)"/><text x="61.5803%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.02%)</title><rect x="61.9962%" y="101" width="0.0234%" height="15" fill="rgb(253,114,12)"/><text x="62.2462%" y="111.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (4 samples, 0.02%)</title><rect x="62.0195%" y="117" width="0.0156%" height="15" fill="rgb(215,223,47)"/><text x="62.2695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="62.0351%" y="117" width="0.0312%" height="15" fill="rgb(248,225,23)"/><text x="62.2851%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.04%)</title><rect x="62.0663%" y="117" width="0.0350%" height="15" fill="rgb(250,108,0)"/><text x="62.3163%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::read_line (236 samples, 0.92%)</title><rect x="61.1901%" y="133" width="0.9190%" height="15" fill="rgb(228,208,7)"/><text x="61.4401%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.01%)</title><rect x="62.2298%" y="85" width="0.0117%" height="15" fill="rgb(244,45,10)"/><text x="62.4798%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.02%)</title><rect x="62.3428%" y="53" width="0.0195%" height="15" fill="rgb(207,125,25)"/><text x="62.5928%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (38 samples, 0.15%)</title><rect x="62.2415%" y="85" width="0.1480%" height="15" fill="rgb(210,195,18)"/><text x="62.4915%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (22 samples, 0.09%)</title><rect x="62.3038%" y="69" width="0.0857%" height="15" fill="rgb(249,80,12)"/><text x="62.5538%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.03%)</title><rect x="62.3622%" y="53" width="0.0273%" height="15" fill="rgb(221,65,9)"/><text x="62.6122%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (90 samples, 0.35%)</title><rect x="62.1636%" y="117" width="0.3505%" height="15" fill="rgb(235,49,36)"/><text x="62.4136%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.30%)</title><rect x="62.2143%" y="101" width="0.2999%" height="15" fill="rgb(225,32,20)"/><text x="62.4643%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.12%)</title><rect x="62.3895%" y="85" width="0.1246%" height="15" fill="rgb(215,141,46)"/><text x="62.6395%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.02%)</title><rect x="62.5141%" y="117" width="0.0234%" height="15" fill="rgb(250,160,47)"/><text x="62.7641%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::copy_from_slice (624 samples, 2.43%)</title><rect x="62.1091%" y="133" width="2.4300%" height="15" fill="rgb(216,222,40)"/><text x="62.3591%" y="143.50">as..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (513 samples, 2.00%)</title><rect x="62.5414%" y="117" width="1.9977%" height="15" fill="rgb(234,217,39)"/><text x="62.7914%" y="127.50">l..</text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (8 samples, 0.03%)</title><rect x="64.5430%" y="133" width="0.0312%" height="15" fill="rgb(207,178,40)"/><text x="64.7930%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (40 samples, 0.16%)</title><rect x="64.5820%" y="117" width="0.1558%" height="15" fill="rgb(221,136,13)"/><text x="64.8320%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 0.16%)</title><rect x="64.5820%" y="101" width="0.1558%" height="15" fill="rgb(249,199,10)"/><text x="64.8320%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.06%)</title><rect x="64.6754%" y="85" width="0.0623%" height="15" fill="rgb(249,222,13)"/><text x="64.9254%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="64.7221%" y="69" width="0.0156%" height="15" fill="rgb(244,185,38)"/><text x="64.9721%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.17%)</title><rect x="64.5742%" y="133" width="0.1713%" height="15" fill="rgb(236,202,9)"/><text x="64.8242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.11%)</title><rect x="64.8156%" y="117" width="0.1051%" height="15" fill="rgb(250,229,37)"/><text x="65.0656%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.09%)</title><rect x="64.8312%" y="101" width="0.0896%" height="15" fill="rgb(206,174,23)"/><text x="65.0812%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.19%)</title><rect x="64.7455%" y="133" width="0.1869%" height="15" fill="rgb(211,33,43)"/><text x="64.9955%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="64.9208%" y="117" width="0.0117%" height="15" fill="rgb(245,58,50)"/><text x="65.1708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (62 samples, 0.24%)</title><rect x="64.9324%" y="133" width="0.2414%" height="15" fill="rgb(244,68,36)"/><text x="65.1824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.09%)</title><rect x="65.0804%" y="117" width="0.0935%" height="15" fill="rgb(232,229,15)"/><text x="65.3304%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.04%)</title><rect x="65.1349%" y="101" width="0.0389%" height="15" fill="rgb(254,30,23)"/><text x="65.3849%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.02%)</title><rect x="65.1739%" y="133" width="0.0234%" height="15" fill="rgb(235,160,14)"/><text x="65.4239%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.02%)</title><rect x="65.1972%" y="133" width="0.0234%" height="15" fill="rgb(212,155,44)"/><text x="65.4472%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::consume_raw_bytes (1,118 samples, 4.35%)</title><rect x="60.8785%" y="149" width="4.3538%" height="15" fill="rgb(226,2,50)"/><text x="61.1285%" y="159.50">async..</text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::consume_token (22 samples, 0.09%)</title><rect x="65.2323%" y="149" width="0.0857%" height="15" fill="rgb(234,177,6)"/><text x="65.4823%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::intermediate_parsing::IntermediateToken::read_line (5 samples, 0.02%)</title><rect x="65.3180%" y="149" width="0.0195%" height="15" fill="rgb(217,24,9)"/><text x="65.5680%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (5 samples, 0.02%)</title><rect x="65.3413%" y="149" width="0.0195%" height="15" fill="rgb(220,13,46)"/><text x="65.5913%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (5 samples, 0.02%)</title><rect x="65.3608%" y="149" width="0.0195%" height="15" fill="rgb(239,221,27)"/><text x="65.6108%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="65.3842%" y="149" width="0.0195%" height="15" fill="rgb(222,198,25)"/><text x="65.6342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="65.4036%" y="149" width="0.0312%" height="15" fill="rgb(211,99,13)"/><text x="65.6536%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.04%)</title><rect x="65.4348%" y="149" width="0.0428%" height="15" fill="rgb(232,111,31)"/><text x="65.6848%" y="159.50"></text></g><g><title>async-redis`async_redis::protocol::decode::IntermediateParser::parse (1,338 samples, 5.21%)</title><rect x="60.5787%" y="165" width="5.2105%" height="15" fill="rgb(245,82,37)"/><text x="60.8287%" y="175.50">async-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (78 samples, 0.30%)</title><rect x="65.4854%" y="149" width="0.3038%" height="15" fill="rgb(227,149,46)"/><text x="65.7354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.05%)</title><rect x="65.8086%" y="117" width="0.0545%" height="15" fill="rgb(218,36,50)"/><text x="66.0586%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.04%)</title><rect x="65.8203%" y="101" width="0.0428%" height="15" fill="rgb(226,80,48)"/><text x="66.0703%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.02%)</title><rect x="65.8398%" y="85" width="0.0234%" height="15" fill="rgb(238,224,15)"/><text x="66.0898%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.06%)</title><rect x="65.8086%" y="133" width="0.0584%" height="15" fill="rgb(241,136,10)"/><text x="66.0586%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.07%)</title><rect x="65.8008%" y="149" width="0.0701%" height="15" fill="rgb(208,32,45)"/><text x="66.0508%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (116 samples, 0.45%)</title><rect x="65.7931%" y="165" width="0.4517%" height="15" fill="rgb(207,135,9)"/><text x="66.0431%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (96 samples, 0.37%)</title><rect x="65.8709%" y="149" width="0.3738%" height="15" fill="rgb(206,86,44)"/><text x="66.1209%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (3 samples, 0.01%)</title><rect x="66.2448%" y="165" width="0.0117%" height="15" fill="rgb(245,177,15)"/><text x="66.4948%" y="175.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (9 samples, 0.04%)</title><rect x="66.2565%" y="165" width="0.0350%" height="15" fill="rgb(206,64,50)"/><text x="66.5065%" y="175.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (3 samples, 0.01%)</title><rect x="66.2915%" y="165" width="0.0117%" height="15" fill="rgb(234,36,40)"/><text x="66.5415%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.03%)</title><rect x="66.3967%" y="117" width="0.0312%" height="15" fill="rgb(213,64,8)"/><text x="66.6467%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.21%)</title><rect x="66.3227%" y="149" width="0.2064%" height="15" fill="rgb(210,75,36)"/><text x="66.5727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.21%)</title><rect x="66.3227%" y="133" width="0.2064%" height="15" fill="rgb(229,88,21)"/><text x="66.5727%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.10%)</title><rect x="66.4317%" y="117" width="0.0974%" height="15" fill="rgb(252,204,47)"/><text x="66.6817%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 0.23%)</title><rect x="66.3071%" y="165" width="0.2259%" height="15" fill="rgb(208,77,27)"/><text x="66.5571%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.12%)</title><rect x="66.5369%" y="165" width="0.1207%" height="15" fill="rgb(221,76,26)"/><text x="66.7869%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.11%)</title><rect x="66.5524%" y="149" width="0.1051%" height="15" fill="rgb(225,139,18)"/><text x="66.8024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.10%)</title><rect x="66.5563%" y="133" width="0.1013%" height="15" fill="rgb(230,137,11)"/><text x="66.8063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="66.7238%" y="149" width="0.0117%" height="15" fill="rgb(212,28,1)"/><text x="66.9738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.07%)</title><rect x="66.8406%" y="133" width="0.0662%" height="15" fill="rgb(248,164,17)"/><text x="67.0906%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (71 samples, 0.28%)</title><rect x="66.6576%" y="165" width="0.2765%" height="15" fill="rgb(222,171,42)"/><text x="66.9076%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 0.20%)</title><rect x="66.7355%" y="149" width="0.1986%" height="15" fill="rgb(243,84,45)"/><text x="66.9855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.03%)</title><rect x="66.9068%" y="133" width="0.0273%" height="15" fill="rgb(252,49,23)"/><text x="67.1568%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.04%)</title><rect x="66.9458%" y="165" width="0.0428%" height="15" fill="rgb(215,19,7)"/><text x="67.1958%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,429 samples, 32.82%)</title><rect x="34.1680%" y="181" width="32.8245%" height="15" fill="rgb(238,81,41)"/><text x="34.4180%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.02%)</title><rect x="66.9925%" y="181" width="0.0195%" height="15" fill="rgb(210,199,37)"/><text x="67.2425%" y="191.50"></text></g><g><title>async-redis`&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="67.0120%" y="181" width="0.0117%" height="15" fill="rgb(244,192,49)"/><text x="67.2620%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (6 samples, 0.02%)</title><rect x="67.1405%" y="149" width="0.0234%" height="15" fill="rgb(226,211,11)"/><text x="67.3905%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (7 samples, 0.03%)</title><rect x="67.1638%" y="149" width="0.0273%" height="15" fill="rgb(236,162,54)"/><text x="67.4138%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (26 samples, 0.10%)</title><rect x="67.1911%" y="149" width="0.1013%" height="15" fill="rgb(220,229,9)"/><text x="67.4411%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (10 samples, 0.04%)</title><rect x="67.2923%" y="149" width="0.0389%" height="15" fill="rgb(250,87,22)"/><text x="67.5423%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (6 samples, 0.02%)</title><rect x="67.3313%" y="149" width="0.0234%" height="15" fill="rgb(239,43,17)"/><text x="67.5813%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (13 samples, 0.05%)</title><rect x="67.3702%" y="133" width="0.0506%" height="15" fill="rgb(231,177,25)"/><text x="67.6202%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="67.4403%" y="117" width="0.0234%" height="15" fill="rgb(219,179,1)"/><text x="67.6903%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (69 samples, 0.27%)</title><rect x="67.4637%" y="117" width="0.2687%" height="15" fill="rgb(238,219,53)"/><text x="67.7137%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (46 samples, 0.18%)</title><rect x="67.5533%" y="101" width="0.1791%" height="15" fill="rgb(232,167,36)"/><text x="67.8033%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (3 samples, 0.01%)</title><rect x="67.7324%" y="117" width="0.0117%" height="15" fill="rgb(244,19,51)"/><text x="67.9824%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (3 samples, 0.01%)</title><rect x="67.7441%" y="117" width="0.0117%" height="15" fill="rgb(224,6,22)"/><text x="67.9941%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (15 samples, 0.06%)</title><rect x="67.7558%" y="117" width="0.0584%" height="15" fill="rgb(224,145,5)"/><text x="68.0058%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (103 samples, 0.40%)</title><rect x="67.4208%" y="133" width="0.4011%" height="15" fill="rgb(234,130,49)"/><text x="67.6708%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.02%)</title><rect x="67.8220%" y="133" width="0.0156%" height="15" fill="rgb(254,6,2)"/><text x="68.0720%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (15 samples, 0.06%)</title><rect x="67.8375%" y="133" width="0.0584%" height="15" fill="rgb(208,96,46)"/><text x="68.0875%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (18 samples, 0.07%)</title><rect x="67.8959%" y="133" width="0.0701%" height="15" fill="rgb(239,3,39)"/><text x="68.1459%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (6 samples, 0.02%)</title><rect x="67.9427%" y="117" width="0.0234%" height="15" fill="rgb(233,210,1)"/><text x="68.1927%" y="127.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (6 samples, 0.02%)</title><rect x="67.9660%" y="133" width="0.0234%" height="15" fill="rgb(244,137,37)"/><text x="68.2160%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (164 samples, 0.64%)</title><rect x="67.3624%" y="149" width="0.6387%" height="15" fill="rgb(240,136,2)"/><text x="67.6124%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="67.9894%" y="133" width="0.0117%" height="15" fill="rgb(239,18,37)"/><text x="68.2394%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.06%)</title><rect x="68.0011%" y="149" width="0.0584%" height="15" fill="rgb(218,185,22)"/><text x="68.2511%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (266 samples, 1.04%)</title><rect x="67.0431%" y="165" width="1.0359%" height="15" fill="rgb(225,218,4)"/><text x="67.2931%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="68.0595%" y="149" width="0.0195%" height="15" fill="rgb(230,182,32)"/><text x="68.3095%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (7 samples, 0.03%)</title><rect x="68.0829%" y="165" width="0.0273%" height="15" fill="rgb(242,56,43)"/><text x="68.3329%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (283 samples, 1.10%)</title><rect x="67.0314%" y="181" width="1.1021%" height="15" fill="rgb(233,99,24)"/><text x="67.2814%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.02%)</title><rect x="68.1101%" y="165" width="0.0234%" height="15" fill="rgb(234,209,42)"/><text x="68.3601%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (3 samples, 0.01%)</title><rect x="68.1335%" y="181" width="0.0117%" height="15" fill="rgb(227,7,12)"/><text x="68.3835%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (11 samples, 0.04%)</title><rect x="68.1491%" y="181" width="0.0428%" height="15" fill="rgb(245,203,43)"/><text x="68.3991%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (7 samples, 0.03%)</title><rect x="68.1919%" y="181" width="0.0273%" height="15" fill="rgb(238,205,33)"/><text x="68.4419%" y="191.50"></text></g><g><title>async-redis`__rdl_alloc (3 samples, 0.01%)</title><rect x="68.2192%" y="181" width="0.0117%" height="15" fill="rgb(231,56,7)"/><text x="68.4692%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::decode::IntermediateParser::parse (3 samples, 0.01%)</title><rect x="68.2386%" y="181" width="0.0117%" height="15" fill="rgb(244,186,29)"/><text x="68.4886%" y="191.50"></text></g><g><title>async-redis`bytes::buf::uninit_slice::UninitSlice::from_raw_parts_mut (3 samples, 0.01%)</title><rect x="68.2503%" y="181" width="0.0117%" height="15" fill="rgb(234,111,31)"/><text x="68.5003%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (7 samples, 0.03%)</title><rect x="68.3126%" y="149" width="0.0273%" height="15" fill="rgb(241,149,10)"/><text x="68.5626%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (13 samples, 0.05%)</title><rect x="68.3438%" y="149" width="0.0506%" height="15" fill="rgb(249,206,44)"/><text x="68.5938%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (5 samples, 0.02%)</title><rect x="68.3749%" y="133" width="0.0195%" height="15" fill="rgb(251,153,30)"/><text x="68.6249%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (6 samples, 0.02%)</title><rect x="68.3983%" y="149" width="0.0234%" height="15" fill="rgb(239,152,38)"/><text x="68.6483%" y="159.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (7 samples, 0.03%)</title><rect x="68.4684%" y="101" width="0.0273%" height="15" fill="rgb(249,139,47)"/><text x="68.7184%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (14 samples, 0.05%)</title><rect x="68.4489%" y="133" width="0.0545%" height="15" fill="rgb(244,64,35)"/><text x="68.6989%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (11 samples, 0.04%)</title><rect x="68.4606%" y="117" width="0.0428%" height="15" fill="rgb(216,46,15)"/><text x="68.7106%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (34 samples, 0.13%)</title><rect x="68.5385%" y="85" width="0.1324%" height="15" fill="rgb(250,74,19)"/><text x="68.7885%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (23 samples, 0.09%)</title><rect x="68.5813%" y="69" width="0.0896%" height="15" fill="rgb(249,42,33)"/><text x="68.8313%" y="79.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (38 samples, 0.15%)</title><rect x="68.5346%" y="101" width="0.1480%" height="15" fill="rgb(242,149,17)"/><text x="68.7846%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (5 samples, 0.02%)</title><rect x="68.6865%" y="101" width="0.0195%" height="15" fill="rgb(244,29,21)"/><text x="68.9365%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (25 samples, 0.10%)</title><rect x="68.9123%" y="85" width="0.0974%" height="15" fill="rgb(220,130,37)"/><text x="69.1623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.05%)</title><rect x="69.0175%" y="85" width="0.0545%" height="15" fill="rgb(211,67,2)"/><text x="69.2675%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.05%)</title><rect x="69.0214%" y="69" width="0.0506%" height="15" fill="rgb(235,68,52)"/><text x="69.2714%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.05%)</title><rect x="69.0214%" y="53" width="0.0506%" height="15" fill="rgb(246,142,3)"/><text x="69.2714%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.06%)</title><rect x="69.2044%" y="53" width="0.0623%" height="15" fill="rgb(241,25,7)"/><text x="69.4544%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (39 samples, 0.15%)</title><rect x="69.1421%" y="69" width="0.1519%" height="15" fill="rgb(242,119,39)"/><text x="69.3921%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.03%)</title><rect x="69.2667%" y="53" width="0.0273%" height="15" fill="rgb(241,98,45)"/><text x="69.5167%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (58 samples, 0.23%)</title><rect x="69.0720%" y="85" width="0.2259%" height="15" fill="rgb(254,28,30)"/><text x="69.3220%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (157 samples, 0.61%)</title><rect x="68.7059%" y="101" width="0.6114%" height="15" fill="rgb(241,142,54)"/><text x="68.9559%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (18 samples, 0.07%)</title><rect x="69.3212%" y="101" width="0.0701%" height="15" fill="rgb(222,85,15)"/><text x="69.5712%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (237 samples, 0.92%)</title><rect x="68.5034%" y="133" width="0.9229%" height="15" fill="rgb(210,85,47)"/><text x="68.7534%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (230 samples, 0.90%)</title><rect x="68.5307%" y="117" width="0.8957%" height="15" fill="rgb(224,206,25)"/><text x="68.7807%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (7 samples, 0.03%)</title><rect x="69.3991%" y="101" width="0.0273%" height="15" fill="rgb(243,201,19)"/><text x="69.6491%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (264 samples, 1.03%)</title><rect x="68.4217%" y="149" width="1.0281%" height="15" fill="rgb(236,59,4)"/><text x="68.6717%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="69.4303%" y="133" width="0.0195%" height="15" fill="rgb(254,179,45)"/><text x="69.6803%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (15 samples, 0.06%)</title><rect x="69.4497%" y="149" width="0.0584%" height="15" fill="rgb(226,14,10)"/><text x="69.6997%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (6 samples, 0.02%)</title><rect x="69.5121%" y="149" width="0.0234%" height="15" fill="rgb(244,27,41)"/><text x="69.7621%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (324 samples, 1.26%)</title><rect x="68.3048%" y="165" width="1.2617%" height="15" fill="rgb(235,35,32)"/><text x="68.5548%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="69.5354%" y="149" width="0.0312%" height="15" fill="rgb(218,68,31)"/><text x="69.7854%" y="159.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (335 samples, 1.30%)</title><rect x="68.2698%" y="181" width="1.3046%" height="15" fill="rgb(207,120,37)"/><text x="68.5198%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (99 samples, 0.39%)</title><rect x="69.5977%" y="149" width="0.3855%" height="15" fill="rgb(227,98,0)"/><text x="69.8477%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (82 samples, 0.32%)</title><rect x="69.6639%" y="133" width="0.3193%" height="15" fill="rgb(207,7,3)"/><text x="69.9139%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (34 samples, 0.13%)</title><rect x="70.0339%" y="133" width="0.1324%" height="15" fill="rgb(206,98,19)"/><text x="70.2839%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (52 samples, 0.20%)</title><rect x="69.9833%" y="149" width="0.2025%" height="15" fill="rgb(217,5,26)"/><text x="70.2333%" y="159.50"></text></g><g><title>async-redis`thread_local::thread_id::get (5 samples, 0.02%)</title><rect x="70.1663%" y="133" width="0.0195%" height="15" fill="rgb(235,190,38)"/><text x="70.4163%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (153 samples, 0.60%)</title><rect x="69.5977%" y="165" width="0.5958%" height="15" fill="rgb(247,86,24)"/><text x="69.8477%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (3 samples, 0.01%)</title><rect x="70.1935%" y="165" width="0.0117%" height="15" fill="rgb(205,101,16)"/><text x="70.4435%" y="175.50"></text></g><g><title>async-redis`tracing::span::Span::enter (162 samples, 0.63%)</title><rect x="69.5783%" y="181" width="0.6309%" height="15" fill="rgb(246,168,33)"/><text x="69.8283%" y="191.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (4 samples, 0.02%)</title><rect x="70.2208%" y="165" width="0.0156%" height="15" fill="rgb(231,114,1)"/><text x="70.4708%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (4 samples, 0.02%)</title><rect x="70.3415%" y="149" width="0.0156%" height="15" fill="rgb(207,184,53)"/><text x="70.5915%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_core::span::Attributes as tracing_subscriber::field::RecordFields&gt;::record (3 samples, 0.01%)</title><rect x="70.3688%" y="133" width="0.0117%" height="15" fill="rgb(224,95,51)"/><text x="70.6188%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Data as tracing_subscriber::registry::SpanData&gt;::extensions_mut (5 samples, 0.02%)</title><rect x="70.5323%" y="117" width="0.0195%" height="15" fill="rgb(212,188,45)"/><text x="70.7823%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (6 samples, 0.02%)</title><rect x="70.5518%" y="117" width="0.0234%" height="15" fill="rgb(223,154,38)"/><text x="70.8018%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (6 samples, 0.02%)</title><rect x="70.5518%" y="101" width="0.0234%" height="15" fill="rgb(251,22,52)"/><text x="70.8018%" y="111.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.02%)</title><rect x="70.5752%" y="117" width="0.0156%" height="15" fill="rgb(229,209,22)"/><text x="70.8252%" y="127.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (10 samples, 0.04%)</title><rect x="70.6102%" y="101" width="0.0389%" height="15" fill="rgb(234,138,34)"/><text x="70.8602%" y="111.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (7 samples, 0.03%)</title><rect x="70.6219%" y="85" width="0.0273%" height="15" fill="rgb(212,95,11)"/><text x="70.8719%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.02%)</title><rect x="70.7933%" y="53" width="0.0156%" height="15" fill="rgb(240,179,47)"/><text x="71.0433%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.06%)</title><rect x="70.8088%" y="53" width="0.0623%" height="15" fill="rgb(240,163,11)"/><text x="71.0588%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (41 samples, 0.16%)</title><rect x="70.7154%" y="69" width="0.1597%" height="15" fill="rgb(236,37,12)"/><text x="70.9654%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.19%)</title><rect x="70.6920%" y="85" width="0.1869%" height="15" fill="rgb(232,164,16)"/><text x="70.9420%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.24%)</title><rect x="70.6570%" y="101" width="0.2375%" height="15" fill="rgb(244,205,15)"/><text x="70.9070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="70.8789%" y="85" width="0.0156%" height="15" fill="rgb(223,117,47)"/><text x="71.1289%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (79 samples, 0.31%)</title><rect x="70.5908%" y="117" width="0.3076%" height="15" fill="rgb(244,107,35)"/><text x="70.8408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.03%)</title><rect x="70.9023%" y="117" width="0.0312%" height="15" fill="rgb(205,140,8)"/><text x="71.1523%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (191 samples, 0.74%)</title><rect x="70.3805%" y="133" width="0.7438%" height="15" fill="rgb(228,84,46)"/><text x="70.6305%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (49 samples, 0.19%)</title><rect x="70.9334%" y="117" width="0.1908%" height="15" fill="rgb(254,188,9)"/><text x="71.1834%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (10 samples, 0.04%)</title><rect x="71.1321%" y="133" width="0.0389%" height="15" fill="rgb(206,112,54)"/><text x="71.3821%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (10 samples, 0.04%)</title><rect x="71.2956%" y="117" width="0.0389%" height="15" fill="rgb(216,84,49)"/><text x="71.5456%" y="127.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (34 samples, 0.13%)</title><rect x="71.4008%" y="101" width="0.1324%" height="15" fill="rgb(214,194,35)"/><text x="71.6508%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (13 samples, 0.05%)</title><rect x="71.5332%" y="101" width="0.0506%" height="15" fill="rgb(249,28,3)"/><text x="71.7832%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.04%)</title><rect x="71.5838%" y="101" width="0.0428%" height="15" fill="rgb(222,56,52)"/><text x="71.8338%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (82 samples, 0.32%)</title><rect x="71.3346%" y="117" width="0.3193%" height="15" fill="rgb(245,217,50)"/><text x="71.5846%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.03%)</title><rect x="71.6266%" y="101" width="0.0273%" height="15" fill="rgb(213,201,24)"/><text x="71.8766%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (64 samples, 0.25%)</title><rect x="71.6539%" y="117" width="0.2492%" height="15" fill="rgb(248,116,28)"/><text x="71.9039%" y="127.50"></text></g><g><title>async-redis`thread_local::thread_id::get (5 samples, 0.02%)</title><rect x="71.9109%" y="117" width="0.0195%" height="15" fill="rgb(219,72,43)"/><text x="72.1609%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (200 samples, 0.78%)</title><rect x="71.1710%" y="133" width="0.7788%" height="15" fill="rgb(209,138,14)"/><text x="71.4210%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.02%)</title><rect x="71.9343%" y="117" width="0.0156%" height="15" fill="rgb(222,18,33)"/><text x="72.1843%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::is_contextual (5 samples, 0.02%)</title><rect x="71.9576%" y="133" width="0.0195%" height="15" fill="rgb(213,199,7)"/><text x="72.2076%" y="143.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::is_root (4 samples, 0.02%)</title><rect x="71.9771%" y="133" width="0.0156%" height="15" fill="rgb(250,110,10)"/><text x="72.2271%" y="143.50"></text></g><g><title>async-redis`tracing_core::span::Current::id (3 samples, 0.01%)</title><rect x="71.9927%" y="133" width="0.0117%" height="15" fill="rgb(248,123,6)"/><text x="72.2427%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_new (7 samples, 0.03%)</title><rect x="72.0044%" y="133" width="0.0273%" height="15" fill="rgb(206,91,31)"/><text x="72.2544%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (446 samples, 1.74%)</title><rect x="70.3571%" y="149" width="1.7368%" height="15" fill="rgb(211,154,13)"/><text x="70.6071%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (14 samples, 0.05%)</title><rect x="72.0394%" y="133" width="0.0545%" height="15" fill="rgb(225,148,7)"/><text x="72.2894%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (7 samples, 0.03%)</title><rect x="72.0939%" y="149" width="0.0273%" height="15" fill="rgb(220,160,43)"/><text x="72.3439%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (4 samples, 0.02%)</title><rect x="72.1212%" y="149" width="0.0156%" height="15" fill="rgb(213,52,39)"/><text x="72.3712%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (10 samples, 0.04%)</title><rect x="72.1368%" y="149" width="0.0389%" height="15" fill="rgb(243,137,7)"/><text x="72.3868%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (500 samples, 1.95%)</title><rect x="70.2442%" y="165" width="1.9471%" height="15" fill="rgb(230,79,13)"/><text x="70.4942%" y="175.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="72.1796%" y="149" width="0.0117%" height="15" fill="rgb(247,105,23)"/><text x="72.4296%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::new (511 samples, 1.99%)</title><rect x="70.2091%" y="181" width="1.9900%" height="15" fill="rgb(223,179,41)"/><text x="70.4591%" y="191.50">a..</text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (4 samples, 0.02%)</title><rect x="72.2069%" y="181" width="0.0156%" height="15" fill="rgb(218,9,34)"/><text x="72.4569%" y="191.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_close (3 samples, 0.01%)</title><rect x="72.2224%" y="181" width="0.0117%" height="15" fill="rgb(222,106,8)"/><text x="72.4724%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="72.2419%" y="181" width="0.0156%" height="15" fill="rgb(211,220,0)"/><text x="72.4919%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,846 samples, 38.34%)</title><rect x="33.9188%" y="197" width="38.3426%" height="15" fill="rgb(229,52,16)"/><text x="34.1688%" y="207.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as cor..</text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (14 samples, 0.05%)</title><rect x="72.2614%" y="197" width="0.0545%" height="15" fill="rgb(212,155,18)"/><text x="72.5114%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (8 samples, 0.03%)</title><rect x="72.3159%" y="197" width="0.0312%" height="15" fill="rgb(242,21,14)"/><text x="72.5659%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.04%)</title><rect x="72.3471%" y="197" width="0.0389%" height="15" fill="rgb(222,19,48)"/><text x="72.5971%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (21 samples, 0.08%)</title><rect x="72.3860%" y="197" width="0.0818%" height="15" fill="rgb(232,45,27)"/><text x="72.6360%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (3 samples, 0.01%)</title><rect x="72.4756%" y="197" width="0.0117%" height="15" fill="rgb(249,103,42)"/><text x="72.7256%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9,983 samples, 38.88%)</title><rect x="33.6734%" y="213" width="38.8761%" height="15" fill="rgb(246,81,33)"/><text x="33.9234%" y="223.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future:..</text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.05%)</title><rect x="72.4950%" y="197" width="0.0545%" height="15" fill="rgb(252,33,42)"/><text x="72.7450%" y="207.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (12 samples, 0.05%)</title><rect x="72.6936%" y="149" width="0.0467%" height="15" fill="rgb(209,212,41)"/><text x="72.9436%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1,983 samples, 7.72%)</title><rect x="72.6703%" y="165" width="7.7223%" height="15" fill="rgb(207,154,6)"/><text x="72.9203%" y="175.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`__sendto (1,963 samples, 7.64%)</title><rect x="72.7482%" y="149" width="7.6444%" height="15" fill="rgb(223,64,47)"/><text x="72.9982%" y="159.50">libsystem_..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (15 samples, 0.06%)</title><rect x="80.3964%" y="165" width="0.0584%" height="15" fill="rgb(211,161,38)"/><text x="80.6464%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="80.4432%" y="149" width="0.0117%" height="15" fill="rgb(219,138,40)"/><text x="80.6932%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2,017 samples, 7.85%)</title><rect x="72.6080%" y="197" width="7.8547%" height="15" fill="rgb(241,228,46)"/><text x="72.8580%" y="207.50">async-redis..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (2,012 samples, 7.84%)</title><rect x="72.6274%" y="181" width="7.8352%" height="15" fill="rgb(223,209,38)"/><text x="72.8774%" y="191.50">async-redis..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (3 samples, 0.01%)</title><rect x="80.4626%" y="197" width="0.0117%" height="15" fill="rgb(236,164,45)"/><text x="80.7126%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (2,047 samples, 7.97%)</title><rect x="72.5496%" y="213" width="7.9715%" height="15" fill="rgb(231,15,5)"/><text x="72.7996%" y="223.50">async-redis..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.04%)</title><rect x="80.4821%" y="197" width="0.0389%" height="15" fill="rgb(252,35,15)"/><text x="80.7321%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="80.5210%" y="213" width="0.0195%" height="15" fill="rgb(248,181,18)"/><text x="80.7710%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (31 samples, 0.12%)</title><rect x="80.5405%" y="213" width="0.1207%" height="15" fill="rgb(233,39,42)"/><text x="80.7905%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`shutdown (31 samples, 0.12%)</title><rect x="80.5405%" y="197" width="0.1207%" height="15" fill="rgb(238,110,33)"/><text x="80.7905%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.02%)</title><rect x="80.6612%" y="213" width="0.0156%" height="15" fill="rgb(233,195,10)"/><text x="80.9112%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (7 samples, 0.03%)</title><rect x="80.8326%" y="197" width="0.0273%" height="15" fill="rgb(254,105,3)"/><text x="81.0826%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (52 samples, 0.20%)</title><rect x="80.6768%" y="213" width="0.2025%" height="15" fill="rgb(221,225,9)"/><text x="80.9268%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="80.8598%" y="197" width="0.0195%" height="15" fill="rgb(224,227,45)"/><text x="81.1098%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (4 samples, 0.02%)</title><rect x="80.8871%" y="213" width="0.0156%" height="15" fill="rgb(229,198,43)"/><text x="81.1371%" y="223.50"></text></g><g><title>async-redis`__rdl_dealloc (5 samples, 0.02%)</title><rect x="80.9066%" y="213" width="0.0195%" height="15" fill="rgb(206,209,35)"/><text x="81.1566%" y="223.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (11 samples, 0.04%)</title><rect x="80.9416%" y="213" width="0.0428%" height="15" fill="rgb(245,195,53)"/><text x="81.1916%" y="223.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="81.0234%" y="197" width="0.0195%" height="15" fill="rgb(240,92,26)"/><text x="81.2734%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (77 samples, 0.30%)</title><rect x="81.0701%" y="181" width="0.2999%" height="15" fill="rgb(207,40,23)"/><text x="81.3201%" y="191.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (122 samples, 0.48%)</title><rect x="81.0429%" y="197" width="0.4751%" height="15" fill="rgb(223,111,35)"/><text x="81.2929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.15%)</title><rect x="81.3700%" y="181" width="0.1480%" height="15" fill="rgb(229,147,28)"/><text x="81.6200%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.13%)</title><rect x="81.3895%" y="165" width="0.1285%" height="15" fill="rgb(211,29,28)"/><text x="81.6395%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.12%)</title><rect x="81.3934%" y="149" width="0.1246%" height="15" fill="rgb(228,72,33)"/><text x="81.6434%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.07%)</title><rect x="81.4518%" y="133" width="0.0662%" height="15" fill="rgb(205,214,31)"/><text x="81.7018%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="81.5024%" y="117" width="0.0156%" height="15" fill="rgb(224,111,15)"/><text x="81.7524%" y="127.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (7 samples, 0.03%)</title><rect x="81.5452%" y="181" width="0.0273%" height="15" fill="rgb(253,21,26)"/><text x="81.7952%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.14%)</title><rect x="81.5725%" y="181" width="0.1441%" height="15" fill="rgb(245,139,43)"/><text x="81.8225%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.13%)</title><rect x="81.5842%" y="165" width="0.1324%" height="15" fill="rgb(252,170,7)"/><text x="81.8342%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33 samples, 0.13%)</title><rect x="81.5881%" y="149" width="0.1285%" height="15" fill="rgb(231,118,14)"/><text x="81.8381%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="81.6893%" y="133" width="0.0273%" height="15" fill="rgb(238,83,0)"/><text x="81.9393%" y="143.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (54 samples, 0.21%)</title><rect x="81.5258%" y="197" width="0.2103%" height="15" fill="rgb(221,39,39)"/><text x="81.7758%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="81.7205%" y="181" width="0.0156%" height="15" fill="rgb(222,119,46)"/><text x="81.9705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="81.8100%" y="101" width="0.0117%" height="15" fill="rgb(222,165,49)"/><text x="82.0600%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (24 samples, 0.09%)</title><rect x="81.7438%" y="181" width="0.0935%" height="15" fill="rgb(219,113,52)"/><text x="81.9938%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (24 samples, 0.09%)</title><rect x="81.7438%" y="165" width="0.0935%" height="15" fill="rgb(214,7,15)"/><text x="81.9938%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.08%)</title><rect x="81.7594%" y="149" width="0.0779%" height="15" fill="rgb(235,32,4)"/><text x="82.0094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.07%)</title><rect x="81.7672%" y="133" width="0.0701%" height="15" fill="rgb(238,90,54)"/><text x="82.0172%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.07%)</title><rect x="81.7711%" y="117" width="0.0662%" height="15" fill="rgb(213,208,19)"/><text x="82.0211%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.02%)</title><rect x="81.8217%" y="101" width="0.0156%" height="15" fill="rgb(233,156,4)"/><text x="82.0717%" y="111.50"></text></g><g><title>async-redis`async_redis::cmd::get::Get::new (30 samples, 0.12%)</title><rect x="81.7360%" y="197" width="0.1168%" height="15" fill="rgb(207,194,5)"/><text x="81.9860%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (4 samples, 0.02%)</title><rect x="81.8373%" y="181" width="0.0156%" height="15" fill="rgb(206,111,30)"/><text x="82.0873%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_number (3 samples, 0.01%)</title><rect x="81.8607%" y="181" width="0.0117%" height="15" fill="rgb(243,70,54)"/><text x="82.1107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.02%)</title><rect x="81.9736%" y="101" width="0.0195%" height="15" fill="rgb(242,28,8)"/><text x="82.2236%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.10%)</title><rect x="81.9269%" y="149" width="0.0974%" height="15" fill="rgb(219,106,18)"/><text x="82.1769%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.10%)</title><rect x="81.9269%" y="133" width="0.0974%" height="15" fill="rgb(244,222,10)"/><text x="82.1769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.09%)</title><rect x="81.9308%" y="117" width="0.0935%" height="15" fill="rgb(236,179,52)"/><text x="82.1808%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.03%)</title><rect x="81.9931%" y="101" width="0.0312%" height="15" fill="rgb(213,23,39)"/><text x="82.2431%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (39 samples, 0.15%)</title><rect x="81.8801%" y="165" width="0.1519%" height="15" fill="rgb(238,48,10)"/><text x="82.1301%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (43 samples, 0.17%)</title><rect x="81.8723%" y="181" width="0.1675%" height="15" fill="rgb(251,196,23)"/><text x="82.1223%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (51 samples, 0.20%)</title><rect x="81.8529%" y="197" width="0.1986%" height="15" fill="rgb(250,152,24)"/><text x="82.1029%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (3 samples, 0.01%)</title><rect x="82.0398%" y="181" width="0.0117%" height="15" fill="rgb(209,150,17)"/><text x="82.2898%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (6 samples, 0.02%)</title><rect x="82.0515%" y="197" width="0.0234%" height="15" fill="rgb(234,202,34)"/><text x="82.3015%" y="207.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (5 samples, 0.02%)</title><rect x="82.0748%" y="197" width="0.0195%" height="15" fill="rgb(253,148,53)"/><text x="82.3248%" y="207.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (8 samples, 0.03%)</title><rect x="82.0943%" y="197" width="0.0312%" height="15" fill="rgb(218,129,16)"/><text x="82.3443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.03%)</title><rect x="82.1527%" y="181" width="0.0273%" height="15" fill="rgb(216,85,19)"/><text x="82.4027%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.03%)</title><rect x="82.1527%" y="165" width="0.0273%" height="15" fill="rgb(235,228,7)"/><text x="82.4027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.05%)</title><rect x="82.1294%" y="197" width="0.0545%" height="15" fill="rgb(245,175,0)"/><text x="82.3794%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.17%)</title><rect x="82.1839%" y="197" width="0.1675%" height="15" fill="rgb(208,168,36)"/><text x="82.4339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.09%)</title><rect x="82.2657%" y="181" width="0.0857%" height="15" fill="rgb(246,171,24)"/><text x="82.5157%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="82.3319%" y="165" width="0.0195%" height="15" fill="rgb(215,142,24)"/><text x="82.5819%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (357 samples, 1.39%)</title><rect x="80.9845%" y="213" width="1.3902%" height="15" fill="rgb(250,187,7)"/><text x="81.2345%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="82.3630%" y="197" width="0.0117%" height="15" fill="rgb(228,66,33)"/><text x="82.6130%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (6 samples, 0.02%)</title><rect x="82.3747%" y="213" width="0.0234%" height="15" fill="rgb(234,215,21)"/><text x="82.6247%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.02%)</title><rect x="82.4760%" y="197" width="0.0156%" height="15" fill="rgb(222,191,20)"/><text x="82.7260%" y="207.50"></text></g><g><title>async-redis`__rdl_alloc_zeroed (4 samples, 0.02%)</title><rect x="82.4993%" y="197" width="0.0156%" height="15" fill="rgb(245,79,54)"/><text x="82.7493%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (197 samples, 0.77%)</title><rect x="82.5305%" y="181" width="0.7672%" height="15" fill="rgb(240,10,37)"/><text x="82.7805%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (193 samples, 0.75%)</title><rect x="82.5460%" y="165" width="0.7516%" height="15" fill="rgb(214,192,32)"/><text x="82.7960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (5 samples, 0.02%)</title><rect x="83.3093%" y="165" width="0.0195%" height="15" fill="rgb(209,36,54)"/><text x="83.5593%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.05%)</title><rect x="83.3327%" y="149" width="0.0545%" height="15" fill="rgb(220,10,11)"/><text x="83.5827%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (24 samples, 0.09%)</title><rect x="83.3054%" y="181" width="0.0935%" height="15" fill="rgb(221,106,17)"/><text x="83.5554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.07%)</title><rect x="83.3288%" y="165" width="0.0701%" height="15" fill="rgb(251,142,44)"/><text x="83.5788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.02%)</title><rect x="83.4067%" y="165" width="0.0234%" height="15" fill="rgb(238,13,15)"/><text x="83.6567%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.02%)</title><rect x="83.4067%" y="149" width="0.0234%" height="15" fill="rgb(208,107,27)"/><text x="83.6567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="83.4028%" y="181" width="0.0312%" height="15" fill="rgb(205,136,37)"/><text x="83.6528%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="83.4339%" y="181" width="0.0156%" height="15" fill="rgb(250,205,27)"/><text x="83.6839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="83.4378%" y="165" width="0.0117%" height="15" fill="rgb(210,80,43)"/><text x="83.6878%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (7 samples, 0.03%)</title><rect x="83.4495%" y="181" width="0.0273%" height="15" fill="rgb(247,160,36)"/><text x="83.6995%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::encode::encode_iter (252 samples, 0.98%)</title><rect x="82.5149%" y="197" width="0.9813%" height="15" fill="rgb(234,13,49)"/><text x="82.7649%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="83.4846%" y="181" width="0.0117%" height="15" fill="rgb(234,122,0)"/><text x="83.7346%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.09%)</title><rect x="83.5040%" y="197" width="0.0857%" height="15" fill="rgb(207,146,38)"/><text x="83.7540%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.06%)</title><rect x="83.5274%" y="181" width="0.0623%" height="15" fill="rgb(207,177,25)"/><text x="83.7774%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.06%)</title><rect x="83.5313%" y="165" width="0.0584%" height="15" fill="rgb(211,178,42)"/><text x="83.7813%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`calloc (3 samples, 0.01%)</title><rect x="83.5897%" y="197" width="0.0117%" height="15" fill="rgb(230,69,54)"/><text x="83.8397%" y="207.50"></text></g><g><title>async-redis`async_redis::protocol::encode::encode (309 samples, 1.20%)</title><rect x="82.4136%" y="213" width="1.2033%" height="15" fill="rgb(214,135,41)"/><text x="82.6636%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (3 samples, 0.01%)</title><rect x="83.6209%" y="213" width="0.0117%" height="15" fill="rgb(237,67,25)"/><text x="83.8709%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (8 samples, 0.03%)</title><rect x="83.6325%" y="213" width="0.0312%" height="15" fill="rgb(222,189,50)"/><text x="83.8825%" y="223.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.03%)</title><rect x="83.6676%" y="213" width="0.0273%" height="15" fill="rgb(245,148,34)"/><text x="83.9176%" y="223.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (4 samples, 0.02%)</title><rect x="83.6948%" y="213" width="0.0156%" height="15" fill="rgb(222,29,6)"/><text x="83.9448%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.04%)</title><rect x="83.7104%" y="213" width="0.0389%" height="15" fill="rgb(221,189,43)"/><text x="83.9604%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (7 samples, 0.03%)</title><rect x="83.7494%" y="213" width="0.0273%" height="15" fill="rgb(207,36,27)"/><text x="83.9994%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (8 samples, 0.03%)</title><rect x="83.8973%" y="149" width="0.0312%" height="15" fill="rgb(217,90,24)"/><text x="84.1473%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (3 samples, 0.01%)</title><rect x="83.9285%" y="149" width="0.0117%" height="15" fill="rgb(224,66,35)"/><text x="84.1785%" y="159.50"></text></g><g><title>libsystem_c.dylib`send (3 samples, 0.01%)</title><rect x="83.9402%" y="149" width="0.0117%" height="15" fill="rgb(221,13,50)"/><text x="84.1902%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1,990 samples, 7.75%)</title><rect x="83.8779%" y="165" width="7.7495%" height="15" fill="rgb(236,68,49)"/><text x="84.1279%" y="175.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`__sendto (1,971 samples, 7.68%)</title><rect x="83.9519%" y="149" width="7.6755%" height="15" fill="rgb(229,146,28)"/><text x="84.2019%" y="159.50">libsystem_k..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (4 samples, 0.02%)</title><rect x="91.6819%" y="149" width="0.0156%" height="15" fill="rgb(225,31,38)"/><text x="91.9319%" y="159.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (19 samples, 0.07%)</title><rect x="91.6352%" y="165" width="0.0740%" height="15" fill="rgb(250,208,3)"/><text x="91.8852%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="91.6975%" y="149" width="0.0117%" height="15" fill="rgb(246,54,23)"/><text x="91.9475%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2,026 samples, 7.89%)</title><rect x="83.8234%" y="197" width="7.8897%" height="15" fill="rgb(243,76,11)"/><text x="84.0734%" y="207.50">async-redis..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (2,021 samples, 7.87%)</title><rect x="83.8428%" y="181" width="7.8702%" height="15" fill="rgb(245,21,50)"/><text x="84.0928%" y="191.50">async-redis..</text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (2,038 samples, 7.94%)</title><rect x="83.7844%" y="213" width="7.9364%" height="15" fill="rgb(228,9,43)"/><text x="84.0344%" y="223.50">async-redis..</text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (6 samples, 0.02%)</title><rect x="91.7442%" y="197" width="0.0234%" height="15" fill="rgb(208,100,47)"/><text x="91.9942%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="91.7676%" y="197" width="0.0117%" height="15" fill="rgb(232,26,8)"/><text x="92.0176%" y="207.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (10 samples, 0.04%)</title><rect x="91.7910%" y="197" width="0.0389%" height="15" fill="rgb(216,166,38)"/><text x="92.0410%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (28 samples, 0.11%)</title><rect x="92.1570%" y="181" width="0.1090%" height="15" fill="rgb(251,202,51)"/><text x="92.4070%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (111 samples, 0.43%)</title><rect x="91.8377%" y="197" width="0.4323%" height="15" fill="rgb(254,216,34)"/><text x="92.0877%" y="207.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (11 samples, 0.04%)</title><rect x="92.2699%" y="197" width="0.0428%" height="15" fill="rgb(251,32,27)"/><text x="92.5199%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (5 samples, 0.02%)</title><rect x="92.2933%" y="181" width="0.0195%" height="15" fill="rgb(208,127,28)"/><text x="92.5433%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (5 samples, 0.02%)</title><rect x="92.2933%" y="165" width="0.0195%" height="15" fill="rgb(224,137,22)"/><text x="92.5433%" y="175.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (153 samples, 0.60%)</title><rect x="91.7209%" y="213" width="0.5958%" height="15" fill="rgb(254,70,32)"/><text x="91.9709%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (4 samples, 0.02%)</title><rect x="92.3167%" y="213" width="0.0156%" height="15" fill="rgb(229,75,37)"/><text x="92.5667%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (7 samples, 0.03%)</title><rect x="92.3323%" y="213" width="0.0273%" height="15" fill="rgb(252,64,23)"/><text x="92.5823%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (6 samples, 0.02%)</title><rect x="92.3362%" y="197" width="0.0234%" height="15" fill="rgb(232,162,48)"/><text x="92.5862%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (17 samples, 0.07%)</title><rect x="92.3673%" y="197" width="0.0662%" height="15" fill="rgb(246,160,12)"/><text x="92.6173%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (10 samples, 0.04%)</title><rect x="92.4335%" y="197" width="0.0389%" height="15" fill="rgb(247,166,0)"/><text x="92.6835%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (52 samples, 0.20%)</title><rect x="92.3595%" y="213" width="0.2025%" height="15" fill="rgb(249,219,21)"/><text x="92.6095%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (23 samples, 0.09%)</title><rect x="92.4724%" y="197" width="0.0896%" height="15" fill="rgb(205,209,3)"/><text x="92.7224%" y="207.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (16 samples, 0.06%)</title><rect x="92.4997%" y="181" width="0.0623%" height="15" fill="rgb(243,44,1)"/><text x="92.7497%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.02%)</title><rect x="92.5659%" y="213" width="0.0195%" height="15" fill="rgb(206,159,16)"/><text x="92.8159%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (14 samples, 0.05%)</title><rect x="92.7295%" y="181" width="0.0545%" height="15" fill="rgb(244,77,30)"/><text x="92.9795%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (27 samples, 0.11%)</title><rect x="92.6827%" y="197" width="0.1051%" height="15" fill="rgb(218,69,12)"/><text x="92.9327%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.03%)</title><rect x="92.7879%" y="197" width="0.0273%" height="15" fill="rgb(212,87,7)"/><text x="93.0379%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (60 samples, 0.23%)</title><rect x="92.5854%" y="213" width="0.2337%" height="15" fill="rgb(245,114,25)"/><text x="92.8354%" y="223.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (6 samples, 0.02%)</title><rect x="92.8190%" y="213" width="0.0234%" height="15" fill="rgb(210,61,42)"/><text x="93.0690%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (5 samples, 0.02%)</title><rect x="92.8424%" y="213" width="0.0195%" height="15" fill="rgb(211,52,33)"/><text x="93.0924%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (4 samples, 0.02%)</title><rect x="92.8619%" y="213" width="0.0156%" height="15" fill="rgb(234,58,33)"/><text x="93.1119%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (14 samples, 0.05%)</title><rect x="92.9475%" y="197" width="0.0545%" height="15" fill="rgb(220,115,36)"/><text x="93.1975%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.14%)</title><rect x="92.8891%" y="213" width="0.1402%" height="15" fill="rgb(243,153,54)"/><text x="93.1391%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.03%)</title><rect x="93.0021%" y="197" width="0.0273%" height="15" fill="rgb(251,47,18)"/><text x="93.2521%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.03%)</title><rect x="93.0021%" y="181" width="0.0273%" height="15" fill="rgb(242,102,42)"/><text x="93.2521%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.02%)</title><rect x="93.0293%" y="213" width="0.0195%" height="15" fill="rgb(234,31,38)"/><text x="93.2793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.14%)</title><rect x="93.0488%" y="213" width="0.1441%" height="15" fill="rgb(221,117,51)"/><text x="93.2988%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (25 samples, 0.10%)</title><rect x="93.0955%" y="197" width="0.0974%" height="15" fill="rgb(212,20,18)"/><text x="93.3455%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.05%)</title><rect x="93.1384%" y="181" width="0.0545%" height="15" fill="rgb(245,133,36)"/><text x="93.3884%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.01%)</title><rect x="93.2007%" y="213" width="0.0117%" height="15" fill="rgb(212,6,19)"/><text x="93.4507%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="93.2124%" y="213" width="0.0117%" height="15" fill="rgb(218,1,36)"/><text x="93.4624%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,768 samples, 61.40%)</title><rect x="31.8509%" y="229" width="61.4043%" height="15" fill="rgb(246,84,54)"/><text x="32.1009%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.03%)</title><rect x="93.2240%" y="213" width="0.0312%" height="15" fill="rgb(242,110,6)"/><text x="93.4740%" y="223.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="93.2552%" y="229" width="0.0156%" height="15" fill="rgb(214,47,5)"/><text x="93.5052%" y="239.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (8 samples, 0.03%)</title><rect x="93.2708%" y="229" width="0.0312%" height="15" fill="rgb(218,159,25)"/><text x="93.5208%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.02%)</title><rect x="93.8432%" y="165" width="0.0234%" height="15" fill="rgb(215,211,28)"/><text x="94.0932%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4 samples, 0.02%)</title><rect x="93.8510%" y="149" width="0.0156%" height="15" fill="rgb(238,59,32)"/><text x="94.1010%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (3 samples, 0.01%)</title><rect x="93.8744%" y="165" width="0.0117%" height="15" fill="rgb(226,82,3)"/><text x="94.1244%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (3 samples, 0.01%)</title><rect x="93.8744%" y="149" width="0.0117%" height="15" fill="rgb(240,164,32)"/><text x="94.1244%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (105 samples, 0.41%)</title><rect x="93.5005%" y="197" width="0.4089%" height="15" fill="rgb(232,46,7)"/><text x="93.7505%" y="207.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (103 samples, 0.40%)</title><rect x="93.5083%" y="181" width="0.4011%" height="15" fill="rgb(229,129,53)"/><text x="93.7583%" y="191.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (6 samples, 0.02%)</title><rect x="93.8861%" y="165" width="0.0234%" height="15" fill="rgb(234,188,29)"/><text x="94.1361%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (117 samples, 0.46%)</title><rect x="93.4577%" y="213" width="0.4556%" height="15" fill="rgb(246,141,4)"/><text x="93.7077%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (7 samples, 0.03%)</title><rect x="94.0068%" y="181" width="0.0273%" height="15" fill="rgb(229,23,39)"/><text x="94.2568%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (6 samples, 0.02%)</title><rect x="94.0107%" y="165" width="0.0234%" height="15" fill="rgb(206,12,3)"/><text x="94.2607%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (7 samples, 0.03%)</title><rect x="94.0574%" y="165" width="0.0273%" height="15" fill="rgb(252,226,20)"/><text x="94.3074%" y="175.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (12 samples, 0.05%)</title><rect x="94.0847%" y="165" width="0.0467%" height="15" fill="rgb(216,123,35)"/><text x="94.3347%" y="175.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.02%)</title><rect x="94.1664%" y="149" width="0.0156%" height="15" fill="rgb(212,68,40)"/><text x="94.4164%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3 samples, 0.01%)</title><rect x="94.1703%" y="133" width="0.0117%" height="15" fill="rgb(254,125,32)"/><text x="94.4203%" y="143.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (9 samples, 0.04%)</title><rect x="94.1820%" y="149" width="0.0350%" height="15" fill="rgb(253,97,22)"/><text x="94.4320%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (23 samples, 0.09%)</title><rect x="94.1314%" y="165" width="0.0896%" height="15" fill="rgb(241,101,14)"/><text x="94.3814%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (77 samples, 0.30%)</title><rect x="93.9445%" y="197" width="0.2999%" height="15" fill="rgb(238,103,29)"/><text x="94.1945%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (52 samples, 0.20%)</title><rect x="94.0418%" y="181" width="0.2025%" height="15" fill="rgb(233,195,47)"/><text x="94.2918%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (6 samples, 0.02%)</title><rect x="94.2210%" y="165" width="0.0234%" height="15" fill="rgb(246,218,30)"/><text x="94.4710%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (8 samples, 0.03%)</title><rect x="94.2443%" y="197" width="0.0312%" height="15" fill="rgb(219,145,47)"/><text x="94.4943%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (94 samples, 0.37%)</title><rect x="93.9211%" y="213" width="0.3661%" height="15" fill="rgb(243,12,26)"/><text x="94.1711%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="94.2755%" y="197" width="0.0117%" height="15" fill="rgb(214,87,16)"/><text x="94.5255%" y="207.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6 samples, 0.02%)</title><rect x="94.2872%" y="213" width="0.0234%" height="15" fill="rgb(208,99,42)"/><text x="94.5372%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="94.3573%" y="197" width="0.0156%" height="15" fill="rgb(253,99,2)"/><text x="94.6073%" y="207.50"></text></g><g><title>async-redis`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (6 samples, 0.02%)</title><rect x="94.4585%" y="181" width="0.0234%" height="15" fill="rgb(220,168,23)"/><text x="94.7085%" y="191.50"></text></g><g><title>async-redis`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (31 samples, 0.12%)</title><rect x="94.4936%" y="181" width="0.1207%" height="15" fill="rgb(242,38,24)"/><text x="94.7436%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (56 samples, 0.22%)</title><rect x="94.6221%" y="181" width="0.2181%" height="15" fill="rgb(225,182,9)"/><text x="94.8721%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (23 samples, 0.09%)</title><rect x="94.7506%" y="165" width="0.0896%" height="15" fill="rgb(243,178,37)"/><text x="95.0006%" y="175.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (11 samples, 0.04%)</title><rect x="94.8401%" y="181" width="0.0428%" height="15" fill="rgb(232,139,19)"/><text x="95.0901%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (3 samples, 0.01%)</title><rect x="94.8713%" y="165" width="0.0117%" height="15" fill="rgb(225,201,24)"/><text x="95.1213%" y="175.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (131 samples, 0.51%)</title><rect x="94.3845%" y="197" width="0.5101%" height="15" fill="rgb(221,47,46)"/><text x="94.6345%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (3 samples, 0.01%)</title><rect x="94.8830%" y="181" width="0.0117%" height="15" fill="rgb(249,23,13)"/><text x="95.1330%" y="191.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (9 samples, 0.04%)</title><rect x="94.8986%" y="197" width="0.0350%" height="15" fill="rgb(219,9,5)"/><text x="95.1486%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (169 samples, 0.66%)</title><rect x="94.3105%" y="213" width="0.6581%" height="15" fill="rgb(254,171,16)"/><text x="94.5605%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.04%)</title><rect x="94.9336%" y="197" width="0.0350%" height="15" fill="rgb(230,171,20)"/><text x="95.1836%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (6 samples, 0.02%)</title><rect x="94.9687%" y="213" width="0.0234%" height="15" fill="rgb(210,71,41)"/><text x="95.2187%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (8 samples, 0.03%)</title><rect x="94.9920%" y="213" width="0.0312%" height="15" fill="rgb(206,173,20)"/><text x="95.2420%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (448 samples, 1.74%)</title><rect x="93.3019%" y="229" width="1.7446%" height="15" fill="rgb(233,88,34)"/><text x="93.5519%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="95.0232%" y="213" width="0.0234%" height="15" fill="rgb(223,209,46)"/><text x="95.2732%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (6 samples, 0.02%)</title><rect x="95.0465%" y="229" width="0.0234%" height="15" fill="rgb(250,43,18)"/><text x="95.2965%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (28 samples, 0.11%)</title><rect x="95.0738%" y="229" width="0.1090%" height="15" fill="rgb(208,13,10)"/><text x="95.3238%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.02%)</title><rect x="95.1673%" y="213" width="0.0156%" height="15" fill="rgb(212,200,36)"/><text x="95.4173%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="95.1828%" y="229" width="0.0117%" height="15" fill="rgb(225,90,30)"/><text x="95.4328%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (4 samples, 0.02%)</title><rect x="95.1945%" y="229" width="0.0156%" height="15" fill="rgb(236,182,39)"/><text x="95.4445%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (3 samples, 0.01%)</title><rect x="95.2179%" y="229" width="0.0117%" height="15" fill="rgb(212,144,35)"/><text x="95.4679%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (7 samples, 0.03%)</title><rect x="95.2296%" y="229" width="0.0273%" height="15" fill="rgb(228,63,44)"/><text x="95.4796%" y="239.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (22 samples, 0.09%)</title><rect x="95.3347%" y="197" width="0.0857%" height="15" fill="rgb(228,109,6)"/><text x="95.5847%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (4 samples, 0.02%)</title><rect x="95.4204%" y="197" width="0.0156%" height="15" fill="rgb(238,117,24)"/><text x="95.6704%" y="207.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (3 samples, 0.01%)</title><rect x="95.4399%" y="197" width="0.0117%" height="15" fill="rgb(242,26,26)"/><text x="95.6899%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (45 samples, 0.18%)</title><rect x="95.5022%" y="165" width="0.1752%" height="15" fill="rgb(221,92,48)"/><text x="95.7522%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (29 samples, 0.11%)</title><rect x="95.5645%" y="149" width="0.1129%" height="15" fill="rgb(209,209,32)"/><text x="95.8145%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (9 samples, 0.04%)</title><rect x="95.6774%" y="165" width="0.0350%" height="15" fill="rgb(221,70,22)"/><text x="95.9274%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (63 samples, 0.25%)</title><rect x="95.4866%" y="181" width="0.2453%" height="15" fill="rgb(248,145,5)"/><text x="95.7366%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="95.7124%" y="165" width="0.0195%" height="15" fill="rgb(226,116,26)"/><text x="95.9624%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (9 samples, 0.04%)</title><rect x="95.7397%" y="181" width="0.0350%" height="15" fill="rgb(244,5,17)"/><text x="95.9897%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (3 samples, 0.01%)</title><rect x="95.7631%" y="165" width="0.0117%" height="15" fill="rgb(252,159,33)"/><text x="96.0131%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (85 samples, 0.33%)</title><rect x="95.4515%" y="197" width="0.3310%" height="15" fill="rgb(206,71,0)"/><text x="95.7015%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (132 samples, 0.51%)</title><rect x="95.2802%" y="213" width="0.5140%" height="15" fill="rgb(233,118,54)"/><text x="95.5302%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (143 samples, 0.56%)</title><rect x="95.2568%" y="229" width="0.5569%" height="15" fill="rgb(234,83,48)"/><text x="95.5068%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (5 samples, 0.02%)</title><rect x="95.8137%" y="229" width="0.0195%" height="15" fill="rgb(228,3,54)"/><text x="96.0637%" y="239.50"></text></g><g><title>async-redis`alloc::collections::btree::search::search_tree (109 samples, 0.42%)</title><rect x="95.8526%" y="229" width="0.4245%" height="15" fill="rgb(226,155,13)"/><text x="96.1026%" y="239.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (6 samples, 0.02%)</title><rect x="96.2771%" y="229" width="0.0234%" height="15" fill="rgb(241,28,37)"/><text x="96.5271%" y="239.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (44 samples, 0.17%)</title><rect x="96.3667%" y="213" width="0.1713%" height="15" fill="rgb(233,93,10)"/><text x="96.6167%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22 samples, 0.09%)</title><rect x="96.4524%" y="197" width="0.0857%" height="15" fill="rgb(225,113,19)"/><text x="96.7024%" y="207.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (17 samples, 0.07%)</title><rect x="96.5380%" y="213" width="0.0662%" height="15" fill="rgb(241,2,18)"/><text x="96.7880%" y="223.50"></text></g><g><title>async-redis`async_redis::db::DB::get (82 samples, 0.32%)</title><rect x="96.3005%" y="229" width="0.3193%" height="15" fill="rgb(228,207,21)"/><text x="96.5505%" y="239.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (4 samples, 0.02%)</title><rect x="96.6042%" y="213" width="0.0156%" height="15" fill="rgb(213,211,35)"/><text x="96.8542%" y="223.50"></text></g><g><title>async-redis`async_redis::protocol::encode::encode (11 samples, 0.04%)</title><rect x="96.6198%" y="229" width="0.0428%" height="15" fill="rgb(209,83,10)"/><text x="96.8698%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (3 samples, 0.01%)</title><rect x="96.6626%" y="229" width="0.0117%" height="15" fill="rgb(209,164,1)"/><text x="96.9126%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (7 samples, 0.03%)</title><rect x="96.6743%" y="229" width="0.0273%" height="15" fill="rgb(213,184,43)"/><text x="96.9243%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (3 samples, 0.01%)</title><rect x="96.7016%" y="229" width="0.0117%" height="15" fill="rgb(231,61,34)"/><text x="96.9516%" y="239.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (4 samples, 0.02%)</title><rect x="96.7133%" y="229" width="0.0156%" height="15" fill="rgb(235,75,3)"/><text x="96.9633%" y="239.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (3 samples, 0.01%)</title><rect x="96.8535%" y="181" width="0.0117%" height="15" fill="rgb(220,106,47)"/><text x="97.1035%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (3 samples, 0.01%)</title><rect x="96.8535%" y="165" width="0.0117%" height="15" fill="rgb(210,196,33)"/><text x="97.1035%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (3 samples, 0.01%)</title><rect x="96.8535%" y="149" width="0.0117%" height="15" fill="rgb(229,154,42)"/><text x="97.1035%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (7 samples, 0.03%)</title><rect x="96.8496%" y="213" width="0.0273%" height="15" fill="rgb(228,114,26)"/><text x="97.0996%" y="223.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (6 samples, 0.02%)</title><rect x="96.8535%" y="197" width="0.0234%" height="15" fill="rgb(208,144,1)"/><text x="97.1035%" y="207.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (3 samples, 0.01%)</title><rect x="96.8651%" y="181" width="0.0117%" height="15" fill="rgb(239,112,37)"/><text x="97.1151%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (3 samples, 0.01%)</title><rect x="96.8651%" y="165" width="0.0117%" height="15" fill="rgb(210,96,50)"/><text x="97.1151%" y="175.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (3 samples, 0.01%)</title><rect x="96.8651%" y="149" width="0.0117%" height="15" fill="rgb(222,178,2)"/><text x="97.1151%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 0.02%)</title><rect x="96.8768%" y="213" width="0.0195%" height="15" fill="rgb(226,74,18)"/><text x="97.1268%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (3 samples, 0.01%)</title><rect x="96.9041%" y="213" width="0.0117%" height="15" fill="rgb(225,67,54)"/><text x="97.1541%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (3 samples, 0.01%)</title><rect x="96.9041%" y="197" width="0.0117%" height="15" fill="rgb(251,92,32)"/><text x="97.1541%" y="207.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 0.02%)</title><rect x="97.0754%" y="197" width="0.0195%" height="15" fill="rgb(228,149,22)"/><text x="97.3254%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3 samples, 0.01%)</title><rect x="97.0832%" y="181" width="0.0117%" height="15" fill="rgb(243,54,13)"/><text x="97.3332%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (3 samples, 0.01%)</title><rect x="97.0949%" y="197" width="0.0117%" height="15" fill="rgb(243,180,28)"/><text x="97.3449%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (3 samples, 0.01%)</title><rect x="97.0949%" y="181" width="0.0117%" height="15" fill="rgb(208,167,24)"/><text x="97.3449%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (67 samples, 0.26%)</title><rect x="96.9158%" y="213" width="0.2609%" height="15" fill="rgb(245,73,45)"/><text x="97.1658%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (18 samples, 0.07%)</title><rect x="97.1066%" y="197" width="0.0701%" height="15" fill="rgb(237,203,48)"/><text x="97.3566%" y="207.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (121 samples, 0.47%)</title><rect x="96.7288%" y="229" width="0.4712%" height="15" fill="rgb(211,197,16)"/><text x="96.9788%" y="239.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (6 samples, 0.02%)</title><rect x="97.1767%" y="213" width="0.0234%" height="15" fill="rgb(243,99,51)"/><text x="97.4267%" y="223.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (3 samples, 0.01%)</title><rect x="97.2039%" y="229" width="0.0117%" height="15" fill="rgb(215,123,29)"/><text x="97.4539%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.02%)</title><rect x="97.2195%" y="229" width="0.0195%" height="15" fill="rgb(239,186,37)"/><text x="97.4695%" y="239.50"></text></g><g><title>async-redis`std::time::Instant::now (3 samples, 0.01%)</title><rect x="97.2390%" y="229" width="0.0117%" height="15" fill="rgb(252,136,39)"/><text x="97.4890%" y="239.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.01%)</title><rect x="97.2507%" y="229" width="0.0117%" height="15" fill="rgb(223,213,32)"/><text x="97.5007%" y="239.50"></text></g><g><title>async-redis`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6 samples, 0.02%)</title><rect x="97.2624%" y="229" width="0.0234%" height="15" fill="rgb(233,115,5)"/><text x="97.5124%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (3 samples, 0.01%)</title><rect x="97.2935%" y="229" width="0.0117%" height="15" fill="rgb(207,226,44)"/><text x="97.5435%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (4 samples, 0.02%)</title><rect x="97.3091%" y="213" width="0.0156%" height="15" fill="rgb(208,126,0)"/><text x="97.5591%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (4 samples, 0.02%)</title><rect x="97.3247%" y="213" width="0.0156%" height="15" fill="rgb(244,66,21)"/><text x="97.5747%" y="223.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (3 samples, 0.01%)</title><rect x="97.4220%" y="165" width="0.0117%" height="15" fill="rgb(222,97,12)"/><text x="97.6720%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 0.01%)</title><rect x="97.4220%" y="149" width="0.0117%" height="15" fill="rgb(219,213,19)"/><text x="97.6720%" y="159.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (11 samples, 0.04%)</title><rect x="97.4337%" y="165" width="0.0428%" height="15" fill="rgb(252,169,30)"/><text x="97.6837%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.04%)</title><rect x="97.4337%" y="149" width="0.0428%" height="15" fill="rgb(206,32,51)"/><text x="97.6837%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (21 samples, 0.08%)</title><rect x="97.3987%" y="181" width="0.0818%" height="15" fill="rgb(250,172,42)"/><text x="97.6487%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (46 samples, 0.18%)</title><rect x="97.3052%" y="229" width="0.1791%" height="15" fill="rgb(209,34,43)"/><text x="97.5552%" y="239.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (37 samples, 0.14%)</title><rect x="97.3402%" y="213" width="0.1441%" height="15" fill="rgb(223,11,35)"/><text x="97.5902%" y="223.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (31 samples, 0.12%)</title><rect x="97.3636%" y="197" width="0.1207%" height="15" fill="rgb(251,219,26)"/><text x="97.6136%" y="207.50"></text></g><g><title>async-redis`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (4 samples, 0.02%)</title><rect x="97.4882%" y="229" width="0.0156%" height="15" fill="rgb(231,119,3)"/><text x="97.7382%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (34 samples, 0.13%)</title><rect x="97.5038%" y="229" width="0.1324%" height="15" fill="rgb(216,97,11)"/><text x="97.7538%" y="239.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (14 samples, 0.05%)</title><rect x="97.5817%" y="213" width="0.0545%" height="15" fill="rgb(223,59,9)"/><text x="97.8317%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (13 samples, 0.05%)</title><rect x="97.5856%" y="197" width="0.0506%" height="15" fill="rgb(233,93,31)"/><text x="97.8356%" y="207.50"></text></g><g><title>async-redis`tokio::sync::task::atomic_waker::AtomicWaker::wake (8 samples, 0.03%)</title><rect x="97.6362%" y="229" width="0.0312%" height="15" fill="rgb(239,81,33)"/><text x="97.8862%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (8 samples, 0.03%)</title><rect x="97.6674%" y="229" width="0.0312%" height="15" fill="rgb(213,120,34)"/><text x="97.9174%" y="239.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (13 samples, 0.05%)</title><rect x="97.7297%" y="213" width="0.0506%" height="15" fill="rgb(243,49,53)"/><text x="97.9797%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (11 samples, 0.04%)</title><rect x="97.7803%" y="213" width="0.0428%" height="15" fill="rgb(247,216,33)"/><text x="98.0303%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (36 samples, 0.14%)</title><rect x="97.6985%" y="229" width="0.1402%" height="15" fill="rgb(226,26,14)"/><text x="97.9485%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="97.8231%" y="213" width="0.0156%" height="15" fill="rgb(215,49,53)"/><text x="98.0731%" y="223.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (4 samples, 0.02%)</title><rect x="97.8465%" y="229" width="0.0156%" height="15" fill="rgb(245,162,40)"/><text x="98.0965%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (108 samples, 0.42%)</title><rect x="97.9127%" y="197" width="0.4206%" height="15" fill="rgb(229,68,17)"/><text x="98.1627%" y="207.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (98 samples, 0.38%)</title><rect x="97.9516%" y="181" width="0.3816%" height="15" fill="rgb(213,182,10)"/><text x="98.2016%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (5 samples, 0.02%)</title><rect x="98.6175%" y="165" width="0.0195%" height="15" fill="rgb(245,125,30)"/><text x="98.8675%" y="175.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (57 samples, 0.22%)</title><rect x="98.4345%" y="181" width="0.2220%" height="15" fill="rgb(232,202,2)"/><text x="98.6845%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="98.6370%" y="165" width="0.0195%" height="15" fill="rgb(237,140,51)"/><text x="98.8870%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (92 samples, 0.36%)</title><rect x="98.3333%" y="197" width="0.3583%" height="15" fill="rgb(236,157,25)"/><text x="98.5833%" y="207.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.04%)</title><rect x="98.6565%" y="181" width="0.0350%" height="15" fill="rgb(219,209,0)"/><text x="98.9065%" y="191.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (3 samples, 0.01%)</title><rect x="98.6993%" y="197" width="0.0117%" height="15" fill="rgb(240,116,54)"/><text x="98.9493%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (208 samples, 0.81%)</title><rect x="97.9088%" y="213" width="0.8100%" height="15" fill="rgb(216,10,36)"/><text x="98.1588%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (3 samples, 0.01%)</title><rect x="98.7188%" y="213" width="0.0117%" height="15" fill="rgb(222,72,44)"/><text x="98.9688%" y="223.50"></text></g><g><title>async-redis`tracing::span::Span::enter (228 samples, 0.89%)</title><rect x="97.8621%" y="229" width="0.8879%" height="15" fill="rgb(232,159,9)"/><text x="98.1121%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (3 samples, 0.01%)</title><rect x="98.7383%" y="213" width="0.0117%" height="15" fill="rgb(210,39,32)"/><text x="98.9883%" y="223.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (5 samples, 0.02%)</title><rect x="98.7616%" y="165" width="0.0195%" height="15" fill="rgb(216,194,45)"/><text x="99.0116%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (8 samples, 0.03%)</title><rect x="98.7538%" y="181" width="0.0312%" height="15" fill="rgb(218,18,35)"/><text x="99.0038%" y="191.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (6 samples, 0.02%)</title><rect x="98.7889%" y="165" width="0.0234%" height="15" fill="rgb(207,83,51)"/><text x="99.0389%" y="175.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::allocate (4 samples, 0.02%)</title><rect x="98.7967%" y="149" width="0.0156%" height="15" fill="rgb(225,63,43)"/><text x="99.0467%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (16 samples, 0.06%)</title><rect x="98.7538%" y="197" width="0.0623%" height="15" fill="rgb(207,57,36)"/><text x="99.0038%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (8 samples, 0.03%)</title><rect x="98.7850%" y="181" width="0.0312%" height="15" fill="rgb(216,99,33)"/><text x="99.0350%" y="191.50"></text></g><g><title>async-redis`tracing::span::Span::new (18 samples, 0.07%)</title><rect x="98.7500%" y="229" width="0.0701%" height="15" fill="rgb(225,42,16)"/><text x="99.0000%" y="239.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (17 samples, 0.07%)</title><rect x="98.7538%" y="213" width="0.0662%" height="15" fill="rgb(220,201,45)"/><text x="99.0038%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.05%)</title><rect x="98.8239%" y="229" width="0.0467%" height="15" fill="rgb(225,33,4)"/><text x="99.0739%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="98.8707%" y="229" width="0.0195%" height="15" fill="rgb(224,33,50)"/><text x="99.1207%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,585 samples, 68.48%)</title><rect x="30.4646%" y="245" width="68.4801%" height="15" fill="rgb(246,198,51)"/><text x="30.7146%" y="255.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.05%)</title><rect x="98.8940%" y="229" width="0.0506%" height="15" fill="rgb(205,22,4)"/><text x="99.1440%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="98.9486%" y="245" width="0.0156%" height="15" fill="rgb(206,3,8)"/><text x="99.1986%" y="255.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (3 samples, 0.01%)</title><rect x="98.9758%" y="245" width="0.0117%" height="15" fill="rgb(251,23,15)"/><text x="99.2258%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.04%)</title><rect x="99.0031%" y="245" width="0.0389%" height="15" fill="rgb(252,88,28)"/><text x="99.2531%" y="255.50"></text></g><g><title>async-redis`tokio::time::instant::Instant::now (3 samples, 0.01%)</title><rect x="99.0654%" y="245" width="0.0117%" height="15" fill="rgb(212,127,14)"/><text x="99.3154%" y="255.50"></text></g><g><title>async-redis`tracing::span::Span::enter (6 samples, 0.02%)</title><rect x="99.0810%" y="245" width="0.0234%" height="15" fill="rgb(247,145,37)"/><text x="99.3310%" y="255.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17,660 samples, 68.77%)</title><rect x="30.3400%" y="261" width="68.7721%" height="15" fill="rgb(209,117,53)"/><text x="30.5900%" y="271.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (3 samples, 0.01%)</title><rect x="99.1160%" y="261" width="0.0117%" height="15" fill="rgb(212,90,42)"/><text x="99.3660%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (21 samples, 0.08%)</title><rect x="99.1316%" y="261" width="0.0818%" height="15" fill="rgb(218,164,37)"/><text x="99.3816%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17,784 samples, 69.26%)</title><rect x="30.0245%" y="277" width="69.2550%" height="15" fill="rgb(246,65,34)"/><text x="30.2745%" y="287.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (17 samples, 0.07%)</title><rect x="99.2134%" y="261" width="0.0662%" height="15" fill="rgb(231,100,33)"/><text x="99.4634%" y="271.50"></text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_notified (10 samples, 0.04%)</title><rect x="99.2796%" y="277" width="0.0389%" height="15" fill="rgb(228,126,14)"/><text x="99.5296%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (10 samples, 0.04%)</title><rect x="99.3185%" y="277" width="0.0389%" height="15" fill="rgb(215,173,21)"/><text x="99.5685%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (10 samples, 0.04%)</title><rect x="99.3575%" y="277" width="0.0389%" height="15" fill="rgb(210,6,40)"/><text x="99.6075%" y="287.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (17,905 samples, 69.73%)</title><rect x="29.7169%" y="293" width="69.7262%" height="15" fill="rgb(212,48,18)"/><text x="29.9669%" y="303.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.05%)</title><rect x="99.3964%" y="277" width="0.0467%" height="15" fill="rgb(230,214,11)"/><text x="99.6464%" y="287.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (10 samples, 0.04%)</title><rect x="99.4431%" y="293" width="0.0389%" height="15" fill="rgb(254,105,39)"/><text x="99.6931%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 0.05%)</title><rect x="99.4821%" y="293" width="0.0545%" height="15" fill="rgb(245,158,5)"/><text x="99.7321%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (25 samples, 0.10%)</title><rect x="99.5366%" y="293" width="0.0974%" height="15" fill="rgb(249,208,11)"/><text x="99.7866%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.03%)</title><rect x="99.6456%" y="293" width="0.0273%" height="15" fill="rgb(210,39,28)"/><text x="99.8956%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (18,648 samples, 72.62%)</title><rect x="27.0922%" y="309" width="72.6197%" height="15" fill="rgb(211,56,53)"/><text x="27.3422%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (10 samples, 0.04%)</title><rect x="99.6729%" y="293" width="0.0389%" height="15" fill="rgb(226,201,30)"/><text x="99.9229%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (25,467 samples, 99.17%)</title><rect x="0.7827%" y="325" width="99.1744%" height="15" fill="rgb(239,101,34)"/><text x="1.0327%" y="335.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (63 samples, 0.25%)</title><rect x="99.7118%" y="309" width="0.2453%" height="15" fill="rgb(226,209,5)"/><text x="99.9618%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (4 samples, 0.02%)</title><rect x="99.9572%" y="325" width="0.0156%" height="15" fill="rgb(250,105,47)"/><text x="100.2072%" y="335.50"></text></g><g><title>all (25,679 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(230,72,3)"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (25,494 samples, 99.28%)</title><rect x="0.7204%" y="485" width="99.2796%" height="15" fill="rgb(232,218,39)"/><text x="0.9704%" y="495.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (25,493 samples, 99.28%)</title><rect x="0.7243%" y="469" width="99.2757%" height="15" fill="rgb(248,166,6)"/><text x="0.9743%" y="479.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (25,493 samples, 99.28%)</title><rect x="0.7243%" y="453" width="99.2757%" height="15" fill="rgb(247,89,20)"/><text x="0.9743%" y="463.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (25,493 samples, 99.28%)</title><rect x="0.7243%" y="437" width="99.2757%" height="15" fill="rgb(248,130,54)"/><text x="0.9743%" y="447.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (25,493 samples, 99.28%)</title><rect x="0.7243%" y="421" width="99.2757%" height="15" fill="rgb(234,196,4)"/><text x="0.9743%" y="431.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (25,490 samples, 99.26%)</title><rect x="0.7360%" y="405" width="99.2640%" height="15" fill="rgb(250,143,31)"/><text x="0.9860%" y="415.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25,490 samples, 99.26%)</title><rect x="0.7360%" y="389" width="99.2640%" height="15" fill="rgb(211,110,34)"/><text x="0.9860%" y="399.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (25,490 samples, 99.26%)</title><rect x="0.7360%" y="373" width="99.2640%" height="15" fill="rgb(215,124,48)"/><text x="0.9860%" y="383.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (25,490 samples, 99.26%)</title><rect x="0.7360%" y="357" width="99.2640%" height="15" fill="rgb(216,46,13)"/><text x="0.9860%" y="367.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (25,490 samples, 99.26%)</title><rect x="0.7360%" y="341" width="99.2640%" height="15" fill="rgb(205,184,25)"/><text x="0.9860%" y="351.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (7 samples, 0.03%)</title><rect x="99.9727%" y="325" width="0.0273%" height="15" fill="rgb(228,1,10)"/><text x="100.2227%" y="335.50"></text></g></svg></svg>