<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.01%)</title><rect x="0.0026%" y="277" width="0.0130%" height="15" fill="rgb(227,0,7)"/><text x="0.2526%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.01%)</title><rect x="0.0026%" y="261" width="0.0130%" height="15" fill="rgb(217,0,24)"/><text x="0.2526%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.01%)</title><rect x="0.0026%" y="245" width="0.0130%" height="15" fill="rgb(221,193,54)"/><text x="0.2526%" y="255.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.01%)</title><rect x="0.0026%" y="229" width="0.0130%" height="15" fill="rgb(248,212,6)"/><text x="0.2526%" y="239.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.01%)</title><rect x="0.0026%" y="293" width="0.0143%" height="15" fill="rgb(208,68,35)"/><text x="0.2526%" y="303.50"></text></g><g><title>async-redis`0x1 (14 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0181%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="479.50"></text></g><g><title>libdyld.dylib`start (14 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0181%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="463.50"></text></g><g><title>async-redis`main (14 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0181%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="447.50"></text></g><g><title>async-redis`std::rt::lang_start_internal (14 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0181%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="431.50"></text></g><g><title>async-redis`std::rt::lang_start::_{{closure}} (13 samples, 0.02%)</title><rect x="0.0013%" y="405" width="0.0168%" height="15" fill="rgb(220,122,19)"/><text x="0.2513%" y="415.50"></text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.02%)</title><rect x="0.0013%" y="389" width="0.0168%" height="15" fill="rgb(250,228,42)"/><text x="0.2513%" y="399.50"></text></g><g><title>async-redis`async_redis::main (13 samples, 0.02%)</title><rect x="0.0013%" y="373" width="0.0168%" height="15" fill="rgb(240,193,28)"/><text x="0.2513%" y="383.50"></text></g><g><title>async-redis`tokio::runtime::Runtime::block_on (13 samples, 0.02%)</title><rect x="0.0013%" y="357" width="0.0168%" height="15" fill="rgb(216,20,37)"/><text x="0.2513%" y="367.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::ThreadPool::block_on (13 samples, 0.02%)</title><rect x="0.0013%" y="341" width="0.0168%" height="15" fill="rgb(206,188,39)"/><text x="0.2513%" y="351.50"></text></g><g><title>async-redis`tokio::park::thread::CachedParkThread::block_on (13 samples, 0.02%)</title><rect x="0.0013%" y="325" width="0.0168%" height="15" fill="rgb(217,207,13)"/><text x="0.2513%" y="335.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 0.02%)</title><rect x="0.0026%" y="309" width="0.0156%" height="15" fill="rgb(231,73,38)"/><text x="0.2526%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (13 samples, 0.02%)</title><rect x="0.0181%" y="309" width="0.0168%" height="15" fill="rgb(225,20,46)"/><text x="0.2681%" y="319.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (10 samples, 0.01%)</title><rect x="0.0415%" y="309" width="0.0130%" height="15" fill="rgb(210,31,41)"/><text x="0.2915%" y="319.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (36 samples, 0.05%)</title><rect x="1.3543%" y="293" width="0.0467%" height="15" fill="rgb(221,200,47)"/><text x="1.6043%" y="303.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (32 samples, 0.04%)</title><rect x="1.4139%" y="293" width="0.0415%" height="15" fill="rgb(226,26,5)"/><text x="1.6639%" y="303.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.03%)</title><rect x="1.4553%" y="293" width="0.0259%" height="15" fill="rgb(249,33,26)"/><text x="1.7053%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::queue::Local&lt;T&gt;::pop (18 samples, 0.02%)</title><rect x="1.4813%" y="293" width="0.0233%" height="15" fill="rgb(235,183,28)"/><text x="1.7313%" y="303.50"></text></g><g><title>async-redis`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (449 samples, 0.58%)</title><rect x="1.5046%" y="293" width="0.5819%" height="15" fill="rgb(221,5,38)"/><text x="1.7546%" y="303.50"></text></g><g><title>async-redis`DYLD-STUB$$pthread_mutex_unlock (21 samples, 0.03%)</title><rect x="6.7272%" y="261" width="0.0272%" height="15" fill="rgb(247,18,42)"/><text x="6.9772%" y="271.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (24 samples, 0.03%)</title><rect x="7.1432%" y="245" width="0.0311%" height="15" fill="rgb(241,131,45)"/><text x="7.3932%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.04%)</title><rect x="7.1743%" y="245" width="0.0389%" height="15" fill="rgb(249,31,29)"/><text x="7.4243%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4,150 samples, 5.38%)</title><rect x="7.2132%" y="245" width="5.3782%" height="15" fill="rgb(225,111,53)"/><text x="7.4632%" y="255.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (29 samples, 0.04%)</title><rect x="12.7624%" y="229" width="0.0376%" height="15" fill="rgb(238,160,17)"/><text x="13.0124%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (37 samples, 0.05%)</title><rect x="12.8013%" y="213" width="0.0479%" height="15" fill="rgb(214,148,48)"/><text x="13.0513%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (39 samples, 0.05%)</title><rect x="12.8000%" y="229" width="0.0505%" height="15" fill="rgb(232,36,49)"/><text x="13.0500%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (88 samples, 0.11%)</title><rect x="12.8506%" y="229" width="0.1140%" height="15" fill="rgb(209,103,24)"/><text x="13.1006%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (328 samples, 0.43%)</title><rect x="12.5978%" y="245" width="0.4251%" height="15" fill="rgb(229,88,8)"/><text x="12.8478%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (45 samples, 0.06%)</title><rect x="12.9646%" y="229" width="0.0583%" height="15" fill="rgb(213,181,19)"/><text x="13.2146%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (24 samples, 0.03%)</title><rect x="13.0320%" y="245" width="0.0311%" height="15" fill="rgb(254,191,54)"/><text x="13.2820%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (33 samples, 0.04%)</title><rect x="13.0631%" y="245" width="0.0428%" height="15" fill="rgb(241,83,37)"/><text x="13.3131%" y="255.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (4,945 samples, 6.41%)</title><rect x="6.7544%" y="261" width="6.4084%" height="15" fill="rgb(233,36,39)"/><text x="7.0044%" y="271.50">async-re..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (44 samples, 0.06%)</title><rect x="13.1059%" y="245" width="0.0570%" height="15" fill="rgb(226,3,54)"/><text x="13.3559%" y="255.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (20 samples, 0.03%)</title><rect x="13.1655%" y="261" width="0.0259%" height="15" fill="rgb(245,192,40)"/><text x="13.4155%" y="271.50"></text></g><g><title>async-redis`std::time::Instant::now (18 samples, 0.02%)</title><rect x="13.2018%" y="261" width="0.0233%" height="15" fill="rgb(238,167,29)"/><text x="13.4518%" y="271.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="13.4778%" y="229" width="0.0130%" height="15" fill="rgb(232,182,51)"/><text x="13.7278%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (28 samples, 0.04%)</title><rect x="13.4907%" y="229" width="0.0363%" height="15" fill="rgb(231,60,39)"/><text x="13.7407%" y="239.50"></text></g><g><title>async-redis`mio::event::event::Event::token (40 samples, 0.05%)</title><rect x="13.5581%" y="229" width="0.0518%" height="15" fill="rgb(208,69,12)"/><text x="13.8081%" y="239.50"></text></g><g><title>async-redis`mio::event::events::Events::iter (28 samples, 0.04%)</title><rect x="13.6100%" y="229" width="0.0363%" height="15" fill="rgb(235,93,37)"/><text x="13.8600%" y="239.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (16 samples, 0.02%)</title><rect x="13.6463%" y="229" width="0.0207%" height="15" fill="rgb(213,116,39)"/><text x="13.8963%" y="239.50"></text></g><g><title>async-redis`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.03%)</title><rect x="14.4057%" y="213" width="0.0311%" height="15" fill="rgb(222,207,29)"/><text x="14.6557%" y="223.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="14.4446%" y="213" width="0.0130%" height="15" fill="rgb(206,96,30)"/><text x="14.6946%" y="223.50"></text></g><g><title>async-redis`mio::event::event::Event::is_readable (9 samples, 0.01%)</title><rect x="14.4601%" y="213" width="0.0117%" height="15" fill="rgb(218,138,4)"/><text x="14.7101%" y="223.50"></text></g><g><title>async-redis`mio::event::event::Event::token (12 samples, 0.02%)</title><rect x="14.4821%" y="213" width="0.0156%" height="15" fill="rgb(250,191,14)"/><text x="14.7321%" y="223.50"></text></g><g><title>async-redis`mio::poll::Poll::poll (145 samples, 0.19%)</title><rect x="14.5003%" y="213" width="0.1879%" height="15" fill="rgb(239,60,40)"/><text x="14.7503%" y="223.50"></text></g><g><title>async-redis`core::array::_&lt;impl core::default::Default for [T (31 samples, 0.04%)</title><rect x="14.9616%" y="197" width="0.0402%" height="15" fill="rgb(206,27,48)"/><text x="15.2116%" y="207.50"></text></g><g><title> 32]&gt;::default (31 samples, 0.04%)</title><rect x="14.9616%" y="181" width="0.0402%" height="15" fill="rgb(225,35,8)"/><text x="15.2116%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (108 samples, 0.14%)</title><rect x="15.0018%" y="197" width="0.1400%" height="15" fill="rgb(250,213,24)"/><text x="15.2518%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="15.1431%" y="197" width="0.0117%" height="15" fill="rgb(247,123,22)"/><text x="15.3931%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (18 samples, 0.02%)</title><rect x="15.1547%" y="197" width="0.0233%" height="15" fill="rgb(231,138,38)"/><text x="15.4047%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (31 samples, 0.04%)</title><rect x="15.1820%" y="181" width="0.0402%" height="15" fill="rgb(231,145,46)"/><text x="15.4320%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (101 samples, 0.13%)</title><rect x="15.2221%" y="181" width="0.1309%" height="15" fill="rgb(251,118,11)"/><text x="15.4721%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (16 samples, 0.02%)</title><rect x="15.4010%" y="149" width="0.0207%" height="15" fill="rgb(217,147,25)"/><text x="15.6510%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (14 samples, 0.02%)</title><rect x="15.4217%" y="149" width="0.0181%" height="15" fill="rgb(247,81,37)"/><text x="15.6717%" y="159.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (70 samples, 0.09%)</title><rect x="15.3763%" y="165" width="0.0907%" height="15" fill="rgb(209,12,38)"/><text x="15.6263%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.03%)</title><rect x="15.4398%" y="149" width="0.0272%" height="15" fill="rgb(227,1,9)"/><text x="15.6898%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (233 samples, 0.30%)</title><rect x="15.1781%" y="197" width="0.3020%" height="15" fill="rgb(248,47,43)"/><text x="15.4281%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (98 samples, 0.13%)</title><rect x="15.3530%" y="181" width="0.1270%" height="15" fill="rgb(221,10,30)"/><text x="15.6030%" y="191.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (614 samples, 0.80%)</title><rect x="14.6882%" y="213" width="0.7957%" height="15" fill="rgb(210,229,1)"/><text x="14.9382%" y="223.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_val (22 samples, 0.03%)</title><rect x="15.4839%" y="213" width="0.0285%" height="15" fill="rgb(222,148,37)"/><text x="15.7339%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (6,353 samples, 8.23%)</title><rect x="13.6670%" y="229" width="8.2331%" height="15" fill="rgb(234,67,33)"/><text x="13.9170%" y="239.50">async-redis..</text></g><g><title>libsystem_kernel.dylib`kevent (4,926 samples, 6.38%)</title><rect x="15.5163%" y="213" width="6.3838%" height="15" fill="rgb(247,98,35)"/><text x="15.7663%" y="223.50">libsyste..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (13 samples, 0.02%)</title><rect x="21.9001%" y="229" width="0.0168%" height="15" fill="rgb(247,138,52)"/><text x="22.1501%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (12 samples, 0.02%)</title><rect x="21.9170%" y="229" width="0.0156%" height="15" fill="rgb(213,79,30)"/><text x="22.1670%" y="239.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (16 samples, 0.02%)</title><rect x="21.9636%" y="213" width="0.0207%" height="15" fill="rgb(246,177,23)"/><text x="22.2136%" y="223.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (22 samples, 0.03%)</title><rect x="22.0077%" y="197" width="0.0285%" height="15" fill="rgb(230,62,27)"/><text x="22.2577%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (141 samples, 0.18%)</title><rect x="22.0362%" y="197" width="0.1827%" height="15" fill="rgb(216,154,8)"/><text x="22.2862%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (220 samples, 0.29%)</title><rect x="21.9843%" y="213" width="0.2851%" height="15" fill="rgb(244,35,45)"/><text x="22.2343%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.05%)</title><rect x="22.2189%" y="197" width="0.0505%" height="15" fill="rgb(251,115,12)"/><text x="22.4689%" y="207.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (261 samples, 0.34%)</title><rect x="21.9325%" y="229" width="0.3382%" height="15" fill="rgb(240,54,50)"/><text x="22.1825%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (6,854 samples, 8.88%)</title><rect x="13.4506%" y="245" width="8.8824%" height="15" fill="rgb(233,84,52)"/><text x="13.7006%" y="255.50">async-redis`&lt;..</text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (48 samples, 0.06%)</title><rect x="22.2707%" y="229" width="0.0622%" height="15" fill="rgb(207,117,47)"/><text x="22.5207%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (26 samples, 0.03%)</title><rect x="22.3330%" y="245" width="0.0337%" height="15" fill="rgb(249,43,39)"/><text x="22.5830%" y="255.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.01%)</title><rect x="22.3666%" y="245" width="0.0143%" height="15" fill="rgb(209,38,44)"/><text x="22.6166%" y="255.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (153 samples, 0.20%)</title><rect x="22.3809%" y="245" width="0.1983%" height="15" fill="rgb(236,212,23)"/><text x="22.6309%" y="255.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (9 samples, 0.01%)</title><rect x="22.5805%" y="245" width="0.0117%" height="15" fill="rgb(242,79,21)"/><text x="22.8305%" y="255.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (34 samples, 0.04%)</title><rect x="22.5921%" y="245" width="0.0441%" height="15" fill="rgb(211,96,35)"/><text x="22.8421%" y="255.50"></text></g><g><title>async-redis`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (23 samples, 0.03%)</title><rect x="22.6362%" y="245" width="0.0298%" height="15" fill="rgb(253,215,40)"/><text x="22.8862%" y="255.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (127 samples, 0.16%)</title><rect x="22.8241%" y="229" width="0.1646%" height="15" fill="rgb(211,81,21)"/><text x="23.0741%" y="239.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (10 samples, 0.01%)</title><rect x="22.9887%" y="229" width="0.0130%" height="15" fill="rgb(208,190,38)"/><text x="23.2387%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (80 samples, 0.10%)</title><rect x="23.0017%" y="229" width="0.1037%" height="15" fill="rgb(235,213,38)"/><text x="23.2517%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (53 samples, 0.07%)</title><rect x="23.0366%" y="213" width="0.0687%" height="15" fill="rgb(237,122,38)"/><text x="23.2866%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::poll (100 samples, 0.13%)</title><rect x="23.1053%" y="229" width="0.1296%" height="15" fill="rgb(244,218,35)"/><text x="23.3553%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (81 samples, 0.10%)</title><rect x="23.1300%" y="213" width="0.1050%" height="15" fill="rgb(240,68,47)"/><text x="23.3800%" y="223.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (448 samples, 0.58%)</title><rect x="22.6660%" y="245" width="0.5806%" height="15" fill="rgb(210,16,53)"/><text x="22.9160%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (9 samples, 0.01%)</title><rect x="23.2349%" y="229" width="0.0117%" height="15" fill="rgb(235,124,12)"/><text x="23.4849%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::next_expiration_time (110 samples, 0.14%)</title><rect x="23.2466%" y="245" width="0.1426%" height="15" fill="rgb(224,169,11)"/><text x="23.4966%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::level::Level::next_expiration (97 samples, 0.13%)</title><rect x="23.2634%" y="229" width="0.1257%" height="15" fill="rgb(250,166,2)"/><text x="23.5134%" y="239.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (7,969 samples, 10.33%)</title><rect x="13.2251%" y="261" width="10.3274%" height="15" fill="rgb(242,216,29)"/><text x="13.4751%" y="271.50">async-redis`tok..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (120 samples, 0.16%)</title><rect x="23.3969%" y="245" width="0.1555%" height="15" fill="rgb(230,116,27)"/><text x="23.6469%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (28 samples, 0.04%)</title><rect x="23.5576%" y="261" width="0.0363%" height="15" fill="rgb(228,99,48)"/><text x="23.8076%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5,532 samples, 7.17%)</title><rect x="23.5939%" y="261" width="7.1691%" height="15" fill="rgb(253,11,6)"/><text x="23.8439%" y="271.50">libsystem_..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (37 samples, 0.05%)</title><rect x="30.7631%" y="261" width="0.0479%" height="15" fill="rgb(247,143,39)"/><text x="31.0131%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (9 samples, 0.01%)</title><rect x="30.8110%" y="261" width="0.0117%" height="15" fill="rgb(236,97,10)"/><text x="31.0610%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (145 samples, 0.19%)</title><rect x="30.8227%" y="261" width="0.1879%" height="15" fill="rgb(233,208,19)"/><text x="31.0727%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_wait (8 samples, 0.01%)</title><rect x="31.0106%" y="261" width="0.0104%" height="15" fill="rgb(216,164,2)"/><text x="31.2606%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (19,593 samples, 25.39%)</title><rect x="5.6814%" y="277" width="25.3914%" height="15" fill="rgb(220,129,5)"/><text x="5.9314%" y="287.50">async-redis`&lt;tokio::runtime::park::Parker..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (37 samples, 0.05%)</title><rect x="31.0248%" y="261" width="0.0479%" height="15" fill="rgb(242,17,10)"/><text x="31.2748%" y="271.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::wake0 (12 samples, 0.02%)</title><rect x="31.1130%" y="213" width="0.0156%" height="15" fill="rgb(242,107,0)"/><text x="31.3630%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::Driver::turn (170 samples, 0.22%)</title><rect x="31.0896%" y="229" width="0.2203%" height="15" fill="rgb(251,28,31)"/><text x="31.3396%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`kevent (139 samples, 0.18%)</title><rect x="31.1298%" y="213" width="0.1801%" height="15" fill="rgb(233,223,10)"/><text x="31.3798%" y="223.50"></text></g><g><title>async-redis`tokio::signal::unix::driver::Driver::process (10 samples, 0.01%)</title><rect x="31.3112%" y="229" width="0.0130%" height="15" fill="rgb(215,21,27)"/><text x="31.5612%" y="239.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (9 samples, 0.01%)</title><rect x="31.3125%" y="213" width="0.0117%" height="15" fill="rgb(232,23,21)"/><text x="31.5625%" y="223.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (8 samples, 0.01%)</title><rect x="31.3138%" y="197" width="0.0104%" height="15" fill="rgb(244,5,23)"/><text x="31.5638%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (187 samples, 0.24%)</title><rect x="31.0831%" y="245" width="0.2423%" height="15" fill="rgb(226,81,46)"/><text x="31.3331%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (10 samples, 0.01%)</title><rect x="31.3333%" y="245" width="0.0130%" height="15" fill="rgb(247,70,30)"/><text x="31.5833%" y="255.50"></text></g><g><title>async-redis`tokio::time::driver::Driver&lt;P&gt;::park_internal (210 samples, 0.27%)</title><rect x="31.0806%" y="261" width="0.2721%" height="15" fill="rgb(212,68,19)"/><text x="31.3306%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (218 samples, 0.28%)</title><rect x="31.0728%" y="277" width="0.2825%" height="15" fill="rgb(240,187,13)"/><text x="31.3228%" y="287.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (17 samples, 0.02%)</title><rect x="31.3553%" y="277" width="0.0220%" height="15" fill="rgb(223,113,26)"/><text x="31.6053%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (149 samples, 0.19%)</title><rect x="31.3955%" y="261" width="0.1931%" height="15" fill="rgb(206,192,2)"/><text x="31.6455%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (8 samples, 0.01%)</title><rect x="31.5963%" y="261" width="0.0104%" height="15" fill="rgb(241,108,4)"/><text x="31.8463%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (179 samples, 0.23%)</title><rect x="31.3812%" y="277" width="0.2320%" height="15" fill="rgb(247,173,49)"/><text x="31.6312%" y="287.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::wait_until_internal (13 samples, 0.02%)</title><rect x="31.6132%" y="277" width="0.0168%" height="15" fill="rgb(224,114,35)"/><text x="31.8632%" y="287.50"></text></g><g><title>async-redis`std::thread::yield_now (9 samples, 0.01%)</title><rect x="31.6313%" y="277" width="0.0117%" height="15" fill="rgb(245,159,27)"/><text x="31.8813%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (88 samples, 0.11%)</title><rect x="31.6495%" y="277" width="0.1140%" height="15" fill="rgb(245,172,44)"/><text x="31.8995%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::park_timeout (22,904 samples, 29.68%)</title><rect x="2.0865%" y="293" width="29.6822%" height="15" fill="rgb(236,23,11)"/><text x="2.3365%" y="303.50">async-redis`tokio::runtime::thread_pool::worker:..</text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (99 samples, 0.13%)</title><rect x="32.0046%" y="277" width="0.1283%" height="15" fill="rgb(205,117,38)"/><text x="32.2546%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent (94 samples, 0.12%)</title><rect x="32.0110%" y="261" width="0.1218%" height="15" fill="rgb(237,72,25)"/><text x="32.2610%" y="271.50"></text></g><g><title>async-redis`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (103 samples, 0.13%)</title><rect x="32.1355%" y="277" width="0.1335%" height="15" fill="rgb(244,70,9)"/><text x="32.3855%" y="287.50"></text></g><g><title>async-redis`parking_lot_core::parking_lot::lock_bucket_pair (58 samples, 0.08%)</title><rect x="32.3428%" y="261" width="0.0752%" height="15" fill="rgb(217,125,39)"/><text x="32.5928%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2,177 samples, 2.82%)</title><rect x="32.4180%" y="261" width="2.8213%" height="15" fill="rgb(235,36,10)"/><text x="32.6680%" y="271.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (29 samples, 0.04%)</title><rect x="35.2392%" y="261" width="0.0376%" height="15" fill="rgb(251,123,47)"/><text x="35.4892%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvsignal (10 samples, 0.01%)</title><rect x="35.2768%" y="261" width="0.0130%" height="15" fill="rgb(221,13,13)"/><text x="35.5268%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (22 samples, 0.03%)</title><rect x="35.2898%" y="261" width="0.0285%" height="15" fill="rgb(238,131,9)"/><text x="35.5398%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (22 samples, 0.03%)</title><rect x="35.3209%" y="261" width="0.0285%" height="15" fill="rgb(211,50,8)"/><text x="35.5709%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (22 samples, 0.03%)</title><rect x="35.3209%" y="245" width="0.0285%" height="15" fill="rgb(245,182,24)"/><text x="35.5709%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (70 samples, 0.09%)</title><rect x="35.3494%" y="261" width="0.0907%" height="15" fill="rgb(242,14,37)"/><text x="35.5994%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (25 samples, 0.03%)</title><rect x="35.4077%" y="245" width="0.0324%" height="15" fill="rgb(246,228,12)"/><text x="35.6577%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (63 samples, 0.08%)</title><rect x="35.4401%" y="261" width="0.0816%" height="15" fill="rgb(213,55,15)"/><text x="35.6901%" y="271.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (2,524 samples, 3.27%)</title><rect x="32.2767%" y="277" width="3.2710%" height="15" fill="rgb(209,9,3)"/><text x="32.5267%" y="287.50">asy..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (20 samples, 0.03%)</title><rect x="35.5217%" y="261" width="0.0259%" height="15" fill="rgb(230,59,30)"/><text x="35.7717%" y="271.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41 samples, 0.05%)</title><rect x="35.7485%" y="261" width="0.0531%" height="15" fill="rgb(209,121,21)"/><text x="35.9985%" y="271.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (13 samples, 0.02%)</title><rect x="35.8017%" y="261" width="0.0168%" height="15" fill="rgb(220,109,13)"/><text x="36.0517%" y="271.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.04%)</title><rect x="35.9650%" y="245" width="0.0428%" height="15" fill="rgb(232,18,1)"/><text x="36.2150%" y="255.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (19 samples, 0.02%)</title><rect x="36.6738%" y="197" width="0.0246%" height="15" fill="rgb(215,41,42)"/><text x="36.9238%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (57 samples, 0.07%)</title><rect x="36.7788%" y="165" width="0.0739%" height="15" fill="rgb(224,123,36)"/><text x="37.0288%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (66 samples, 0.09%)</title><rect x="36.7762%" y="181" width="0.0855%" height="15" fill="rgb(240,125,3)"/><text x="37.0262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.02%)</title><rect x="36.9240%" y="165" width="0.0246%" height="15" fill="rgb(205,98,50)"/><text x="37.1740%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (74 samples, 0.10%)</title><rect x="36.8617%" y="181" width="0.0959%" height="15" fill="rgb(205,185,37)"/><text x="37.1117%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (203 samples, 0.26%)</title><rect x="36.6985%" y="197" width="0.2631%" height="15" fill="rgb(238,207,15)"/><text x="36.9485%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (210 samples, 0.27%)</title><rect x="37.0328%" y="181" width="0.2721%" height="15" fill="rgb(213,199,42)"/><text x="37.2828%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (107 samples, 0.14%)</title><rect x="37.1663%" y="165" width="0.1387%" height="15" fill="rgb(235,201,11)"/><text x="37.4163%" y="175.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.02%)</title><rect x="37.3050%" y="181" width="0.0246%" height="15" fill="rgb(207,46,11)"/><text x="37.5550%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (14 samples, 0.02%)</title><rect x="37.3296%" y="181" width="0.0181%" height="15" fill="rgb(241,35,35)"/><text x="37.5796%" y="191.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (300 samples, 0.39%)</title><rect x="36.9615%" y="197" width="0.3888%" height="15" fill="rgb(243,32,47)"/><text x="37.2115%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.03%)</title><rect x="37.3516%" y="197" width="0.0311%" height="15" fill="rgb(247,202,23)"/><text x="37.6016%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.03%)</title><rect x="37.3840%" y="181" width="0.0350%" height="15" fill="rgb(219,102,11)"/><text x="37.6340%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.03%)</title><rect x="37.3840%" y="165" width="0.0350%" height="15" fill="rgb(243,110,44)"/><text x="37.6340%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.04%)</title><rect x="37.3827%" y="197" width="0.0376%" height="15" fill="rgb(222,74,54)"/><text x="37.6327%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.03%)</title><rect x="37.5266%" y="165" width="0.0324%" height="15" fill="rgb(216,99,12)"/><text x="37.7766%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.09%)</title><rect x="37.4786%" y="181" width="0.0946%" height="15" fill="rgb(226,22,26)"/><text x="37.7286%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.01%)</title><rect x="37.5590%" y="165" width="0.0143%" height="15" fill="rgb(217,163,10)"/><text x="37.8090%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (120 samples, 0.16%)</title><rect x="37.4203%" y="197" width="0.1555%" height="15" fill="rgb(213,25,53)"/><text x="37.6703%" y="207.50"></text></g><g><title>async-redis`&lt;async_redis::cmd::set::Set as async_redis::cmd::ExecDB&gt;::exec (706 samples, 0.91%)</title><rect x="36.6661%" y="213" width="0.9149%" height="15" fill="rgb(252,105,26)"/><text x="36.9161%" y="223.50"></text></g><g><title>async-redis`&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (70 samples, 0.09%)</title><rect x="38.2678%" y="197" width="0.0907%" height="15" fill="rgb(220,39,43)"/><text x="38.5178%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.06%)</title><rect x="38.2951%" y="181" width="0.0635%" height="15" fill="rgb(229,68,48)"/><text x="38.5451%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.02%)</title><rect x="38.4363%" y="165" width="0.0233%" height="15" fill="rgb(252,8,32)"/><text x="38.6863%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="38.4415%" y="149" width="0.0181%" height="15" fill="rgb(223,20,43)"/><text x="38.6915%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="38.4441%" y="133" width="0.0156%" height="15" fill="rgb(229,81,49)"/><text x="38.6941%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.04%)</title><rect x="38.5478%" y="133" width="0.0376%" height="15" fill="rgb(236,28,36)"/><text x="38.7978%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (101 samples, 0.13%)</title><rect x="38.4596%" y="165" width="0.1309%" height="15" fill="rgb(249,185,26)"/><text x="38.7096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (55 samples, 0.07%)</title><rect x="38.5193%" y="149" width="0.0713%" height="15" fill="rgb(249,174,33)"/><text x="38.7693%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (150 samples, 0.19%)</title><rect x="38.3974%" y="181" width="0.1944%" height="15" fill="rgb(233,201,37)"/><text x="38.6474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="38.5918%" y="181" width="0.0117%" height="15" fill="rgb(221,78,26)"/><text x="38.8418%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (54 samples, 0.07%)</title><rect x="38.6035%" y="181" width="0.0700%" height="15" fill="rgb(250,127,30)"/><text x="38.8535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (36 samples, 0.05%)</title><rect x="38.6268%" y="165" width="0.0467%" height="15" fill="rgb(230,49,44)"/><text x="38.8768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.02%)</title><rect x="38.6527%" y="149" width="0.0207%" height="15" fill="rgb(229,67,23)"/><text x="38.9027%" y="159.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 samples, 0.32%)</title><rect x="38.3586%" y="197" width="0.3188%" height="15" fill="rgb(249,83,47)"/><text x="38.6086%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.03%)</title><rect x="38.6813%" y="197" width="0.0298%" height="15" fill="rgb(215,43,3)"/><text x="38.9313%" y="207.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (10 samples, 0.01%)</title><rect x="38.7720%" y="181" width="0.0130%" height="15" fill="rgb(238,154,13)"/><text x="39.0220%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (48 samples, 0.06%)</title><rect x="38.9145%" y="165" width="0.0622%" height="15" fill="rgb(219,56,2)"/><text x="39.1645%" y="175.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (13 samples, 0.02%)</title><rect x="38.9780%" y="165" width="0.0168%" height="15" fill="rgb(233,0,4)"/><text x="39.2280%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (8 samples, 0.01%)</title><rect x="39.0260%" y="149" width="0.0104%" height="15" fill="rgb(235,30,7)"/><text x="39.2760%" y="159.50"></text></g><g><title>async-redis`flume::async::AsyncSignal::new (42 samples, 0.05%)</title><rect x="38.9949%" y="165" width="0.0544%" height="15" fill="rgb(250,79,13)"/><text x="39.2449%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (10 samples, 0.01%)</title><rect x="39.0363%" y="149" width="0.0130%" height="15" fill="rgb(211,146,34)"/><text x="39.2863%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.01%)</title><rect x="39.0376%" y="133" width="0.0117%" height="15" fill="rgb(228,22,38)"/><text x="39.2876%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (10 samples, 0.01%)</title><rect x="39.0493%" y="165" width="0.0130%" height="15" fill="rgb(235,168,5)"/><text x="39.2993%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.02%)</title><rect x="39.1828%" y="117" width="0.0194%" height="15" fill="rgb(221,155,16)"/><text x="39.4328%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (60 samples, 0.08%)</title><rect x="39.2035%" y="117" width="0.0778%" height="15" fill="rgb(215,215,53)"/><text x="39.4535%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.01%)</title><rect x="39.2683%" y="101" width="0.0130%" height="15" fill="rgb(223,4,10)"/><text x="39.5183%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (157 samples, 0.20%)</title><rect x="39.0791%" y="133" width="0.2035%" height="15" fill="rgb(234,103,6)"/><text x="39.3291%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (166 samples, 0.22%)</title><rect x="39.0687%" y="149" width="0.2151%" height="15" fill="rgb(227,97,0)"/><text x="39.3187%" y="159.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (372 samples, 0.48%)</title><rect x="38.8044%" y="181" width="0.4821%" height="15" fill="rgb(234,150,53)"/><text x="39.0544%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (173 samples, 0.22%)</title><rect x="39.0623%" y="165" width="0.2242%" height="15" fill="rgb(228,201,54)"/><text x="39.3123%" y="175.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (11 samples, 0.01%)</title><rect x="39.3772%" y="165" width="0.0143%" height="15" fill="rgb(222,22,37)"/><text x="39.6272%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (94 samples, 0.12%)</title><rect x="39.2865%" y="181" width="0.1218%" height="15" fill="rgb(237,53,32)"/><text x="39.5365%" y="191.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (12 samples, 0.02%)</title><rect x="39.3927%" y="165" width="0.0156%" height="15" fill="rgb(233,25,53)"/><text x="39.6427%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (542 samples, 0.70%)</title><rect x="38.7111%" y="197" width="0.7024%" height="15" fill="rgb(210,40,34)"/><text x="38.9611%" y="207.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (27 samples, 0.03%)</title><rect x="39.5405%" y="181" width="0.0350%" height="15" fill="rgb(241,220,44)"/><text x="39.7905%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::lock (24 samples, 0.03%)</title><rect x="39.8981%" y="149" width="0.0311%" height="15" fill="rgb(235,28,35)"/><text x="40.1481%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (58 samples, 0.08%)</title><rect x="39.9344%" y="133" width="0.0752%" height="15" fill="rgb(210,56,17)"/><text x="40.1844%" y="143.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (45 samples, 0.06%)</title><rect x="40.0368%" y="117" width="0.0583%" height="15" fill="rgb(224,130,29)"/><text x="40.2868%" y="127.50"></text></g><g><title>async-redis`&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (187 samples, 0.24%)</title><rect x="39.8567%" y="165" width="0.2423%" height="15" fill="rgb(235,212,8)"/><text x="40.1067%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (129 samples, 0.17%)</title><rect x="39.9318%" y="149" width="0.1672%" height="15" fill="rgb(223,33,50)"/><text x="40.1818%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (69 samples, 0.09%)</title><rect x="40.0096%" y="133" width="0.0894%" height="15" fill="rgb(219,149,13)"/><text x="40.2596%" y="143.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (55 samples, 0.07%)</title><rect x="40.1003%" y="165" width="0.0713%" height="15" fill="rgb(250,156,29)"/><text x="40.3503%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::send (514 samples, 0.67%)</title><rect x="39.5793%" y="181" width="0.6661%" height="15" fill="rgb(216,193,19)"/><text x="39.8293%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (45 samples, 0.06%)</title><rect x="40.1871%" y="165" width="0.0583%" height="15" fill="rgb(216,135,14)"/><text x="40.4371%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (640 samples, 0.83%)</title><rect x="39.4173%" y="197" width="0.8294%" height="15" fill="rgb(241,47,5)"/><text x="39.6673%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (29 samples, 0.04%)</title><rect x="41.0139%" y="149" width="0.0376%" height="15" fill="rgb(233,42,35)"/><text x="41.2639%" y="159.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (10 samples, 0.01%)</title><rect x="41.3548%" y="117" width="0.0130%" height="15" fill="rgb(231,13,6)"/><text x="41.6048%" y="127.50"></text></g><g><title>async-redis`std::io::error::Error::kind (26 samples, 0.03%)</title><rect x="41.3677%" y="117" width="0.0337%" height="15" fill="rgb(207,181,40)"/><text x="41.6177%" y="127.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (10 samples, 0.01%)</title><rect x="41.4014%" y="117" width="0.0130%" height="15" fill="rgb(254,173,49)"/><text x="41.6514%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`cerror (10 samples, 0.01%)</title><rect x="41.8161%" y="69" width="0.0130%" height="15" fill="rgb(221,1,38)"/><text x="42.0661%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (14 samples, 0.02%)</title><rect x="41.8291%" y="69" width="0.0181%" height="15" fill="rgb(206,124,46)"/><text x="42.0791%" y="79.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (191 samples, 0.25%)</title><rect x="41.6541%" y="85" width="0.2475%" height="15" fill="rgb(249,21,11)"/><text x="41.9041%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (42 samples, 0.05%)</title><rect x="41.8472%" y="69" width="0.0544%" height="15" fill="rgb(222,201,40)"/><text x="42.0972%" y="79.50"></text></g><g><title>async-redis`DYLD-STUB$$__error (26 samples, 0.03%)</title><rect x="41.9017%" y="85" width="0.0337%" height="15" fill="rgb(235,61,29)"/><text x="42.1517%" y="95.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (9 samples, 0.01%)</title><rect x="41.9380%" y="85" width="0.0117%" height="15" fill="rgb(219,207,3)"/><text x="42.1880%" y="95.50"></text></g><g><title>libsystem_c.dylib`recv (11 samples, 0.01%)</title><rect x="41.9496%" y="85" width="0.0143%" height="15" fill="rgb(222,56,46)"/><text x="42.1996%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__error (27 samples, 0.03%)</title><rect x="41.9639%" y="85" width="0.0350%" height="15" fill="rgb(239,76,54)"/><text x="42.2139%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (13,130 samples, 17.02%)</title><rect x="41.9989%" y="85" width="17.0157%" height="15" fill="rgb(231,124,27)"/><text x="42.2489%" y="95.50">libsystem_kernel.dylib`__r..</text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (13,489 samples, 17.48%)</title><rect x="41.5803%" y="101" width="17.4809%" height="15" fill="rgb(249,195,6)"/><text x="41.8303%" y="111.50">async-redis`&lt;&amp;mio::net::tcp..</text></g><g><title>libsystem_kernel.dylib`cerror (36 samples, 0.05%)</title><rect x="59.0146%" y="85" width="0.0467%" height="15" fill="rgb(237,174,47)"/><text x="59.2646%" y="95.50"></text></g><g><title>async-redis`std::sys::unix::decode_error_kind (31 samples, 0.04%)</title><rect x="59.0716%" y="101" width="0.0402%" height="15" fill="rgb(206,201,31)"/><text x="59.3216%" y="111.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (27 samples, 0.03%)</title><rect x="59.5913%" y="85" width="0.0350%" height="15" fill="rgb(231,57,52)"/><text x="59.8413%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (9 samples, 0.01%)</title><rect x="59.7455%" y="69" width="0.0117%" height="15" fill="rgb(248,177,22)"/><text x="59.9955%" y="79.50"></text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (122 samples, 0.16%)</title><rect x="59.6263%" y="85" width="0.1581%" height="15" fill="rgb(215,211,37)"/><text x="59.8763%" y="95.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (21 samples, 0.03%)</title><rect x="59.7571%" y="69" width="0.0272%" height="15" fill="rgb(241,128,51)"/><text x="60.0071%" y="79.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (21 samples, 0.03%)</title><rect x="59.7571%" y="53" width="0.0272%" height="15" fill="rgb(227,165,31)"/><text x="60.0071%" y="63.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (13 samples, 0.02%)</title><rect x="59.7844%" y="85" width="0.0168%" height="15" fill="rgb(228,167,24)"/><text x="60.0344%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (547 samples, 0.71%)</title><rect x="59.1195%" y="101" width="0.7089%" height="15" fill="rgb(228,143,12)"/><text x="59.3695%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.03%)</title><rect x="59.8012%" y="85" width="0.0272%" height="15" fill="rgb(249,149,8)"/><text x="60.0512%" y="95.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (14,215 samples, 18.42%)</title><rect x="41.4144%" y="117" width="18.4218%" height="15" fill="rgb(243,35,44)"/><text x="41.6644%" y="127.50">async-redis`tokio::io::driver..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (14,384 samples, 18.64%)</title><rect x="41.2122%" y="133" width="18.6408%" height="15" fill="rgb(246,89,9)"/><text x="41.4622%" y="143.50">async-redis`&lt;tokio::net::tcp:..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (13 samples, 0.02%)</title><rect x="59.8362%" y="117" width="0.0168%" height="15" fill="rgb(233,213,13)"/><text x="60.0862%" y="127.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::reserve_inner (63 samples, 0.08%)</title><rect x="59.8569%" y="133" width="0.0816%" height="15" fill="rgb(233,141,41)"/><text x="60.1069%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (58 samples, 0.08%)</title><rect x="59.8634%" y="117" width="0.0752%" height="15" fill="rgb(239,167,4)"/><text x="60.1134%" y="127.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_read_io (15 samples, 0.02%)</title><rect x="59.9386%" y="133" width="0.0194%" height="15" fill="rgb(209,217,16)"/><text x="60.1886%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (14,592 samples, 18.91%)</title><rect x="41.0515%" y="149" width="18.9104%" height="15" fill="rgb(219,88,35)"/><text x="41.3015%" y="159.50">async-redis`&lt;tokio::io::util::..</text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 0.01%)</title><rect x="59.9619%" y="149" width="0.0143%" height="15" fill="rgb(220,193,23)"/><text x="60.2119%" y="159.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (23 samples, 0.03%)</title><rect x="60.5438%" y="117" width="0.0298%" height="15" fill="rgb(230,90,52)"/><text x="60.7938%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (15 samples, 0.02%)</title><rect x="60.5775%" y="117" width="0.0194%" height="15" fill="rgb(252,106,19)"/><text x="60.8275%" y="127.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (13 samples, 0.02%)</title><rect x="60.5801%" y="101" width="0.0168%" height="15" fill="rgb(206,74,20)"/><text x="60.8301%" y="111.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (486 samples, 0.63%)</title><rect x="59.9762%" y="149" width="0.6298%" height="15" fill="rgb(230,138,44)"/><text x="60.2262%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (477 samples, 0.62%)</title><rect x="59.9878%" y="133" width="0.6182%" height="15" fill="rgb(235,182,43)"/><text x="60.2378%" y="143.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="60.6151%" y="149" width="0.0156%" height="15" fill="rgb(242,16,51)"/><text x="60.8651%" y="159.50"></text></g><g><title>async-redis`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.06%)</title><rect x="60.8405%" y="133" width="0.0622%" height="15" fill="rgb(248,9,4)"/><text x="61.0905%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (22 samples, 0.03%)</title><rect x="60.8742%" y="117" width="0.0285%" height="15" fill="rgb(210,31,22)"/><text x="61.1242%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.02%)</title><rect x="61.1736%" y="69" width="0.0246%" height="15" fill="rgb(239,54,39)"/><text x="61.4236%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (270 samples, 0.35%)</title><rect x="60.9624%" y="85" width="0.3499%" height="15" fill="rgb(230,99,41)"/><text x="61.2124%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (88 samples, 0.11%)</title><rect x="61.1982%" y="69" width="0.1140%" height="15" fill="rgb(253,106,12)"/><text x="61.4482%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (295 samples, 0.38%)</title><rect x="60.9313%" y="117" width="0.3823%" height="15" fill="rgb(213,46,41)"/><text x="61.1813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (273 samples, 0.35%)</title><rect x="60.9598%" y="101" width="0.3538%" height="15" fill="rgb(215,133,35)"/><text x="61.2098%" y="111.50"></text></g><g><title>async-redis`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (316 samples, 0.41%)</title><rect x="60.9092%" y="133" width="0.4095%" height="15" fill="rgb(213,28,5)"/><text x="61.1592%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::get_integer (42 samples, 0.05%)</title><rect x="61.4833%" y="117" width="0.0544%" height="15" fill="rgb(215,77,49)"/><text x="61.7333%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (1,984 samples, 2.57%)</title><rect x="61.5378%" y="117" width="2.5711%" height="15" fill="rgb(248,100,22)"/><text x="61.7878%" y="127.50">as..</text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (102 samples, 0.13%)</title><rect x="63.9767%" y="101" width="0.1322%" height="15" fill="rgb(208,67,9)"/><text x="64.2267%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (108 samples, 0.14%)</title><rect x="64.1089%" y="117" width="0.1400%" height="15" fill="rgb(219,133,21)"/><text x="64.3589%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (84 samples, 0.11%)</title><rect x="64.1400%" y="101" width="0.1089%" height="15" fill="rgb(246,46,29)"/><text x="64.3900%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (15 samples, 0.02%)</title><rect x="64.2489%" y="117" width="0.0194%" height="15" fill="rgb(246,185,52)"/><text x="64.4989%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (2,396 samples, 3.11%)</title><rect x="61.3187%" y="133" width="3.1051%" height="15" fill="rgb(252,136,11)"/><text x="61.5687%" y="143.50">asy..</text></g><g><title>async-redis`bytes::bytes::shared_drop (120 samples, 0.16%)</title><rect x="64.2683%" y="117" width="0.1555%" height="15" fill="rgb(219,138,53)"/><text x="64.5183%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::get_integer (34 samples, 0.04%)</title><rect x="64.4238%" y="133" width="0.0441%" height="15" fill="rgb(211,51,23)"/><text x="64.6738%" y="143.50"></text></g><g><title>async-redis`async_redis::protocol::get_line (63 samples, 0.08%)</title><rect x="64.4679%" y="133" width="0.0816%" height="15" fill="rgb(247,221,28)"/><text x="64.7179%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (27 samples, 0.03%)</title><rect x="64.5145%" y="117" width="0.0350%" height="15" fill="rgb(251,222,45)"/><text x="64.7645%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="64.8657%" y="37" width="0.0156%" height="15" fill="rgb(217,162,53)"/><text x="65.1157%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (211 samples, 0.27%)</title><rect x="64.6610%" y="69" width="0.2734%" height="15" fill="rgb(229,93,14)"/><text x="64.9110%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (200 samples, 0.26%)</title><rect x="64.6752%" y="53" width="0.2592%" height="15" fill="rgb(209,67,49)"/><text x="64.9252%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (41 samples, 0.05%)</title><rect x="64.8813%" y="37" width="0.0531%" height="15" fill="rgb(213,87,29)"/><text x="65.1313%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (237 samples, 0.31%)</title><rect x="64.6325%" y="85" width="0.3071%" height="15" fill="rgb(205,151,52)"/><text x="64.8825%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="64.9396%" y="85" width="0.0194%" height="15" fill="rgb(253,215,39)"/><text x="65.1896%" y="95.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (293 samples, 0.38%)</title><rect x="64.5806%" y="101" width="0.3797%" height="15" fill="rgb(221,220,41)"/><text x="64.8306%" y="111.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (317 samples, 0.41%)</title><rect x="64.5612%" y="117" width="0.4108%" height="15" fill="rgb(218,133,21)"/><text x="64.8112%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (356 samples, 0.46%)</title><rect x="64.5495%" y="133" width="0.4614%" height="15" fill="rgb(221,193,43)"/><text x="64.7995%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shallow_clone_vec (30 samples, 0.04%)</title><rect x="64.9720%" y="117" width="0.0389%" height="15" fill="rgb(240,128,52)"/><text x="65.2220%" y="127.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_clone (9 samples, 0.01%)</title><rect x="65.0109%" y="133" width="0.0117%" height="15" fill="rgb(253,114,12)"/><text x="65.2609%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (86 samples, 0.11%)</title><rect x="65.0225%" y="133" width="0.1115%" height="15" fill="rgb(215,223,47)"/><text x="65.2725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (36 samples, 0.05%)</title><rect x="65.1612%" y="117" width="0.0467%" height="15" fill="rgb(248,225,23)"/><text x="65.4112%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (36 samples, 0.05%)</title><rect x="65.1612%" y="101" width="0.0467%" height="15" fill="rgb(250,108,0)"/><text x="65.4112%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.07%)</title><rect x="65.1392%" y="133" width="0.0700%" height="15" fill="rgb(228,208,7)"/><text x="65.3892%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="65.2766%" y="101" width="0.0168%" height="15" fill="rgb(244,45,10)"/><text x="65.5266%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 0.09%)</title><rect x="65.2092%" y="133" width="0.0907%" height="15" fill="rgb(207,125,25)"/><text x="65.4592%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.06%)</title><rect x="65.2416%" y="117" width="0.0583%" height="15" fill="rgb(210,195,18)"/><text x="65.4916%" y="127.50"></text></g><g><title>async-redis`async_redis::protocol::decode (3,616 samples, 4.69%)</title><rect x="60.6306%" y="149" width="4.6861%" height="15" fill="rgb(249,80,12)"/><text x="60.8806%" y="159.50">async..</text></g><g><title>async-redis`async_redis::protocol::get_integer (15 samples, 0.02%)</title><rect x="65.3167%" y="149" width="0.0194%" height="15" fill="rgb(221,65,9)"/><text x="65.5667%" y="159.50"></text></g><g><title>async-redis`bytes::bytes::Bytes::split_to (12 samples, 0.02%)</title><rect x="65.3452%" y="149" width="0.0156%" height="15" fill="rgb(235,49,36)"/><text x="65.5952%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="65.4269%" y="117" width="0.0272%" height="15" fill="rgb(225,32,20)"/><text x="65.6769%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.02%)</title><rect x="65.4295%" y="101" width="0.0246%" height="15" fill="rgb(215,141,46)"/><text x="65.6795%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.06%)</title><rect x="65.4010%" y="133" width="0.0557%" height="15" fill="rgb(250,160,47)"/><text x="65.6510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.04%)</title><rect x="65.5798%" y="101" width="0.0389%" height="15" fill="rgb(216,222,40)"/><text x="65.8298%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (132 samples, 0.17%)</title><rect x="65.4567%" y="133" width="0.1711%" height="15" fill="rgb(234,217,39)"/><text x="65.7067%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (83 samples, 0.11%)</title><rect x="65.5202%" y="117" width="0.1076%" height="15" fill="rgb(207,178,40)"/><text x="65.7702%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.02%)</title><rect x="65.6278%" y="133" width="0.0246%" height="15" fill="rgb(221,136,13)"/><text x="65.8778%" y="143.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (226 samples, 0.29%)</title><rect x="65.3608%" y="149" width="0.2929%" height="15" fill="rgb(249,199,10)"/><text x="65.6108%" y="159.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (12 samples, 0.02%)</title><rect x="65.6602%" y="149" width="0.0156%" height="15" fill="rgb(249,222,13)"/><text x="65.9102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (18 samples, 0.02%)</title><rect x="65.9569%" y="85" width="0.0233%" height="15" fill="rgb(244,185,38)"/><text x="66.2069%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (133 samples, 0.17%)</title><rect x="65.8403%" y="117" width="0.1724%" height="15" fill="rgb(236,202,9)"/><text x="66.0903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (58 samples, 0.08%)</title><rect x="65.9375%" y="101" width="0.0752%" height="15" fill="rgb(250,229,37)"/><text x="66.1875%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (25 samples, 0.03%)</title><rect x="65.9802%" y="85" width="0.0324%" height="15" fill="rgb(206,174,23)"/><text x="66.2302%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.01%)</title><rect x="66.2485%" y="101" width="0.0143%" height="15" fill="rgb(211,33,43)"/><text x="66.4985%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (83 samples, 0.11%)</title><rect x="66.2641%" y="101" width="0.1076%" height="15" fill="rgb(245,58,50)"/><text x="66.5141%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="66.3613%" y="85" width="0.0104%" height="15" fill="rgb(244,68,36)"/><text x="66.6113%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (277 samples, 0.36%)</title><rect x="66.0139%" y="117" width="0.3590%" height="15" fill="rgb(232,229,15)"/><text x="66.2639%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (432 samples, 0.56%)</title><rect x="65.8144%" y="133" width="0.5598%" height="15" fill="rgb(254,30,23)"/><text x="66.0644%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (539 samples, 0.70%)</title><rect x="65.6770%" y="149" width="0.6985%" height="15" fill="rgb(235,160,14)"/><text x="65.9270%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (30 samples, 0.04%)</title><rect x="66.3807%" y="149" width="0.0389%" height="15" fill="rgb(212,155,44)"/><text x="66.6307%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="66.4585%" y="133" width="0.0194%" height="15" fill="rgb(226,2,50)"/><text x="66.7085%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.01%)</title><rect x="66.4636%" y="117" width="0.0143%" height="15" fill="rgb(234,177,6)"/><text x="66.7136%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.06%)</title><rect x="66.4196%" y="149" width="0.0596%" height="15" fill="rgb(217,24,9)"/><text x="66.6696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.04%)</title><rect x="66.5608%" y="117" width="0.0428%" height="15" fill="rgb(220,13,46)"/><text x="66.8108%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (98 samples, 0.13%)</title><rect x="66.4792%" y="149" width="0.1270%" height="15" fill="rgb(239,221,27)"/><text x="66.7292%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (57 samples, 0.07%)</title><rect x="66.5323%" y="133" width="0.0739%" height="15" fill="rgb(222,198,25)"/><text x="66.7823%" y="143.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,259 samples, 26.25%)</title><rect x="40.6835%" y="165" width="26.2545%" height="15" fill="rgb(211,99,13)"/><text x="40.9335%" y="175.50">async-redis`&lt;core::future::from_generator:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (248 samples, 0.32%)</title><rect x="66.6166%" y="149" width="0.3214%" height="15" fill="rgb(232,111,31)"/><text x="66.8666%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (17 samples, 0.02%)</title><rect x="67.0429%" y="133" width="0.0220%" height="15" fill="rgb(245,82,37)"/><text x="67.2929%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (32 samples, 0.04%)</title><rect x="67.0650%" y="133" width="0.0415%" height="15" fill="rgb(227,149,46)"/><text x="67.3150%" y="143.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (122 samples, 0.16%)</title><rect x="67.1064%" y="133" width="0.1581%" height="15" fill="rgb(218,36,50)"/><text x="67.3564%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (26 samples, 0.03%)</title><rect x="67.2645%" y="133" width="0.0337%" height="15" fill="rgb(226,80,48)"/><text x="67.5145%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (16 samples, 0.02%)</title><rect x="67.2982%" y="133" width="0.0207%" height="15" fill="rgb(238,224,15)"/><text x="67.5482%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (8 samples, 0.01%)</title><rect x="67.3190%" y="133" width="0.0104%" height="15" fill="rgb(241,136,10)"/><text x="67.5690%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (14 samples, 0.02%)</title><rect x="67.3747%" y="117" width="0.0181%" height="15" fill="rgb(208,32,45)"/><text x="67.6247%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="67.4265%" y="101" width="0.0311%" height="15" fill="rgb(207,135,9)"/><text x="67.6765%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (184 samples, 0.24%)</title><rect x="67.5457%" y="85" width="0.2385%" height="15" fill="rgb(206,86,44)"/><text x="67.7957%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (253 samples, 0.33%)</title><rect x="67.4576%" y="101" width="0.3279%" height="15" fill="rgb(245,177,15)"/><text x="67.7076%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (12 samples, 0.02%)</title><rect x="67.7855%" y="101" width="0.0156%" height="15" fill="rgb(206,64,50)"/><text x="68.0355%" y="111.50"></text></g><g><title>async-redis`tracing_core::span::Id::into_u64 (20 samples, 0.03%)</title><rect x="67.8010%" y="101" width="0.0259%" height="15" fill="rgb(234,36,40)"/><text x="68.0510%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (41 samples, 0.05%)</title><rect x="67.8270%" y="101" width="0.0531%" height="15" fill="rgb(213,64,8)"/><text x="68.0770%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (403 samples, 0.52%)</title><rect x="67.3928%" y="117" width="0.5223%" height="15" fill="rgb(210,75,36)"/><text x="67.6428%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.03%)</title><rect x="67.8801%" y="101" width="0.0350%" height="15" fill="rgb(229,88,21)"/><text x="68.1301%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="67.9151%" y="117" width="0.0259%" height="15" fill="rgb(252,204,47)"/><text x="68.1651%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.01%)</title><rect x="67.9410%" y="117" width="0.0143%" height="15" fill="rgb(208,77,27)"/><text x="68.1910%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (15 samples, 0.02%)</title><rect x="67.9553%" y="117" width="0.0194%" height="15" fill="rgb(221,76,26)"/><text x="68.2053%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (32 samples, 0.04%)</title><rect x="67.9747%" y="117" width="0.0415%" height="15" fill="rgb(225,139,18)"/><text x="68.2247%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (11 samples, 0.01%)</title><rect x="68.0019%" y="101" width="0.0143%" height="15" fill="rgb(230,137,11)"/><text x="68.2519%" y="111.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (17 samples, 0.02%)</title><rect x="68.0162%" y="117" width="0.0220%" height="15" fill="rgb(212,28,1)"/><text x="68.2662%" y="127.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (560 samples, 0.73%)</title><rect x="67.3293%" y="133" width="0.7257%" height="15" fill="rgb(248,164,17)"/><text x="67.5793%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="68.0382%" y="117" width="0.0168%" height="15" fill="rgb(222,171,42)"/><text x="68.2882%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.04%)</title><rect x="68.0551%" y="133" width="0.0415%" height="15" fill="rgb(243,84,45)"/><text x="68.3051%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (881 samples, 1.14%)</title><rect x="66.9665%" y="149" width="1.1417%" height="15" fill="rgb(252,49,23)"/><text x="67.2165%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.01%)</title><rect x="68.0965%" y="133" width="0.0117%" height="15" fill="rgb(215,19,7)"/><text x="68.3465%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (24 samples, 0.03%)</title><rect x="68.1121%" y="149" width="0.0311%" height="15" fill="rgb(238,81,41)"/><text x="68.3621%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (9 samples, 0.01%)</title><rect x="68.1432%" y="149" width="0.0117%" height="15" fill="rgb(210,199,37)"/><text x="68.3932%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (927 samples, 1.20%)</title><rect x="66.9561%" y="165" width="1.2013%" height="15" fill="rgb(244,192,49)"/><text x="67.2061%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (21 samples, 0.03%)</title><rect x="68.1574%" y="165" width="0.0272%" height="15" fill="rgb(226,211,11)"/><text x="68.4074%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (33 samples, 0.04%)</title><rect x="68.1859%" y="165" width="0.0428%" height="15" fill="rgb(236,162,54)"/><text x="68.4359%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (36 samples, 0.05%)</title><rect x="68.2507%" y="149" width="0.0467%" height="15" fill="rgb(220,229,9)"/><text x="68.5007%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="68.2974%" y="149" width="0.0207%" height="15" fill="rgb(250,87,22)"/><text x="68.5474%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (51 samples, 0.07%)</title><rect x="68.3181%" y="149" width="0.0661%" height="15" fill="rgb(239,43,17)"/><text x="68.5681%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (25 samples, 0.03%)</title><rect x="68.3518%" y="133" width="0.0324%" height="15" fill="rgb(231,177,25)"/><text x="68.6018%" y="143.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (19 samples, 0.02%)</title><rect x="68.3907%" y="149" width="0.0246%" height="15" fill="rgb(219,179,1)"/><text x="68.6407%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (10 samples, 0.01%)</title><rect x="68.4594%" y="133" width="0.0130%" height="15" fill="rgb(238,219,53)"/><text x="68.7094%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (15 samples, 0.02%)</title><rect x="68.4931%" y="85" width="0.0194%" height="15" fill="rgb(232,167,36)"/><text x="68.7431%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (20 samples, 0.03%)</title><rect x="68.4905%" y="101" width="0.0259%" height="15" fill="rgb(244,19,51)"/><text x="68.7405%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (9 samples, 0.01%)</title><rect x="68.5320%" y="85" width="0.0117%" height="15" fill="rgb(224,6,22)"/><text x="68.7820%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.02%)</title><rect x="68.5475%" y="69" width="0.0220%" height="15" fill="rgb(224,145,5)"/><text x="68.7975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.02%)</title><rect x="68.5475%" y="53" width="0.0220%" height="15" fill="rgb(234,130,49)"/><text x="68.7975%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.03%)</title><rect x="68.5436%" y="85" width="0.0272%" height="15" fill="rgb(254,6,2)"/><text x="68.7936%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.02%)</title><rect x="68.6136%" y="53" width="0.0207%" height="15" fill="rgb(208,96,46)"/><text x="68.8636%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (54 samples, 0.07%)</title><rect x="68.5708%" y="85" width="0.0700%" height="15" fill="rgb(239,3,39)"/><text x="68.8208%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (35 samples, 0.05%)</title><rect x="68.5955%" y="69" width="0.0454%" height="15" fill="rgb(233,210,1)"/><text x="68.8455%" y="79.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (93 samples, 0.12%)</title><rect x="68.5242%" y="101" width="0.1205%" height="15" fill="rgb(244,137,37)"/><text x="68.7742%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (14 samples, 0.02%)</title><rect x="68.6473%" y="101" width="0.0181%" height="15" fill="rgb(240,136,2)"/><text x="68.8973%" y="111.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::mark_clear (151 samples, 0.20%)</title><rect x="68.4723%" y="133" width="0.1957%" height="15" fill="rgb(239,18,37)"/><text x="68.7223%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (139 samples, 0.18%)</title><rect x="68.4879%" y="117" width="0.1801%" height="15" fill="rgb(218,185,22)"/><text x="68.7379%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (89 samples, 0.12%)</title><rect x="68.7704%" y="85" width="0.1153%" height="15" fill="rgb(225,218,4)"/><text x="69.0204%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (58 samples, 0.08%)</title><rect x="68.8106%" y="69" width="0.0752%" height="15" fill="rgb(230,182,32)"/><text x="69.0606%" y="79.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (9 samples, 0.01%)</title><rect x="68.8870%" y="85" width="0.0117%" height="15" fill="rgb(242,56,43)"/><text x="69.1370%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (111 samples, 0.14%)</title><rect x="68.7562%" y="101" width="0.1438%" height="15" fill="rgb(233,99,24)"/><text x="69.0062%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (28 samples, 0.04%)</title><rect x="68.9052%" y="101" width="0.0363%" height="15" fill="rgb(234,209,42)"/><text x="69.1552%" y="111.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (21 samples, 0.03%)</title><rect x="69.0464%" y="85" width="0.0272%" height="15" fill="rgb(227,7,12)"/><text x="69.2964%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (60 samples, 0.08%)</title><rect x="69.0931%" y="69" width="0.0778%" height="15" fill="rgb(245,203,43)"/><text x="69.3431%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (57 samples, 0.07%)</title><rect x="69.0970%" y="53" width="0.0739%" height="15" fill="rgb(238,205,33)"/><text x="69.3470%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.09%)</title><rect x="69.0788%" y="85" width="0.0933%" height="15" fill="rgb(231,56,7)"/><text x="69.3288%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (55 samples, 0.07%)</title><rect x="69.3665%" y="53" width="0.0713%" height="15" fill="rgb(244,186,29)"/><text x="69.6165%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (133 samples, 0.17%)</title><rect x="69.2979%" y="69" width="0.1724%" height="15" fill="rgb(234,111,31)"/><text x="69.5479%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (25 samples, 0.03%)</title><rect x="69.4378%" y="53" width="0.0324%" height="15" fill="rgb(241,149,10)"/><text x="69.6878%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (231 samples, 0.30%)</title><rect x="69.1722%" y="85" width="0.2994%" height="15" fill="rgb(249,206,44)"/><text x="69.4222%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::clear (418 samples, 0.54%)</title><rect x="68.9415%" y="101" width="0.5417%" height="15" fill="rgb(251,153,30)"/><text x="69.1915%" y="111.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (13 samples, 0.02%)</title><rect x="69.5830%" y="85" width="0.0168%" height="15" fill="rgb(239,152,38)"/><text x="69.8330%" y="95.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (95 samples, 0.12%)</title><rect x="69.4871%" y="101" width="0.1231%" height="15" fill="rgb(249,139,47)"/><text x="69.7371%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="69.5998%" y="85" width="0.0104%" height="15" fill="rgb(244,64,35)"/><text x="69.8498%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (695 samples, 0.90%)</title><rect x="68.7251%" y="117" width="0.9007%" height="15" fill="rgb(216,46,15)"/><text x="68.9751%" y="127.50"></text></g><g><title>async-redis`sharded_slab::page::slot::Slot&lt;T,C&gt;::clear_storage (742 samples, 0.96%)</title><rect x="68.6680%" y="133" width="0.9616%" height="15" fill="rgb(250,74,19)"/><text x="68.9180%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (8 samples, 0.01%)</title><rect x="69.6296%" y="133" width="0.0104%" height="15" fill="rgb(249,42,33)"/><text x="69.8796%" y="143.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (964 samples, 1.25%)</title><rect x="68.4153%" y="149" width="1.2493%" height="15" fill="rgb(242,149,17)"/><text x="68.6653%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.02%)</title><rect x="69.6400%" y="133" width="0.0246%" height="15" fill="rgb(244,29,21)"/><text x="69.8900%" y="143.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (12 samples, 0.02%)</title><rect x="69.6659%" y="149" width="0.0156%" height="15" fill="rgb(220,130,37)"/><text x="69.9159%" y="159.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (13 samples, 0.02%)</title><rect x="69.6918%" y="149" width="0.0168%" height="15" fill="rgb(211,67,2)"/><text x="69.9418%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (1,153 samples, 1.49%)</title><rect x="68.2287%" y="165" width="1.4942%" height="15" fill="rgb(235,68,52)"/><text x="68.4787%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.01%)</title><rect x="69.7087%" y="149" width="0.0143%" height="15" fill="rgb(246,142,3)"/><text x="69.9587%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (17 samples, 0.02%)</title><rect x="69.7281%" y="165" width="0.0220%" height="15" fill="rgb(241,25,7)"/><text x="69.9781%" y="175.50"></text></g><g><title>async-redis`async_redis::protocol::decode (32 samples, 0.04%)</title><rect x="69.7851%" y="165" width="0.0415%" height="15" fill="rgb(242,119,39)"/><text x="70.0351%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::promotable_even_drop (24 samples, 0.03%)</title><rect x="69.8266%" y="165" width="0.0311%" height="15" fill="rgb(241,98,45)"/><text x="70.0766%" y="175.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (48 samples, 0.06%)</title><rect x="69.8577%" y="165" width="0.0622%" height="15" fill="rgb(254,28,30)"/><text x="70.1077%" y="175.50"></text></g><g><title>async-redis`bytes::bytes_mut::BytesMut::set_start (15 samples, 0.02%)</title><rect x="69.9199%" y="165" width="0.0194%" height="15" fill="rgb(241,142,54)"/><text x="70.1699%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::clear (25 samples, 0.03%)</title><rect x="69.9393%" y="165" width="0.0324%" height="15" fill="rgb(222,85,15)"/><text x="70.1893%" y="175.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (186 samples, 0.24%)</title><rect x="70.0897%" y="117" width="0.2410%" height="15" fill="rgb(210,85,47)"/><text x="70.3397%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (254 samples, 0.33%)</title><rect x="70.0029%" y="133" width="0.3292%" height="15" fill="rgb(224,206,25)"/><text x="70.2529%" y="143.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.01%)</title><rect x="70.5005%" y="101" width="0.0117%" height="15" fill="rgb(243,201,19)"/><text x="70.7505%" y="111.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (110 samples, 0.14%)</title><rect x="70.3761%" y="117" width="0.1426%" height="15" fill="rgb(236,59,4)"/><text x="70.6261%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (146 samples, 0.19%)</title><rect x="70.3320%" y="133" width="0.1892%" height="15" fill="rgb(254,179,45)"/><text x="70.5820%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (412 samples, 0.53%)</title><rect x="69.9925%" y="149" width="0.5339%" height="15" fill="rgb(226,14,10)"/><text x="70.2425%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (20 samples, 0.03%)</title><rect x="70.5264%" y="149" width="0.0259%" height="15" fill="rgb(244,27,41)"/><text x="70.7764%" y="159.50"></text></g><g><title>async-redis`tracing::span::Span::enter (452 samples, 0.59%)</title><rect x="69.9756%" y="165" width="0.5858%" height="15" fill="rgb(235,35,32)"/><text x="70.2256%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (28 samples, 0.04%)</title><rect x="70.5627%" y="149" width="0.0363%" height="15" fill="rgb(218,68,31)"/><text x="70.8127%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (11 samples, 0.01%)</title><rect x="70.5990%" y="149" width="0.0143%" height="15" fill="rgb(207,120,37)"/><text x="70.8490%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (11 samples, 0.01%)</title><rect x="70.7027%" y="133" width="0.0143%" height="15" fill="rgb(227,98,0)"/><text x="70.9527%" y="143.50"></text></g><g><title>async-redis`&lt;tracing_core::span::Attributes as tracing_subscriber::field::RecordFields&gt;::record (9 samples, 0.01%)</title><rect x="70.7260%" y="117" width="0.0117%" height="15" fill="rgb(207,7,3)"/><text x="70.9760%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (29 samples, 0.04%)</title><rect x="70.9580%" y="101" width="0.0376%" height="15" fill="rgb(206,98,19)"/><text x="71.2080%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (21 samples, 0.03%)</title><rect x="70.9683%" y="85" width="0.0272%" height="15" fill="rgb(217,5,26)"/><text x="71.2183%" y="95.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 0.02%)</title><rect x="71.0007%" y="101" width="0.0156%" height="15" fill="rgb(235,190,38)"/><text x="71.2507%" y="111.50"></text></g><g><title>async-redis`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 0.05%)</title><rect x="71.0409%" y="85" width="0.0505%" height="15" fill="rgb(247,86,24)"/><text x="71.2909%" y="95.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (25 samples, 0.03%)</title><rect x="71.0590%" y="69" width="0.0324%" height="15" fill="rgb(205,101,16)"/><text x="71.3090%" y="79.50"></text></g><g><title>async-redis`hashbrown::raw::RawTable&lt;T&gt;::insert (15 samples, 0.02%)</title><rect x="71.0914%" y="85" width="0.0194%" height="15" fill="rgb(246,168,33)"/><text x="71.3414%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.03%)</title><rect x="71.2845%" y="37" width="0.0298%" height="15" fill="rgb(231,114,1)"/><text x="71.5345%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (146 samples, 0.19%)</title><rect x="71.1718%" y="53" width="0.1892%" height="15" fill="rgb(207,184,53)"/><text x="71.4218%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.05%)</title><rect x="71.3143%" y="37" width="0.0467%" height="15" fill="rgb(224,95,51)"/><text x="71.5643%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (157 samples, 0.20%)</title><rect x="71.1588%" y="69" width="0.2035%" height="15" fill="rgb(212,188,45)"/><text x="71.4088%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (195 samples, 0.25%)</title><rect x="71.1109%" y="85" width="0.2527%" height="15" fill="rgb(223,154,38)"/><text x="71.3609%" y="95.50"></text></g><g><title>async-redis`tracing_subscriber::registry::extensions::ExtensionsMut::insert (262 samples, 0.34%)</title><rect x="71.0279%" y="101" width="0.3395%" height="15" fill="rgb(251,22,52)"/><text x="71.2779%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="71.3675%" y="101" width="0.0156%" height="15" fill="rgb(229,209,22)"/><text x="71.6175%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.02%)</title><rect x="71.3830%" y="101" width="0.0168%" height="15" fill="rgb(234,138,34)"/><text x="71.6330%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::new_span (630 samples, 0.82%)</title><rect x="70.7376%" y="117" width="0.8164%" height="15" fill="rgb(212,95,11)"/><text x="70.9876%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_wrlock (119 samples, 0.15%)</title><rect x="71.3999%" y="101" width="0.1542%" height="15" fill="rgb(240,179,47)"/><text x="71.6499%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_subscriber::field::VisitOutput&lt;core::result::Result&lt;(),core::fmt::Error&gt;&gt;&gt;::finish (13 samples, 0.02%)</title><rect x="71.5541%" y="117" width="0.0168%" height="15" fill="rgb(240,163,11)"/><text x="71.8041%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (31 samples, 0.04%)</title><rect x="71.5865%" y="117" width="0.0402%" height="15" fill="rgb(236,37,12)"/><text x="71.8365%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (36 samples, 0.05%)</title><rect x="71.7809%" y="101" width="0.0467%" height="15" fill="rgb(232,164,16)"/><text x="72.0309%" y="111.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (13 samples, 0.02%)</title><rect x="71.8107%" y="85" width="0.0168%" height="15" fill="rgb(244,205,15)"/><text x="72.0607%" y="95.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (156 samples, 0.20%)</title><rect x="71.9260%" y="85" width="0.2022%" height="15" fill="rgb(223,117,47)"/><text x="72.1760%" y="95.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (73 samples, 0.09%)</title><rect x="72.1282%" y="85" width="0.0946%" height="15" fill="rgb(244,107,35)"/><text x="72.3782%" y="95.50"></text></g><g><title>async-redis`thread_local::thread_id::get (11 samples, 0.01%)</title><rect x="72.2228%" y="85" width="0.0143%" height="15" fill="rgb(205,140,8)"/><text x="72.4728%" y="95.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (330 samples, 0.43%)</title><rect x="71.8275%" y="101" width="0.4277%" height="15" fill="rgb(228,84,46)"/><text x="72.0775%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="72.2396%" y="85" width="0.0156%" height="15" fill="rgb(254,188,9)"/><text x="72.4896%" y="95.50"></text></g><g><title>async-redis`sharded_slab::page::Shared&lt;T,C&gt;::init_with (144 samples, 0.19%)</title><rect x="72.2552%" y="101" width="0.1866%" height="15" fill="rgb(206,112,54)"/><text x="72.5052%" y="111.50"></text></g><g><title>async-redis`sharded_slab::tid::REGISTRATION::__getit (9 samples, 0.01%)</title><rect x="72.4457%" y="101" width="0.0117%" height="15" fill="rgb(216,84,49)"/><text x="72.6957%" y="111.50"></text></g><g><title>async-redis`thread_local::thread_id::get (24 samples, 0.03%)</title><rect x="72.4625%" y="101" width="0.0311%" height="15" fill="rgb(214,194,35)"/><text x="72.7125%" y="111.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (682 samples, 0.88%)</title><rect x="71.6267%" y="117" width="0.8838%" height="15" fill="rgb(249,28,3)"/><text x="71.8767%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::is_contextual (13 samples, 0.02%)</title><rect x="72.5183%" y="117" width="0.0168%" height="15" fill="rgb(222,56,52)"/><text x="72.7683%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::is_root (26 samples, 0.03%)</title><rect x="72.5351%" y="117" width="0.0337%" height="15" fill="rgb(245,217,50)"/><text x="72.7851%" y="127.50"></text></g><g><title>async-redis`tracing_core::span::Attributes::record (10 samples, 0.01%)</title><rect x="72.5701%" y="117" width="0.0130%" height="15" fill="rgb(213,201,24)"/><text x="72.8201%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1,500 samples, 1.94%)</title><rect x="70.7169%" y="133" width="1.9439%" height="15" fill="rgb(248,116,28)"/><text x="70.9669%" y="143.50">a..</text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_unlock (50 samples, 0.06%)</title><rect x="72.5960%" y="117" width="0.0648%" height="15" fill="rgb(219,72,43)"/><text x="72.8460%" y="127.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (18 samples, 0.02%)</title><rect x="72.6621%" y="133" width="0.0233%" height="15" fill="rgb(209,138,14)"/><text x="72.9121%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::CURRENT_STATE::__getit (16 samples, 0.02%)</title><rect x="72.6854%" y="133" width="0.0207%" height="15" fill="rgb(222,18,33)"/><text x="72.9354%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (29 samples, 0.04%)</title><rect x="72.7062%" y="133" width="0.0376%" height="15" fill="rgb(213,199,7)"/><text x="72.9562%" y="143.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (1,658 samples, 2.15%)</title><rect x="70.6197%" y="149" width="2.1487%" height="15" fill="rgb(250,110,10)"/><text x="70.8697%" y="159.50">a..</text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.02%)</title><rect x="72.7438%" y="133" width="0.0246%" height="15" fill="rgb(248,123,6)"/><text x="72.9938%" y="143.50"></text></g><g><title>async-redis`tracing::span::Span::new (1,714 samples, 2.22%)</title><rect x="70.5614%" y="165" width="2.2212%" height="15" fill="rgb(206,91,31)"/><text x="70.8114%" y="175.50">a..</text></g><g><title>async-redis`tracing_core::span::Attributes::new (11 samples, 0.01%)</title><rect x="72.7684%" y="149" width="0.0143%" height="15" fill="rgb(211,154,13)"/><text x="73.0184%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (10 samples, 0.01%)</title><rect x="72.7826%" y="165" width="0.0130%" height="15" fill="rgb(225,148,7)"/><text x="73.0326%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::fmt::format::FmtSpanConfig::trace_active (9 samples, 0.01%)</title><rect x="72.7956%" y="165" width="0.0117%" height="15" fill="rgb(220,160,43)"/><text x="73.0456%" y="175.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::CloseGuard::is_closing (16 samples, 0.02%)</title><rect x="72.8112%" y="165" width="0.0207%" height="15" fill="rgb(213,52,39)"/><text x="73.0612%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.03%)</title><rect x="72.8332%" y="165" width="0.0337%" height="15" fill="rgb(243,137,7)"/><text x="73.0832%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 0.05%)</title><rect x="72.8708%" y="165" width="0.0492%" height="15" fill="rgb(230,79,13)"/><text x="73.1208%" y="175.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25,110 samples, 32.54%)</title><rect x="40.4256%" y="181" width="32.5411%" height="15" fill="rgb(247,105,23)"/><text x="40.6756%" y="191.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (31 samples, 0.04%)</title><rect x="72.9265%" y="165" width="0.0402%" height="15" fill="rgb(223,179,41)"/><text x="73.1765%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.04%)</title><rect x="72.9731%" y="181" width="0.0415%" height="15" fill="rgb(218,9,34)"/><text x="73.2231%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (37 samples, 0.05%)</title><rect x="73.0172%" y="181" width="0.0479%" height="15" fill="rgb(222,106,8)"/><text x="73.2672%" y="191.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (46 samples, 0.06%)</title><rect x="73.0652%" y="181" width="0.0596%" height="15" fill="rgb(211,220,0)"/><text x="73.3152%" y="191.50"></text></g><g><title>async-redis`tracing::__macro_support::MacroCallsite::is_enabled (15 samples, 0.02%)</title><rect x="73.1248%" y="181" width="0.0194%" height="15" fill="rgb(229,52,16)"/><text x="73.3748%" y="191.50"></text></g><g><title>async-redis`tracing_core::metadata::Metadata::fields (18 samples, 0.02%)</title><rect x="73.1507%" y="181" width="0.0233%" height="15" fill="rgb(212,155,18)"/><text x="73.4007%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (25,428 samples, 32.95%)</title><rect x="40.2493%" y="197" width="32.9532%" height="15" fill="rgb(242,21,14)"/><text x="40.4993%" y="207.50">async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as cor..</text></g><g><title>libdyld.dylib`tlv_get_addr (22 samples, 0.03%)</title><rect x="73.1740%" y="181" width="0.0285%" height="15" fill="rgb(222,19,48)"/><text x="73.4240%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (10 samples, 0.01%)</title><rect x="73.2077%" y="197" width="0.0130%" height="15" fill="rgb(232,45,27)"/><text x="73.4577%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::from_raw (10 samples, 0.01%)</title><rect x="73.2207%" y="197" width="0.0130%" height="15" fill="rgb(249,103,42)"/><text x="73.4707%" y="207.50"></text></g><g><title>async-redis`alloc::string::String::push (13 samples, 0.02%)</title><rect x="73.3464%" y="165" width="0.0168%" height="15" fill="rgb(246,81,33)"/><text x="73.5964%" y="175.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (264 samples, 0.34%)</title><rect x="73.3632%" y="165" width="0.3421%" height="15" fill="rgb(252,33,42)"/><text x="73.6132%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (116 samples, 0.15%)</title><rect x="73.7054%" y="165" width="0.1503%" height="15" fill="rgb(209,212,41)"/><text x="73.9554%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (104 samples, 0.13%)</title><rect x="73.7209%" y="149" width="0.1348%" height="15" fill="rgb(207,154,6)"/><text x="73.9709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (98 samples, 0.13%)</title><rect x="73.7287%" y="133" width="0.1270%" height="15" fill="rgb(223,64,47)"/><text x="73.9787%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.04%)</title><rect x="73.8194%" y="117" width="0.0363%" height="15" fill="rgb(211,161,38)"/><text x="74.0694%" y="127.50"></text></g><g><title>async-redis`alloc::str::_&lt;impl str&gt;::to_lowercase (422 samples, 0.55%)</title><rect x="73.3153%" y="181" width="0.5469%" height="15" fill="rgb(219,138,40)"/><text x="73.5653%" y="191.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (22 samples, 0.03%)</title><rect x="73.9114%" y="165" width="0.0285%" height="15" fill="rgb(241,228,46)"/><text x="74.1614%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (157 samples, 0.20%)</title><rect x="73.9399%" y="165" width="0.2035%" height="15" fill="rgb(223,209,38)"/><text x="74.1899%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (139 samples, 0.18%)</title><rect x="73.9632%" y="149" width="0.1801%" height="15" fill="rgb(236,164,45)"/><text x="74.2132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (133 samples, 0.17%)</title><rect x="73.9710%" y="133" width="0.1724%" height="15" fill="rgb(231,15,5)"/><text x="74.2210%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.06%)</title><rect x="74.0838%" y="117" width="0.0596%" height="15" fill="rgb(252,35,15)"/><text x="74.3338%" y="127.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (226 samples, 0.29%)</title><rect x="73.8673%" y="181" width="0.2929%" height="15" fill="rgb(248,181,18)"/><text x="74.1173%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="74.1460%" y="165" width="0.0143%" height="15" fill="rgb(233,39,42)"/><text x="74.3960%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::get::Get::new (15 samples, 0.02%)</title><rect x="74.1602%" y="181" width="0.0194%" height="15" fill="rgb(238,110,33)"/><text x="74.4102%" y="191.50"></text></g><g><title>async-redis`async_redis::cmd::set::Set::new (37 samples, 0.05%)</title><rect x="74.1797%" y="181" width="0.0479%" height="15" fill="rgb(233,195,10)"/><text x="74.4297%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (9 samples, 0.01%)</title><rect x="74.2160%" y="165" width="0.0117%" height="15" fill="rgb(254,105,3)"/><text x="74.4660%" y="175.50"></text></g><g><title>async-redis`core::str::converts::from_utf8 (16 samples, 0.02%)</title><rect x="74.2367%" y="181" width="0.0207%" height="15" fill="rgb(221,225,9)"/><text x="74.4867%" y="191.50"></text></g><g><title>async-redis`core::unicode::unicode_data::conversions::to_lower (15 samples, 0.02%)</title><rect x="74.2574%" y="181" width="0.0194%" height="15" fill="rgb(224,227,45)"/><text x="74.5074%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 0.06%)</title><rect x="74.3054%" y="165" width="0.0557%" height="15" fill="rgb(229,198,43)"/><text x="74.5554%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (41 samples, 0.05%)</title><rect x="74.3080%" y="149" width="0.0531%" height="15" fill="rgb(206,209,35)"/><text x="74.5580%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 0.08%)</title><rect x="74.2833%" y="181" width="0.0791%" height="15" fill="rgb(245,195,53)"/><text x="74.5333%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (50 samples, 0.06%)</title><rect x="74.5503%" y="149" width="0.0648%" height="15" fill="rgb(240,92,26)"/><text x="74.8003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (197 samples, 0.26%)</title><rect x="74.3624%" y="181" width="0.2553%" height="15" fill="rgb(207,40,23)"/><text x="74.6124%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (114 samples, 0.15%)</title><rect x="74.4700%" y="165" width="0.1477%" height="15" fill="rgb(223,111,35)"/><text x="74.7200%" y="175.50"></text></g><g><title>async-redis`async_redis::cmd::Command::new (1,064 samples, 1.38%)</title><rect x="73.2518%" y="197" width="1.3789%" height="15" fill="rgb(229,147,28)"/><text x="73.5018%" y="207.50"></text></g><g><title>async-redis`async_redis::cmd::Parser::next_string (14 samples, 0.02%)</title><rect x="74.6307%" y="197" width="0.0181%" height="15" fill="rgb(211,29,28)"/><text x="74.8807%" y="207.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (13 samples, 0.02%)</title><rect x="74.7395%" y="181" width="0.0168%" height="15" fill="rgb(228,72,33)"/><text x="74.9895%" y="191.50"></text></g><g><title>async-redis`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (184 samples, 0.24%)</title><rect x="74.8186%" y="165" width="0.2385%" height="15" fill="rgb(205,214,31)"/><text x="75.0686%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (172 samples, 0.22%)</title><rect x="74.8341%" y="149" width="0.2229%" height="15" fill="rgb(224,111,15)"/><text x="75.0841%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.02%)</title><rect x="75.1244%" y="117" width="0.0207%" height="15" fill="rgb(253,21,26)"/><text x="75.3744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.07%)</title><rect x="75.0829%" y="133" width="0.0674%" height="15" fill="rgb(245,139,43)"/><text x="75.3329%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (18 samples, 0.02%)</title><rect x="75.1503%" y="133" width="0.0233%" height="15" fill="rgb(252,170,7)"/><text x="75.4003%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (15 samples, 0.02%)</title><rect x="75.1737%" y="133" width="0.0194%" height="15" fill="rgb(231,118,14)"/><text x="75.4237%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (104 samples, 0.13%)</title><rect x="75.0596%" y="165" width="0.1348%" height="15" fill="rgb(238,83,0)"/><text x="75.3096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (92 samples, 0.12%)</title><rect x="75.0752%" y="149" width="0.1192%" height="15" fill="rgb(221,39,39)"/><text x="75.3252%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="75.1996%" y="165" width="0.0181%" height="15" fill="rgb(222,119,46)"/><text x="75.4496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="75.2074%" y="149" width="0.0104%" height="15" fill="rgb(222,165,49)"/><text x="75.4574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="75.2592%" y="133" width="0.0104%" height="15" fill="rgb(219,113,52)"/><text x="75.5092%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (42 samples, 0.05%)</title><rect x="75.2177%" y="165" width="0.0544%" height="15" fill="rgb(214,7,15)"/><text x="75.4677%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.04%)</title><rect x="75.2320%" y="149" width="0.0402%" height="15" fill="rgb(235,32,4)"/><text x="75.4820%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (18 samples, 0.02%)</title><rect x="75.2721%" y="165" width="0.0233%" height="15" fill="rgb(238,90,54)"/><text x="75.5221%" y="175.50"></text></g><g><title>async-redis`async_redis::protocol::encode_iter (421 samples, 0.55%)</title><rect x="74.7603%" y="181" width="0.5456%" height="15" fill="rgb(213,208,19)"/><text x="75.0103%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="75.2955%" y="165" width="0.0104%" height="15" fill="rgb(233,156,4)"/><text x="75.5455%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 0.09%)</title><rect x="75.3097%" y="181" width="0.0933%" height="15" fill="rgb(207,194,5)"/><text x="75.5597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (63 samples, 0.08%)</title><rect x="75.3214%" y="165" width="0.0816%" height="15" fill="rgb(206,111,30)"/><text x="75.5714%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (61 samples, 0.08%)</title><rect x="75.3240%" y="149" width="0.0791%" height="15" fill="rgb(243,70,54)"/><text x="75.5740%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`calloc (9 samples, 0.01%)</title><rect x="75.4030%" y="181" width="0.0117%" height="15" fill="rgb(242,28,8)"/><text x="75.6530%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::encode (591 samples, 0.77%)</title><rect x="74.6566%" y="197" width="0.7659%" height="15" fill="rgb(219,106,18)"/><text x="74.9066%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.04%)</title><rect x="75.4860%" y="181" width="0.0389%" height="15" fill="rgb(244,222,10)"/><text x="75.7360%" y="191.50"></text></g><g><title>async-redis`async_redis::server::Dispatcher::determine_database (92 samples, 0.12%)</title><rect x="75.4303%" y="197" width="0.1192%" height="15" fill="rgb(236,179,52)"/><text x="75.6803%" y="207.50"></text></g><g><title>async-redis`std::collections::hash::map::DefaultHasher::new (19 samples, 0.02%)</title><rect x="75.5249%" y="181" width="0.0246%" height="15" fill="rgb(213,23,39)"/><text x="75.7749%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (11 samples, 0.01%)</title><rect x="75.5521%" y="197" width="0.0143%" height="15" fill="rgb(238,48,10)"/><text x="75.8021%" y="207.50"></text></g><g><title>async-redis`&lt;T as core::any::Any&gt;::type_id (12 samples, 0.02%)</title><rect x="75.7283%" y="181" width="0.0156%" height="15" fill="rgb(251,196,23)"/><text x="75.9783%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (15 samples, 0.02%)</title><rect x="75.8281%" y="165" width="0.0194%" height="15" fill="rgb(250,152,24)"/><text x="76.0781%" y="175.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (18 samples, 0.02%)</title><rect x="75.8475%" y="165" width="0.0233%" height="15" fill="rgb(209,150,17)"/><text x="76.0975%" y="175.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (47 samples, 0.06%)</title><rect x="75.8709%" y="165" width="0.0609%" height="15" fill="rgb(234,202,34)"/><text x="76.1209%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (15 samples, 0.02%)</title><rect x="75.9123%" y="149" width="0.0194%" height="15" fill="rgb(253,148,53)"/><text x="76.1623%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="75.9162%" y="133" width="0.0156%" height="15" fill="rgb(218,129,16)"/><text x="76.1662%" y="143.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (16 samples, 0.02%)</title><rect x="75.9318%" y="165" width="0.0207%" height="15" fill="rgb(216,85,19)"/><text x="76.1818%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (8 samples, 0.01%)</title><rect x="75.9525%" y="165" width="0.0104%" height="15" fill="rgb(235,228,7)"/><text x="76.2025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.06%)</title><rect x="75.9629%" y="165" width="0.0622%" height="15" fill="rgb(245,175,0)"/><text x="76.2129%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.05%)</title><rect x="75.9771%" y="149" width="0.0479%" height="15" fill="rgb(208,168,36)"/><text x="76.2271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.05%)</title><rect x="75.9797%" y="133" width="0.0454%" height="15" fill="rgb(246,171,24)"/><text x="76.2297%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.03%)</title><rect x="76.1197%" y="133" width="0.0350%" height="15" fill="rgb(215,142,24)"/><text x="76.3697%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (103 samples, 0.13%)</title><rect x="76.0251%" y="165" width="0.1335%" height="15" fill="rgb(250,187,7)"/><text x="76.2751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (54 samples, 0.07%)</title><rect x="76.0886%" y="149" width="0.0700%" height="15" fill="rgb(228,66,33)"/><text x="76.3386%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="76.1586%" y="165" width="0.0104%" height="15" fill="rgb(234,215,21)"/><text x="76.4086%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (326 samples, 0.42%)</title><rect x="75.7478%" y="181" width="0.4225%" height="15" fill="rgb(222,191,20)"/><text x="75.9978%" y="191.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (9 samples, 0.01%)</title><rect x="76.1871%" y="181" width="0.0117%" height="15" fill="rgb(245,79,54)"/><text x="76.4371%" y="191.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (22 samples, 0.03%)</title><rect x="76.2013%" y="181" width="0.0285%" height="15" fill="rgb(240,10,37)"/><text x="76.4513%" y="191.50"></text></g><g><title>async-redis`flume::async::_::_&lt;impl core::ops::drop::Drop for flume::async::SendFut&lt;T&gt;&gt;::drop (26 samples, 0.03%)</title><rect x="76.2376%" y="181" width="0.0337%" height="15" fill="rgb(214,192,32)"/><text x="76.4876%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.01%)</title><rect x="76.2713%" y="181" width="0.0117%" height="15" fill="rgb(209,36,54)"/><text x="76.5213%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="76.2830%" y="181" width="0.0156%" height="15" fill="rgb(220,10,11)"/><text x="76.5330%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (25 samples, 0.03%)</title><rect x="76.2985%" y="181" width="0.0324%" height="15" fill="rgb(221,106,17)"/><text x="76.5485%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (24 samples, 0.03%)</title><rect x="76.2998%" y="165" width="0.0311%" height="15" fill="rgb(251,142,44)"/><text x="76.5498%" y="175.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (23 samples, 0.03%)</title><rect x="76.3309%" y="181" width="0.0298%" height="15" fill="rgb(238,13,15)"/><text x="76.5809%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (617 samples, 0.80%)</title><rect x="75.5689%" y="197" width="0.7996%" height="15" fill="rgb(208,107,27)"/><text x="75.8189%" y="207.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (40 samples, 0.05%)</title><rect x="76.3698%" y="197" width="0.0518%" height="15" fill="rgb(205,136,37)"/><text x="76.6198%" y="207.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (20 samples, 0.03%)</title><rect x="76.4216%" y="197" width="0.0259%" height="15" fill="rgb(250,205,27)"/><text x="76.6716%" y="207.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (11 samples, 0.01%)</title><rect x="76.6329%" y="165" width="0.0143%" height="15" fill="rgb(210,80,43)"/><text x="76.8829%" y="175.50"></text></g><g><title>async-redis`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (73 samples, 0.09%)</title><rect x="76.7651%" y="133" width="0.0946%" height="15" fill="rgb(247,160,36)"/><text x="77.0151%" y="143.50"></text></g><g><title>async-redis`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (11,214 samples, 14.53%)</title><rect x="76.7327%" y="149" width="14.5327%" height="15" fill="rgb(234,13,49)"/><text x="76.9827%" y="159.50">async-redis`&lt;&amp;mio::net..</text></g><g><title>libsystem_kernel.dylib`__sendto (11,108 samples, 14.40%)</title><rect x="76.8700%" y="133" width="14.3953%" height="15" fill="rgb(234,122,0)"/><text x="77.1200%" y="143.50">libsystem_kernel.dylib..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (26 samples, 0.03%)</title><rect x="91.4494%" y="133" width="0.0337%" height="15" fill="rgb(207,146,38)"/><text x="91.6994%" y="143.50"></text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_ready (170 samples, 0.22%)</title><rect x="91.2731%" y="149" width="0.2203%" height="15" fill="rgb(207,177,25)"/><text x="91.5231%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="91.4831%" y="133" width="0.0104%" height="15" fill="rgb(211,178,42)"/><text x="91.7331%" y="143.50"></text></g><g><title>async-redis`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (11,525 samples, 14.94%)</title><rect x="76.5707%" y="181" width="14.9357%" height="15" fill="rgb(230,69,54)"/><text x="76.8207%" y="191.50">async-redis`&lt;tokio::net..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (11,466 samples, 14.86%)</title><rect x="76.6471%" y="165" width="14.8593%" height="15" fill="rgb(214,135,41)"/><text x="76.8971%" y="175.50">async-redis`tokio::io::..</text></g><g><title>async-redis`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.01%)</title><rect x="91.4934%" y="149" width="0.0130%" height="15" fill="rgb(237,67,25)"/><text x="91.7434%" y="159.50"></text></g><g><title>async-redis`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (11,625 samples, 15.07%)</title><rect x="76.4696%" y="197" width="15.0653%" height="15" fill="rgb(222,189,50)"/><text x="76.7196%" y="207.50">async-redis`tokio::io::..</text></g><g><title>async-redis`tokio::io::driver::registration::Registration::poll_write_io (22 samples, 0.03%)</title><rect x="91.5064%" y="181" width="0.0285%" height="15" fill="rgb(245,148,34)"/><text x="91.7564%" y="191.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (12 samples, 0.02%)</title><rect x="91.5440%" y="197" width="0.0156%" height="15" fill="rgb(222,29,6)"/><text x="91.7940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.01%)</title><rect x="91.5621%" y="197" width="0.0130%" height="15" fill="rgb(221,189,43)"/><text x="91.8121%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (26 samples, 0.03%)</title><rect x="91.6230%" y="181" width="0.0337%" height="15" fill="rgb(207,36,27)"/><text x="91.8730%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.06%)</title><rect x="91.6567%" y="181" width="0.0635%" height="15" fill="rgb(217,90,24)"/><text x="91.9067%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (45 samples, 0.06%)</title><rect x="91.6619%" y="165" width="0.0583%" height="15" fill="rgb(224,66,35)"/><text x="91.9119%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (114 samples, 0.15%)</title><rect x="91.5751%" y="197" width="0.1477%" height="15" fill="rgb(221,13,50)"/><text x="91.8251%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.05%)</title><rect x="91.7228%" y="197" width="0.0467%" height="15" fill="rgb(236,68,49)"/><text x="91.9728%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (48 samples, 0.06%)</title><rect x="91.8796%" y="165" width="0.0622%" height="15" fill="rgb(229,146,28)"/><text x="92.1296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (100 samples, 0.13%)</title><rect x="91.8343%" y="181" width="0.1296%" height="15" fill="rgb(225,31,38)"/><text x="92.0843%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.02%)</title><rect x="91.9418%" y="165" width="0.0220%" height="15" fill="rgb(250,208,3)"/><text x="92.1918%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (152 samples, 0.20%)</title><rect x="91.7695%" y="197" width="0.1970%" height="15" fill="rgb(246,54,23)"/><text x="92.0195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.04%)</title><rect x="91.9729%" y="197" width="0.0402%" height="15" fill="rgb(243,76,11)"/><text x="92.2229%" y="207.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42,008 samples, 54.44%)</title><rect x="37.5810%" y="213" width="54.4399%" height="15" fill="rgb(245,21,50)"/><text x="37.8310%" y="223.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.03%)</title><rect x="92.0209%" y="213" width="0.0298%" height="15" fill="rgb(228,9,43)"/><text x="92.2709%" y="223.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::lock (13 samples, 0.02%)</title><rect x="92.2412%" y="165" width="0.0168%" height="15" fill="rgb(208,100,47)"/><text x="92.4912%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_notified (14 samples, 0.02%)</title><rect x="92.2710%" y="149" width="0.0181%" height="15" fill="rgb(232,26,8)"/><text x="92.5210%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (10 samples, 0.01%)</title><rect x="92.3539%" y="101" width="0.0130%" height="15" fill="rgb(216,166,38)"/><text x="92.6039%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`kevent (9 samples, 0.01%)</title><rect x="92.3552%" y="85" width="0.0117%" height="15" fill="rgb(251,202,51)"/><text x="92.6052%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (19 samples, 0.02%)</title><rect x="92.3734%" y="85" width="0.0246%" height="15" fill="rgb(254,216,34)"/><text x="92.6234%" y="95.50"></text></g><g><title>async-redis`parking_lot::condvar::Condvar::notify_one_slow (25 samples, 0.03%)</title><rect x="92.3721%" y="101" width="0.0324%" height="15" fill="rgb(251,32,27)"/><text x="92.6221%" y="111.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Shared::schedule_local (53 samples, 0.07%)</title><rect x="92.3371%" y="117" width="0.0687%" height="15" fill="rgb(208,127,28)"/><text x="92.5871%" y="127.50"></text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (76 samples, 0.10%)</title><rect x="92.3138%" y="133" width="0.0985%" height="15" fill="rgb(224,137,22)"/><text x="92.5638%" y="143.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::wake_by_ref (116 samples, 0.15%)</title><rect x="92.2632%" y="165" width="0.1503%" height="15" fill="rgb(254,70,32)"/><text x="92.5132%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (96 samples, 0.12%)</title><rect x="92.2892%" y="149" width="0.1244%" height="15" fill="rgb(229,75,37)"/><text x="92.5392%" y="159.50"></text></g><g><title>async-redis`&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (150 samples, 0.19%)</title><rect x="92.2218%" y="181" width="0.1944%" height="15" fill="rgb(252,64,23)"/><text x="92.4718%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (24 samples, 0.03%)</title><rect x="92.4162%" y="181" width="0.0311%" height="15" fill="rgb(232,162,48)"/><text x="92.6662%" y="191.50"></text></g><g><title>async-redis`&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.40%)</title><rect x="92.0507%" y="213" width="0.3979%" height="15" fill="rgb(246,160,12)"/><text x="92.3007%" y="223.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::send (265 samples, 0.34%)</title><rect x="92.1051%" y="197" width="0.3434%" height="15" fill="rgb(247,166,0)"/><text x="92.3551%" y="207.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (68 samples, 0.09%)</title><rect x="92.4486%" y="213" width="0.0881%" height="15" fill="rgb(249,219,21)"/><text x="92.6986%" y="223.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.02%)</title><rect x="93.2274%" y="149" width="0.0181%" height="15" fill="rgb(205,209,3)"/><text x="93.4774%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (18 samples, 0.02%)</title><rect x="93.2494%" y="149" width="0.0233%" height="15" fill="rgb(243,44,1)"/><text x="93.4994%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (17 samples, 0.02%)</title><rect x="93.2507%" y="133" width="0.0220%" height="15" fill="rgb(206,159,16)"/><text x="93.5007%" y="143.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (14 samples, 0.02%)</title><rect x="93.2728%" y="149" width="0.0181%" height="15" fill="rgb(244,77,30)"/><text x="93.5228%" y="159.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (411 samples, 0.53%)</title><rect x="92.7596%" y="165" width="0.5326%" height="15" fill="rgb(218,69,12)"/><text x="93.0096%" y="175.50"></text></g><g><title>async-redis`&lt;tokio::sync::broadcast::Recv&lt;R,T&gt; as core::future::future::Future&gt;::poll (427 samples, 0.55%)</title><rect x="92.7453%" y="181" width="0.5534%" height="15" fill="rgb(212,87,7)"/><text x="92.9953%" y="191.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (475 samples, 0.62%)</title><rect x="92.6961%" y="197" width="0.6156%" height="15" fill="rgb(245,114,25)"/><text x="92.9461%" y="207.50"></text></g><g><title>async-redis`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (10 samples, 0.01%)</title><rect x="93.2987%" y="181" width="0.0130%" height="15" fill="rgb(210,61,42)"/><text x="93.5487%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (17 samples, 0.02%)</title><rect x="93.5929%" y="165" width="0.0220%" height="15" fill="rgb(211,52,33)"/><text x="93.8429%" y="175.50"></text></g><g><title>async-redis`flume::async::AsyncSignal::new (20 samples, 0.03%)</title><rect x="93.6214%" y="165" width="0.0259%" height="15" fill="rgb(234,58,33)"/><text x="93.8714%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (11 samples, 0.01%)</title><rect x="93.6330%" y="149" width="0.0143%" height="15" fill="rgb(220,115,36)"/><text x="93.8830%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (10 samples, 0.01%)</title><rect x="93.6343%" y="133" width="0.0130%" height="15" fill="rgb(243,153,54)"/><text x="93.8843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (212 samples, 0.27%)</title><rect x="93.6551%" y="165" width="0.2747%" height="15" fill="rgb(251,47,18)"/><text x="93.9051%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (181 samples, 0.23%)</title><rect x="93.6952%" y="149" width="0.2346%" height="15" fill="rgb(242,102,42)"/><text x="93.9452%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (175 samples, 0.23%)</title><rect x="93.7030%" y="133" width="0.2268%" height="15" fill="rgb(234,31,38)"/><text x="93.9530%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (70 samples, 0.09%)</title><rect x="93.8391%" y="117" width="0.0907%" height="15" fill="rgb(221,117,51)"/><text x="94.0891%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.02%)</title><rect x="93.9065%" y="101" width="0.0233%" height="15" fill="rgb(212,20,18)"/><text x="94.1565%" y="111.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (378 samples, 0.49%)</title><rect x="93.4451%" y="181" width="0.4899%" height="15" fill="rgb(245,133,36)"/><text x="93.6951%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (25 samples, 0.03%)</title><rect x="94.0646%" y="165" width="0.0324%" height="15" fill="rgb(212,6,19)"/><text x="94.3146%" y="175.50"></text></g><g><title>async-redis`flume::Chan&lt;T&gt;::pull_pending (9 samples, 0.01%)</title><rect x="94.0970%" y="165" width="0.0117%" height="15" fill="rgb(218,1,36)"/><text x="94.3470%" y="175.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv_sync (171 samples, 0.22%)</title><rect x="93.9350%" y="181" width="0.2216%" height="15" fill="rgb(246,84,54)"/><text x="94.1850%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.05%)</title><rect x="94.1112%" y="165" width="0.0454%" height="15" fill="rgb(242,110,6)"/><text x="94.3612%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (664 samples, 0.86%)</title><rect x="93.3116%" y="197" width="0.8605%" height="15" fill="rgb(214,47,5)"/><text x="93.5616%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::clone_waker (19 samples, 0.02%)</title><rect x="94.2992%" y="165" width="0.0246%" height="15" fill="rgb(218,159,25)"/><text x="94.5492%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_inc (17 samples, 0.02%)</title><rect x="94.3017%" y="149" width="0.0220%" height="15" fill="rgb(215,211,28)"/><text x="94.5517%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (8 samples, 0.01%)</title><rect x="94.3238%" y="165" width="0.0104%" height="15" fill="rgb(238,59,32)"/><text x="94.5738%" y="175.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (38 samples, 0.05%)</title><rect x="94.3523%" y="149" width="0.0492%" height="15" fill="rgb(226,82,3)"/><text x="94.6023%" y="159.50"></text></g><g><title>async-redis`std::time::Instant::checked_duration_since (45 samples, 0.06%)</title><rect x="94.4041%" y="149" width="0.0583%" height="15" fill="rgb(240,164,32)"/><text x="94.6541%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (8 samples, 0.01%)</title><rect x="94.5739%" y="117" width="0.0104%" height="15" fill="rgb(232,46,7)"/><text x="94.8239%" y="127.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (22 samples, 0.03%)</title><rect x="94.5570%" y="133" width="0.0285%" height="15" fill="rgb(229,129,53)"/><text x="94.8070%" y="143.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (36 samples, 0.05%)</title><rect x="94.5856%" y="133" width="0.0467%" height="15" fill="rgb(234,188,29)"/><text x="94.8356%" y="143.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::reregister (133 samples, 0.17%)</title><rect x="94.4624%" y="149" width="0.1724%" height="15" fill="rgb(246,141,4)"/><text x="94.7124%" y="159.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (333 samples, 0.43%)</title><rect x="94.2214%" y="181" width="0.4315%" height="15" fill="rgb(229,23,39)"/><text x="94.4714%" y="191.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::reset (241 samples, 0.31%)</title><rect x="94.3406%" y="165" width="0.3123%" height="15" fill="rgb(206,12,3)"/><text x="94.5906%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::insert (14 samples, 0.02%)</title><rect x="94.6348%" y="149" width="0.0181%" height="15" fill="rgb(252,226,20)"/><text x="94.8848%" y="159.50"></text></g><g><title>async-redis`&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (379 samples, 0.49%)</title><rect x="94.1786%" y="197" width="0.4912%" height="15" fill="rgb(216,123,35)"/><text x="94.4286%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="94.6568%" y="181" width="0.0130%" height="15" fill="rgb(212,68,40)"/><text x="94.9068%" y="191.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::recv (19 samples, 0.02%)</title><rect x="94.6698%" y="197" width="0.0246%" height="15" fill="rgb(254,125,32)"/><text x="94.9198%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::entry::TimerEntry::poll_elapsed (18 samples, 0.02%)</title><rect x="94.7061%" y="197" width="0.0233%" height="15" fill="rgb(253,97,22)"/><text x="94.9561%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (25 samples, 0.03%)</title><rect x="94.7294%" y="197" width="0.0324%" height="15" fill="rgb(241,101,14)"/><text x="94.9794%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.01%)</title><rect x="94.7618%" y="197" width="0.0117%" height="15" fill="rgb(238,103,29)"/><text x="95.0118%" y="207.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,728 samples, 2.24%)</title><rect x="92.5367%" y="213" width="2.2394%" height="15" fill="rgb(233,195,47)"/><text x="92.7867%" y="223.50">a..</text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (9 samples, 0.01%)</title><rect x="94.7929%" y="213" width="0.0117%" height="15" fill="rgb(246,218,30)"/><text x="95.0429%" y="223.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::lookup (81 samples, 0.10%)</title><rect x="94.9044%" y="181" width="0.1050%" height="15" fill="rgb(219,145,47)"/><text x="95.1544%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="95.0638%" y="149" width="0.0156%" height="15" fill="rgb(243,12,26)"/><text x="95.3138%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (169 samples, 0.22%)</title><rect x="95.0793%" y="149" width="0.2190%" height="15" fill="rgb(214,87,16)"/><text x="95.3293%" y="159.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (107 samples, 0.14%)</title><rect x="95.1597%" y="133" width="0.1387%" height="15" fill="rgb(208,99,42)"/><text x="95.4097%" y="143.50"></text></g><g><title>async-redis`tracing_subscriber::registry::sharded::Registry::start_close (30 samples, 0.04%)</title><rect x="95.3048%" y="149" width="0.0389%" height="15" fill="rgb(253,99,2)"/><text x="95.5548%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::layer::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (242 samples, 0.31%)</title><rect x="95.0469%" y="165" width="0.3136%" height="15" fill="rgb(220,168,23)"/><text x="95.2969%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="95.3437%" y="149" width="0.0168%" height="15" fill="rgb(242,38,24)"/><text x="95.5937%" y="159.50"></text></g><g><title>async-redis`tracing_core::dispatcher::Entered::current (14 samples, 0.02%)</title><rect x="95.3748%" y="165" width="0.0181%" height="15" fill="rgb(225,182,9)"/><text x="95.6248%" y="175.50"></text></g><g><title>async-redis`tracing_core::dispatcher::get_default (291 samples, 0.38%)</title><rect x="95.0236%" y="181" width="0.3771%" height="15" fill="rgb(243,178,37)"/><text x="95.2736%" y="191.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (459 samples, 0.59%)</title><rect x="94.8227%" y="197" width="0.5948%" height="15" fill="rgb(232,139,19)"/><text x="95.0727%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (485 samples, 0.63%)</title><rect x="94.8046%" y="213" width="0.6285%" height="15" fill="rgb(225,201,24)"/><text x="95.0546%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (8 samples, 0.01%)</title><rect x="95.4331%" y="213" width="0.0104%" height="15" fill="rgb(221,47,46)"/><text x="95.6831%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (9 samples, 0.01%)</title><rect x="95.4435%" y="213" width="0.0117%" height="15" fill="rgb(249,23,13)"/><text x="95.6935%" y="223.50"></text></g><g><title>async-redis`alloc::collections::btree::search::search_tree (256 samples, 0.33%)</title><rect x="95.4746%" y="213" width="0.3318%" height="15" fill="rgb(219,9,5)"/><text x="95.7246%" y="223.50"></text></g><g><title>async-redis`&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (192 samples, 0.25%)</title><rect x="95.8556%" y="197" width="0.2488%" height="15" fill="rgb(254,171,16)"/><text x="96.1056%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (104 samples, 0.13%)</title><rect x="95.9696%" y="181" width="0.1348%" height="15" fill="rgb(230,171,20)"/><text x="96.2196%" y="191.50"></text></g><g><title>async-redis`bytes::bytes::shared_clone (35 samples, 0.05%)</title><rect x="96.1057%" y="197" width="0.0454%" height="15" fill="rgb(210,71,41)"/><text x="96.3557%" y="207.50"></text></g><g><title>async-redis`async_redis::db::DB::get (287 samples, 0.37%)</title><rect x="95.8128%" y="213" width="0.3719%" height="15" fill="rgb(206,173,20)"/><text x="96.0628%" y="223.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (26 samples, 0.03%)</title><rect x="96.1511%" y="197" width="0.0337%" height="15" fill="rgb(233,88,34)"/><text x="96.4011%" y="207.50"></text></g><g><title>async-redis`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="96.1744%" y="181" width="0.0104%" height="15" fill="rgb(223,209,46)"/><text x="96.4244%" y="191.50"></text></g><g><title>async-redis`async_redis::protocol::encode (12 samples, 0.02%)</title><rect x="96.1847%" y="213" width="0.0156%" height="15" fill="rgb(250,43,18)"/><text x="96.4347%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::shared_drop (38 samples, 0.05%)</title><rect x="96.2171%" y="213" width="0.0492%" height="15" fill="rgb(208,13,10)"/><text x="96.4671%" y="223.50"></text></g><g><title>async-redis`bytes::bytes::static_drop (10 samples, 0.01%)</title><rect x="96.2664%" y="213" width="0.0130%" height="15" fill="rgb(212,200,36)"/><text x="96.5164%" y="223.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="96.4776%" y="197" width="0.0130%" height="15" fill="rgb(225,90,30)"/><text x="96.7276%" y="207.50"></text></g><g><title>async-redis`&lt;T as core::any::Any&gt;::type_id (12 samples, 0.02%)</title><rect x="96.4997%" y="181" width="0.0156%" height="15" fill="rgb(236,182,39)"/><text x="96.7497%" y="191.50"></text></g><g><title>async-redis`&lt;spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex&gt;::try_lock (15 samples, 0.02%)</title><rect x="96.6189%" y="165" width="0.0194%" height="15" fill="rgb(212,144,35)"/><text x="96.8689%" y="175.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (17 samples, 0.02%)</title><rect x="96.6396%" y="165" width="0.0220%" height="15" fill="rgb(228,63,44)"/><text x="96.8896%" y="175.50"></text></g><g><title>async-redis`alloc::sync::Arc&lt;T&gt;::drop_slow (40 samples, 0.05%)</title><rect x="96.6617%" y="165" width="0.0518%" height="15" fill="rgb(228,109,6)"/><text x="96.9117%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (11 samples, 0.01%)</title><rect x="96.6992%" y="149" width="0.0143%" height="15" fill="rgb(238,117,24)"/><text x="96.9492%" y="159.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="96.7018%" y="133" width="0.0117%" height="15" fill="rgb(242,26,26)"/><text x="96.9518%" y="143.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (42 samples, 0.05%)</title><rect x="96.7135%" y="165" width="0.0544%" height="15" fill="rgb(221,92,48)"/><text x="96.9635%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (98 samples, 0.13%)</title><rect x="96.7925%" y="149" width="0.1270%" height="15" fill="rgb(209,209,32)"/><text x="97.0425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (96 samples, 0.12%)</title><rect x="96.7951%" y="133" width="0.1244%" height="15" fill="rgb(221,70,22)"/><text x="97.0451%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (119 samples, 0.15%)</title><rect x="96.7705%" y="165" width="0.1542%" height="15" fill="rgb(248,145,5)"/><text x="97.0205%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (11 samples, 0.01%)</title><rect x="97.0738%" y="149" width="0.0143%" height="15" fill="rgb(226,116,26)"/><text x="97.3238%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (66 samples, 0.09%)</title><rect x="97.1774%" y="133" width="0.0855%" height="15" fill="rgb(244,5,17)"/><text x="97.4274%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (140 samples, 0.18%)</title><rect x="97.0880%" y="149" width="0.1814%" height="15" fill="rgb(252,159,33)"/><text x="97.3380%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (268 samples, 0.35%)</title><rect x="96.9247%" y="165" width="0.3473%" height="15" fill="rgb(206,71,0)"/><text x="97.1747%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="97.2720%" y="165" width="0.0104%" height="15" fill="rgb(233,118,54)"/><text x="97.5220%" y="175.50"></text></g><g><title>async-redis`&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (590 samples, 0.76%)</title><rect x="96.5230%" y="181" width="0.7646%" height="15" fill="rgb(234,83,48)"/><text x="96.7730%" y="191.50"></text></g><g><title>async-redis`alloc::collections::vec_deque::VecDeque&lt;T&gt;::retain (16 samples, 0.02%)</title><rect x="97.3083%" y="181" width="0.0207%" height="15" fill="rgb(228,3,54)"/><text x="97.5583%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (655 samples, 0.85%)</title><rect x="96.4958%" y="197" width="0.8488%" height="15" fill="rgb(226,155,13)"/><text x="96.7458%" y="207.50"></text></g><g><title>async-redis`flume::async::_::_&lt;impl core::ops::drop::Drop for flume::async::SendFut&lt;T&gt;&gt;::drop (13 samples, 0.02%)</title><rect x="97.3446%" y="197" width="0.0168%" height="15" fill="rgb(241,28,37)"/><text x="97.5946%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (17 samples, 0.02%)</title><rect x="97.3692%" y="197" width="0.0220%" height="15" fill="rgb(233,93,10)"/><text x="97.6192%" y="207.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (15 samples, 0.02%)</title><rect x="97.3718%" y="181" width="0.0194%" height="15" fill="rgb(225,113,19)"/><text x="97.6218%" y="191.50"></text></g><g><title>async-redis`parking_lot::raw_mutex::RawMutex::lock_slow (19 samples, 0.02%)</title><rect x="97.5299%" y="181" width="0.0246%" height="15" fill="rgb(241,2,18)"/><text x="97.7799%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (10 samples, 0.01%)</title><rect x="97.5416%" y="165" width="0.0130%" height="15" fill="rgb(228,207,21)"/><text x="97.7916%" y="175.50"></text></g><g><title>async-redis`tokio::runtime::task::waker::drop_waker (14 samples, 0.02%)</title><rect x="97.5546%" y="181" width="0.0181%" height="15" fill="rgb(213,211,35)"/><text x="97.8046%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::ref_dec (11 samples, 0.01%)</title><rect x="97.5584%" y="165" width="0.0143%" height="15" fill="rgb(209,83,10)"/><text x="97.8084%" y="175.50"></text></g><g><title>async-redis`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::clear_entry (205 samples, 0.27%)</title><rect x="97.3913%" y="197" width="0.2657%" height="15" fill="rgb(209,164,1)"/><text x="97.6413%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::wheel::Wheel::remove (65 samples, 0.08%)</title><rect x="97.5727%" y="181" width="0.0842%" height="15" fill="rgb(213,184,43)"/><text x="97.8227%" y="191.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (1,087 samples, 1.41%)</title><rect x="96.2794%" y="213" width="1.4087%" height="15" fill="rgb(231,61,34)"/><text x="96.5294%" y="223.50"></text></g><g><title>async-redis`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (19 samples, 0.02%)</title><rect x="97.6634%" y="197" width="0.0246%" height="15" fill="rgb(235,75,3)"/><text x="97.9134%" y="207.50"></text></g><g><title>async-redis`flume::Shared&lt;T&gt;::send (10 samples, 0.01%)</title><rect x="97.6880%" y="213" width="0.0130%" height="15" fill="rgb(220,106,47)"/><text x="97.9380%" y="223.50"></text></g><g><title>async-redis`flume::async::_::_&lt;impl core::ops::drop::Drop for flume::async::SendFut&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="97.7010%" y="213" width="0.0233%" height="15" fill="rgb(210,196,33)"/><text x="97.9510%" y="223.50"></text></g><g><title>async-redis`hashbrown::map::make_hash (14 samples, 0.02%)</title><rect x="97.7334%" y="213" width="0.0181%" height="15" fill="rgb(229,154,42)"/><text x="97.9834%" y="223.50"></text></g><g><title>async-redis`std::time::Instant::now (9 samples, 0.01%)</title><rect x="97.7593%" y="213" width="0.0117%" height="15" fill="rgb(228,114,26)"/><text x="98.0093%" y="223.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (58 samples, 0.08%)</title><rect x="97.8721%" y="197" width="0.0752%" height="15" fill="rgb(208,144,1)"/><text x="98.1221%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.02%)</title><rect x="97.9252%" y="181" width="0.0220%" height="15" fill="rgb(239,112,37)"/><text x="98.1752%" y="191.50"></text></g><g><title>async-redis`tokio::runtime::context::CONTEXT::__getit (26 samples, 0.03%)</title><rect x="97.9472%" y="197" width="0.0337%" height="15" fill="rgb(210,96,50)"/><text x="98.1972%" y="207.50"></text></g><g><title>async-redis`tokio::time::driver::sleep::sleep_until (166 samples, 0.22%)</title><rect x="97.7852%" y="213" width="0.2151%" height="15" fill="rgb(222,178,2)"/><text x="98.0352%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.02%)</title><rect x="97.9809%" y="197" width="0.0194%" height="15" fill="rgb(226,74,18)"/><text x="98.2309%" y="207.50"></text></g><g><title>async-redis`tokio::util::rand::thread_rng_n (18 samples, 0.02%)</title><rect x="98.0055%" y="213" width="0.0233%" height="15" fill="rgb(225,67,54)"/><text x="98.2555%" y="223.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (353 samples, 0.46%)</title><rect x="98.0755%" y="181" width="0.4575%" height="15" fill="rgb(251,92,32)"/><text x="98.3255%" y="191.50"></text></g><g><title>async-redis`sharded_slab::pool::Pool&lt;T,C&gt;::get (292 samples, 0.38%)</title><rect x="98.1546%" y="165" width="0.3784%" height="15" fill="rgb(228,149,22)"/><text x="98.4046%" y="175.50"></text></g><g><title>async-redis`thread_local::thread_id::get (24 samples, 0.03%)</title><rect x="98.8233%" y="149" width="0.0311%" height="15" fill="rgb(243,54,13)"/><text x="99.0733%" y="159.50"></text></g><g><title>async-redis`thread_local::ThreadLocal&lt;T&gt;::get_or_default (193 samples, 0.25%)</title><rect x="98.6354%" y="165" width="0.2501%" height="15" fill="rgb(243,180,28)"/><text x="98.8854%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.03%)</title><rect x="98.8544%" y="149" width="0.0311%" height="15" fill="rgb(208,167,24)"/><text x="99.1044%" y="159.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (281 samples, 0.36%)</title><rect x="98.5330%" y="181" width="0.3642%" height="15" fill="rgb(245,73,45)"/><text x="98.7830%" y="191.50"></text></g><g><title>async-redis`thread_local::thread_id::get (9 samples, 0.01%)</title><rect x="98.8855%" y="165" width="0.0117%" height="15" fill="rgb(237,203,48)"/><text x="99.1355%" y="175.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (656 samples, 0.85%)</title><rect x="98.0665%" y="197" width="0.8501%" height="15" fill="rgb(211,197,16)"/><text x="98.3165%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (14 samples, 0.02%)</title><rect x="98.9166%" y="197" width="0.0181%" height="15" fill="rgb(243,99,51)"/><text x="99.1666%" y="207.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (9 samples, 0.01%)</title><rect x="98.9399%" y="197" width="0.0117%" height="15" fill="rgb(215,123,29)"/><text x="99.1899%" y="207.50"></text></g><g><title>async-redis`tracing::span::Span::enter (716 samples, 0.93%)</title><rect x="98.0289%" y="213" width="0.9279%" height="15" fill="rgb(239,186,37)"/><text x="98.2789%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (50 samples, 0.06%)</title><rect x="98.9632%" y="213" width="0.0648%" height="15" fill="rgb(252,136,39)"/><text x="99.2132%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="99.0319%" y="213" width="0.0207%" height="15" fill="rgb(223,213,32)"/><text x="99.2819%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.02%)</title><rect x="99.0656%" y="213" width="0.0156%" height="15" fill="rgb(233,115,5)"/><text x="99.3156%" y="223.50"></text></g><g><title>async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (48,574 samples, 62.95%)</title><rect x="36.1658%" y="229" width="62.9490%" height="15" fill="rgb(207,226,44)"/><text x="36.4158%" y="239.50">async-redis`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.03%)</title><rect x="99.0812%" y="213" width="0.0337%" height="15" fill="rgb(208,126,0)"/><text x="99.3312%" y="223.50"></text></g><g><title>async-redis`&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.01%)</title><rect x="99.1149%" y="229" width="0.0104%" height="15" fill="rgb(244,66,21)"/><text x="99.3649%" y="239.50"></text></g><g><title>async-redis`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (10 samples, 0.01%)</title><rect x="99.1252%" y="229" width="0.0130%" height="15" fill="rgb(222,97,12)"/><text x="99.3752%" y="239.50"></text></g><g><title>async-redis`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.01%)</title><rect x="99.1382%" y="229" width="0.0104%" height="15" fill="rgb(219,213,19)"/><text x="99.3882%" y="239.50"></text></g><g><title>async-redis`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (15 samples, 0.02%)</title><rect x="99.1486%" y="229" width="0.0194%" height="15" fill="rgb(252,169,30)"/><text x="99.3986%" y="239.50"></text></g><g><title>async-redis`core::ptr::drop_in_place (27 samples, 0.03%)</title><rect x="99.1823%" y="229" width="0.0350%" height="15" fill="rgb(206,32,51)"/><text x="99.4323%" y="239.50"></text></g><g><title>async-redis`tokio::time::instant::Instant::now (9 samples, 0.01%)</title><rect x="99.2224%" y="229" width="0.0117%" height="15" fill="rgb(250,172,42)"/><text x="99.4724%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.01%)</title><rect x="99.2432%" y="229" width="0.0130%" height="15" fill="rgb(209,34,43)"/><text x="99.4932%" y="239.50"></text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (48,808 samples, 63.25%)</title><rect x="36.0077%" y="245" width="63.2523%" height="15" fill="rgb(223,11,35)"/><text x="36.2577%" y="255.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::state::Snapshot::is_cancelled (13 samples, 0.02%)</title><rect x="99.2600%" y="245" width="0.0168%" height="15" fill="rgb(251,219,26)"/><text x="99.5100%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_idle (46 samples, 0.06%)</title><rect x="99.2808%" y="245" width="0.0596%" height="15" fill="rgb(231,119,3)"/><text x="99.5308%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (60 samples, 0.08%)</title><rect x="99.3404%" y="245" width="0.0778%" height="15" fill="rgb(216,97,11)"/><text x="99.5904%" y="255.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (49,078 samples, 63.60%)</title><rect x="35.8185%" y="261" width="63.6022%" height="15" fill="rgb(223,59,9)"/><text x="36.0685%" y="271.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::task::state::State::transition_to_running (14 samples, 0.02%)</title><rect x="99.4337%" y="261" width="0.0181%" height="15" fill="rgb(233,93,31)"/><text x="99.6837%" y="271.50"></text></g><g><title>async-redis`std::thread::local::LocalKey&lt;T&gt;::with (49,319 samples, 63.91%)</title><rect x="35.5567%" y="277" width="63.9145%" height="15" fill="rgb(239,81,33)"/><text x="35.8067%" y="287.50">async-redis`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.02%)</title><rect x="99.4518%" y="261" width="0.0194%" height="15" fill="rgb(213,120,34)"/><text x="99.7018%" y="271.50"></text></g><g><title>async-redis`tokio::coop::CURRENT::__getit (21 samples, 0.03%)</title><rect x="99.4738%" y="277" width="0.0272%" height="15" fill="rgb(243,49,53)"/><text x="99.7238%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (31 samples, 0.04%)</title><rect x="99.5011%" y="277" width="0.0402%" height="15" fill="rgb(247,216,33)"/><text x="99.7511%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::task::raw::poll (38 samples, 0.05%)</title><rect x="99.5412%" y="277" width="0.0492%" height="15" fill="rgb(226,26,14)"/><text x="99.7912%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (13 samples, 0.02%)</title><rect x="99.6021%" y="277" width="0.0168%" height="15" fill="rgb(215,49,53)"/><text x="99.8521%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run_task (52,384 samples, 67.89%)</title><rect x="31.7687%" y="293" width="67.8866%" height="15" fill="rgb(245,162,40)"/><text x="32.0187%" y="303.50">async-redis`tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (28 samples, 0.04%)</title><rect x="99.6190%" y="277" width="0.0363%" height="15" fill="rgb(229,68,17)"/><text x="99.8690%" y="287.50"></text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Context::run (77,107 samples, 99.93%)</title><rect x="0.0544%" y="309" width="99.9261%" height="15" fill="rgb(213,182,10)"/><text x="0.3044%" y="319.50">async-redis`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (251 samples, 0.33%)</title><rect x="99.6553%" y="293" width="0.3253%" height="15" fill="rgb(245,125,30)"/><text x="99.9053%" y="303.50"></text></g><g><title>all (77,164 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(232,202,2)"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (77,150 samples, 99.98%)</title><rect x="0.0181%" y="469" width="99.9819%" height="15" fill="rgb(237,140,51)"/><text x="0.2681%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (77,150 samples, 99.98%)</title><rect x="0.0181%" y="453" width="99.9819%" height="15" fill="rgb(236,157,25)"/><text x="0.2681%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>async-redis`std::sys::unix::thread::Thread::new::thread_start (77,150 samples, 99.98%)</title><rect x="0.0181%" y="437" width="99.9819%" height="15" fill="rgb(219,209,0)"/><text x="0.2681%" y="447.50">async-redis`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}} (77,150 samples, 99.98%)</title><rect x="0.0181%" y="421" width="99.9819%" height="15" fill="rgb(240,116,54)"/><text x="0.2681%" y="431.50">async-redis`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace (77,150 samples, 99.98%)</title><rect x="0.0181%" y="405" width="99.9819%" height="15" fill="rgb(216,10,36)"/><text x="0.2681%" y="415.50">async-redis`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77,150 samples, 99.98%)</title><rect x="0.0181%" y="389" width="99.9819%" height="15" fill="rgb(222,72,44)"/><text x="0.2681%" y="399.50">async-redis`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77,150 samples, 99.98%)</title><rect x="0.0181%" y="373" width="99.9819%" height="15" fill="rgb(232,159,9)"/><text x="0.2681%" y="383.50">async-redis`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (77,150 samples, 99.98%)</title><rect x="0.0181%" y="357" width="99.9819%" height="15" fill="rgb(210,39,32)"/><text x="0.2681%" y="367.50">async-redis`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::run (77,150 samples, 99.98%)</title><rect x="0.0181%" y="341" width="99.9819%" height="15" fill="rgb(216,194,45)"/><text x="0.2681%" y="351.50">async-redis`tokio::runtime::thread_pool::worker::run</text></g><g><title>async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (77,150 samples, 99.98%)</title><rect x="0.0181%" y="325" width="99.9819%" height="15" fill="rgb(218,18,35)"/><text x="0.2681%" y="335.50">async-redis`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>async-redis`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (10 samples, 0.01%)</title><rect x="99.9870%" y="309" width="0.0130%" height="15" fill="rgb(207,83,51)"/><text x="100.2370%" y="319.50"></text></g></svg></svg>